/*
 * The MIT License

This is a fork of jquery.flot.grow by Thodoris Greasidis,
that implements the growing animations using requestAnimationFrame
and introduces varius bug fixes and improvements.

Copyright (c) 2013 by Thodoris Greasidis

Copyright (c) 2010,2011,2012, 2013 by Juergen Marsch

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

(function ($) {
    "use strict";
    var pluginName = "growraf", pluginVersion = "0.4.5";
    var options = {
        series: {
            grow: {
                active: false,
                //stepDelay: 20,
                //steps: 100,
                duration: 1000,
                valueIndex: 1,
                reanimate: true,
                growings: [
                    {
                        valueIndex: 1,
                        stepMode: "linear",
                        stepDirection: "up",
                        reanimate: "continue"
                    }
                ]
            }
        }
    };

    /** @enum {number} */
    var GrowPhase = {
        NOT_PLOTTED_YET: 0,
        PLOTTED_SOME_FRAMES: 1,
        PLOTTED_LAST_FRAME: 2
    };

    var growFunctions = {
        none: function (dataj, timePassed, growing, growPhase) {
            if (growPhase === GrowPhase.NOT_PLOTTED_YET) {
                for (var i = 0, djdatalen = dataj.data.length; i < djdatalen; i++) {
                    dataj.data[i][growing.valueIndex] = dataj.dataOrg[i][growing.valueIndex];
                }
            }
        },
        linear: function (dataj, timePassed, growing, growPhase) {
            var percentage = Math.min(timePassed / dataj.grow.duration, 1);

            for (var i = 0, djdatalen = dataj.data.length; i < djdatalen; i++) {
                var originalValue = dataj.dataOrg[i][growing.valueIndex];

                if (originalValue !== null) {
                    if (growing.stepDirection === 'up') {
                        dataj.data[i][growing.valueIndex] = originalValue * percentage;
                    }
                    else if (growing.stepDirection === 'down') {
                        dataj.data[i][growing.valueIndex] = originalValue + (dataj.yaxis.max - originalValue) * (1 - percentage);
                    }
                } else {
                    dataj.data[i][growing.valueIndex] = null;
                }
            }
        },
        maximum: function (dataj, timePassed, growing, growPhase) {
            var percentage = Math.min(timePassed / dataj.grow.duration, 1);

            var upMax   = dataj.yaxis.max * percentage,
                upMin   = dataj.yaxis.min * percentage,
                downMax = dataj.yaxis.max * (1 - percentage),
                downMin = dataj.yaxis.min * (1 - percentage);
            for (var i = 0, djdatalen = dataj.data.length; i < djdatalen; i++) {
                var originalValue = dataj.dataOrg[i][growing.valueIndex];

                if (originalValue !== null) {
                    if (growing.stepDirection === 'up') {
                        if (originalValue >= 0) {
                            dataj.data[i][growing.valueIndex] = Math.min(originalValue, upMax);
                        } else {
                            dataj.data[i][growing.valueIndex] = Math.max(originalValue, upMin);
                        }
                    }
                    else if (growing.stepDirection === 'down') {
                        if (originalValue >= 0) {
                            dataj.data[i][growing.valueIndex] = Math.max(originalValue, downMax);
                        } else {
                            dataj.data[i][growing.valueIndex] = Math.min(originalValue, downMin);
                        }
                    }
                } else {
                    dataj.data[i][growing.valueIndex] = null;
                }
            }
        },
        delay: function (dataj, timePassed, growing, growPhase) {
            if (timePassed >= dataj.grow.duration) {
                for (var i = 0, djdatalen = dataj.data.length; i < djdatalen; i++) {
                    dataj.data[i][growing.valueIndex] = dataj.dataOrg[i][growing.valueIndex];
                }
            }
        },
        reanimate: function (dataj, timePassed, growing, growPhase) {
            var percentage = Math.min(timePassed / dataj.grow.duration, 1);

            for (var i = 0, djdatalen = dataj.data.length; i < djdatalen; i++) {
                var targetValue = dataj.dataOrg[i][growing.valueIndex];

                if (targetValue === null) {
                    dataj.data[i][growing.valueIndex] = null;
                } else if (dataj.dataOld) {
                    var oldData = dataj.dataOld[i][growing.valueIndex];
                    dataj.data[i][growing.valueIndex] = oldData + (targetValue - oldData) * percentage;
                }
            }
        }
    };

    var requestAnimationFrame;
    var cancelAnimationFrame;
    polyfillLocalRequestAnimationFrame();

    function init(plot) {
        // State variables
        var processSeriesDone = false;
        var initGrowingLoop = true;
        var startTime = 0, timePassed = 0, growPhase = GrowPhase.NOT_PLOTTED_YET;
        var dataOld = [];

        var growfunc;
        var plt = plot;
        var data = null;
        var opt = null;
        plot.hooks.drawSeries.push(processSeries);
        plot.hooks.draw.push(drawDone);
        plot.hooks.bindEvents.push(processbindEvents);
        plot.hooks.shutdown.push(shutdown);


        function processSeries(plot, canvascontext, series) {
            opt = plot.getOptions();
            var valueIndex = opt.series.grow.valueIndex;
            if (opt.series.grow.active === true) {
                var reanimate = false;
                var j = 0;
                
                if (opt.series.grow.reanimate && growPhase === GrowPhase.PLOTTED_LAST_FRAME) {
                    // reset animation state
                    processSeriesDone = false;
                    growPhase = GrowPhase.NOT_PLOTTED_YET;
                    startTime = 0;

                    // restore old data from the tempory variable to the actual plot data
                    data = plot.getData();
                    var minLen = Math.min(data.length, dataOld.length);
                    for (j = 0; j < minLen; j++) {
                        data[j].dataOld = dataOld[j];
                    }

                    reanimate = true;
                    initGrowingLoop = true;
                }

                if (!processSeriesDone) {
                    // do not refetch the data in case of a reanimate,
                    // so that a single setData is called
                    if (!reanimate) {
                        data = plot.getData();
                    }

                    growPhase = GrowPhase.NOT_PLOTTED_YET;
                    startTime = +new Date() | 0;
                    dataOld = [];
                    for (j = 0; j < data.length; j++) {
                        var dataj = data[j];
                        // deep cloning the original data
                        dataj.dataOrg = $.extend(true, [], dataj.data);
                        // keep the data in a temporary array, in case a reanimation is requested
                        dataOld.push(dataj.dataOrg);

                        if (!reanimate) {
                            // set zero or null initial data values.
                            for (var i = 0; i < dataj.data.length; i++) {
                                dataj.data[i][valueIndex] = dataj.dataOrg[i][valueIndex] === null ? null : 0;
                            }
                        }
                    }
                    plot.setData(data);
                    processSeriesDone = true;
                }
            }
        }

        function drawDone(plot, canvascontext) {
            if (initGrowingLoop === true) {
                initiateGrowingLoop(plot);
            }
        }

        function initiateGrowingLoop(plot) {
            opt = plot.getOptions();
            if (opt.series.grow.active === true) {
                calculateMaxDuration(plot.getData(), opt);

                startTime = +new Date() | 0;
                growfunc = requestAnimationFrame(growingLoop);
            }
            initGrowingLoop = false;
        }

        function calculateMaxDuration(data, opt) {
            var maxDuration = opt.series.grow.duration;
            for (var j = 0, datalen = data.length; j < datalen; j++) {
                var datajDuration = data[j].grow.duration;
                if (maxDuration < datajDuration) {
                    maxDuration = datajDuration;
                }
            }
            opt.series.grow.duration = maxDuration;
        }

        function processbindEvents(plot, eventHolder) {
            if (isPluginRegistered('resize')) {
                plot.getPlaceholder().resize(onResize);
            }
        }

        function growingLoop() {
            timePassed = (+new Date()) - startTime | 0;
            for (var j = 0, datalen = data.length; j < datalen; j++) {
                var dataj = data[j];
                var isReAnimation = dataj.dataOld && dataj.dataOld.length > 0;

                for (var g = 0, glen = dataj.grow.growings.length; g < glen; g++) {
                    var growing = dataj.grow.growings[g];
                    var func;

                    if (isReAnimation && growing.reanimate !== 'reinit') {
                        if (typeof growing.reanimate === 'function') {
                            func = growing.reanimate;
                        } if (growing.reanimate === 'continue') {
                            func = growFunctions.reanimate;
                        } else {// if (growing.reanimate === 'none')
                            func = growFunctions.none;
                        }
                    } else if (typeof growing.stepMode === 'function') {
                        func = growing.stepMode;
                    } else {
                        // if stepMode does not exist, use 'none'
                        func = growFunctions[growing.stepMode] || growFunctions.none;
                    }
                    func(dataj, timePassed, growing, growPhase);
                }
            }

            plt.setData(data);
            plt.draw();

            if (growPhase === GrowPhase.NOT_PLOTTED_YET) {
                growPhase = GrowPhase.PLOTTED_SOME_FRAMES;
            }

            if (timePassed < opt.series.grow.duration) {
                growfunc = requestAnimationFrame(growingLoop);
            } else {
                growPhase = GrowPhase.PLOTTED_LAST_FRAME;
                growfunc = null;
                plt.getPlaceholder().trigger('growFinished');
            }
        }

        function onResize() {
            if (growfunc) {
                for (var j = 0; j < data.length; j++) {
                    var dataj = data[j];
                    // deep cloning the original data
                    dataj.data = $.extend(true, [], dataj.dataOrg);
                }
                plot.setData(data);
                plot.setupGrid();
            }
        }

        function shutdown(plot, eventHolder) {
            plot.getPlaceholder().unbind('resize', onResize);
            if (growfunc) {
                cancelAnimationFrame(growfunc);
                growfunc = null;
            }
        }
    }

    function isPluginRegistered(pluginName) {
        var plugins = $.plot.plugins;

        for (var i = 0, len = plugins.length; i < len; i++) {
            var plug = plugins[i];

            if (plug.name === pluginName) {
                return true;
            }
        }
        return false;
    }

    // Derived from:
    // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
    // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
    // requestAnimationFrame polyfill by Erik Möller
    // fixes from Paul Irish and Tino Zijdel
    function polyfillLocalRequestAnimationFrame() {
        var rAF = window.requestAnimationFrame;
        var cAF = window.cancelAnimationFrame;

        var lastTime = +new Date();
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for(var x = 0; x < vendors.length && !rAF; ++x) {
            rAF = window[vendors[x]+'RequestAnimationFrame'];

            cAF = window[vendors[x]+'CancelAnimationFrame'] ||
                  window[vendors[x]+'CancelRequestAnimationFrame'];
        }
        if (!rAF) {
            rAF = function(callback, element) {
                var currTime = +new Date();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = window.setTimeout(function() {
                    callback(currTime + timeToCall);
                }, timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };
        }
        if (!cAF) {
            cAF = function(id) {
                clearTimeout(id);
            };
        }
        requestAnimationFrame = rAF;
        cancelAnimationFrame = cAF;
    }

    $.plot.plugins.push({
        init: init,
        options: options,
        name: pluginName,
        version: pluginVersion
    });
})(jQuery);

/* =========================================================
 * bootstrap-datepicker.js
 * Repo: https://github.com/eternicode/bootstrap-datepicker/
 * Demo: http://eternicode.github.io/bootstrap-datepicker/
 * Docs: http://bootstrap-datepicker.readthedocs.org/
 * Forked from http://www.eyecon.ro/bootstrap-datepicker
 * =========================================================
 * Started by Stefan Petre; improvements by Andrew Rowls + contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

(function($, undefined){

	var $window = $(window);

	function UTCDate(){
		return new Date(Date.UTC.apply(Date, arguments));
	}
	function UTCToday(){
		var today = new Date();
		return UTCDate(today.getFullYear(), today.getMonth(), today.getDate());
	}
	function alias(method){
		return function(){
			return this[method].apply(this, arguments);
		};
	}

	var DateArray = (function(){
		var extras = {
			get: function(i){
				return this.slice(i)[0];
			},
			contains: function(d){
				// Array.indexOf is not cross-browser;
				// $.inArray doesn't work with Dates
				var val = d && d.valueOf();
				for (var i=0, l=this.length; i < l; i++)
					if (this[i].valueOf() === val)
						return i;
				return -1;
			},
			remove: function(i){
				this.splice(i,1);
			},
			replace: function(new_array){
				if (!new_array)
					return;
				if (!$.isArray(new_array))
					new_array = [new_array];
				this.clear();
				this.push.apply(this, new_array);
			},
			clear: function(){
				this.splice(0);
			},
			copy: function(){
				var a = new DateArray();
				a.replace(this);
				return a;
			}
		};

		return function(){
			var a = [];
			a.push.apply(a, arguments);
			$.extend(a, extras);
			return a;
		};
	})();


	// Picker object

	var Datepicker = function(element, options){
		this.dates = new DateArray();
		this.viewDate = UTCToday();
		this.focusDate = null;

		this._process_options(options);

		this.element = $(element);
		this.isInline = false;
		this.isInput = this.element.is('input');
		this.component = this.element.is('.date') ? this.element.find('.add-on, .input-group-addon, .btn') : false;
		this.hasInput = this.component && this.element.find('input').length;
		if (this.component && this.component.length === 0)
			this.component = false;

		this.picker = $(DPGlobal.template);
		this._buildEvents();
		this._attachEvents();

		if (this.isInline){
			this.picker.addClass('datepicker-inline').appendTo(this.element);
		}
		else {
			this.picker.addClass('datepicker-dropdown dropdown-menu');
		}

		if (this.o.rtl){
			this.picker.addClass('datepicker-rtl');
		}

		this.viewMode = this.o.startView;

		if (this.o.calendarWeeks)
			this.picker.find('tfoot th.today')
						.attr('colspan', function(i, val){
							return parseInt(val) + 1;
						});

		this._allow_update = false;

		this.setStartDate(this._o.startDate);
		this.setEndDate(this._o.endDate);
		this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);

		this.fillDow();
		this.fillMonths();

		this._allow_update = true;

		this.update();
		this.showMode();

		if (this.isInline){
			this.show();
		}
	};

	Datepicker.prototype = {
		constructor: Datepicker,

		_process_options: function(opts){
			// Store raw options for reference
			this._o = $.extend({}, this._o, opts);
			// Processed options
			var o = this.o = $.extend({}, this._o);

			// Check if "de-DE" style date is available, if not language should
			// fallback to 2 letter code eg "de"
			var lang = o.language;
			if (!dates[lang]){
				lang = lang.split('-')[0];
				if (!dates[lang])
					lang = defaults.language;
			}
			o.language = lang;

			switch (o.startView){
				case 2:
				case 'decade':
					o.startView = 2;
					break;
				case 1:
				case 'year':
					o.startView = 1;
					break;
				default:
					o.startView = 0;
			}

			switch (o.minViewMode){
				case 1:
				case 'months':
					o.minViewMode = 1;
					break;
				case 2:
				case 'years':
					o.minViewMode = 2;
					break;
				default:
					o.minViewMode = 0;
			}

			o.startView = Math.max(o.startView, o.minViewMode);

			// true, false, or Number > 0
			if (o.multidate !== true){
				o.multidate = Number(o.multidate) || false;
				if (o.multidate !== false)
					o.multidate = Math.max(0, o.multidate);
				else
					o.multidate = 1;
			}
			o.multidateSeparator = String(o.multidateSeparator);

			o.weekStart %= 7;
			o.weekEnd = ((o.weekStart + 6) % 7);

			var format = DPGlobal.parseFormat(o.format);
			if (o.startDate !== -Infinity){
				if (!!o.startDate){
					if (o.startDate instanceof Date)
						o.startDate = this._local_to_utc(this._zero_time(o.startDate));
					else
						o.startDate = DPGlobal.parseDate(o.startDate, format, o.language);
				}
				else {
					o.startDate = -Infinity;
				}
			}
			if (o.endDate !== Infinity){
				if (!!o.endDate){
					if (o.endDate instanceof Date)
						o.endDate = this._local_to_utc(this._zero_time(o.endDate));
					else
						o.endDate = DPGlobal.parseDate(o.endDate, format, o.language);
				}
				else {
					o.endDate = Infinity;
				}
			}

			o.daysOfWeekDisabled = o.daysOfWeekDisabled||[];
			if (!$.isArray(o.daysOfWeekDisabled))
				o.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\s]*/);
			o.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function(d){
				return parseInt(d, 10);
			});

			var plc = String(o.orientation).toLowerCase().split(/\s+/g),
				_plc = o.orientation.toLowerCase();
			plc = $.grep(plc, function(word){
				return (/^auto|left|right|top|bottom$/).test(word);
			});
			o.orientation = {x: 'auto', y: 'auto'};
			if (!_plc || _plc === 'auto')
				; // no action
			else if (plc.length === 1){
				switch (plc[0]){
					case 'top':
					case 'bottom':
						o.orientation.y = plc[0];
						break;
					case 'left':
					case 'right':
						o.orientation.x = plc[0];
						break;
				}
			}
			else {
				_plc = $.grep(plc, function(word){
					return (/^left|right$/).test(word);
				});
				o.orientation.x = _plc[0] || 'auto';

				_plc = $.grep(plc, function(word){
					return (/^top|bottom$/).test(word);
				});
				o.orientation.y = _plc[0] || 'auto';
			}
		},
		_events: [],
		_secondaryEvents: [],
		_applyEvents: function(evs){
			for (var i=0, el, ch, ev; i < evs.length; i++){
				el = evs[i][0];
				if (evs[i].length === 2){
					ch = undefined;
					ev = evs[i][1];
				}
				else if (evs[i].length === 3){
					ch = evs[i][1];
					ev = evs[i][2];
				}
				el.on(ev, ch);
			}
		},
		_unapplyEvents: function(evs){
			for (var i=0, el, ev, ch; i < evs.length; i++){
				el = evs[i][0];
				if (evs[i].length === 2){
					ch = undefined;
					ev = evs[i][1];
				}
				else if (evs[i].length === 3){
					ch = evs[i][1];
					ev = evs[i][2];
				}
				el.off(ev, ch);
			}
		},
		_buildEvents: function(){
			if (this.isInput){ // single input
				this._events = [
					[this.element, {
						focus: $.proxy(this.show, this),
						keyup: $.proxy(function(e){
							if ($.inArray(e.keyCode, [27,37,39,38,40,32,13,9]) === -1)
								if (this.element.val().indexOf('_')<0) {  // this working with mask plugin
									this.update();
									function setSelectionRange(input, selectionStart, selectionEnd) {
										if (input.setSelectionRange) {
											input.focus();
											input.setSelectionRange(selectionStart, selectionEnd);
										}
										else if (input.createTextRange) {
											var range = input.createTextRange();
											    range.collapse(true);
											    range.moveEnd('character', selectionEnd);
											    range.moveStart('character', selectionStart);
											    range.select();
										}
									}

									function setCaretToPos (input, pos) {
									  setSelectionRange(input, pos, pos);
									}
									var _this = this,
										pos = _this.element.attr('pos');
									setCaretToPos(_this.element[0], pos);
								}
						}, this),
						keydown: $.proxy(this.keydown, this)
					}]
				];
			}
			else if (this.component && this.hasInput){ // component: input + button
				this._events = [
					// For components that are not readonly, allow keyboard nav
					[this.element.find('input'), {
						focus: $.proxy(this.show, this),
						keyup: $.proxy(function(e){
							if ($.inArray(e.keyCode, [27,37,39,38,40,32,13,9]) === -1)
								this.update();
						}, this),
						keydown: $.proxy(this.keydown, this)
					}],
					[this.component, {
						click: $.proxy(this.show, this)
					}]
				];
			}
			else if (this.element.is('div')){  // inline datepicker
				this.isInline = true;
			}
			else {
				this._events = [
					[this.element, {
						click: $.proxy(this.show, this)
					}]
				];
			}
			this._events.push(
				// Component: listen for blur on element descendants
				[this.element, '*', {
					blur: $.proxy(function(e){
						this._focused_from = e.target;
					}, this)
				}],
				// Input: listen for blur on element
				[this.element, {
					blur: $.proxy(function(e){
						this._focused_from = e.target;
					}, this)
				}]
			);

			this._secondaryEvents = [
				[this.picker, {
					click: $.proxy(this.click, this)
				}],
				[$(window), {
					resize: $.proxy(this.place, this)
				}],
				[$(document), {
					'mousedown touchstart': $.proxy(function(e){
						// Clicked outside the datepicker, hide it
						if (!(
							this.element.is(e.target) ||
							this.element.find(e.target).length ||
							this.picker.is(e.target) ||
							this.picker.find(e.target).length
						)){
							this.hide();
						}
					}, this)
				}]
			];
		},
		_attachEvents: function(){
			this._detachEvents();
			this._applyEvents(this._events);
		},
		_detachEvents: function(){
			this._unapplyEvents(this._events);
		},
		_attachSecondaryEvents: function(){
			this._detachSecondaryEvents();
			this._applyEvents(this._secondaryEvents);
		},
		_detachSecondaryEvents: function(){
			this._unapplyEvents(this._secondaryEvents);
		},
		_trigger: function(event, altdate){
			var date = altdate || this.dates.get(-1),
				local_date = this._utc_to_local(date);

			this.element.trigger({
				type: event,
				date: local_date,
				dates: $.map(this.dates, this._utc_to_local),
				format: $.proxy(function(ix, format){
					if (arguments.length === 0){
						ix = this.dates.length - 1;
						format = this.o.format;
					}
					else if (typeof ix === 'string'){
						format = ix;
						ix = this.dates.length - 1;
					}
					format = format || this.o.format;
					var date = this.dates.get(ix);
					return DPGlobal.formatDate(date, format, this.o.language);
				}, this)
			});
		},

		show: function(){
			if (!this.isInline)
				this.picker.appendTo('body');
			this.picker.show();
			this.place();
			this._attachSecondaryEvents();
			this._trigger('show');
		},

		hide: function(){
			if (this.isInline)
				return;
			if (!this.picker.is(':visible'))
				return;
			this.focusDate = null;
			this.picker.hide().detach();
			this._detachSecondaryEvents();
			this.viewMode = this.o.startView;
			this.showMode();

			if (
				this.o.forceParse &&
				(
					this.isInput && this.element.val() ||
					this.hasInput && this.element.find('input').val()
				)
			)
				this.setValue();
			this._trigger('hide');
		},

		remove: function(){
			this.hide();
			this._detachEvents();
			this._detachSecondaryEvents();
			this.picker.remove();
			delete this.element.data().datepicker;
			if (!this.isInput){
				delete this.element.data().date;
			}
		},

		_utc_to_local: function(utc){
			return utc && new Date(utc.getTime() + (utc.getTimezoneOffset()*60000));
		},
		_local_to_utc: function(local){
			return local && new Date(local.getTime() - (local.getTimezoneOffset()*60000));
		},
		_zero_time: function(local){
			return local && new Date(local.getFullYear(), local.getMonth(), local.getDate());
		},
		_zero_utc_time: function(utc){
			return utc && new Date(Date.UTC(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate()));
		},

		getDates: function(){
			return $.map(this.dates, this._utc_to_local);
		},

		getUTCDates: function(){
			return $.map(this.dates, function(d){
				return new Date(d);
			});
		},

		getDate: function(){
			return this._utc_to_local(this.getUTCDate());
		},

		getUTCDate: function(){
			return new Date(this.dates.get(-1));
		},

		setDates: function(){
			var args = $.isArray(arguments[0]) ? arguments[0] : arguments;
			this.update.apply(this, args);
			this._trigger('changeDate');
			this.setValue();
		},

		setUTCDates: function(){
			var args = $.isArray(arguments[0]) ? arguments[0] : arguments;
			this.update.apply(this, $.map(args, this._utc_to_local));
			this._trigger('changeDate');
			this.setValue();
		},

		setDate: alias('setDates'),
		setUTCDate: alias('setUTCDates'),

		setValue: function(){
			var formatted = this.getFormattedDate();
			if (!this.isInput){
				if (this.component){
					this.element.find('input').val(formatted).change();
				}
			}
			else {
				this.element.val(formatted).change();
			}
		},

		getFormattedDate: function(format){
			if (format === undefined)
				format = this.o.format;

			var lang = this.o.language;
			return $.map(this.dates, function(d){
				return DPGlobal.formatDate(d, format, lang);
			}).join(this.o.multidateSeparator);
		},

		setStartDate: function(startDate){
			this._process_options({startDate: startDate});
			this.update();
			this.updateNavArrows();
		},

		setEndDate: function(endDate){
			this._process_options({endDate: endDate});
			this.update();
			this.updateNavArrows();
		},

		setDaysOfWeekDisabled: function(daysOfWeekDisabled){
			this._process_options({daysOfWeekDisabled: daysOfWeekDisabled});
			this.update();
			this.updateNavArrows();
		},

		place: function(){
			if (this.isInline)
				return;
			var calendarWidth = this.picker.outerWidth(),
				calendarHeight = this.picker.outerHeight(),
				visualPadding = 10,
				windowWidth = $window.width(),
				windowHeight = $window.height(),
				scrollTop = $window.scrollTop();

			var zIndex = parseInt(this.element.parents().filter(function(){
					return $(this).css('z-index') !== 'auto';
				}).first().css('z-index'))+10;
			var offset = this.component ? this.component.parent().offset() : this.element.offset();
			var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);
			var width = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false);
			var left = offset.left,
				top = offset.top;

			this.picker.removeClass(
				'datepicker-orient-top datepicker-orient-bottom '+
				'datepicker-orient-right datepicker-orient-left'
			);

			if (this.o.orientation.x !== 'auto'){
				this.picker.addClass('datepicker-orient-' + this.o.orientation.x);
				if (this.o.orientation.x === 'right')
					left -= calendarWidth - width;
			}
			// auto x orientation is best-placement: if it crosses a window
			// edge, fudge it sideways
			else {
				// Default to left
				this.picker.addClass('datepicker-orient-left');
				if (offset.left < 0)
					left -= offset.left - visualPadding;
				else if (offset.left + calendarWidth > windowWidth)
					left = windowWidth - calendarWidth - visualPadding;
			}

			// auto y orientation is best-situation: top or bottom, no fudging,
			// decision based on which shows more of the calendar
			var yorient = this.o.orientation.y,
				top_overflow, bottom_overflow;
			if (yorient === 'auto'){
				top_overflow = -scrollTop + offset.top - calendarHeight;
				bottom_overflow = scrollTop + windowHeight - (offset.top + height + calendarHeight);
				if (Math.max(top_overflow, bottom_overflow) === bottom_overflow)
					yorient = 'top';
				else
					yorient = 'bottom';
			}
			this.picker.addClass('datepicker-orient-' + yorient);
			if (yorient === 'top')
				top += height;
			else
				top -= calendarHeight + parseInt(this.picker.css('padding-top'));

			this.picker.css({
				top: top,
				left: left,
				zIndex: zIndex
			});
		},

		_allow_update: false,
		update: function(){
			if (!this._allow_update)
				return;

			var oldDates = this.dates.copy(),
				dates = [],
				fromArgs = false;
			if (arguments.length){
				$.each(arguments, $.proxy(function(i, date){
					if (date instanceof Date)
						date = this._local_to_utc(date);
					dates.push(date);
				}, this));
				fromArgs = true;
			}
			else {
				dates = this.isInput
						? this.element.val()
						: this.element.data('date') || this.element.find('input').val();
				if (dates && this.o.multidate)
					dates = dates.split(this.o.multidateSeparator);
				else
					dates = [dates];
				delete this.element.data().date;
			}

			dates = $.map(dates, $.proxy(function(date){
				return DPGlobal.parseDate(date, this.o.format, this.o.language);
			}, this));
			dates = $.grep(dates, $.proxy(function(date){
				return (
					date < this.o.startDate ||
					date > this.o.endDate ||
					!date
				);
			}, this), true);
			this.dates.replace(dates);

			if (this.dates.length)
				this.viewDate = new Date(this.dates.get(-1));
			else if (this.viewDate < this.o.startDate)
				this.viewDate = new Date(this.o.startDate);
			else if (this.viewDate > this.o.endDate)
				this.viewDate = new Date(this.o.endDate);

			if (fromArgs){
				// setting date by clicking
				this.setValue();
			}
			else if (dates.length){
				// setting date by typing
				if (String(oldDates) !== String(this.dates))
					this._trigger('changeDate');
			}
			if (!this.dates.length && oldDates.length)
				this._trigger('clearDate');

			this.fill();
		},

		fillDow: function(){
			var dowCnt = this.o.weekStart,
				html = '<tr>';
			if (this.o.calendarWeeks){
				var cell = '<th class="cw">&nbsp;</th>';
				html += cell;
				this.picker.find('.datepicker-days thead tr:first-child').prepend(cell);
			}
			while (dowCnt < this.o.weekStart + 7){
				html += '<th class="dow">'+dates[this.o.language].daysMin[(dowCnt++)%7]+'</th>';
			}
			html += '</tr>';
			this.picker.find('.datepicker-days thead').append(html);
		},

		fillMonths: function(){
			var html = '',
			i = 0;
			while (i < 12){
				html += '<span class="month">'+dates[this.o.language].monthsShort[i++]+'</span>';
			}
			this.picker.find('.datepicker-months td').html(html);
		},

		setRange: function(range){
			if (!range || !range.length)
				delete this.range;
			else
				this.range = $.map(range, function(d){
					return d.valueOf();
				});
			this.fill();
		},

		getClassNames: function(date){
			var cls = [],
				year = this.viewDate.getUTCFullYear(),
				month = this.viewDate.getUTCMonth(),
				today = new Date();
			if (date.getUTCFullYear() < year || (date.getUTCFullYear() === year && date.getUTCMonth() < month)){
				cls.push('old');
			}
			else if (date.getUTCFullYear() > year || (date.getUTCFullYear() === year && date.getUTCMonth() > month)){
				cls.push('new');
			}
			if (this.focusDate && date.valueOf() === this.focusDate.valueOf())
				cls.push('focused');
			// Compare internal UTC date with local today, not UTC today
			if (this.o.todayHighlight &&
				date.getUTCFullYear() === today.getFullYear() &&
				date.getUTCMonth() === today.getMonth() &&
				date.getUTCDate() === today.getDate()){
				cls.push('today');
			}
			if (this.dates.contains(date) !== -1)
				cls.push('active');
			if (date.valueOf() < this.o.startDate || date.valueOf() > this.o.endDate ||
				$.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1){
				cls.push('disabled');
			}
			if (this.range){
				if (date > this.range[0] && date < this.range[this.range.length-1]){
					cls.push('range');
				}
				if ($.inArray(date.valueOf(), this.range) !== -1){
					cls.push('selected');
				}
			}
			return cls;
		},

		fill: function(){
			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth(),
				startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,
				startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,
				endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,
				endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,
				todaytxt = dates[this.o.language].today || dates['en'].today || '',
				cleartxt = dates[this.o.language].clear || dates['en'].clear || '',
				tooltip;
			this.picker.find('.datepicker-days thead th.datepicker-switch')
						.text(dates[this.o.language].months[month]+' '+year);
			this.picker.find('tfoot th.today')
						.text(todaytxt)
						.toggle(this.o.todayBtn !== false);
			this.picker.find('tfoot th.clear')
						.text(cleartxt)
						.toggle(this.o.clearBtn !== false);
			this.updateNavArrows();
			this.fillMonths();
			var prevMonth = UTCDate(year, month-1, 28),
				day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
			prevMonth.setUTCDate(day);
			prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7)%7);
			var nextMonth = new Date(prevMonth);
			nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
			nextMonth = nextMonth.valueOf();
			var html = [];
			var clsName;
			while (prevMonth.valueOf() < nextMonth){
				if (prevMonth.getUTCDay() === this.o.weekStart){
					html.push('<tr>');
					if (this.o.calendarWeeks){
						// ISO 8601: First week contains first thursday.
						// ISO also states week starts on Monday, but we can be more abstract here.
						var
							// Start of current week: based on weekstart/current date
							ws = new Date(+prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),
							// Thursday of this week
							th = new Date(Number(ws) + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),
							// First Thursday of year, year from thursday
							yth = new Date(Number(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay())%7*864e5),
							// Calendar week: ms between thursdays, div ms per day, div 7 days
							calWeek =  (th - yth) / 864e5 / 7 + 1;
						html.push('<td class="cw">'+ calWeek +'</td>');

					}
				}
				clsName = this.getClassNames(prevMonth);
				clsName.push('day');

				if (this.o.beforeShowDay !== $.noop){
					var before = this.o.beforeShowDay(this._utc_to_local(prevMonth));
					if (before === undefined)
						before = {};
					else if (typeof(before) === 'boolean')
						before = {enabled: before};
					else if (typeof(before) === 'string')
						before = {classes: before};
					if (before.enabled === false)
						clsName.push('disabled');
					if (before.classes)
						clsName = clsName.concat(before.classes.split(/\s+/));
					if (before.tooltip)
						tooltip = before.tooltip;
				}

				clsName = $.unique(clsName);
				html.push('<td class="'+clsName.join(' ')+'"' + (tooltip ? ' title="'+tooltip+'"' : '') + '>'+prevMonth.getUTCDate() + '</td>');
				if (prevMonth.getUTCDay() === this.o.weekEnd){
					html.push('</tr>');
				}
				prevMonth.setUTCDate(prevMonth.getUTCDate()+1);
			}
			this.picker.find('.datepicker-days tbody').empty().append(html.join(''));

			var months = this.picker.find('.datepicker-months')
						.find('th:eq(1)')
							.text(year)
							.end()
						.find('span').removeClass('active');

			$.each(this.dates, function(i, d){
				if (d.getUTCFullYear() === year)
					months.eq(d.getUTCMonth()).addClass('active');
			});

			if (year < startYear || year > endYear){
				months.addClass('disabled');
			}
			if (year === startYear){
				months.slice(0, startMonth).addClass('disabled');
			}
			if (year === endYear){
				months.slice(endMonth+1).addClass('disabled');
			}

			html = '';
			year = parseInt(year/10, 10) * 10;
			var yearCont = this.picker.find('.datepicker-years')
								.find('th:eq(1)')
									.text(year + '-' + (year + 9))
									.end()
								.find('td');
			year -= 1;
			var years = $.map(this.dates, function(d){
					return d.getUTCFullYear();
				}),
				classes;
			for (var i = -1; i < 11; i++){
				classes = ['year'];
				if (i === -1)
					classes.push('old');
				else if (i === 10)
					classes.push('new');
				if ($.inArray(year, years) !== -1)
					classes.push('active');
				if (year < startYear || year > endYear)
					classes.push('disabled');
				html += '<span class="' + classes.join(' ') + '">'+year+'</span>';
				year += 1;
			}
			yearCont.html(html);
		},

		updateNavArrows: function(){
			if (!this._allow_update)
				return;

			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth();
			switch (this.viewMode){
				case 0:
					if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth()){
						this.picker.find('.prev').css({visibility: 'hidden'});
					}
					else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth()){
						this.picker.find('.next').css({visibility: 'hidden'});
					}
					else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
				case 1:
				case 2:
					if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear()){
						this.picker.find('.prev').css({visibility: 'hidden'});
					}
					else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear()){
						this.picker.find('.next').css({visibility: 'hidden'});
					}
					else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
			}
		},

		click: function(e){
			e.preventDefault();
			var target = $(e.target).closest('span, td, th'),
				year, month, day;
			if (target.length === 1){
				switch (target[0].nodeName.toLowerCase()){
					case 'th':
						switch (target[0].className){
							case 'datepicker-switch':
								this.showMode(1);
								break;
							case 'prev':
							case 'next':
								var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className === 'prev' ? -1 : 1);
								switch (this.viewMode){
									case 0:
										this.viewDate = this.moveMonth(this.viewDate, dir);
										this._trigger('changeMonth', this.viewDate);
										break;
									case 1:
									case 2:
										this.viewDate = this.moveYear(this.viewDate, dir);
										if (this.viewMode === 1)
											this._trigger('changeYear', this.viewDate);
										break;
								}
								this.fill();
								break;
							case 'today':
								var date = new Date();
								date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);

								this.showMode(-2);
								var which = this.o.todayBtn === 'linked' ? null : 'view';
								this._setDate(date, which);
								break;
							case 'clear':
								var element;
								if (this.isInput)
									element = this.element;
								else if (this.component)
									element = this.element.find('input');
								if (element)
									element.val("").change();
								this.update();
								this._trigger('changeDate');
								if (this.o.autoclose)
									this.hide();
								break;
						}
						break;
					case 'span':
						if (!target.is('.disabled')){
							this.viewDate.setUTCDate(1);
							if (target.is('.month')){
								day = 1;
								month = target.parent().find('span').index(target);
								year = this.viewDate.getUTCFullYear();
								this.viewDate.setUTCMonth(month);
								this._trigger('changeMonth', this.viewDate);
								if (this.o.minViewMode === 1){
									this._setDate(UTCDate(year, month, day));
								}
							}
							else {
								day = 1;
								month = 0;
								year = parseInt(target.text(), 10)||0;
								this.viewDate.setUTCFullYear(year);
								this._trigger('changeYear', this.viewDate);
								if (this.o.minViewMode === 2){
									this._setDate(UTCDate(year, month, day));
								}
							}
							this.showMode(-1);
							this.fill();
						}
						break;
					case 'td':
						if (target.is('.day') && !target.is('.disabled')){
							day = parseInt(target.text(), 10)||1;
							year = this.viewDate.getUTCFullYear();
							month = this.viewDate.getUTCMonth();
							if (target.is('.old')){
								if (month === 0){
									month = 11;
									year -= 1;
								}
								else {
									month -= 1;
								}
							}
							else if (target.is('.new')){
								if (month === 11){
									month = 0;
									year += 1;
								}
								else {
									month += 1;
								}
							}
							this._setDate(UTCDate(year, month, day));
						}
						break;
				}
			}
			if (this.picker.is(':visible') && this._focused_from){
				$(this._focused_from).focus();
			}
			delete this._focused_from;
		},

		_toggle_multidate: function(date){
			var ix = this.dates.contains(date);
			if (!date){
				this.dates.clear();
			}
			else if (ix !== -1){
				this.dates.remove(ix);
			}
			else {
				this.dates.push(date);
			}
			if (typeof this.o.multidate === 'number')
				while (this.dates.length > this.o.multidate)
					this.dates.remove(0);
		},

		_setDate: function(date, which){
			if (!which || which === 'date')
				this._toggle_multidate(date && new Date(date));
			if (!which || which  === 'view')
				this.viewDate = date && new Date(date);

			this.fill();
			this.setValue();
			this._trigger('changeDate');
			var element;
			if (this.isInput){
				element = this.element;
			}
			else if (this.component){
				element = this.element.find('input');
			}
			if (element){
				element.change();
			}
			if (this.o.autoclose && (!which || which === 'date')){
				this.hide();
			}
		},

		moveMonth: function(date, dir){
			if (!date)
				return undefined;
			if (!dir)
				return date;
			var new_date = new Date(date.valueOf()),
				day = new_date.getUTCDate(),
				month = new_date.getUTCMonth(),
				mag = Math.abs(dir),
				new_month, test;
			dir = dir > 0 ? 1 : -1;
			if (mag === 1){
				test = dir === -1
					// If going back one month, make sure month is not current month
					// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
					? function(){
						return new_date.getUTCMonth() === month;
					}
					// If going forward one month, make sure month is as expected
					// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
					: function(){
						return new_date.getUTCMonth() !== new_month;
					};
				new_month = month + dir;
				new_date.setUTCMonth(new_month);
				// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
				if (new_month < 0 || new_month > 11)
					new_month = (new_month + 12) % 12;
			}
			else {
				// For magnitudes >1, move one month at a time...
				for (var i=0; i < mag; i++)
					// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
					new_date = this.moveMonth(new_date, dir);
				// ...then reset the day, keeping it in the new month
				new_month = new_date.getUTCMonth();
				new_date.setUTCDate(day);
				test = function(){
					return new_month !== new_date.getUTCMonth();
				};
			}
			// Common date-resetting loop -- if date is beyond end of month, make it
			// end of month
			while (test()){
				new_date.setUTCDate(--day);
				new_date.setUTCMonth(new_month);
			}
			return new_date;
		},

		moveYear: function(date, dir){
			return this.moveMonth(date, dir*12);
		},

		dateWithinRange: function(date){
			return date >= this.o.startDate && date <= this.o.endDate;
		},

		keydown: function(e){
			if (this.picker.is(':not(:visible)')){
				if (e.keyCode === 27) // allow escape to hide and re-show picker
					this.show();
				return;
			}
			var dateChanged = false,
				dir, newDate, newViewDate,
				focusDate = this.focusDate || this.viewDate;
			switch (e.keyCode){
				case 27: // escape
					if (this.focusDate){
						this.focusDate = null;
						this.viewDate = this.dates.get(-1) || this.viewDate;
						this.fill();
					}
					else
						this.hide();
					e.preventDefault();
					break;
				/*case 37: // left
				case 39: // right
					if (!this.o.keyboardNavigation)
						break;
					dir = e.keyCode === 37 ? -1 : 1;
					if (e.ctrlKey){
						newDate = this.moveYear(this.dates.get(-1) || UTCToday(), dir);
						newViewDate = this.moveYear(focusDate, dir);
						this._trigger('changeYear', this.viewDate);
					}
					else if (e.shiftKey){
						newDate = this.moveMonth(this.dates.get(-1) || UTCToday(), dir);
						newViewDate = this.moveMonth(focusDate, dir);
						this._trigger('changeMonth', this.viewDate);
					}
					else {
						newDate = new Date(this.dates.get(-1) || UTCToday());
						newDate.setUTCDate(newDate.getUTCDate() + dir);
						newViewDate = new Date(focusDate);
						newViewDate.setUTCDate(focusDate.getUTCDate() + dir);
					}
					if (this.dateWithinRange(newDate)){
						this.focusDate = this.viewDate = newViewDate;
						this.setValue();
						this.fill();
						e.preventDefault();
					}
					break;
				case 38: // up
				case 40: // down
					if (!this.o.keyboardNavigation)
						break;
					dir = e.keyCode === 38 ? -1 : 1;
					if (e.ctrlKey){
						newDate = this.moveYear(this.dates.get(-1) || UTCToday(), dir);
						newViewDate = this.moveYear(focusDate, dir);
						this._trigger('changeYear', this.viewDate);
					}
					else if (e.shiftKey){
						newDate = this.moveMonth(this.dates.get(-1) || UTCToday(), dir);
						newViewDate = this.moveMonth(focusDate, dir);
						this._trigger('changeMonth', this.viewDate);
					}
					else {
						newDate = new Date(this.dates.get(-1) || UTCToday());
						newDate.setUTCDate(newDate.getUTCDate() + dir * 7);
						newViewDate = new Date(focusDate);
						newViewDate.setUTCDate(focusDate.getUTCDate() + dir * 7);
					}
					if (this.dateWithinRange(newDate)){
						this.focusDate = this.viewDate = newViewDate;
						this.setValue();
						this.fill();
						e.preventDefault();
					}
					break;*/
				case 32: // spacebar
					// Spacebar is used in manually typing dates in some formats.
					// As such, its behavior should not be hijacked.
					break;
				case 13: // enter
					focusDate = this.focusDate || this.dates.get(-1) || this.viewDate;
					this._toggle_multidate(focusDate);
					dateChanged = true;
					this.focusDate = null;
					this.viewDate = this.dates.get(-1) || this.viewDate;
					this.setValue();
					this.fill();
					if (this.picker.is(':visible')){
						e.preventDefault();
						if (this.o.autoclose)
							this.hide();
					}
					break;
				case 9: // tab
					this.focusDate = null;
					this.viewDate = this.dates.get(-1) || this.viewDate;
					this.fill();
					this.hide();
					break;
			}
			if (dateChanged){
				if (this.dates.length)
					this._trigger('changeDate');
				else
					this._trigger('clearDate');
				var element;
				if (this.isInput){
					element = this.element;
				}
				else if (this.component){
					element = this.element.find('input');
				}
				if (element){
					element.change();
				}
			}
		},

		showMode: function(dir){
			if (dir){
				this.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + dir));
			}
			this.picker
				.find('>div')
				.hide()
				.filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName)
					.css('display', 'block');
			this.updateNavArrows();
		}
	};

	var DateRangePicker = function(element, options){
		this.element = $(element);
		this.inputs = $.map(options.inputs, function(i){
			return i.jquery ? i[0] : i;
		});
		delete options.inputs;

		$(this.inputs)
			.datepicker(options)
			.bind('changeDate', $.proxy(this.dateUpdated, this));

		this.pickers = $.map(this.inputs, function(i){
			return $(i).data('datepicker');
		});
		this.updateDates();
	};
	DateRangePicker.prototype = {
		updateDates: function(){
			this.dates = $.map(this.pickers, function(i){
				return i.getUTCDate();
			});
			this.updateRanges();
		},
		updateRanges: function(){
			var range = $.map(this.dates, function(d){
				return d.valueOf();
			});
			$.each(this.pickers, function(i, p){
				p.setRange(range);
			});
		},
		dateUpdated: function(e){
			// `this.updating` is a workaround for preventing infinite recursion
			// between `changeDate` triggering and `setUTCDate` calling.  Until
			// there is a better mechanism.
			if (this.updating)
				return;
			this.updating = true;

			var dp = $(e.target).data('datepicker'),
				new_date = dp.getUTCDate(),
				i = $.inArray(e.target, this.inputs),
				l = this.inputs.length;
			if (i === -1)
				return;

			$.each(this.pickers, function(i, p){
				if (!p.getUTCDate())
					p.setUTCDate(new_date);
			});

			if (new_date < this.dates[i]){
				// Date being moved earlier/left
				while (i >= 0 && new_date < this.dates[i]){
					this.pickers[i--].setUTCDate(new_date);
				}
			}
			else if (new_date > this.dates[i]){
				// Date being moved later/right
				while (i < l && new_date > this.dates[i]){
					this.pickers[i++].setUTCDate(new_date);
				}
			}
			this.updateDates();

			delete this.updating;
		},
		remove: function(){
			$.map(this.pickers, function(p){ p.remove(); });
			delete this.element.data().datepicker;
		}
	};

	function opts_from_el(el, prefix){
		// Derive options from element data-attrs
		var data = $(el).data(),
			out = {}, inkey,
			replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])');
		prefix = new RegExp('^' + prefix.toLowerCase());
		function re_lower(_,a){
			return a.toLowerCase();
		}
		for (var key in data)
			if (prefix.test(key)){
				inkey = key.replace(replace, re_lower);
				out[inkey] = data[key];
			}
		return out;
	}

	function opts_from_locale(lang){
		// Derive options from locale plugins
		var out = {};
		// Check if "de-DE" style date is available, if not language should
		// fallback to 2 letter code eg "de"
		if (!dates[lang]){
			lang = lang.split('-')[0];
			if (!dates[lang])
				return;
		}
		var d = dates[lang];
		$.each(locale_opts, function(i,k){
			if (k in d)
				out[k] = d[k];
		});
		return out;
	}

	var old = $.fn.datepicker;
	$.fn.datepicker = function(option){
		var args = Array.apply(null, arguments);
		args.shift();
		var internal_return;
		this.each(function(){
			var $this = $(this),
				data = $this.data('datepicker'),
				options = typeof option === 'object' && option;
			if (!data){
				var elopts = opts_from_el(this, 'date'),
					// Preliminary otions
					xopts = $.extend({}, defaults, elopts, options),
					locopts = opts_from_locale(xopts.language),
					// Options priority: js args, data-attrs, locales, defaults
					opts = $.extend({}, defaults, locopts, elopts, options);
				if ($this.is('.input-daterange') || opts.inputs){
					var ropts = {
						inputs: opts.inputs || $this.find('input').toArray()
					};
					$this.data('datepicker', (data = new DateRangePicker(this, $.extend(opts, ropts))));
				}
				else {
					$this.data('datepicker', (data = new Datepicker(this, opts)));
				}
			}
			if (typeof option === 'string' && typeof data[option] === 'function'){
				internal_return = data[option].apply(data, args);
				if (internal_return !== undefined)
					return false;
			}
		});
		if (internal_return !== undefined)
			return internal_return;
		else
			return this;
	};

	var defaults = $.fn.datepicker.defaults = {
		autoclose: false,
		beforeShowDay: $.noop,
		calendarWeeks: false,
		clearBtn: false,
		daysOfWeekDisabled: [],
		endDate: Infinity,
		forceParse: true,
		format: 'mm/dd/yyyy',
		keyboardNavigation: true,
		language: 'en',
		minViewMode: 0,
		multidate: false,
		multidateSeparator: ',',
		orientation: "auto",
		rtl: false,
		startDate: -Infinity,
		startView: 0,
		todayBtn: false,
		todayHighlight: false,
		weekStart: 0
	};
	var locale_opts = $.fn.datepicker.locale_opts = [
		'format',
		'rtl',
		'weekStart'
	];
	$.fn.datepicker.Constructor = Datepicker;
	var dates = $.fn.datepicker.dates = {
		en: {
			days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
			daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
			daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
			months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
			today: "Today",
			clear: "Clear"
		}
	};

	var DPGlobal = {
		modes: [
			{
				clsName: 'days',
				navFnc: 'Month',
				navStep: 1
			},
			{
				clsName: 'months',
				navFnc: 'FullYear',
				navStep: 1
			},
			{
				clsName: 'years',
				navFnc: 'FullYear',
				navStep: 10
		}],
		isLeapYear: function(year){
			return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
		},
		getDaysInMonth: function(year, month){
			return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
		},
		validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
		nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,
		parseFormat: function(format){
			// IE treats \0 as a string end in inputs (truncating the value),
			// so it's a bad format delimiter, anyway
			var separators = format.replace(this.validParts, '\0').split('\0'),
				parts = format.match(this.validParts);
			if (!separators || !separators.length || !parts || parts.length === 0){
				throw new Error("Invalid date format.");
			}
			return {separators: separators, parts: parts};
		},
		parseDate: function(date, format, language){
			if (!date)
				return undefined;
			if (date instanceof Date)
				return date;
			if (typeof format === 'string')
				format = DPGlobal.parseFormat(format);
			var part_re = /([\-+]\d+)([dmwy])/,
				parts = date.match(/([\-+]\d+)([dmwy])/g),
				part, dir, i;
			if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(date)){
				date = new Date();
				for (i=0; i < parts.length; i++){
					part = part_re.exec(parts[i]);
					dir = parseInt(part[1]);
					switch (part[2]){
						case 'd':
							date.setUTCDate(date.getUTCDate() + dir);
							break;
						case 'm':
							date = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir);
							break;
						case 'w':
							date.setUTCDate(date.getUTCDate() + dir * 7);
							break;
						case 'y':
							date = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir);
							break;
					}
				}
				return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);
			}
			parts = date && date.match(this.nonpunctuation) || [];
			date = new Date();
			var parsed = {},
				setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],
				setters_map = {
					yyyy: function(d,v){
						return d.setUTCFullYear(v);
					},
					yy: function(d,v){
						return d.setUTCFullYear(2000+v);
					},
					m: function(d,v){
						if (isNaN(d))
							return d;
						v -= 1;
						while (v < 0) v += 12;
						v %= 12;
						d.setUTCMonth(v);
						while (d.getUTCMonth() !== v)
							d.setUTCDate(d.getUTCDate()-1);
						return d;
					},
					d: function(d,v){
						return d.setUTCDate(v);
					}
				},
				val, filtered;
			setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
			setters_map['dd'] = setters_map['d'];
			date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
			var fparts = format.parts.slice();
			// Remove noop parts
			if (parts.length !== fparts.length){
				fparts = $(fparts).filter(function(i,p){
					return $.inArray(p, setters_order) !== -1;
				}).toArray();
			}
			// Process remainder
			function match_part(){
				var m = this.slice(0, parts[i].length),
					p = parts[i].slice(0, m.length);
				return m === p;
			}
			if (parts.length === fparts.length){
				var cnt;
				for (i=0, cnt = fparts.length; i < cnt; i++){
					val = parseInt(parts[i], 10);
					part = fparts[i];
					if (isNaN(val)){
						switch (part){
							case 'MM':
								filtered = $(dates[language].months).filter(match_part);
								val = $.inArray(filtered[0], dates[language].months) + 1;
								break;
							case 'M':
								filtered = $(dates[language].monthsShort).filter(match_part);
								val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
								break;
						}
					}
					parsed[part] = val;
				}
				var _date, s;
				for (i=0; i < setters_order.length; i++){
					s = setters_order[i];
					if (s in parsed && !isNaN(parsed[s])){
						_date = new Date(date);
						setters_map[s](_date, parsed[s]);
						if (!isNaN(_date))
							date = _date;
					}
				}
			}
			return date;
		},
		formatDate: function(date, format, language){
			if (!date)
				return '';
			if (typeof format === 'string')
				format = DPGlobal.parseFormat(format);
			var val = {
				d: date.getUTCDate(),
				D: dates[language].daysShort[date.getUTCDay()],
				DD: dates[language].days[date.getUTCDay()],
				m: date.getUTCMonth() + 1,
				M: dates[language].monthsShort[date.getUTCMonth()],
				MM: dates[language].months[date.getUTCMonth()],
				yy: date.getUTCFullYear().toString().substring(2),
				yyyy: date.getUTCFullYear()
			};
			val.dd = (val.d < 10 ? '0' : '') + val.d;
			val.mm = (val.m < 10 ? '0' : '') + val.m;
			date = [];
			var seps = $.extend([], format.separators);
			for (var i=0, cnt = format.parts.length; i <= cnt; i++){
				if (seps.length)
					date.push(seps.shift());
				date.push(val[format.parts[i]]);
			}
			return date.join('');
		},
		headTemplate: '<thead>'+
							'<tr>'+
								'<th class="prev">&laquo;</th>'+
								'<th colspan="5" class="datepicker-switch"></th>'+
								'<th class="next">&raquo;</th>'+
							'</tr>'+
						'</thead>',
		contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
		footTemplate: '<tfoot>'+
							'<tr>'+
								'<th colspan="7" class="today"></th>'+
							'</tr>'+
							'<tr>'+
								'<th colspan="7" class="clear"></th>'+
							'</tr>'+
						'</tfoot>'
	};
	DPGlobal.template = '<div class="datepicker">'+
							'<div class="datepicker-days">'+
								'<table class=" table-condensed">'+
									DPGlobal.headTemplate+
									'<tbody></tbody>'+
									DPGlobal.footTemplate+
								'</table>'+
							'</div>'+
							'<div class="datepicker-months">'+
								'<table class="table-condensed">'+
									DPGlobal.headTemplate+
									DPGlobal.contTemplate+
									DPGlobal.footTemplate+
								'</table>'+
							'</div>'+
							'<div class="datepicker-years">'+
								'<table class="table-condensed">'+
									DPGlobal.headTemplate+
									DPGlobal.contTemplate+
									DPGlobal.footTemplate+
								'</table>'+
							'</div>'+
						'</div>';

	$.fn.datepicker.DPGlobal = DPGlobal;


	/* DATEPICKER NO CONFLICT
	* =================== */

	$.fn.datepicker.noConflict = function(){
		$.fn.datepicker = old;
		return this;
	};


	/* DATEPICKER DATA-API
	* ================== */

	$(document).on(
		'focus.datepicker.data-api click.datepicker.data-api',
		'[data-provide="datepicker"]',
		function(e){
			var $this = $(this);
			if ($this.data('datepicker'))
				return;
			e.preventDefault();
			// component click requires us to explicitly show it
			$this.datepicker('show');
		}
	);
	$(function(){
		$('[data-provide="datepicker-inline"]').datepicker();
	});

}(window.jQuery));

/**
 * Set default settings for bootstrap-datepicker
 */
$(document).ready(function(){
    $.fn.datepicker.dates[Message.locale.language] = {
        days: Message.locale.weekDayNamesSA.wide,
        daysShort: Message.locale.weekDayNamesSA.abbreviated,
        daysMin: Message.locale.weekDayNamesSA.abbreviated,
        months: Message.locale.monthNamesSA.wide,
        monthsShort: Message.locale.monthNamesSA.abbreviated,
		today: Message.locale.dateFormats.today,
		weekStart: 1,
        format: Message.locale.dateFormats.medium,
        
    };
});




/* =========================================================
 * bootstrap-timepicker.js
 * http://www.github.com/jdewit/bootstrap-timepicker
 * =========================================================
 * Copyright 2012
 *
 * Created By:
 * Joris de Wit @joris_dewit
 *
 * Improved By:
 * Keenthemes for Bootstrap 3.0 Support
 *
 * Contributions By:
 * Gilbert @mindeavor
 * Koen Punt info@koenpunt.nl
 * Nek
 * Chris Martin
 * Dominic Barnes contact@dominicbarnes.us
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

!function($) {

    "use strict"; // jshint ;_;

    /* TIMEPICKER PUBLIC CLASS DEFINITION
     * ================================== */
    var Timepicker = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, $.fn.timepicker.defaults, options, this.$element.data());
        this.minuteStep = this.options.minuteStep || this.minuteStep;
        this.secondStep = this.options.secondStep || this.secondStep;
        this.showMeridian = this.options.showMeridian || this.showMeridian;
        this.showSeconds = this.options.showSeconds || this.showSeconds;
        this.showInputs = this.options.showInputs || this.showInputs;
        this.disableFocus = this.options.disableFocus || this.disableFocus;
        this.template = this.options.template || this.template;
        this.modalBackdrop = this.options.modalBackdrop || this.modalBackdrop;
        this.defaultTime = this.options.defaultTime || this.defaultTime;
        this.open = false;
        this.init();
    };

    Timepicker.prototype = {

        constructor: Timepicker

        , init: function () {
            if (this.$element.parent().hasClass('input-group')) {
                this.$element.parent('.input-group').find('.btn').on('click', $.proxy(this.showWidget, this));
                this.$element.on({
                    focus: $.proxy(this.highlightUnit, this),
                    click: $.proxy(this.highlightUnit, this),
                    keypress: $.proxy(this.elementKeypress, this),
                    blur: $.proxy(this.blurElement, this)
                });

            } else {
                if (this.template) {
                    this.$element.on({
                        focus: $.proxy(this.showWidget, this),
                        click: $.proxy(this.showWidget, this),
                        blur: $.proxy(this.blurElement, this)
                    });
                } else {
                    this.$element.on({
                        focus: $.proxy(this.highlightUnit, this),
                        click: $.proxy(this.highlightUnit, this),
                        keypress: $.proxy(this.elementKeypress, this),
                        blur: $.proxy(this.blurElement, this)
                    });
                }
            }


            this.$widget = $(this.getTemplate()).appendTo('body');

            this.$widget.on('click', $.proxy(this.widgetClick, this));

            if (this.showInputs) {
                this.$widget.find('input').on({
                    click: function() { this.select(); },
                    keypress: $.proxy(this.widgetKeypress, this),
                    change: $.proxy(this.updateFromWidgetInputs, this)
                });
            }

            this.setDefaultTime(this.defaultTime);
        }

        , showWidget: function(e) {
            e.stopPropagation();
            e.preventDefault();

            if (this.open) {
                return;
            }

            this.$element.trigger('show');

            if (this.disableFocus) {
                this.$element.blur();
            }

            var pos = $.extend({}, this.$element.offset(), {
                height: this.$element[0].offsetHeight
            });

            this.updateFromElementVal();

            $('html')
                .trigger('click.timepicker.data-api')
                .one('click.timepicker.data-api', $.proxy(this.hideWidget, this));

            if (this.template === 'modal') {
                this.$widget.modal('show').on('hidden', $.proxy(this.hideWidget, this));
            } else {
                this.$widget.css({
                    top: pos.top + pos.height
                    , left: pos.left
                })

                if (!this.open) {
                    this.$widget.addClass('open');
                }
            }

            this.open = true;
            this.$element.trigger('shown');
        }

        , hideWidget: function(e){
            e.stopPropagation();
            e.preventDefault();
            this.$element.trigger('hide');

            if (this.template === 'modal') {
                this.$widget.modal('hide');
            } else {
                this.$widget.removeClass('open');
            }
            this.open = false;
            // this.$element.trigger('hidden');
        }

        , widgetClick: function(e) {
            e.stopPropagation();
            e.preventDefault();

            var action = $(e.target).closest('a').data('action');
            if (action) {
                this[action]();
                this.update();
            }
        }

        , widgetKeypress: function(e) {
            var input = $(e.target).closest('input').attr('name');

            switch (e.keyCode) {
                case 9: //tab
                    if (this.showMeridian) {
                        if (input == 'meridian') {
                            this.hideWidget();
                        }
                    } else {
                        if (this.showSeconds) {
                            if (input == 'second') {
                                this.hideWidget();
                            }
                        } else {
                            if (input == 'minute') {
                                this.hideWidget();
                            }
                        }
                    }
                break;
                case 27: // escape
                    this.hideWidget();
                break;
                case 38: // up arrow
                    switch (input) {
                        case 'hour':
                            this.incrementHour();
                        break;
                        case 'minute':
                            this.incrementMinute();
                        break;
                        case 'second':
                            this.incrementSecond();
                        break;
                        case 'meridian':
                            this.toggleMeridian();
                        break;
                    }
                    this.update();
                break;
                case 40: // down arrow
                    switch (input) {
                        case 'hour':
                            this.decrementHour();
                        break;
                        case 'minute':
                            this.decrementMinute();
                        break;
                        case 'second':
                            this.decrementSecond();
                        break;
                        case 'meridian':
                            this.toggleMeridian();
                        break;
                    }
                    this.update();
                break;
            }
        }

        , elementKeypress: function(e) {
            var input = this.$element.get(0);
            switch (e.keyCode) {
                case 0: //input
                break;
                case 9: //tab
                    this.updateFromElementVal();
                    if (this.showMeridian) {
                        if (this.highlightedUnit != 'meridian') {
                            e.preventDefault();
                            this.highlightNextUnit();
                        }
                    } else {
                        if (this.showSeconds) {
                            if (this.highlightedUnit != 'second') {
                                e.preventDefault();
                                this.highlightNextUnit();
                            }
                        } else {
                            if (this.highlightedUnit != 'minute') {
                                e.preventDefault();
                                this.highlightNextUnit();
                            }
                        }
                    }
                break;
                case 27: // escape
                    this.updateFromElementVal();
                break;
                case 37: // left arrow
                    this.updateFromElementVal();
                    this.highlightPrevUnit();
                break;
                case 38: // up arrow
                    switch (this.highlightedUnit) {
                        case 'hour':
                            this.incrementHour();
                        break;
                        case 'minute':
                            this.incrementMinute();
                        break;
                        case 'second':
                            this.incrementSecond();
                        break;
                        case 'meridian':
                            this.toggleMeridian();
                        break;
                    }
                    this.updateElement();
                break;
                case 39: // right arrow
                    this.updateFromElementVal();
                    this.highlightNextUnit();
                break;
                case 40: // down arrow
                    switch (this.highlightedUnit) {
                        case 'hour':
                            this.decrementHour();
                        break;
                        case 'minute':
                            this.decrementMinute();
                        break;
                        case 'second':
                            this.decrementSecond();
                        break;
                        case 'meridian':
                            this.toggleMeridian();
                        break;
                    }
                    this.updateElement();
                break;
            }

            if (e.keyCode !== 0 && e.keyCode !== 8 && e.keyCode !== 9 && e.keyCode !== 46) {
                e.preventDefault();
            }
        }

        , setValues: function(time) {
            if (this.showMeridian) {
                var arr = time.split(' ');
                var timeArray = arr[0].split(':');
                this.meridian = arr[1];
            } else {
                var timeArray = time.split(':');
            }

            this.hour = parseInt(timeArray[0], 10);
            this.minute = parseInt(timeArray[1], 10);
            this.second = parseInt(timeArray[2], 10);

            if (isNaN(this.hour)) {
                this.hour = 0;
            }
            if (isNaN(this.minute)) {
                this.minute = 0;
            }

            if (this.showMeridian) {
                if (this.hour > 12) {
                    this.hour = 12;
                } else if (this.hour < 1) {
                    this.hour = 1;
                }

                if (this.meridian == 'am' || this.meridian == 'a') {
                    this.meridian = 'AM';
                } else if (this.meridian == 'pm' || this.meridian == 'p') {
                    this.meridian = 'PM';
                }

                if (this.meridian != 'AM' && this.meridian != 'PM') {
                    this.meridian = 'AM';
                }
            } else {
                 if (this.hour >= 24) {
                    this.hour = 23;
                } else if (this.hour < 0) {
                    this.hour = 0;
                }
            }

            if (this.minute < 0) {
                this.minute = 0;
            } else if (this.minute >= 60) {
                this.minute = 59;
            }

            if (this.showSeconds) {
                if (isNaN(this.second)) {
                    this.second = 0;
                } else if (this.second < 0) {
                    this.second = 0;
                } else if (this.second >= 60) {
                    this.second = 59;
                }
            }

            if ( this.$element.val() != '' )
                this.updateElement();
            this.updateWidget();
        }

        , setMeridian: function(meridian) {
            if (meridian == 'a' || meridian == 'am' || meridian == 'AM' ) {
                this.meridian = 'AM';
            } else if (meridian == 'p' || meridian == 'pm' || meridian == 'PM' ) {
                this.meridian = 'PM';
            } else {
                this.updateWidget();
            }

            this.updateElement();
        }

        , setDefaultTime: function(defaultTime){
            if (defaultTime) {
                if (defaultTime === 'current') {
                    var dTime = new Date();
                    var hours = dTime.getHours();
                    var minutes = Math.floor(dTime.getMinutes() / this.minuteStep) * this.minuteStep;
                    var seconds = Math.floor(dTime.getSeconds() / this.secondStep) * this.secondStep;
                    var meridian = "AM";
                    if (this.showMeridian) {
                        if (hours === 0) {
                            hours = 12;
                        } else if (hours >= 12) {
                            if (hours > 12) {
                                hours = hours - 12;
                            }
                            meridian = "PM";
                        } else {
                           meridian = "AM";
                        }
                    }
                    this.hour = hours;
                    this.minute = minutes;
                    this.second = seconds;
                    this.meridian = meridian;
                } else if (defaultTime === 'value') {
                    this.setValues(this.$element.val());
                } else {
                    this.setValues(defaultTime);
                }
                if ( this.$element.val() != '' )
                    this.updateElement();
                this.updateWidget();
            } else {
                this.hour = 0;
                this.minute = 0;
                this.second = 0;
            }
        }

        , formatTime: function(hour, minute, second, meridian) {
            hour = hour < 10 ? '0' + hour : hour;
            minute = minute < 10 ? '0' + minute : minute;
            second = second < 10 ? '0' + second : second;

            return hour + ':' + minute + (this.showSeconds ? ':' + second : '') + (this.showMeridian ? ' ' + meridian : '');
        }

        , getTime: function() {
            return this.formatTime(this.hour, this.minute, this.second, this.meridian);
        }

        , setTime: function(time) {
            this.setValues(time);
            this.update();
        }

        , update: function() {
            this.updateElement();
            this.updateWidget();
        }

        , blurElement: function() {
          this.highlightedUnit = undefined;
          this.updateFromElementVal();
        }

        , updateElement: function() {
            var time = this.getTime();

            this.$element.val(time).change();

            switch (this.highlightedUnit) {
                case 'hour':
                    this.highlightHour();
                break;
                case 'minute':
                    this.highlightMinute();
                break;
                case 'second':
                    this.highlightSecond();
                break;
                case 'meridian':
                    this.highlightMeridian();
                break;
            }
        }

        , updateWidget: function() {
            if (this.showInputs) {
                this.$widget.find('input.bootstrap-timepicker-hour').val(this.hour < 10 ? '0' + this.hour : this.hour);
                this.$widget.find('input.bootstrap-timepicker-minute').val(this.minute < 10 ? '0' + this.minute : this.minute);
                if (this.showSeconds) {
                    this.$widget.find('input.bootstrap-timepicker-second').val(this.second < 10 ? '0' + this.second : this.second);
                }
                if (this.showMeridian) {
                    this.$widget.find('input.bootstrap-timepicker-meridian').val(this.meridian);
                }
            } else {
                this.$widget.find('span.bootstrap-timepicker-hour').text(this.hour);
                this.$widget.find('span.bootstrap-timepicker-minute').text(this.minute < 10 ? '0' + this.minute : this.minute);
                if (this.showSeconds) {
                    this.$widget.find('span.bootstrap-timepicker-second').text(this.second < 10 ? '0' + this.second : this.second);
                }
                if (this.showMeridian) {
                    this.$widget.find('span.bootstrap-timepicker-meridian').text(this.meridian);
                }
            }
        }

        , updateFromElementVal: function (e) {
            var time = this.$element.val();
            if (time) {
                this.setValues(time);
                this.updateWidget();
            }
        }

        , updateFromWidgetInputs: function () {
            var time = $('input.bootstrap-timepicker-hour', this.$widget).val() + ':' +
                       $('input.bootstrap-timepicker-minute', this.$widget).val() +
                       (this.showSeconds ?
                           ':' + $('input.bootstrap-timepicker-second', this.$widget).val()
                        : '') +
                       (this.showMeridian ?
                           ' ' + $('input.bootstrap-timepicker-meridian', this.$widget).val()
                        : '');

            this.setValues(time);
        }

        , getCursorPosition: function() {
            var input = this.$element.get(0);

            if ('selectionStart' in input) {
                // Standard-compliant browsers
                return input.selectionStart;
            } else if (document.selection) {
                // IE fix
                input.focus();
                var sel = document.selection.createRange();
                var selLen = document.selection.createRange().text.length;
                sel.moveStart('character', - input.value.length);

                return sel.text.length - selLen;
            }
        }

        , highlightUnit: function () {
            var input = this.$element.get(0);

            this.position = this.getCursorPosition();
            if (this.position >= 0 && this.position <= 2) {
                this.highlightHour();
            } else if (this.position >= 3 && this.position <= 5) {
                this.highlightMinute();
            } else if (this.position >= 6 && this.position <= 8) {
                if (this.showSeconds) {
                    this.highlightSecond();
                } else {
                    this.highlightMeridian();
                }
            } else if (this.position >= 9 && this.position <= 11) {
                this.highlightMeridian();
            }
        }

        , highlightNextUnit: function() {
            switch (this.highlightedUnit) {
                case 'hour':
                    this.highlightMinute();
                break;
                case 'minute':
                    if (this.showSeconds) {
                        this.highlightSecond();
                    } else {
                        this.highlightMeridian();
                    }
                break;
                case 'second':
                    this.highlightMeridian();
                break;
                case 'meridian':
                    this.highlightHour();
                break;
            }
        }

        , highlightPrevUnit: function() {
            switch (this.highlightedUnit) {
                case 'hour':
                    this.highlightMeridian();
                break;
                case 'minute':
                    this.highlightHour();
                break;
                case 'second':
                    this.highlightMinute();
                break;
                case 'meridian':
                    if (this.showSeconds) {
                        this.highlightSecond();
                    } else {
                        this.highlightMinute();
                    }
                break;
            }
        }

        , highlightHour: function() {
            this.highlightedUnit = 'hour';
            this.$element.get(0).setSelectionRange(0,2);
        }

        , highlightMinute: function() {
            this.highlightedUnit = 'minute';
            this.$element.get(0).setSelectionRange(3,5);
        }

        , highlightSecond: function() {
            this.highlightedUnit = 'second';
            this.$element.get(0).setSelectionRange(6,8);
        }

        , highlightMeridian: function() {
            this.highlightedUnit = 'meridian';
            if (this.showSeconds) {
                this.$element.get(0).setSelectionRange(9,11);
            } else {
                this.$element.get(0).setSelectionRange(6,8);
            }
        }

        , incrementHour: function() {
            if (this.showMeridian) {
                if (this.hour === 11) {
                    this.toggleMeridian();
                } else if (this.hour === 12) {
                    return this.hour = 1;
                }
            }
            if (this.hour === 23) {
                return this.hour = 0;
            }
            this.hour = this.hour + 1;
        }

        , decrementHour: function() {
            if (this.showMeridian) {
                if (this.hour === 1) {
                    return this.hour = 12;
                }
                else if (this.hour === 12) {
                    this.toggleMeridian();
                }
            }
            if (this.hour === 0) {
                return this.hour = 23;
            }
            this.hour = this.hour - 1;
        }

        , incrementMinute: function() {
            var newVal = this.minute + this.minuteStep - (this.minute % this.minuteStep);
            if (newVal > 59) {
                this.incrementHour();
                this.minute = newVal - 60;
            } else {
                this.minute = newVal;
            }
        }

        , decrementMinute: function() {
            var newVal = this.minute - this.minuteStep;
            if (newVal < 0) {
                this.decrementHour();
                this.minute = newVal + 60;
            } else {
                this.minute = newVal;
            }
        }

        , incrementSecond: function() {
            var newVal = this.second + this.secondStep - (this.second % this.secondStep);
            if (newVal > 59) {
                this.incrementMinute();
                this.second = newVal - 60;
            } else {
                this.second = newVal;
            }
        }

        , decrementSecond: function() {
            var newVal = this.second - this.secondStep;
            if (newVal < 0) {
                this.decrementMinute();
                this.second = newVal + 60;
            } else {
                this.second = newVal;
            }
        }

        , toggleMeridian: function() {
            this.meridian = this.meridian === 'AM' ? 'PM' : 'AM';

            this.update();
        }

        , getTemplate: function() {
            if (this.options.templates[this.options.template]) {
                return this.options.templates[this.options.template];
            }
            if (this.showInputs) {
                var hourTemplate = '<input type="text" name="hour" class="bootstrap-timepicker-hour" maxlength="2"/>';
                var minuteTemplate = '<input type="text" name="minute" class="bootstrap-timepicker-minute" maxlength="2"/>';
                var secondTemplate = '<input type="text" name="second" class="bootstrap-timepicker-second" maxlength="2"/>';
                var meridianTemplate = '<input type="text" name="meridian" class="bootstrap-timepicker-meridian" maxlength="2"/>';
            } else {
                var hourTemplate = '<span class="bootstrap-timepicker-hour"></span>';
                var minuteTemplate = '<span class="bootstrap-timepicker-minute"></span>';
                var secondTemplate = '<span class="bootstrap-timepicker-second"></span>';
                var meridianTemplate = '<span class="bootstrap-timepicker-meridian"></span>';
            }
            var templateContent = '<table class="'+ (this.showSeconds ? 'show-seconds' : '') +' '+ (this.showMeridian ? 'show-meridian' : '') +'">'+
                                       '<tr>'+
                                           '<td><a href="#" data-action="incrementHour"><i class="fa fa-angle-up"></i></a></td>'+
                                           '<td class="separator">&nbsp;</td>'+
                                           '<td><a href="#" data-action="incrementMinute"><i class="fa fa-angle-up"></i></a></td>'+
                                           (this.showSeconds ?
                                               '<td class="separator">&nbsp;</td>'+
                                               '<td><a href="#" data-action="incrementSecond"><i class="fa fa-angle-up"></i></a></td>'
                                           : '') +
                                           (this.showMeridian ?
                                               '<td class="separator">&nbsp;</td>'+
                                               '<td class="meridian-column"><a href="#" data-action="toggleMeridian"><i class="fa fa-angle-up"></i></a></td>'
                                           : '') +
                                       '</tr>'+
                                       '<tr>'+
                                           '<td>'+ hourTemplate +'</td> '+
                                           '<td class="separator">:</td>'+
                                           '<td>'+ minuteTemplate +'</td> '+
                                           (this.showSeconds ?
                                                '<td class="separator">:</td>'+
                                                '<td>'+ secondTemplate +'</td>'
                                           : '') +
                                           (this.showMeridian ?
                                                '<td class="separator">&nbsp;</td>'+
                                                '<td>'+ meridianTemplate +'</td>'
                                           : '') +
                                       '</tr>'+
                                       '<tr>'+
                                           '<td><a href="#" data-action="decrementHour"><i class="fa fa-angle-down"></i></a></td>'+
                                           '<td class="separator"></td>'+
                                           '<td><a href="#" data-action="decrementMinute"><i class="fa fa-angle-down"></i></a></td>'+
                                           (this.showSeconds ?
                                                '<td class="separator">&nbsp;</td>'+
                                                '<td><a href="#" data-action="decrementSecond"><i class="fa fa-angle-down"></i></a></td>'
                                           : '') +
                                           (this.showMeridian ?
                                                '<td class="separator">&nbsp;</td>'+
                                                '<td><a href="#" data-action="toggleMeridian"><i class="fa fa-angle-down"></i></a></td>'
                                           : '') +
                                       '</tr>'+
                                   '</table>';

            var template;
            switch(this.options.template) {
                case 'modal':
                    template = '<div class="bootstrap-timepicker modal hide fade in" style="top: 30%; margin-top: 0; width: 200px; margin-left: -100px;" data-backdrop="'+ (this.modalBackdrop ? 'true' : 'false') +'">'+
                                   '<div class="modal-header">'+
                                       '<a href="#" class="close" data-dismiss="modal">×</a>'+
                                       '<h3>Pick a Time</h3>'+
                                   '</div>'+
                                   '<div class="modal-content">'+
                                        templateContent +
                                   '</div>'+
                                   '<div class="modal-footer">'+
                                       '<a href="#" class="btn btn-primary" data-dismiss="modal">Ok</a>'+
                                   '</div>'+
                               '</div>';

                break;
                case 'dropdown':
                    template = '<div class="bootstrap-timepicker dropdown-menu">'+
                                    templateContent +
                               '</div>';
                break;

            }
            return template;
        }
    };


    /* TIMEPICKER PLUGIN DEFINITION
     * =========================== */

    $.fn.timepicker = function (option) {
        return this.each(function () {
            var $this = $(this)
            , data = $this.data('timepicker')
            , options = typeof option == 'object' && option;
            if (!data) {
                $this.data('timepicker', (data = new Timepicker(this, options)));
            }
            if (typeof option == 'string') {
                data[option]();
            }
        })
    }

    $.fn.timepicker.defaults = {
      minuteStep: 15
    , secondStep: 15
    , disableFocus: false
    , defaultTime: 'current'
    , showSeconds: false
    , showInputs: true
    , showMeridian: true
    , template: 'dropdown'
    , modalBackdrop: false
    , templates: {} // set custom templates
    }

    $.fn.timepicker.Constructor = Timepicker
}(window.jQuery);

/* =========================================================
 * bootstrap-datetimepicker.js
 * =========================================================
 * Copyright 2012 Stefan Petre
 * Improvements by Andrew Rowls
 * Improvements by Sébastien Malot
 * Improvements by Yun Lai
 * Improvements by Kenneth Henderick
 * Project URL : http://www.malot.fr/bootstrap-datetimepicker
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

/*
 * Improvement by CuGBabyBeaR @ 2013-09-12
 *
 * Make it work in bootstrap v3
 */

!function ($) {

	function UTCDate() {
		return new Date(Date.UTC.apply(Date, arguments));
	}

	function UTCToday() {
		var today = new Date();
		return UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate(), today.getUTCHours(), today.getUTCMinutes(), today.getUTCSeconds(), 0);
	}

	// Picker object

	var Datetimepicker = function (element, options) {
		var that = this;

		this.element = $(element);

		// add container for single page application
		// when page switch the datetimepicker div will be removed also.
		this.container = options.container || 'body';

		this.language = options.language || this.element.data('date-language') || "en";
		this.language = this.language in dates ? this.language : "en";
		this.isRTL = dates[this.language].rtl || false;
		this.formatType = options.formatType || this.element.data('format-type') || 'standard';
		this.format = DPGlobal.parseFormat(options.format || this.element.data('date-format') || dates[this.language].format || DPGlobal.getDefaultFormat(this.formatType, 'input'), this.formatType);
		this.isInline = false;
		this.isVisible = false;
		this.isInput = this.element.is('input');
		this.fontAwesome = options.fontAwesome || this.element.data('font-awesome') || false;

		this.bootcssVer = options.bootcssVer || (this.isInput ? (this.element.is('.form-control') ? 3 : 2) : ( this.bootcssVer = this.element.is('.input-group') ? 3 : 2 ));

		this.component = this.element.is('.date') ? ( this.bootcssVer == 3 ? this.element.find('.input-group-addon .glyphicon-th, .input-group-addon .glyphicon-time, .input-group-addon .glyphicon-calendar .fa-calendar .fa-clock-o').parent() : this.element.find('.add-on .icon-th, .add-on .icon-time, .add-on .icon-calendar .fa-calendar .fa-clock-o').parent()) : false;
		this.componentReset = this.element.is('.date') ? ( this.bootcssVer == 3 ? this.element.find('.input-group-addon .glyphicon-remove .fa-times').parent() : this.element.find('.add-on .icon-remove .fa-times').parent()) : false;
		this.hasInput = this.component && this.element.find('input').length;
		if (this.component && this.component.length === 0) {
			this.component = false;
		}
		this.linkField = options.linkField || this.element.data('link-field') || false;
		this.linkFormat = DPGlobal.parseFormat(options.linkFormat || this.element.data('link-format') || DPGlobal.getDefaultFormat(this.formatType, 'link'), this.formatType);
		this.minuteStep = options.minuteStep || this.element.data('minute-step') || 5;
		this.pickerPosition = options.pickerPosition || this.element.data('picker-position') || 'bottom-right';
		this.showMeridian = options.showMeridian || this.element.data('show-meridian') || false;
		this.initialDate = options.initialDate || new Date();

		this.icons = {
			leftArrow: this.fontAwesome ? 'fa-arrow-left' : (this.bootcssVer === 3 ? 'glyphicon-arrow-left' : 'icon-arrow-left'),
			rightArrow: this.fontAwesome ? 'fa-arrow-right' : (this.bootcssVer === 3 ? 'glyphicon-arrow-right' : 'icon-arrow-right')
		};
		this.icontype = this.fontAwesome ? 'fa' : 'glyphicon';

		this._attachEvents();

		this.formatViewType = "datetime";
		if ('formatViewType' in options) {
			this.formatViewType = options.formatViewType;
		} else if ('formatViewType' in this.element.data()) {
			this.formatViewType = this.element.data('formatViewType');
		}

		this.minView = 0;
		if ('minView' in options) {
			this.minView = options.minView;
		} else if ('minView' in this.element.data()) {
			this.minView = this.element.data('min-view');
		}
		this.minView = DPGlobal.convertViewMode(this.minView);

		this.maxView = DPGlobal.modes.length - 1;
		if ('maxView' in options) {
			this.maxView = options.maxView;
		} else if ('maxView' in this.element.data()) {
			this.maxView = this.element.data('max-view');
		}
		this.maxView = DPGlobal.convertViewMode(this.maxView);

		this.wheelViewModeNavigation = false;
		if ('wheelViewModeNavigation' in options) {
			this.wheelViewModeNavigation = options.wheelViewModeNavigation;
		} else if ('wheelViewModeNavigation' in this.element.data()) {
			this.wheelViewModeNavigation = this.element.data('view-mode-wheel-navigation');
		}

		this.wheelViewModeNavigationInverseDirection = false;

		if ('wheelViewModeNavigationInverseDirection' in options) {
			this.wheelViewModeNavigationInverseDirection = options.wheelViewModeNavigationInverseDirection;
		} else if ('wheelViewModeNavigationInverseDirection' in this.element.data()) {
			this.wheelViewModeNavigationInverseDirection = this.element.data('view-mode-wheel-navigation-inverse-dir');
		}

		this.wheelViewModeNavigationDelay = 100;
		if ('wheelViewModeNavigationDelay' in options) {
			this.wheelViewModeNavigationDelay = options.wheelViewModeNavigationDelay;
		} else if ('wheelViewModeNavigationDelay' in this.element.data()) {
			this.wheelViewModeNavigationDelay = this.element.data('view-mode-wheel-navigation-delay');
		}

		this.startViewMode = 2;
		if ('startView' in options) {
			this.startViewMode = options.startView;
		} else if ('startView' in this.element.data()) {
			this.startViewMode = this.element.data('start-view');
		}
		this.startViewMode = DPGlobal.convertViewMode(this.startViewMode);
		this.viewMode = this.startViewMode;

		this.viewSelect = this.minView;
		if ('viewSelect' in options) {
			this.viewSelect = options.viewSelect;
		} else if ('viewSelect' in this.element.data()) {
			this.viewSelect = this.element.data('view-select');
		}
		this.viewSelect = DPGlobal.convertViewMode(this.viewSelect);

		this.forceParse = true;
		if ('forceParse' in options) {
			this.forceParse = options.forceParse;
		} else if ('dateForceParse' in this.element.data()) {
			this.forceParse = this.element.data('date-force-parse');
		}
		var template = this.bootcssVer === 3 ? DPGlobal.templateV3 : DPGlobal.template;
		while (template.indexOf('{iconType}') !== -1) {
			template = template.replace('{iconType}', this.icontype);
		}
		while (template.indexOf('{leftArrow}') !== -1) {
			template = template.replace('{leftArrow}', this.icons.leftArrow);
		}
		while (template.indexOf('{rightArrow}') !== -1) {
			template = template.replace('{rightArrow}', this.icons.rightArrow);
		}
		this.picker = $(template)
			.appendTo(this.isInline ? this.element : this.container) // 'body')
			.on({
				click:     $.proxy(this.click, this),
				mousedown: $.proxy(this.mousedown, this)
			});

		if (this.wheelViewModeNavigation) {
			if ($.fn.mousewheel) {
				this.picker.on({mousewheel: $.proxy(this.mousewheel, this)});
			} else {
				console.log("Mouse Wheel event is not supported. Please include the jQuery Mouse Wheel plugin before enabling this option");
			}
		}

		if (this.isInline) {
			this.picker.addClass('datetimepicker-inline');
		} else {
			this.picker.addClass('datetimepicker-dropdown-' + this.pickerPosition + ' dropdown-menu');
		}
		if (this.isRTL) {
			this.picker.addClass('datetimepicker-rtl');
			var selector = this.bootcssVer === 3 ? '.prev span, .next span' : '.prev i, .next i';
			this.picker.find(selector).toggleClass(this.icons.leftArrow + ' ' + this.icons.rightArrow);
		}
		$(document).on('mousedown', function (e) {
			// Clicked outside the datetimepicker, hide it
			if ($(e.target).closest('.datetimepicker').length === 0) {
				that.hide();
			}
		});

		this.autoclose = false;
		if ('autoclose' in options) {
			this.autoclose = options.autoclose;
		} else if ('dateAutoclose' in this.element.data()) {
			this.autoclose = this.element.data('date-autoclose');
		}

		this.keyboardNavigation = true;
		if ('keyboardNavigation' in options) {
			this.keyboardNavigation = options.keyboardNavigation;
		} else if ('dateKeyboardNavigation' in this.element.data()) {
			this.keyboardNavigation = this.element.data('date-keyboard-navigation');
		}

		this.todayBtn = (options.todayBtn || this.element.data('date-today-btn') || false);
		this.todayHighlight = (options.todayHighlight || this.element.data('date-today-highlight') || false);

		this.weekStart = ((options.weekStart || this.element.data('date-weekstart') || dates[this.language].weekStart || 0) % 7);
		this.weekEnd = ((this.weekStart + 6) % 7);
		this.startDate = -Infinity;
		this.endDate = Infinity;
		this.daysOfWeekDisabled = [];
		this.setStartDate(options.startDate || this.element.data('date-startdate'));
		this.setEndDate(options.endDate || this.element.data('date-enddate'));
		this.setDaysOfWeekDisabled(options.daysOfWeekDisabled || this.element.data('date-days-of-week-disabled'));
		this.setMinutesDisabled(options.minutesDisabled || this.element.data('date-minute-disabled'));
		this.setHoursDisabled(options.hoursDisabled || this.element.data('date-hour-disabled'));
		this.fillDow();
		this.fillMonths();
		this.update();
		this.showMode();

		if (this.isInline) {
			this.show();
		}
	};

	Datetimepicker.prototype = {
		constructor: Datetimepicker,

		_events:       [],
		_attachEvents: function () {
			this._detachEvents();
			if (this.isInput) { // single input
				this._events = [
					[this.element, {
						focus:   $.proxy(this.show, this),
						keyup:   $.proxy(this.update, this),
						keydown: $.proxy(this.keydown, this)
					}]
				];
			}
			else if (this.component && this.hasInput) { // component: input + button
				this._events = [
					// For components that are not readonly, allow keyboard nav
					[this.element.find('input'), {
						focus:   $.proxy(this.show, this),
						keyup:   $.proxy(this.update, this),
						keydown: $.proxy(this.keydown, this)
					}],
					[this.component, {
						click: $.proxy(this.show, this)
					}]
				];
				if (this.componentReset) {
					this._events.push([
						this.componentReset,
						{click: $.proxy(this.reset, this)}
					]);
				}
			}
			else if (this.element.is('div')) {  // inline datetimepicker
				this.isInline = true;
			}
			else {
				this._events = [
					[this.element, {
						click: $.proxy(this.show, this)
					}]
				];
			}
			for (var i = 0, el, ev; i < this._events.length; i++) {
				el = this._events[i][0];
				ev = this._events[i][1];
				el.on(ev);
			}
		},

		_detachEvents: function () {
			for (var i = 0, el, ev; i < this._events.length; i++) {
				el = this._events[i][0];
				ev = this._events[i][1];
				el.off(ev);
			}
			this._events = [];
		},

		show: function (e) {
			this.picker.show();
			this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();
			if (this.forceParse) {
				this.update();
			}
			this.place();
			$(window).on('resize', $.proxy(this.place, this));
			if (e) {
				e.stopPropagation();
				e.preventDefault();
			}
			this.isVisible = true;
			this.element.trigger({
				type: 'show',
				date: this.date
			});
		},

		hide: function (e) {
			if (!this.isVisible) return;
			if (this.isInline) return;
			this.picker.hide();
			$(window).off('resize', this.place);
			this.viewMode = this.startViewMode;
			this.showMode();
			if (!this.isInput) {
				$(document).off('mousedown', this.hide);
			}

			if (
				this.forceParse &&
					(
						this.isInput && this.element.val() ||
							this.hasInput && this.element.find('input').val()
						)
				)
				this.setValue();
			this.isVisible = false;
			this.element.trigger({
				type: 'hide',
				date: this.date
			});
		},

		remove: function () {
			this._detachEvents();
			this.picker.remove();
			delete this.picker;
			delete this.element.data().datetimepicker;
		},

		getDate: function () {
			var d = this.getUTCDate();
			return new Date(d.getTime() + (d.getTimezoneOffset() * 60000));
		},

		getUTCDate: function () {
			return this.date;
		},

		setDate: function (d) {
			this.setUTCDate(new Date(d.getTime() - (d.getTimezoneOffset() * 60000)));
		},

		setUTCDate: function (d) {
			if (d >= this.startDate && d <= this.endDate) {
				this.date = d;
				this.setValue();
				this.viewDate = this.date;
				this.fill();
			} else {
				this.element.trigger({
					type:      'outOfRange',
					date:      d,
					startDate: this.startDate,
					endDate:   this.endDate
				});
			}
		},

		setFormat: function (format) {
			this.format = DPGlobal.parseFormat(format, this.formatType);
			var element;
			if (this.isInput) {
				element = this.element;
			} else if (this.component) {
				element = this.element.find('input');
			}
			if (element && element.val()) {
				this.setValue();
			}
		},

		setValue: function () {
			var formatted = this.getFormattedDate();
			if (!this.isInput) {
				if (this.component) {
					this.element.find('input').val(formatted);
				}
				this.element.data('date', formatted);
			} else {
				this.element.val(formatted);
			}
			if (this.linkField) {
				$('#' + this.linkField).val(this.getFormattedDate(this.linkFormat));
			}
		},

		getFormattedDate: function (format) {
			if (format == undefined) format = this.format;
			return DPGlobal.formatDate(this.date, format, this.language, this.formatType);
		},

		setStartDate: function (startDate) {
			this.startDate = startDate || -Infinity;
			if (this.startDate !== -Infinity) {
				this.startDate = DPGlobal.parseDate(this.startDate, this.format, this.language, this.formatType);
			}
			this.update();
			this.updateNavArrows();
		},

		setEndDate: function (endDate) {
			this.endDate = endDate || Infinity;
			if (this.endDate !== Infinity) {
				this.endDate = DPGlobal.parseDate(this.endDate, this.format, this.language, this.formatType);
			}
			this.update();
			this.updateNavArrows();
		},

		setDaysOfWeekDisabled: function (daysOfWeekDisabled) {
			this.daysOfWeekDisabled = daysOfWeekDisabled || [];
			if (!$.isArray(this.daysOfWeekDisabled)) {
				this.daysOfWeekDisabled = this.daysOfWeekDisabled.split(/,\s*/);
			}
			this.daysOfWeekDisabled = $.map(this.daysOfWeekDisabled, function (d) {
				return parseInt(d, 10);
			});
			this.update();
			this.updateNavArrows();
		},

		setMinutesDisabled: function (minutesDisabled) {
			this.minutesDisabled = minutesDisabled || [];
			if (!$.isArray(this.minutesDisabled)) {
				this.minutesDisabled = this.minutesDisabled.split(/,\s*/);
			}
			this.minutesDisabled = $.map(this.minutesDisabled, function (d) {
				return parseInt(d, 10);
			});
			this.update();
			this.updateNavArrows();
		},

		setHoursDisabled: function (hoursDisabled) {
			this.hoursDisabled = hoursDisabled || [];
			if (!$.isArray(this.hoursDisabled)) {
				this.hoursDisabled = this.hoursDisabled.split(/,\s*/);
			}
			this.hoursDisabled = $.map(this.hoursDisabled, function (d) {
				return parseInt(d, 10);
			});
			this.update();
			this.updateNavArrows();
		},

		place: function () {
			if (this.isInline) return;

			var index_highest = 0;
			$('div').each(function () {
				var index_current = parseInt($(this).css("zIndex"), 10);
				if (index_current > index_highest) {
					index_highest = index_current;
				}
			});
			var zIndex = index_highest + 10;

			var offset, top, left, containerOffset;
			if (this.container instanceof $) {
				containerOffset = this.container.offset();
			} else {
				containerOffset = $(this.container).offset();
			}

			if (this.component) {
				offset = this.component.offset();
				left = offset.left;
				if (this.pickerPosition == 'bottom-left' || this.pickerPosition == 'top-left') {
					left += this.component.outerWidth() - this.picker.outerWidth();
				}
			} else {
				offset = this.element.offset();
				left = offset.left;
			}

			if(left+220 > document.body.clientWidth){
            			left = document.body.clientWidth-220;
          		}

			if (this.pickerPosition == 'top-left' || this.pickerPosition == 'top-right') {
				top = offset.top - this.picker.outerHeight();
			} else {
				top = offset.top + this.height;
			}

			top = top - containerOffset.top;
			left = left - containerOffset.left;

			this.picker.css({
				top:    top,
				left:   left,
				zIndex: zIndex
			});
		},

		update: function () {
			var date, fromArgs = false;
			if (arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {
				date = arguments[0];
				fromArgs = true;
			} else {
				date = (this.isInput ? this.element.val() : this.element.find('input').val()) || this.element.data('date') || this.initialDate;
				if (typeof date == 'string' || date instanceof String) {
				  date = date.replace(/^\s+|\s+$/g,'');
				}
			}

			if (!date) {
				date = new Date();
				fromArgs = false;
			}

			this.date = DPGlobal.parseDate(date, this.format, this.language, this.formatType);

			if (fromArgs) this.setValue();

			if (this.date < this.startDate) {
				this.viewDate = new Date(this.startDate);
			} else if (this.date > this.endDate) {
				this.viewDate = new Date(this.endDate);
			} else {
				this.viewDate = new Date(this.date);
			}
			this.fill();
		},

		fillDow: function () {
			var dowCnt = this.weekStart,
				html = '<tr>';
			while (dowCnt < this.weekStart + 7) {
				html += '<th class="dow">' + dates[this.language].daysMin[(dowCnt++) % 7] + '</th>';
			}
			html += '</tr>';
			this.picker.find('.datetimepicker-days thead').append(html);
		},

		fillMonths: function () {
			var html = '',
				i = 0;
			while (i < 12) {
				html += '<span class="month">' + dates[this.language].monthsShort[i++] + '</span>';
			}
			this.picker.find('.datetimepicker-months td').html(html);
		},

		fill: function () {
			if (this.date == null || this.viewDate == null) {
				return;
			}
			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth(),
				dayMonth = d.getUTCDate(),
				hours = d.getUTCHours(),
				minutes = d.getUTCMinutes(),
				startYear = this.startDate !== -Infinity ? this.startDate.getUTCFullYear() : -Infinity,
				startMonth = this.startDate !== -Infinity ? this.startDate.getUTCMonth() + 1 : -Infinity,
				endYear = this.endDate !== Infinity ? this.endDate.getUTCFullYear() : Infinity,
				endMonth = this.endDate !== Infinity ? this.endDate.getUTCMonth() + 1 : Infinity,
				currentDate = (new UTCDate(this.date.getUTCFullYear(), this.date.getUTCMonth(), this.date.getUTCDate())).valueOf(),
				today = new Date();
			this.picker.find('.datetimepicker-days thead th:eq(1)')
				.text(dates[this.language].months[month] + ' ' + year);
			if (this.formatViewType == "time") {
				var formatted = this.getFormattedDate();
				this.picker.find('.datetimepicker-hours thead th:eq(1)').text(formatted);
				this.picker.find('.datetimepicker-minutes thead th:eq(1)').text(formatted);
			} else {
				this.picker.find('.datetimepicker-hours thead th:eq(1)')
					.text(dayMonth + ' ' + dates[this.language].months[month] + ' ' + year);
				this.picker.find('.datetimepicker-minutes thead th:eq(1)')
					.text(dayMonth + ' ' + dates[this.language].months[month] + ' ' + year);
			}
			this.picker.find('tfoot th.today')
				.text(dates[this.language].today)
				.toggle(this.todayBtn !== false);
			this.updateNavArrows();
			this.fillMonths();
			/*var prevMonth = UTCDate(year, month, 0,0,0,0,0);
			 prevMonth.setUTCDate(prevMonth.getDate() - (prevMonth.getUTCDay() - this.weekStart + 7)%7);*/
			var prevMonth = UTCDate(year, month - 1, 28, 0, 0, 0, 0),
				day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
			prevMonth.setUTCDate(day);
			prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.weekStart + 7) % 7);
			var nextMonth = new Date(prevMonth);
			nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
			nextMonth = nextMonth.valueOf();
			var html = [];
			var clsName;
			while (prevMonth.valueOf() < nextMonth) {
				if (prevMonth.getUTCDay() == this.weekStart) {
					html.push('<tr>');
				}
				clsName = '';
				if (prevMonth.getUTCFullYear() < year || (prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() < month)) {
					clsName += ' old';
				} else if (prevMonth.getUTCFullYear() > year || (prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() > month)) {
					clsName += ' new';
				}
				// Compare internal UTC date with local today, not UTC today
				if (this.todayHighlight &&
					prevMonth.getUTCFullYear() == today.getFullYear() &&
					prevMonth.getUTCMonth() == today.getMonth() &&
					prevMonth.getUTCDate() == today.getDate()) {
					clsName += ' today';
				}
				if (prevMonth.valueOf() == currentDate) {
					clsName += ' active';
				}
				if ((prevMonth.valueOf() + 86400000) <= this.startDate || prevMonth.valueOf() > this.endDate ||
					$.inArray(prevMonth.getUTCDay(), this.daysOfWeekDisabled) !== -1) {
					clsName += ' disabled';
				}
				html.push('<td class="day' + clsName + '">' + prevMonth.getUTCDate() + '</td>');
				if (prevMonth.getUTCDay() == this.weekEnd) {
					html.push('</tr>');
				}
				prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
			}
			this.picker.find('.datetimepicker-days tbody').empty().append(html.join(''));

			html = [];
			var txt = '', meridian = '', meridianOld = '';
			var hoursDisabled = this.hoursDisabled || [];
			for (var i = 0; i < 24; i++) {
				if (hoursDisabled.indexOf(i) !== -1) continue;
				var actual = UTCDate(year, month, dayMonth, i);
				clsName = '';
				// We want the previous hour for the startDate
				if ((actual.valueOf() + 3600000) <= this.startDate || actual.valueOf() > this.endDate) {
					clsName += ' disabled';
				} else if (hours == i) {
					clsName += ' active';
				}
				if (this.showMeridian && dates[this.language].meridiem.length == 2) {
					meridian = (i < 12 ? dates[this.language].meridiem[0] : dates[this.language].meridiem[1]);
					if (meridian != meridianOld) {
						if (meridianOld != '') {
							html.push('</fieldset>');
						}
						html.push('<fieldset class="hour"><legend>' + meridian.toUpperCase() + '</legend>');
					}
					meridianOld = meridian;
					txt = (i % 12 ? i % 12 : 12);
					html.push('<span class="hour' + clsName + ' hour_' + (i < 12 ? 'am' : 'pm') + '">' + txt + '</span>');
					if (i == 23) {
						html.push('</fieldset>');
					}
				} else {
					txt = i + ':00';
					html.push('<span class="hour' + clsName + '">' + txt + '</span>');
				}
			}
			this.picker.find('.datetimepicker-hours td').html(html.join(''));

			html = [];
			txt = '', meridian = '', meridianOld = '';
			var minutesDisabled = this.minutesDisabled || [];
			for (var i = 0; i < 60; i += this.minuteStep) {
				if (minutesDisabled.indexOf(i) !== -1) continue;
				var actual = UTCDate(year, month, dayMonth, hours, i, 0);
				clsName = '';
				if (actual.valueOf() < this.startDate || actual.valueOf() > this.endDate) {
					clsName += ' disabled';
				} else if (Math.floor(minutes / this.minuteStep) == Math.floor(i / this.minuteStep)) {
					clsName += ' active';
				}
				if (this.showMeridian && dates[this.language].meridiem.length == 2) {
					meridian = (hours < 12 ? dates[this.language].meridiem[0] : dates[this.language].meridiem[1]);
					if (meridian != meridianOld) {
						if (meridianOld != '') {
							html.push('</fieldset>');
						}
						html.push('<fieldset class="minute"><legend>' + meridian.toUpperCase() + '</legend>');
					}
					meridianOld = meridian;
					txt = (hours % 12 ? hours % 12 : 12);
					//html.push('<span class="minute'+clsName+' minute_'+(hours<12?'am':'pm')+'">'+txt+'</span>');
					html.push('<span class="minute' + clsName + '">' + txt + ':' + (i < 10 ? '0' + i : i) + '</span>');
					if (i == 59) {
						html.push('</fieldset>');
					}
				} else {
					txt = i + ':00';
					//html.push('<span class="hour'+clsName+'">'+txt+'</span>');
					html.push('<span class="minute' + clsName + '">' + hours + ':' + (i < 10 ? '0' + i : i) + '</span>');
				}
			}
			this.picker.find('.datetimepicker-minutes td').html(html.join(''));

			var currentYear = this.date.getUTCFullYear();
			var months = this.picker.find('.datetimepicker-months')
				.find('th:eq(1)')
				.text(year)
				.end()
				.find('span').removeClass('active');
			if (currentYear == year) {
				// getUTCMonths() returns 0 based, and we need to select the next one
				months.eq(this.date.getUTCMonth() + 2).addClass('active');
			}
			if (year < startYear || year > endYear) {
				months.addClass('disabled');
			}
			if (year == startYear) {
				months.slice(0, startMonth + 1).addClass('disabled');
			}
			if (year == endYear) {
				months.slice(endMonth).addClass('disabled');
			}

			html = '';
			year = parseInt(year / 10, 10) * 10;
			var yearCont = this.picker.find('.datetimepicker-years')
				.find('th:eq(1)')
				.text(year + '-' + (year + 9))
				.end()
				.find('td');
			year -= 1;
			for (var i = -1; i < 11; i++) {
				html += '<span class="year' + (i == -1 || i == 10 ? ' old' : '') + (currentYear == year ? ' active' : '') + (year < startYear || year > endYear ? ' disabled' : '') + '">' + year + '</span>';
				year += 1;
			}
			yearCont.html(html);
			this.place();
		},

		updateNavArrows: function () {
			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth(),
				day = d.getUTCDate(),
				hour = d.getUTCHours();
			switch (this.viewMode) {
				case 0:
					if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()
						&& month <= this.startDate.getUTCMonth()
						&& day <= this.startDate.getUTCDate()
						&& hour <= this.startDate.getUTCHours()) {
						this.picker.find('.prev').css({visibility: 'hidden'});
					} else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()
						&& month >= this.endDate.getUTCMonth()
						&& day >= this.endDate.getUTCDate()
						&& hour >= this.endDate.getUTCHours()) {
						this.picker.find('.next').css({visibility: 'hidden'});
					} else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
				case 1:
					if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()
						&& month <= this.startDate.getUTCMonth()
						&& day <= this.startDate.getUTCDate()) {
						this.picker.find('.prev').css({visibility: 'hidden'});
					} else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()
						&& month >= this.endDate.getUTCMonth()
						&& day >= this.endDate.getUTCDate()) {
						this.picker.find('.next').css({visibility: 'hidden'});
					} else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
				case 2:
					if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()
						&& month <= this.startDate.getUTCMonth()) {
						this.picker.find('.prev').css({visibility: 'hidden'});
					} else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()
						&& month >= this.endDate.getUTCMonth()) {
						this.picker.find('.next').css({visibility: 'hidden'});
					} else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
				case 3:
				case 4:
					if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()) {
						this.picker.find('.prev').css({visibility: 'hidden'});
					} else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()) {
						this.picker.find('.next').css({visibility: 'hidden'});
					} else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
			}
		},

		mousewheel: function (e) {

			e.preventDefault();
			e.stopPropagation();

			if (this.wheelPause) {
				return;
			}

			this.wheelPause = true;

			var originalEvent = e.originalEvent;

			var delta = originalEvent.wheelDelta;

			var mode = delta > 0 ? 1 : (delta === 0) ? 0 : -1;

			if (this.wheelViewModeNavigationInverseDirection) {
				mode = -mode;
			}

			this.showMode(mode);

			setTimeout($.proxy(function () {

				this.wheelPause = false

			}, this), this.wheelViewModeNavigationDelay);

		},

		click: function (e) {
			e.stopPropagation();
			e.preventDefault();
			var target = $(e.target).closest('span, td, th, legend');
			if (target.is('.' + this.icontype)) {
				target = $(target).parent().closest('span, td, th, legend');
			}
			if (target.length == 1) {
				if (target.is('.disabled')) {
					this.element.trigger({
						type:      'outOfRange',
						date:      this.viewDate,
						startDate: this.startDate,
						endDate:   this.endDate
					});
					return;
				}
				switch (target[0].nodeName.toLowerCase()) {
					case 'th':
						switch (target[0].className) {
							case 'switch':
								this.showMode(1);
								break;
							case 'prev':
							case 'next':
								var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);
								switch (this.viewMode) {
									case 0:
										this.viewDate = this.moveHour(this.viewDate, dir);
										break;
									case 1:
										this.viewDate = this.moveDate(this.viewDate, dir);
										break;
									case 2:
										this.viewDate = this.moveMonth(this.viewDate, dir);
										break;
									case 3:
									case 4:
										this.viewDate = this.moveYear(this.viewDate, dir);
										break;
								}
								this.fill();
								this.element.trigger({
									type:      target[0].className + ':' + this.convertViewModeText(this.viewMode),
									date:      this.viewDate,
									startDate: this.startDate,
									endDate:   this.endDate
								});
								break;
							case 'today':
								var date = new Date();
								date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0);

								// Respect startDate and endDate.
								if (date < this.startDate) date = this.startDate;
								else if (date > this.endDate) date = this.endDate;

								this.viewMode = this.startViewMode;
								this.showMode(0);
								this._setDate(date);
								this.fill();
								if (this.autoclose) {
									this.hide();
								}
								break;
						}
						break;
					case 'span':
						if (!target.is('.disabled')) {
							var year = this.viewDate.getUTCFullYear(),
								month = this.viewDate.getUTCMonth(),
								day = this.viewDate.getUTCDate(),
								hours = this.viewDate.getUTCHours(),
								minutes = this.viewDate.getUTCMinutes(),
								seconds = this.viewDate.getUTCSeconds();

							if (target.is('.month')) {
								this.viewDate.setUTCDate(1);
								month = target.parent().find('span').index(target);
								day = this.viewDate.getUTCDate();
								this.viewDate.setUTCMonth(month);
								this.element.trigger({
									type: 'changeMonth',
									date: this.viewDate
								});
								if (this.viewSelect >= 3) {
									this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
								}
							} else if (target.is('.year')) {
								this.viewDate.setUTCDate(1);
								year = parseInt(target.text(), 10) || 0;
								this.viewDate.setUTCFullYear(year);
								this.element.trigger({
									type: 'changeYear',
									date: this.viewDate
								});
								if (this.viewSelect >= 4) {
									this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
								}
							} else if (target.is('.hour')) {
								hours = parseInt(target.text(), 10) || 0;
								if (target.hasClass('hour_am') || target.hasClass('hour_pm')) {
									if (hours == 12 && target.hasClass('hour_am')) {
										hours = 0;
									} else if (hours != 12 && target.hasClass('hour_pm')) {
										hours += 12;
									}
								}
								this.viewDate.setUTCHours(hours);
								this.element.trigger({
									type: 'changeHour',
									date: this.viewDate
								});
								if (this.viewSelect >= 1) {
									this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
								}
							} else if (target.is('.minute')) {
								minutes = parseInt(target.text().substr(target.text().indexOf(':') + 1), 10) || 0;
								this.viewDate.setUTCMinutes(minutes);
								this.element.trigger({
									type: 'changeMinute',
									date: this.viewDate
								});
								if (this.viewSelect >= 0) {
									this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
								}
							}
							if (this.viewMode != 0) {
								var oldViewMode = this.viewMode;
								this.showMode(-1);
								this.fill();
								if (oldViewMode == this.viewMode && this.autoclose) {
									this.hide();
								}
							} else {
								this.fill();
								if (this.autoclose) {
									this.hide();
								}
							}
						}
						break;
					case 'td':
						if (target.is('.day') && !target.is('.disabled')) {
							var day = parseInt(target.text(), 10) || 1;
							var year = this.viewDate.getUTCFullYear(),
								month = this.viewDate.getUTCMonth(),
								hours = this.viewDate.getUTCHours(),
								minutes = this.viewDate.getUTCMinutes(),
								seconds = this.viewDate.getUTCSeconds();
							if (target.is('.old')) {
								if (month === 0) {
									month = 11;
									year -= 1;
								} else {
									month -= 1;
								}
							} else if (target.is('.new')) {
								if (month == 11) {
									month = 0;
									year += 1;
								} else {
									month += 1;
								}
							}
							this.viewDate.setUTCFullYear(year);
							this.viewDate.setUTCMonth(month, day);
							this.element.trigger({
								type: 'changeDay',
								date: this.viewDate
							});
							if (this.viewSelect >= 2) {
								this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
							}
						}
						var oldViewMode = this.viewMode;
						this.showMode(-1);
						this.fill();
						if (oldViewMode == this.viewMode && this.autoclose) {
							this.hide();
						}
						break;
				}
			}
		},

		_setDate: function (date, which) {
			if (!which || which == 'date')
				this.date = date;
			if (!which || which == 'view')
				this.viewDate = date;
			this.fill();
			this.setValue();
			var element;
			if (this.isInput) {
				element = this.element;
			} else if (this.component) {
				element = this.element.find('input');
			}
			if (element) {
				element.change();
				if (this.autoclose && (!which || which == 'date')) {
					//this.hide();
				}
			}
			this.element.trigger({
				type: 'changeDate',
				date: this.date
			});
		},

		moveMinute: function (date, dir) {
			if (!dir) return date;
			var new_date = new Date(date.valueOf());
			//dir = dir > 0 ? 1 : -1;
			new_date.setUTCMinutes(new_date.getUTCMinutes() + (dir * this.minuteStep));
			return new_date;
		},

		moveHour: function (date, dir) {
			if (!dir) return date;
			var new_date = new Date(date.valueOf());
			//dir = dir > 0 ? 1 : -1;
			new_date.setUTCHours(new_date.getUTCHours() + dir);
			return new_date;
		},

		moveDate: function (date, dir) {
			if (!dir) return date;
			var new_date = new Date(date.valueOf());
			//dir = dir > 0 ? 1 : -1;
			new_date.setUTCDate(new_date.getUTCDate() + dir);
			return new_date;
		},

		moveMonth: function (date, dir) {
			if (!dir) return date;
			var new_date = new Date(date.valueOf()),
				day = new_date.getUTCDate(),
				month = new_date.getUTCMonth(),
				mag = Math.abs(dir),
				new_month, test;
			dir = dir > 0 ? 1 : -1;
			if (mag == 1) {
				test = dir == -1
					// If going back one month, make sure month is not current month
					// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
					? function () {
					return new_date.getUTCMonth() == month;
				}
					// If going forward one month, make sure month is as expected
					// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
					: function () {
					return new_date.getUTCMonth() != new_month;
				};
				new_month = month + dir;
				new_date.setUTCMonth(new_month);
				// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
				if (new_month < 0 || new_month > 11)
					new_month = (new_month + 12) % 12;
			} else {
				// For magnitudes >1, move one month at a time...
				for (var i = 0; i < mag; i++)
					// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
					new_date = this.moveMonth(new_date, dir);
				// ...then reset the day, keeping it in the new month
				new_month = new_date.getUTCMonth();
				new_date.setUTCDate(day);
				test = function () {
					return new_month != new_date.getUTCMonth();
				};
			}
			// Common date-resetting loop -- if date is beyond end of month, make it
			// end of month
			while (test()) {
				new_date.setUTCDate(--day);
				new_date.setUTCMonth(new_month);
			}
			return new_date;
		},

		moveYear: function (date, dir) {
			return this.moveMonth(date, dir * 12);
		},

		dateWithinRange: function (date) {
			return date >= this.startDate && date <= this.endDate;
		},

		keydown: function (e) {
			if (this.picker.is(':not(:visible)')) {
				if (e.keyCode == 27) // allow escape to hide and re-show picker
					this.show();
				return;
			}
			var dateChanged = false,
				dir, day, month,
				newDate, newViewDate;
			switch (e.keyCode) {
				case 27: // escape
					this.hide();
					e.preventDefault();
					break;
				case 37: // left
				case 39: // right
					if (!this.keyboardNavigation) break;
					dir = e.keyCode == 37 ? -1 : 1;
					viewMode = this.viewMode;
					if (e.ctrlKey) {
						viewMode += 2;
					} else if (e.shiftKey) {
						viewMode += 1;
					}
					if (viewMode == 4) {
						newDate = this.moveYear(this.date, dir);
						newViewDate = this.moveYear(this.viewDate, dir);
					} else if (viewMode == 3) {
						newDate = this.moveMonth(this.date, dir);
						newViewDate = this.moveMonth(this.viewDate, dir);
					} else if (viewMode == 2) {
						newDate = this.moveDate(this.date, dir);
						newViewDate = this.moveDate(this.viewDate, dir);
					} else if (viewMode == 1) {
						newDate = this.moveHour(this.date, dir);
						newViewDate = this.moveHour(this.viewDate, dir);
					} else if (viewMode == 0) {
						newDate = this.moveMinute(this.date, dir);
						newViewDate = this.moveMinute(this.viewDate, dir);
					}
					if (this.dateWithinRange(newDate)) {
						this.date = newDate;
						this.viewDate = newViewDate;
						this.setValue();
						this.update();
						e.preventDefault();
						dateChanged = true;
					}
					break;
				case 38: // up
				case 40: // down
					if (!this.keyboardNavigation) break;
					dir = e.keyCode == 38 ? -1 : 1;
					viewMode = this.viewMode;
					if (e.ctrlKey) {
						viewMode += 2;
					} else if (e.shiftKey) {
						viewMode += 1;
					}
					if (viewMode == 4) {
						newDate = this.moveYear(this.date, dir);
						newViewDate = this.moveYear(this.viewDate, dir);
					} else if (viewMode == 3) {
						newDate = this.moveMonth(this.date, dir);
						newViewDate = this.moveMonth(this.viewDate, dir);
					} else if (viewMode == 2) {
						newDate = this.moveDate(this.date, dir * 7);
						newViewDate = this.moveDate(this.viewDate, dir * 7);
					} else if (viewMode == 1) {
						if (this.showMeridian) {
							newDate = this.moveHour(this.date, dir * 6);
							newViewDate = this.moveHour(this.viewDate, dir * 6);
						} else {
							newDate = this.moveHour(this.date, dir * 4);
							newViewDate = this.moveHour(this.viewDate, dir * 4);
						}
					} else if (viewMode == 0) {
						newDate = this.moveMinute(this.date, dir * 4);
						newViewDate = this.moveMinute(this.viewDate, dir * 4);
					}
					if (this.dateWithinRange(newDate)) {
						this.date = newDate;
						this.viewDate = newViewDate;
						this.setValue();
						this.update();
						e.preventDefault();
						dateChanged = true;
					}
					break;
				case 13: // enter
					if (this.viewMode != 0) {
						var oldViewMode = this.viewMode;
						this.showMode(-1);
						this.fill();
						if (oldViewMode == this.viewMode && this.autoclose) {
							this.hide();
						}
					} else {
						this.fill();
						if (this.autoclose) {
							this.hide();
						}
					}
					e.preventDefault();
					break;
				case 9: // tab
					this.hide();
					break;
			}
			if (dateChanged) {
				var element;
				if (this.isInput) {
					element = this.element;
				} else if (this.component) {
					element = this.element.find('input');
				}
				if (element) {
					element.change();
				}
				this.element.trigger({
					type: 'changeDate',
					date: this.date
				});
			}
		},

		showMode: function (dir) {
			if (dir) {
				var newViewMode = Math.max(0, Math.min(DPGlobal.modes.length - 1, this.viewMode + dir));
				if (newViewMode >= this.minView && newViewMode <= this.maxView) {
					this.element.trigger({
						type:        'changeMode',
						date:        this.viewDate,
						oldViewMode: this.viewMode,
						newViewMode: newViewMode
					});

					this.viewMode = newViewMode;
				}
			}
			/*
			 vitalets: fixing bug of very special conditions:
			 jquery 1.7.1 + webkit + show inline datetimepicker in bootstrap popover.
			 Method show() does not set display css correctly and datetimepicker is not shown.
			 Changed to .css('display', 'block') solve the problem.
			 See https://github.com/vitalets/x-editable/issues/37

			 In jquery 1.7.2+ everything works fine.
			 */
			//this.picker.find('>div').hide().filter('.datetimepicker-'+DPGlobal.modes[this.viewMode].clsName).show();
			this.picker.find('>div').hide().filter('.datetimepicker-' + DPGlobal.modes[this.viewMode].clsName).css('display', 'block');
			this.updateNavArrows();
		},

		reset: function (e) {
			this._setDate(null, 'date');
		},

		convertViewModeText:  function (viewMode) {
			switch (viewMode) {
				case 4:
					return 'decade';
				case 3:
					return 'year';
				case 2:
					return 'month';
				case 1:
					return 'day';
				case 0:
					return 'hour';
			}
		}
	};

	$.fn.datetimepicker = function (option) {
		var args = Array.apply(null, arguments);
		args.shift();
		var internal_return;
		this.each(function () {
			var $this = $(this),
				data = $this.data('datetimepicker'),
				options = typeof option == 'object' && option;
			if (!data) {
				$this.data('datetimepicker', (data = new Datetimepicker(this, $.extend({}, $.fn.datetimepicker.defaults, options))));
			}
			if (typeof option == 'string' && typeof data[option] == 'function') {
				internal_return = data[option].apply(data, args);
				if (internal_return !== undefined) {
					return false;
				}
			}
		});
		if (internal_return !== undefined)
			return internal_return;
		else
			return this;
	};

	$.fn.datetimepicker.defaults = {
	};
	$.fn.datetimepicker.Constructor = Datetimepicker;
	var dates = $.fn.datetimepicker.dates = {
		en: {
			days:        ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
			daysShort:   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
			daysMin:     ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
			months:      ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
			meridiem:    ["am", "pm"],
			suffix:      ["st", "nd", "rd", "th"],
			today:       "Today"
		}
	};

	var DPGlobal = {
		modes:            [
			{
				clsName: 'minutes',
				navFnc:  'Hours',
				navStep: 1
			},
			{
				clsName: 'hours',
				navFnc:  'Date',
				navStep: 1
			},
			{
				clsName: 'days',
				navFnc:  'Month',
				navStep: 1
			},
			{
				clsName: 'months',
				navFnc:  'FullYear',
				navStep: 1
			},
			{
				clsName: 'years',
				navFnc:  'FullYear',
				navStep: 10
			}
		],
		isLeapYear:       function (year) {
			return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0))
		},
		getDaysInMonth:   function (year, month) {
			return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
		},
		getDefaultFormat: function (type, field) {
			if (type == "standard") {
				if (field == 'input')
					return 'yyyy-mm-dd hh:ii';
				else
					return 'yyyy-mm-dd hh:ii:ss';
			} else if (type == "php") {
				if (field == 'input')
					return 'Y-m-d H:i';
				else
					return 'Y-m-d H:i:s';
			} else {
				throw new Error("Invalid format type.");
			}
		},
		validParts:       function (type) {
			if (type == "standard") {
				return /hh?|HH?|p|P|ii?|ss?|dd?|DD?|mm?|MM?|yy(?:yy)?/g;
			} else if (type == "php") {
				return /[dDjlNwzFmMnStyYaABgGhHis]/g;
			} else {
				throw new Error("Invalid format type.");
			}
		},
		nonpunctuation:   /[^ -\/:-@\[-`{-~\t\n\rTZ]+/g,
		parseFormat:      function (format, type) {
			// IE treats \0 as a string end in inputs (truncating the value),
			// so it's a bad format delimiter, anyway
			var separators = format.replace(this.validParts(type), '\0').split('\0'),
				parts = format.match(this.validParts(type));
			if (!separators || !separators.length || !parts || parts.length == 0) {
				throw new Error("Invalid date format.");
			}
			return {separators: separators, parts: parts};
		},
		parseDate:        function (date, format, language, type) {
			if (date instanceof Date) {
				var dateUTC = new Date(date.valueOf() - date.getTimezoneOffset() * 60000);
				dateUTC.setMilliseconds(0);
				return dateUTC;
			}
			if (/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)) {
				format = this.parseFormat('yyyy-mm-dd', type);
			}
			if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}$/.test(date)) {
				format = this.parseFormat('yyyy-mm-dd hh:ii', type);
			}
			if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}\:\d{1,2}[Z]{0,1}$/.test(date)) {
				format = this.parseFormat('yyyy-mm-dd hh:ii:ss', type);
			}
			if (/^[-+]\d+[dmwy]([\s,]+[-+]\d+[dmwy])*$/.test(date)) {
				var part_re = /([-+]\d+)([dmwy])/,
					parts = date.match(/([-+]\d+)([dmwy])/g),
					part, dir;
				date = new Date();
				for (var i = 0; i < parts.length; i++) {
					part = part_re.exec(parts[i]);
					dir = parseInt(part[1]);
					switch (part[2]) {
						case 'd':
							date.setUTCDate(date.getUTCDate() + dir);
							break;
						case 'm':
							date = Datetimepicker.prototype.moveMonth.call(Datetimepicker.prototype, date, dir);
							break;
						case 'w':
							date.setUTCDate(date.getUTCDate() + dir * 7);
							break;
						case 'y':
							date = Datetimepicker.prototype.moveYear.call(Datetimepicker.prototype, date, dir);
							break;
					}
				}
				return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), 0);
			}
			var parts = date && date.match(this.nonpunctuation) || [],
				date = new Date(0, 0, 0, 0, 0, 0, 0),
				parsed = {},
				setters_order = ['hh', 'h', 'ii', 'i', 'ss', 's', 'yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'D', 'DD', 'd', 'dd', 'H', 'HH', 'p', 'P'],
				setters_map = {
					hh:   function (d, v) {
						return d.setUTCHours(v);
					},
					h:    function (d, v) {
						return d.setUTCHours(v);
					},
					HH:   function (d, v) {
						return d.setUTCHours(v == 12 ? 0 : v);
					},
					H:    function (d, v) {
						return d.setUTCHours(v == 12 ? 0 : v);
					},
					ii:   function (d, v) {
						return d.setUTCMinutes(v);
					},
					i:    function (d, v) {
						return d.setUTCMinutes(v);
					},
					ss:   function (d, v) {
						return d.setUTCSeconds(v);
					},
					s:    function (d, v) {
						return d.setUTCSeconds(v);
					},
					yyyy: function (d, v) {
						return d.setUTCFullYear(v);
					},
					yy:   function (d, v) {
						return d.setUTCFullYear(2000 + v);
					},
					m:    function (d, v) {
						v -= 1;
						while (v < 0) v += 12;
						v %= 12;
						d.setUTCMonth(v);
						while (d.getUTCMonth() != v)
							if (isNaN(d.getUTCMonth()))
								return d;
							else
								d.setUTCDate(d.getUTCDate() - 1);
						return d;
					},
					d:    function (d, v) {
						return d.setUTCDate(v);
					},
					p:    function (d, v) {
						return d.setUTCHours(v == 1 ? d.getUTCHours() + 12 : d.getUTCHours());
					}
				},
				val, filtered, part;
			setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
			setters_map['dd'] = setters_map['d'];
			setters_map['P'] = setters_map['p'];
			date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());
			if (parts.length == format.parts.length) {
				for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
					val = parseInt(parts[i], 10);
					part = format.parts[i];
					if (isNaN(val)) {
						switch (part) {
							case 'MM':
								filtered = $(dates[language].months).filter(function () {
									var m = this.slice(0, parts[i].length),
										p = parts[i].slice(0, m.length);
									return m == p;
								});
								val = $.inArray(filtered[0], dates[language].months) + 1;
								break;
							case 'M':
								filtered = $(dates[language].monthsShort).filter(function () {
									var m = this.slice(0, parts[i].length),
										p = parts[i].slice(0, m.length);
									return m.toLowerCase() == p.toLowerCase();
								});
								val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
								break;
							case 'p':
							case 'P':
								val = $.inArray(parts[i].toLowerCase(), dates[language].meridiem);
								break;
						}
					}
					parsed[part] = val;
				}
				for (var i = 0, s; i < setters_order.length; i++) {
					s = setters_order[i];
					if (s in parsed && !isNaN(parsed[s]))
						setters_map[s](date, parsed[s])
				}
			}
			return date;
		},
		formatDate:       function (date, format, language, type) {
			if (date == null) {
				return '';
			}
			var val;
			if (type == 'standard') {
				val = {
					// year
					yy:   date.getUTCFullYear().toString().substring(2),
					yyyy: date.getUTCFullYear(),
					// month
					m:    date.getUTCMonth() + 1,
					M:    dates[language].monthsShort[date.getUTCMonth()],
					MM:   dates[language].months[date.getUTCMonth()],
					// day
					d:    date.getUTCDate(),
					D:    dates[language].daysShort[date.getUTCDay()],
					DD:   dates[language].days[date.getUTCDay()],
					p:    (dates[language].meridiem.length == 2 ? dates[language].meridiem[date.getUTCHours() < 12 ? 0 : 1] : ''),
					// hour
					h:    date.getUTCHours(),
					// minute
					i:    date.getUTCMinutes(),
					// second
					s:    date.getUTCSeconds()
				};

				if (dates[language].meridiem.length == 2) {
					val.H = (val.h % 12 == 0 ? 12 : val.h % 12);
				}
				else {
					val.H = val.h;
				}
				val.HH = (val.H < 10 ? '0' : '') + val.H;
				val.P = val.p.toUpperCase();
				val.hh = (val.h < 10 ? '0' : '') + val.h;
				val.ii = (val.i < 10 ? '0' : '') + val.i;
				val.ss = (val.s < 10 ? '0' : '') + val.s;
				val.dd = (val.d < 10 ? '0' : '') + val.d;
				val.mm = (val.m < 10 ? '0' : '') + val.m;
			} else if (type == 'php') {
				// php format
				val = {
					// year
					y: date.getUTCFullYear().toString().substring(2),
					Y: date.getUTCFullYear(),
					// month
					F: dates[language].months[date.getUTCMonth()],
					M: dates[language].monthsShort[date.getUTCMonth()],
					n: date.getUTCMonth() + 1,
					t: DPGlobal.getDaysInMonth(date.getUTCFullYear(), date.getUTCMonth()),
					// day
					j: date.getUTCDate(),
					l: dates[language].days[date.getUTCDay()],
					D: dates[language].daysShort[date.getUTCDay()],
					w: date.getUTCDay(), // 0 -> 6
					N: (date.getUTCDay() == 0 ? 7 : date.getUTCDay()),       // 1 -> 7
					S: (date.getUTCDate() % 10 <= dates[language].suffix.length ? dates[language].suffix[date.getUTCDate() % 10 - 1] : ''),
					// hour
					a: (dates[language].meridiem.length == 2 ? dates[language].meridiem[date.getUTCHours() < 12 ? 0 : 1] : ''),
					g: (date.getUTCHours() % 12 == 0 ? 12 : date.getUTCHours() % 12),
					G: date.getUTCHours(),
					// minute
					i: date.getUTCMinutes(),
					// second
					s: date.getUTCSeconds()
				};
				val.m = (val.n < 10 ? '0' : '') + val.n;
				val.d = (val.j < 10 ? '0' : '') + val.j;
				val.A = val.a.toString().toUpperCase();
				val.h = (val.g < 10 ? '0' : '') + val.g;
				val.H = (val.G < 10 ? '0' : '') + val.G;
				val.i = (val.i < 10 ? '0' : '') + val.i;
				val.s = (val.s < 10 ? '0' : '') + val.s;
			} else {
				throw new Error("Invalid format type.");
			}
			var date = [],
				seps = $.extend([], format.separators);
			for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
				if (seps.length) {
					date.push(seps.shift());
				}
				date.push(val[format.parts[i]]);
			}
			if (seps.length) {
				date.push(seps.shift());
			}
			return date.join('');
		},
		convertViewMode:  function (viewMode) {
			switch (viewMode) {
				case 4:
				case 'decade':
					viewMode = 4;
					break;
				case 3:
				case 'year':
					viewMode = 3;
					break;
				case 2:
				case 'month':
					viewMode = 2;
					break;
				case 1:
				case 'day':
					viewMode = 1;
					break;
				case 0:
				case 'hour':
					viewMode = 0;
					break;
			}

			return viewMode;
		},
		headTemplate:     '<thead>' +
							  '<tr>' +
							  '<th class="prev"><i class="{leftArrow}"/></th>' +
							  '<th colspan="5" class="switch"></th>' +
							  '<th class="next"><i class="{rightArrow}"/></th>' +
							  '</tr>' +
			'</thead>',
		headTemplateV3:   '<thead>' +
							  '<tr>' +
							  '<th class="prev"><span class="{iconType} {leftArrow}"></span> </th>' +
							  '<th colspan="5" class="switch"></th>' +
							  '<th class="next"><span class="{iconType} {rightArrow}"></span> </th>' +
							  '</tr>' +
			'</thead>',
		contTemplate:     '<tbody><tr><td colspan="7"></td></tr></tbody>',
		footTemplate:     '<tfoot><tr><th colspan="7" class="today"></th></tr></tfoot>'
	};
	DPGlobal.template = '<div class="datetimepicker">' +
		'<div class="datetimepicker-minutes">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-hours">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-days">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplate +
		'<tbody></tbody>' +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-months">' +
		'<table class="table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-years">' +
		'<table class="table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'</div>';
	DPGlobal.templateV3 = '<div class="datetimepicker">' +
		'<div class="datetimepicker-minutes">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplateV3 +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-hours">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplateV3 +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-days">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplateV3 +
		'<tbody></tbody>' +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-months">' +
		'<table class="table-condensed">' +
		DPGlobal.headTemplateV3 +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-years">' +
		'<table class="table-condensed">' +
		DPGlobal.headTemplateV3 +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'</div>';
	$.fn.datetimepicker.DPGlobal = DPGlobal;

	/* DATETIMEPICKER NO CONFLICT
	 * =================== */

	$.fn.datetimepicker.noConflict = function () {
		$.fn.datetimepicker = old;
		return this;
	};

	/* DATETIMEPICKER DATA-API
	 * ================== */

	$(document).on(
		'focus.datetimepicker.data-api click.datetimepicker.data-api',
		'[data-provide="datetimepicker"]',
		function (e) {
			var $this = $(this);
			if ($this.data('datetimepicker')) return;
			e.preventDefault();
			// component click requires us to explicitly show it
			$this.datetimepicker('show');
		}
	);
	$(function () {
		$('[data-provide="datetimepicker-inline"]').datetimepicker();
	});

}(window.jQuery);

/**
 * Russian translation for bootstrap-datetimepicker
 * Victor Taranenko <darwin@snowdale.com>
 */
;(function($){
    $.fn.datetimepicker.dates['ru'] = {
        days: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"],
        daysShort: ["Вск", "Пнд", "Втр", "Срд", "Чтв", "Птн", "Суб", "Вск"],
        daysMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"],
        months: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
        monthsShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
        today: "Сегодня",
        suffix: [],
        meridiem: []
    };
}(jQuery));
/*!
 * jScrollPane - v2.0.19 - 2013-11-16
 * http://jscrollpane.kelvinluck.com/
 *
 * Copyright (c) 2013 Kelvin Luck
 * Dual licensed under the MIT or GPL licenses.
 */
!function(a,b,c){a.fn.jScrollPane=function(d){function e(d,e){function f(b){var e,h,j,l,m,n,q=!1,r=!1;if(P=b,Q===c)m=d.scrollTop(),n=d.scrollLeft(),d.css({overflow:"hidden",padding:0}),R=d.innerWidth()+tb,S=d.innerHeight(),d.width(R),Q=a('<div class="jspPane" />').css("padding",sb).append(d.children()),T=a('<div class="jspContainer" />').css({width:R+"px",height:S+"px"}).append(Q).appendTo(d);else{if(d.css("width",""),q=P.stickToBottom&&C(),r=P.stickToRight&&D(),l=d.innerWidth()+tb!=R||d.outerHeight()!=S,l&&(R=d.innerWidth()+tb,S=d.innerHeight(),T.css({width:R+"px",height:S+"px"})),!l&&ub==U&&Q.outerHeight()==V)return d.width(R),void 0;ub=U,Q.css("width",""),d.width(R),T.find(">.jspVerticalBar,>.jspHorizontalBar").remove().end()}Q.css("overflow","auto"),U=b.contentWidth?b.contentWidth:Q[0].scrollWidth,V=Q[0].scrollHeight,Q.css("overflow",""),W=U/R,X=V/S,Y=X>1,Z=W>1,Z||Y?(d.addClass("jspScrollable"),e=P.maintainPosition&&(ab||db),e&&(h=A(),j=B()),g(),i(),k(),e&&(y(r?U-R:h,!1),x(q?V-S:j,!1)),H(),E(),N(),P.enableKeyboardNavigation&&J(),P.clickOnTrack&&o(),L(),P.hijackInternalLinks&&M()):(d.removeClass("jspScrollable"),Q.css({top:0,left:0,width:T.width()-tb}),F(),I(),K(),p()),P.autoReinitialise&&!rb?rb=setInterval(function(){f(P)},P.autoReinitialiseDelay):!P.autoReinitialise&&rb&&clearInterval(rb),m&&d.scrollTop(0)&&x(m,!1),n&&d.scrollLeft(0)&&y(n,!1),d.trigger("jsp-initialised",[Z||Y])}function g(){Y&&(T.append(a('<div class="jspVerticalBar" />').append(a('<div class="jspCap jspCapTop" />'),a('<div class="jspTrack" />').append(a('<div class="jspDrag" />').append(a('<div class="jspDragTop" />'),a('<div class="jspDragBottom" />'))),a('<div class="jspCap jspCapBottom" />'))),eb=T.find(">.jspVerticalBar"),fb=eb.find(">.jspTrack"),$=fb.find(">.jspDrag"),P.showArrows&&(jb=a('<a class="jspArrow jspArrowUp" />').bind("mousedown.jsp",m(0,-1)).bind("click.jsp",G),kb=a('<a class="jspArrow jspArrowDown" />').bind("mousedown.jsp",m(0,1)).bind("click.jsp",G),P.arrowScrollOnHover&&(jb.bind("mouseover.jsp",m(0,-1,jb)),kb.bind("mouseover.jsp",m(0,1,kb))),l(fb,P.verticalArrowPositions,jb,kb)),hb=S,T.find(">.jspVerticalBar>.jspCap:visible,>.jspVerticalBar>.jspArrow").each(function(){hb-=a(this).outerHeight()}),$.hover(function(){$.addClass("jspHover")},function(){$.removeClass("jspHover")}).bind("mousedown.jsp",function(b){a("html").bind("dragstart.jsp selectstart.jsp",G),$.addClass("jspActive");var c=b.pageY-$.position().top;return a("html").bind("mousemove.jsp",function(a){r(a.pageY-c,!1)}).bind("mouseup.jsp mouseleave.jsp",q),!1}),h())}function h(){fb.height(hb+"px"),ab=0,gb=P.verticalGutter+fb.outerWidth(),Q.width(R-gb-tb);try{0===eb.position().left&&Q.css("margin-left",gb+"px")}catch(a){}}function i(){Z&&(T.append(a('<div class="jspHorizontalBar" />').append(a('<div class="jspCap jspCapLeft" />'),a('<div class="jspTrack" />').append(a('<div class="jspDrag" />').append(a('<div class="jspDragLeft" />'),a('<div class="jspDragRight" />'))),a('<div class="jspCap jspCapRight" />'))),lb=T.find(">.jspHorizontalBar"),mb=lb.find(">.jspTrack"),bb=mb.find(">.jspDrag"),P.showArrows&&(pb=a('<a class="jspArrow jspArrowLeft" />').bind("mousedown.jsp",m(-1,0)).bind("click.jsp",G),qb=a('<a class="jspArrow jspArrowRight" />').bind("mousedown.jsp",m(1,0)).bind("click.jsp",G),P.arrowScrollOnHover&&(pb.bind("mouseover.jsp",m(-1,0,pb)),qb.bind("mouseover.jsp",m(1,0,qb))),l(mb,P.horizontalArrowPositions,pb,qb)),bb.hover(function(){bb.addClass("jspHover")},function(){bb.removeClass("jspHover")}).bind("mousedown.jsp",function(b){a("html").bind("dragstart.jsp selectstart.jsp",G),bb.addClass("jspActive");var c=b.pageX-bb.position().left;return a("html").bind("mousemove.jsp",function(a){t(a.pageX-c,!1)}).bind("mouseup.jsp mouseleave.jsp",q),!1}),nb=T.innerWidth(),j())}function j(){T.find(">.jspHorizontalBar>.jspCap:visible,>.jspHorizontalBar>.jspArrow").each(function(){nb-=a(this).outerWidth()}),mb.width(nb+"px"),db=0}function k(){if(Z&&Y){var b=mb.outerHeight(),c=fb.outerWidth();hb-=b,a(lb).find(">.jspCap:visible,>.jspArrow").each(function(){nb+=a(this).outerWidth()}),nb-=c,S-=c,R-=b,mb.parent().append(a('<div class="jspCorner" />').css("width",b+"px")),h(),j()}Z&&Q.width(T.outerWidth()-tb+"px"),V=Q.outerHeight(),X=V/S,Z&&(ob=Math.ceil(1/W*nb),ob>P.horizontalDragMaxWidth?ob=P.horizontalDragMaxWidth:ob<P.horizontalDragMinWidth&&(ob=P.horizontalDragMinWidth),bb.width(ob+"px"),cb=nb-ob,u(db)),Y&&(ib=Math.ceil(1/X*hb),ib>P.verticalDragMaxHeight?ib=P.verticalDragMaxHeight:ib<P.verticalDragMinHeight&&(ib=P.verticalDragMinHeight),$.height(ib+"px"),_=hb-ib,s(ab))}function l(a,b,c,d){var e,f="before",g="after";"os"==b&&(b=/Mac/.test(navigator.platform)?"after":"split"),b==f?g=b:b==g&&(f=b,e=c,c=d,d=e),a[f](c)[g](d)}function m(a,b,c){return function(){return n(a,b,this,c),this.blur(),!1}}function n(b,c,d,e){d=a(d).addClass("jspActive");var f,g,h=!0,i=function(){0!==b&&vb.scrollByX(b*P.arrowButtonSpeed),0!==c&&vb.scrollByY(c*P.arrowButtonSpeed),g=setTimeout(i,h?P.initialDelay:P.arrowRepeatFreq),h=!1};i(),f=e?"mouseout.jsp":"mouseup.jsp",e=e||a("html"),e.bind(f,function(){d.removeClass("jspActive"),g&&clearTimeout(g),g=null,e.unbind(f)})}function o(){p(),Y&&fb.bind("mousedown.jsp",function(b){if(b.originalTarget===c||b.originalTarget==b.currentTarget){var d,e=a(this),f=e.offset(),g=b.pageY-f.top-ab,h=!0,i=function(){var a=e.offset(),c=b.pageY-a.top-ib/2,f=S*P.scrollPagePercent,k=_*f/(V-S);if(0>g)ab-k>c?vb.scrollByY(-f):r(c);else{if(!(g>0))return j(),void 0;c>ab+k?vb.scrollByY(f):r(c)}d=setTimeout(i,h?P.initialDelay:P.trackClickRepeatFreq),h=!1},j=function(){d&&clearTimeout(d),d=null,a(document).unbind("mouseup.jsp",j)};return i(),a(document).bind("mouseup.jsp",j),!1}}),Z&&mb.bind("mousedown.jsp",function(b){if(b.originalTarget===c||b.originalTarget==b.currentTarget){var d,e=a(this),f=e.offset(),g=b.pageX-f.left-db,h=!0,i=function(){var a=e.offset(),c=b.pageX-a.left-ob/2,f=R*P.scrollPagePercent,k=cb*f/(U-R);if(0>g)db-k>c?vb.scrollByX(-f):t(c);else{if(!(g>0))return j(),void 0;c>db+k?vb.scrollByX(f):t(c)}d=setTimeout(i,h?P.initialDelay:P.trackClickRepeatFreq),h=!1},j=function(){d&&clearTimeout(d),d=null,a(document).unbind("mouseup.jsp",j)};return i(),a(document).bind("mouseup.jsp",j),!1}})}function p(){mb&&mb.unbind("mousedown.jsp"),fb&&fb.unbind("mousedown.jsp")}function q(){a("html").unbind("dragstart.jsp selectstart.jsp mousemove.jsp mouseup.jsp mouseleave.jsp"),$&&$.removeClass("jspActive"),bb&&bb.removeClass("jspActive")}function r(a,b){Y&&(0>a?a=0:a>_&&(a=_),b===c&&(b=P.animateScroll),b?vb.animate($,"top",a,s):($.css("top",a),s(a)))}function s(a){a===c&&(a=$.position().top),T.scrollTop(0),ab=a;var b=0===ab,e=ab==_,f=a/_,g=-f*(V-S);(wb!=b||yb!=e)&&(wb=b,yb=e,d.trigger("jsp-arrow-change",[wb,yb,xb,zb])),v(b,e),Q.css("top",g),d.trigger("jsp-scroll-y",[-g,b,e]).trigger("scroll")}function t(a,b){Z&&(0>a?a=0:a>cb&&(a=cb),b===c&&(b=P.animateScroll),b?vb.animate(bb,"left",a,u):(bb.css("left",a),u(a)))}function u(a){a===c&&(a=bb.position().left),T.scrollTop(0),db=a;var b=0===db,e=db==cb,f=a/cb,g=-f*(U-R);(xb!=b||zb!=e)&&(xb=b,zb=e,d.trigger("jsp-arrow-change",[wb,yb,xb,zb])),w(b,e),Q.css("left",g),d.trigger("jsp-scroll-x",[-g,b,e]).trigger("scroll")}function v(a,b){P.showArrows&&(jb[a?"addClass":"removeClass"]("jspDisabled"),kb[b?"addClass":"removeClass"]("jspDisabled"))}function w(a,b){P.showArrows&&(pb[a?"addClass":"removeClass"]("jspDisabled"),qb[b?"addClass":"removeClass"]("jspDisabled"))}function x(a,b){var c=a/(V-S);r(c*_,b)}function y(a,b){var c=a/(U-R);t(c*cb,b)}function z(b,c,d){var e,f,g,h,i,j,k,l,m,n=0,o=0;try{e=a(b)}catch(p){return}for(f=e.outerHeight(),g=e.outerWidth(),T.scrollTop(0),T.scrollLeft(0);!e.is(".jspPane");)if(n+=e.position().top,o+=e.position().left,e=e.offsetParent(),/^body|html$/i.test(e[0].nodeName))return;h=B(),j=h+S,h>n||c?l=n-P.horizontalGutter:n+f>j&&(l=n-S+f+P.horizontalGutter),isNaN(l)||x(l,d),i=A(),k=i+R,i>o||c?m=o-P.horizontalGutter:o+g>k&&(m=o-R+g+P.horizontalGutter),isNaN(m)||y(m,d)}function A(){return-Q.position().left}function B(){return-Q.position().top}function C(){var a=V-S;return a>20&&a-B()<10}function D(){var a=U-R;return a>20&&a-A()<10}function E(){T.unbind(Bb).bind(Bb,function(a,b,c,d){var e=db,f=ab,g=a.deltaFactor||P.mouseWheelSpeed;return vb.scrollBy(c*g,-d*g,!1),e==db&&f==ab})}function F(){T.unbind(Bb)}function G(){return!1}function H(){Q.find(":input,a").unbind("focus.jsp").bind("focus.jsp",function(a){z(a.target,!1)})}function I(){Q.find(":input,a").unbind("focus.jsp")}function J(){function b(){var a=db,b=ab;switch(c){case 40:vb.scrollByY(P.keyboardSpeed,!1);break;case 38:vb.scrollByY(-P.keyboardSpeed,!1);break;case 34:case 32:vb.scrollByY(S*P.scrollPagePercent,!1);break;case 33:vb.scrollByY(-S*P.scrollPagePercent,!1);break;case 39:vb.scrollByX(P.keyboardSpeed,!1);break;case 37:vb.scrollByX(-P.keyboardSpeed,!1)}return e=a!=db||b!=ab}var c,e,f=[];Z&&f.push(lb[0]),Y&&f.push(eb[0]),Q.focus(function(){d.focus()}),d.attr("tabindex",0).unbind("keydown.jsp keypress.jsp").bind("keydown.jsp",function(d){if(d.target===this||f.length&&a(d.target).closest(f).length){var g=db,h=ab;switch(d.keyCode){case 40:case 38:case 34:case 32:case 33:case 39:case 37:c=d.keyCode,b();break;case 35:x(V-S),c=null;break;case 36:x(0),c=null}return e=d.keyCode==c&&g!=db||h!=ab,!e}}).bind("keypress.jsp",function(a){return a.keyCode==c&&b(),!e}),P.hideFocus?(d.css("outline","none"),"hideFocus"in T[0]&&d.attr("hideFocus",!0)):(d.css("outline",""),"hideFocus"in T[0]&&d.attr("hideFocus",!1))}function K(){d.attr("tabindex","-1").removeAttr("tabindex").unbind("keydown.jsp keypress.jsp")}function L(){if(location.hash&&location.hash.length>1){var b,c,d=escape(location.hash.substr(1));try{b=a("#"+d+', a[name="'+d+'"]')}catch(e){return}b.length&&Q.find(d)&&(0===T.scrollTop()?c=setInterval(function(){T.scrollTop()>0&&(z(b,!0),a(document).scrollTop(T.position().top),clearInterval(c))},50):(z(b,!0),a(document).scrollTop(T.position().top)))}}function M(){a(document.body).data("jspHijack")||(a(document.body).data("jspHijack",!0),a(document.body).delegate("a[href*=#]","click",function(c){var d,e,f,g,h,i,j=this.href.substr(0,this.href.indexOf("#")),k=location.href;if(-1!==location.href.indexOf("#")&&(k=location.href.substr(0,location.href.indexOf("#"))),j===k){d=escape(this.href.substr(this.href.indexOf("#")+1));try{e=a("#"+d+', a[name="'+d+'"]')}catch(l){return}e.length&&(f=e.closest(".jspScrollable"),g=f.data("jsp"),g.scrollToElement(e,!0),f[0].scrollIntoView&&(h=a(b).scrollTop(),i=e.offset().top,(h>i||i>h+a(b).height())&&f[0].scrollIntoView()),c.preventDefault())}}))}function N(){var a,b,c,d,e,f=!1;T.unbind("touchstart.jsp touchmove.jsp touchend.jsp click.jsp-touchclick").bind("touchstart.jsp",function(g){var h=g.originalEvent.touches[0];a=A(),b=B(),c=h.pageX,d=h.pageY,e=!1,f=!0}).bind("touchmove.jsp",function(g){if(f){var h=g.originalEvent.touches[0],i=db,j=ab;return vb.scrollTo(a+c-h.pageX,b+d-h.pageY),e=e||Math.abs(c-h.pageX)>5||Math.abs(d-h.pageY)>5,i==db&&j==ab}}).bind("touchend.jsp",function(){f=!1}).bind("click.jsp-touchclick",function(){return e?(e=!1,!1):void 0})}function O(){var a=B(),b=A();d.removeClass("jspScrollable").unbind(".jsp"),d.replaceWith(Ab.append(Q.children())),Ab.scrollTop(a),Ab.scrollLeft(b),rb&&clearInterval(rb)}var P,Q,R,S,T,U,V,W,X,Y,Z,$,_,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb=this,wb=!0,xb=!0,yb=!1,zb=!1,Ab=d.clone(!1,!1).empty(),Bb=a.fn.mwheelIntent?"mwheelIntent.jsp":"mousewheel.jsp";"border-box"===d.css("box-sizing")?(sb=0,tb=0):(sb=d.css("paddingTop")+" "+d.css("paddingRight")+" "+d.css("paddingBottom")+" "+d.css("paddingLeft"),tb=(parseInt(d.css("paddingLeft"),10)||0)+(parseInt(d.css("paddingRight"),10)||0)),a.extend(vb,{reinitialise:function(b){b=a.extend({},P,b),f(b)},scrollToElement:function(a,b,c){z(a,b,c)},scrollTo:function(a,b,c){y(a,c),x(b,c)},scrollToX:function(a,b){y(a,b)},scrollToY:function(a,b){x(a,b)},scrollToPercentX:function(a,b){y(a*(U-R),b)},scrollToPercentY:function(a,b){x(a*(V-S),b)},scrollBy:function(a,b,c){vb.scrollByX(a,c),vb.scrollByY(b,c)},scrollByX:function(a,b){var c=A()+Math[0>a?"floor":"ceil"](a),d=c/(U-R);t(d*cb,b)},scrollByY:function(a,b){var c=B()+Math[0>a?"floor":"ceil"](a),d=c/(V-S);r(d*_,b)},positionDragX:function(a,b){t(a,b)},positionDragY:function(a,b){r(a,b)},animate:function(a,b,c,d){var e={};e[b]=c,a.animate(e,{duration:P.animateDuration,easing:P.animateEase,queue:!1,step:d})},getContentPositionX:function(){return A()},getContentPositionY:function(){return B()},getContentWidth:function(){return U},getContentHeight:function(){return V},getPercentScrolledX:function(){return A()/(U-R)},getPercentScrolledY:function(){return B()/(V-S)},getIsScrollableH:function(){return Z},getIsScrollableV:function(){return Y},getContentPane:function(){return Q},scrollToBottom:function(a){r(_,a)},hijackInternalLinks:a.noop,destroy:function(){O()}}),f(e)}return d=a.extend({},a.fn.jScrollPane.defaults,d),a.each(["arrowButtonSpeed","trackClickSpeed","keyboardSpeed"],function(){d[this]=d[this]||d.speed}),this.each(function(){var b=a(this),c=b.data("jsp");c?c.reinitialise(d):(a("script",b).filter('[type="text/javascript"],:not([type])').remove(),c=new e(b,d),b.data("jsp",c))})},a.fn.jScrollPane.defaults={showArrows:!1,maintainPosition:!0,stickToBottom:!1,stickToRight:!1,clickOnTrack:!0,autoReinitialise:!1,autoReinitialiseDelay:500,verticalDragMinHeight:0,verticalDragMaxHeight:99999,horizontalDragMinWidth:0,horizontalDragMaxWidth:99999,contentWidth:c,animateScroll:!1,animateDuration:300,animateEase:"linear",hijackInternalLinks:!1,verticalGutter:4,horizontalGutter:4,mouseWheelSpeed:3,arrowButtonSpeed:0,arrowRepeatFreq:50,arrowScrollOnHover:!1,trackClickSpeed:0,trackClickRepeatFreq:70,verticalArrowPositions:"split",horizontalArrowPositions:"split",enableKeyboardNavigation:!0,hideFocus:!1,keyboardSpeed:0,initialDelay:300,speed:30,scrollPagePercent:.8}}(jQuery,this);
/*! Copyright (c) 2013 Brandon Aaron (http://brandon.aaron.sh)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Version: 3.1.9
 *
 * Requires: jQuery 1.2.2+
 */

(function (factory) {
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.9',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
        },

        getLineHeight: function(elem) {
            return parseInt($(elem)['offsetParent' in $.fn ? 'offsetParent' : 'parent']().css('fontSize'), 10);
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));


/**
 * @author trixta
 * @version 1.2
 */
(function($){

var mwheelI = {
			pos: [-260, -260]
		},
	minDif 	= 3,
	doc 	= document,
	root 	= doc.documentElement,
	body 	= doc.body,
	longDelay, shortDelay
;

function unsetPos(){
	if(this === mwheelI.elem){
		mwheelI.pos = [-260, -260];
		mwheelI.elem = false;
		minDif = 3;
	}
}

$.event.special.mwheelIntent = {
	setup: function(){
		var jElm = $(this).bind('mousewheel', $.event.special.mwheelIntent.handler);
		if( this !== doc && this !== root && this !== body ){
			jElm.bind('mouseleave', unsetPos);
		}
		jElm = null;
        return true;
    },
	teardown: function(){
        $(this)
			.unbind('mousewheel', $.event.special.mwheelIntent.handler)
			.unbind('mouseleave', unsetPos)
		;
        return true;
    },
    handler: function(e, d){
		var pos = [e.clientX, e.clientY];
		if( this === mwheelI.elem || Math.abs(mwheelI.pos[0] - pos[0]) > minDif || Math.abs(mwheelI.pos[1] - pos[1]) > minDif ){
            mwheelI.elem = this;
			mwheelI.pos = pos;
			minDif = 250;
			
			clearTimeout(shortDelay);
			shortDelay = setTimeout(function(){
				minDif = 10;
			}, 200);
			clearTimeout(longDelay);
			longDelay = setTimeout(function(){
				minDif = 3;
			}, 1500);
			e = $.extend({}, e, {type: 'mwheelIntent'});
            return ($.event.dispatch || $.event.handle).apply(this, arguments);
		}
    }
};
$.fn.extend({
	mwheelIntent: function(fn) {
		return fn ? this.bind("mwheelIntent", fn) : this.trigger("mwheelIntent");
	},
	
	unmwheelIntent: function(fn) {
		return this.unbind("mwheelIntent", fn);
	}
});

$(function(){
	body = doc.body;
	//assume that document is always scrollable, doesn't hurt if not
	$(doc).bind('mwheelIntent.mwheelIntentDefault', $.noop);
});
})(jQuery);

//! moment.js
//! version : 2.8.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (undefined) {
    /************************************
        Constants
    ************************************/

    var moment,
        VERSION = '2.8.1',
        // the global-scope this is NOT the global object in Node.js
        globalScope = typeof global !== 'undefined' ? global : this,
        oldGlobalMoment,
        round = Math.round,
        i,

        YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,

        // internal storage for locale config files
        locales = {},

        // extra moment internal properties (plugins register props here)
        momentProperties = [],

        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports),

        // ASP.NET json date format regex
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

        // format tokens
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,

        // parsing token regexes
        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
        parseTokenDigits = /\d+/, // nonzero number of digits
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        parseTokenT = /T/i, // T (ISO separator)
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        parseTokenOrdinal = /\d{1,2}/,

        //strict parsing regexes
        parseTokenOneDigit = /\d/, // 0 - 9
        parseTokenTwoDigits = /\d\d/, // 00 - 99
        parseTokenThreeDigits = /\d{3}/, // 000 - 999
        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,

        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
            ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
            ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d{2}/],
            ['YYYY-DDD', /\d{4}-\d{3}/]
        ],

        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
            ['HH:mm', /(T| )\d\d:\d\d/],
            ['HH', /(T| )\d\d/]
        ],

        // timezone chunker "+10:00" > ["10", "00"] or "-1530" > ["-15", "30"]
        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

        // getter and setter names
        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
        unitMillisecondFactors = {
            'Milliseconds' : 1,
            'Seconds' : 1e3,
            'Minutes' : 6e4,
            'Hours' : 36e5,
            'Days' : 864e5,
            'Months' : 2592e6,
            'Years' : 31536e6
        },

        unitAliases = {
            ms : 'millisecond',
            s : 'second',
            m : 'minute',
            h : 'hour',
            d : 'day',
            D : 'date',
            w : 'week',
            W : 'isoWeek',
            M : 'month',
            Q : 'quarter',
            y : 'year',
            DDD : 'dayOfYear',
            e : 'weekday',
            E : 'isoWeekday',
            gg: 'weekYear',
            GG: 'isoWeekYear'
        },

        camelFunctions = {
            dayofyear : 'dayOfYear',
            isoweekday : 'isoWeekday',
            isoweek : 'isoWeek',
            weekyear : 'weekYear',
            isoweekyear : 'isoWeekYear'
        },

        // format function strings
        formatFunctions = {},

        // default relative time thresholds
        relativeTimeThresholds = {
            s: 45,  // seconds to minute
            m: 45,  // minutes to hour
            h: 22,  // hours to day
            d: 26,  // days to month
            M: 11   // months to year
        },

        // tokens to ordinalize and pad
        ordinalizeTokens = 'DDD w W M D d'.split(' '),
        paddedTokens = 'M D H h m s w W'.split(' '),

        formatTokenFunctions = {
            M    : function () {
                return this.month() + 1;
            },
            MMM  : function (format) {
                return this.localeData().monthsShort(this, format);
            },
            MMMM : function (format) {
                return this.localeData().months(this, format);
            },
            D    : function () {
                return this.date();
            },
            DDD  : function () {
                return this.dayOfYear();
            },
            d    : function () {
                return this.day();
            },
            dd   : function (format) {
                return this.localeData().weekdaysMin(this, format);
            },
            ddd  : function (format) {
                return this.localeData().weekdaysShort(this, format);
            },
            dddd : function (format) {
                return this.localeData().weekdays(this, format);
            },
            w    : function () {
                return this.week();
            },
            W    : function () {
                return this.isoWeek();
            },
            YY   : function () {
                return leftZeroFill(this.year() % 100, 2);
            },
            YYYY : function () {
                return leftZeroFill(this.year(), 4);
            },
            YYYYY : function () {
                return leftZeroFill(this.year(), 5);
            },
            YYYYYY : function () {
                var y = this.year(), sign = y >= 0 ? '+' : '-';
                return sign + leftZeroFill(Math.abs(y), 6);
            },
            gg   : function () {
                return leftZeroFill(this.weekYear() % 100, 2);
            },
            gggg : function () {
                return leftZeroFill(this.weekYear(), 4);
            },
            ggggg : function () {
                return leftZeroFill(this.weekYear(), 5);
            },
            GG   : function () {
                return leftZeroFill(this.isoWeekYear() % 100, 2);
            },
            GGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 4);
            },
            GGGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 5);
            },
            e : function () {
                return this.weekday();
            },
            E : function () {
                return this.isoWeekday();
            },
            a    : function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), true);
            },
            A    : function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), false);
            },
            H    : function () {
                return this.hours();
            },
            h    : function () {
                return this.hours() % 12 || 12;
            },
            m    : function () {
                return this.minutes();
            },
            s    : function () {
                return this.seconds();
            },
            S    : function () {
                return toInt(this.milliseconds() / 100);
            },
            SS   : function () {
                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
            },
            SSS  : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            SSSS : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            Z    : function () {
                var a = -this.zone(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
            },
            ZZ   : function () {
                var a = -this.zone(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
            },
            z : function () {
                return this.zoneAbbr();
            },
            zz : function () {
                return this.zoneName();
            },
            X    : function () {
                return this.unix();
            },
            Q : function () {
                return this.quarter();
            }
        },

        deprecations = {},

        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];

    // Pick the first defined of two or three arguments. dfl comes from
    // default.
    function dfl(a, b, c) {
        switch (arguments.length) {
            case 2: return a != null ? a : b;
            case 3: return a != null ? a : b != null ? b : c;
            default: throw new Error('Implement me');
        }
    }

    function defaultParsingFlags() {
        // We need to deep clone this object, and es5 standard is not very
        // helpful.
        return {
            empty : false,
            unusedTokens : [],
            unusedInput : [],
            overflow : -2,
            charsLeftOver : 0,
            nullInput : false,
            invalidMonth : null,
            invalidFormat : false,
            userInvalidated : false,
            iso: false
        };
    }

    function printMsg(msg) {
        if (moment.suppressDeprecationWarnings === false &&
                typeof console !== 'undefined' && console.warn) {
            console.warn("Deprecation warning: " + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
            if (firstTime) {
                printMsg(msg);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            printMsg(msg);
            deprecations[name] = true;
        }
    }

    function padToken(func, count) {
        return function (a) {
            return leftZeroFill(func.call(this, a), count);
        };
    }
    function ordinalizeToken(func, period) {
        return function (a) {
            return this.localeData().ordinal(func.call(this, a), period);
        };
    }

    while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
    }
    while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
    }
    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


    /************************************
        Constructors
    ************************************/

    function Locale() {
    }

    // Moment prototype object
    function Moment(config, skipOverflow) {
        if (skipOverflow !== false) {
            checkOverflow(config);
        }
        copyConfig(this, config);
        this._d = new Date(+config._d);
    }

    // Duration Constructor
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = moment.localeData();

        this._bubble();
    }

    /************************************
        Helpers
    ************************************/


    function extend(a, b) {
        for (var i in b) {
            if (b.hasOwnProperty(i)) {
                a[i] = b[i];
            }
        }

        if (b.hasOwnProperty('toString')) {
            a.toString = b.toString;
        }

        if (b.hasOwnProperty('valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = from._pf;
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    // left zero fill a number
    // see http://jsperf.com/left-zero-filling for performance comparison
    function leftZeroFill(number, targetLength, forceSign) {
        var output = '' + Math.abs(number),
            sign = number >= 0;

        while (output.length < targetLength) {
            output = '0' + output;
        }
        return (sign ? (forceSign ? '+' : '') : '-') + output;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = makeAs(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, "moment()." + name  + "(period, number) is deprecated. Please use moment()." + name + "(number, period).");
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = moment.duration(val, period);
            addOrSubtractDurationFromMoment(this, dur, direction);
            return this;
        };
    }

    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
        }
        if (months) {
            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            moment.updateOffset(mom, days || months);
        }
    }

    // check if is an array
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return Object.prototype.toString.call(input) === '[object Date]' ||
            input instanceof Date;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function normalizeUnits(units) {
        if (units) {
            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
            units = unitAliases[units] || camelFunctions[lowered] || lowered;
        }
        return units;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (inputObject.hasOwnProperty(prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeList(field) {
        var count, setter;

        if (field.indexOf('week') === 0) {
            count = 7;
            setter = 'day';
        }
        else if (field.indexOf('month') === 0) {
            count = 12;
            setter = 'month';
        }
        else {
            return;
        }

        moment[field] = function (format, index) {
            var i, getter,
                method = moment._locale[field],
                results = [];

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            getter = function (i) {
                var m = moment().utc().set(setter, i);
                return method.call(moment._locale, m, format || '');
            };

            if (index != null) {
                return getter(index);
            }
            else {
                for (i = 0; i < count; i++) {
                    results.push(getter(i));
                }
                return results;
            }
        };
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            if (coercedNumber >= 0) {
                value = Math.floor(coercedNumber);
            } else {
                value = Math.ceil(coercedNumber);
            }
        }

        return value;
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    function weeksInYear(year, dow, doy) {
        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function checkOverflow(m) {
        var overflow;
        if (m._a && m._pf.overflow === -2) {
            overflow =
                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
                m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR :
                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            m._pf.overflow = overflow;
        }
    }

    function isValid(m) {
        if (m._isValid == null) {
            m._isValid = !isNaN(m._d.getTime()) &&
                m._pf.overflow < 0 &&
                !m._pf.empty &&
                !m._pf.invalidMonth &&
                !m._pf.nullInput &&
                !m._pf.invalidFormat &&
                !m._pf.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    m._pf.charsLeftOver === 0 &&
                    m._pf.unusedTokens.length === 0;
            }
        }
        return m._isValid;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && hasModule) {
            try {
                oldLocale = moment.locale();
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales
                moment.locale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function makeAs(input, model) {
        return model._isUTC ? moment(input).zone(model._offset || 0) :
            moment(input).local();
    }

    /************************************
        Locale
    ************************************/


    extend(Locale.prototype, {

        set : function (config) {
            var prop, i;
            for (i in config) {
                prop = config[i];
                if (typeof prop === 'function') {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        },

        _months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        months : function (m) {
            return this._months[m.month()];
        },

        _monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        monthsShort : function (m) {
            return this._monthsShort[m.month()];
        },

        monthsParse : function (monthName) {
            var i, mom, regex;

            if (!this._monthsParse) {
                this._monthsParse = [];
            }

            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                if (!this._monthsParse[i]) {
                    mom = moment.utc([2000, i]);
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        },

        _weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdays : function (m) {
            return this._weekdays[m.day()];
        },

        _weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysShort : function (m) {
            return this._weekdaysShort[m.day()];
        },

        _weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        weekdaysMin : function (m) {
            return this._weekdaysMin[m.day()];
        },

        weekdaysParse : function (weekdayName) {
            var i, mom, regex;

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                if (!this._weekdaysParse[i]) {
                    mom = moment([2000, 1]).day(i);
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        },

        _longDateFormat : {
            LT : 'h:mm A',
            L : 'MM/DD/YYYY',
            LL : 'MMMM D, YYYY',
            LLL : 'MMMM D, YYYY LT',
            LLLL : 'dddd, MMMM D, YYYY LT'
        },
        longDateFormat : function (key) {
            var output = this._longDateFormat[key];
            if (!output && this._longDateFormat[key.toUpperCase()]) {
                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                    return val.slice(1);
                });
                this._longDateFormat[key] = output;
            }
            return output;
        },

        isPM : function (input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return ((input + '').toLowerCase().charAt(0) === 'p');
        },

        _meridiemParse : /[ap]\.?m?\.?/i,
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        },

        _calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        calendar : function (key, mom) {
            var output = this._calendar[key];
            return typeof output === 'function' ? output.apply(mom) : output;
        },

        _relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },

        relativeTime : function (number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return (typeof output === 'function') ?
                output(number, withoutSuffix, string, isFuture) :
                output.replace(/%d/i, number);
        },

        pastFuture : function (diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
        },

        ordinal : function (number) {
            return this._ordinal.replace('%d', number);
        },
        _ordinal : '%d',

        preparse : function (string) {
            return string;
        },

        postformat : function (string) {
            return string;
        },

        week : function (mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        },

        _week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        },

        _invalidDate: 'Invalid date',
        invalidDate: function () {
            return this._invalidDate;
        }
    });

    /************************************
        Formatting
    ************************************/


    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());

        if (!formatFunctions[format]) {
            formatFunctions[format] = makeFormatFunction(format);
        }

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }


    /************************************
        Parsing
    ************************************/


    // get the regex to find the next token
    function getParseRegexForToken(token, config) {
        var a, strict = config._strict;
        switch (token) {
        case 'Q':
            return parseTokenOneDigit;
        case 'DDDD':
            return parseTokenThreeDigits;
        case 'YYYY':
        case 'GGGG':
        case 'gggg':
            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
        case 'Y':
        case 'G':
        case 'g':
            return parseTokenSignedNumber;
        case 'YYYYYY':
        case 'YYYYY':
        case 'GGGGG':
        case 'ggggg':
            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
        case 'S':
            if (strict) {
                return parseTokenOneDigit;
            }
            /* falls through */
        case 'SS':
            if (strict) {
                return parseTokenTwoDigits;
            }
            /* falls through */
        case 'SSS':
            if (strict) {
                return parseTokenThreeDigits;
            }
            /* falls through */
        case 'DDD':
            return parseTokenOneToThreeDigits;
        case 'MMM':
        case 'MMMM':
        case 'dd':
        case 'ddd':
        case 'dddd':
            return parseTokenWord;
        case 'a':
        case 'A':
            return config._locale._meridiemParse;
        case 'X':
            return parseTokenTimestampMs;
        case 'Z':
        case 'ZZ':
            return parseTokenTimezone;
        case 'T':
            return parseTokenT;
        case 'SSSS':
            return parseTokenDigits;
        case 'MM':
        case 'DD':
        case 'YY':
        case 'GG':
        case 'gg':
        case 'HH':
        case 'hh':
        case 'mm':
        case 'ss':
        case 'ww':
        case 'WW':
            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
        case 'M':
        case 'D':
        case 'd':
        case 'H':
        case 'h':
        case 'm':
        case 's':
        case 'w':
        case 'W':
        case 'e':
        case 'E':
            return parseTokenOneOrTwoDigits;
        case 'Do':
            return parseTokenOrdinal;
        default :
            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i'));
            return a;
        }
    }

    function timezoneMinutesFromString(string) {
        string = string || '';
        var possibleTzMatches = (string.match(parseTokenTimezone) || []),
            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],
            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
            minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? -minutes : minutes;
    }

    // function to convert string input to date
    function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;

        switch (token) {
        // QUARTER
        case 'Q':
            if (input != null) {
                datePartArray[MONTH] = (toInt(input) - 1) * 3;
            }
            break;
        // MONTH
        case 'M' : // fall through to MM
        case 'MM' :
            if (input != null) {
                datePartArray[MONTH] = toInt(input) - 1;
            }
            break;
        case 'MMM' : // fall through to MMMM
        case 'MMMM' :
            a = config._locale.monthsParse(input);
            // if we didn't find a month name, mark the date as invalid.
            if (a != null) {
                datePartArray[MONTH] = a;
            } else {
                config._pf.invalidMonth = input;
            }
            break;
        // DAY OF MONTH
        case 'D' : // fall through to DD
        case 'DD' :
            if (input != null) {
                datePartArray[DATE] = toInt(input);
            }
            break;
        case 'Do' :
            if (input != null) {
                datePartArray[DATE] = toInt(parseInt(input, 10));
            }
            break;
        // DAY OF YEAR
        case 'DDD' : // fall through to DDDD
        case 'DDDD' :
            if (input != null) {
                config._dayOfYear = toInt(input);
            }

            break;
        // YEAR
        case 'YY' :
            datePartArray[YEAR] = moment.parseTwoDigitYear(input);
            break;
        case 'YYYY' :
        case 'YYYYY' :
        case 'YYYYYY' :
            datePartArray[YEAR] = toInt(input);
            break;
        // AM / PM
        case 'a' : // fall through to A
        case 'A' :
            config._isPm = config._locale.isPM(input);
            break;
        // 24 HOUR
        case 'H' : // fall through to hh
        case 'HH' : // fall through to hh
        case 'h' : // fall through to hh
        case 'hh' :
            datePartArray[HOUR] = toInt(input);
            break;
        // MINUTE
        case 'm' : // fall through to mm
        case 'mm' :
            datePartArray[MINUTE] = toInt(input);
            break;
        // SECOND
        case 's' : // fall through to ss
        case 'ss' :
            datePartArray[SECOND] = toInt(input);
            break;
        // MILLISECOND
        case 'S' :
        case 'SS' :
        case 'SSS' :
        case 'SSSS' :
            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
            break;
        // UNIX TIMESTAMP WITH MS
        case 'X':
            config._d = new Date(parseFloat(input) * 1000);
            break;
        // TIMEZONE
        case 'Z' : // fall through to ZZ
        case 'ZZ' :
            config._useUTC = true;
            config._tzm = timezoneMinutesFromString(input);
            break;
        // WEEKDAY - human
        case 'dd':
        case 'ddd':
        case 'dddd':
            a = config._locale.weekdaysParse(input);
            // if we didn't get a weekday name, mark the date as invalid
            if (a != null) {
                config._w = config._w || {};
                config._w['d'] = a;
            } else {
                config._pf.invalidWeekday = input;
            }
            break;
        // WEEK, WEEK DAY - numeric
        case 'w':
        case 'ww':
        case 'W':
        case 'WW':
        case 'd':
        case 'e':
        case 'E':
            token = token.substr(0, 1);
            /* falls through */
        case 'gggg':
        case 'GGGG':
        case 'GGGGG':
            token = token.substr(0, 2);
            if (input) {
                config._w = config._w || {};
                config._w[token] = toInt(input);
            }
            break;
        case 'gg':
        case 'GG':
            config._w = config._w || {};
            config._w[token] = moment.parseTwoDigitYear(input);
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
            week = dfl(w.W, 1);
            weekday = dfl(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
            week = dfl(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function dateFromConfig(config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                config._pf._overflowDayOfYear = true;
            }

            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
        // Apply timezone offset from input. The actual zone can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);
        }
    }

    function dateFromObject(config) {
        var normalizedInput;

        if (config._d) {
            return;
        }

        normalizedInput = normalizeObjectUnits(config._i);
        config._a = [
            normalizedInput.year,
            normalizedInput.month,
            normalizedInput.day,
            normalizedInput.hour,
            normalizedInput.minute,
            normalizedInput.second,
            normalizedInput.millisecond
        ];

        dateFromConfig(config);
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
            ];
        } else {
            return [now.getFullYear(), now.getMonth(), now.getDate()];
        }
    }

    // date from string and format string
    function makeDateFromStringAndFormat(config) {
        if (config._f === moment.ISO_8601) {
            parseISO(config);
            return;
        }

        config._a = [];
        config._pf.empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    config._pf.unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    config._pf.empty = false;
                }
                else {
                    config._pf.unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                config._pf.unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            config._pf.unusedInput.push(string);
        }

        // handle am pm
        if (config._isPm && config._a[HOUR] < 12) {
            config._a[HOUR] += 12;
        }
        // if is 12 am, change hours to 0
        if (config._isPm === false && config._a[HOUR] === 12) {
            config._a[HOUR] = 0;
        }

        dateFromConfig(config);
        checkOverflow(config);
    }

    function unescapeFormat(s) {
        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        });
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function regexpEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    // date from string and array of format strings
    function makeDateFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            config._pf.invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            tempConfig._pf = defaultParsingFlags();
            tempConfig._f = config._f[i];
            makeDateFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += tempConfig._pf.charsLeftOver;

            //or tokens
            currentScore += tempConfig._pf.unusedTokens.length * 10;

            tempConfig._pf.score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    // date from iso format
    function parseISO(config) {
        var i, l,
            string = config._i,
            match = isoRegex.exec(string);

        if (match) {
            config._pf.iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    // match[5] should be "T" or undefined
                    config._f = isoDates[i][0] + (match[6] || ' ');
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += isoTimes[i][0];
                    break;
                }
            }
            if (string.match(parseTokenTimezone)) {
                config._f += 'Z';
            }
            makeDateFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function makeDateFromString(config) {
        parseISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            moment.createFromInputFallback(config);
        }
    }

    function makeDateFromInput(config) {
        var input = config._i, matched;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {
            config._d = new Date(+matched[1]);
        } else if (typeof input === 'string') {
            makeDateFromString(config);
        } else if (isArray(input)) {
            config._a = input.slice(0);
            dateFromConfig(config);
        } else if (typeof(input) === 'object') {
            dateFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            moment.createFromInputFallback(config);
        }
    }

    function makeDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function makeUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    function parseWeekday(input, locale) {
        if (typeof input === 'string') {
            if (!isNaN(input)) {
                input = parseInt(input, 10);
            }
            else {
                input = locale.weekdaysParse(input);
                if (typeof input !== 'number') {
                    return null;
                }
            }
        }
        return input;
    }

    /************************************
        Relative Time
    ************************************/


    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = moment.duration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            years = round(duration.as('y')),

            args = seconds < relativeTimeThresholds.s && ['s', seconds] ||
                minutes === 1 && ['m'] ||
                minutes < relativeTimeThresholds.m && ['mm', minutes] ||
                hours === 1 && ['h'] ||
                hours < relativeTimeThresholds.h && ['hh', hours] ||
                days === 1 && ['d'] ||
                days < relativeTimeThresholds.d && ['dd', days] ||
                months === 1 && ['M'] ||
                months < relativeTimeThresholds.M && ['MM', months] ||
                years === 1 && ['y'] || ['yy', years];

        args[2] = withoutSuffix;
        args[3] = +posNegDuration > 0;
        args[4] = locale;
        return substituteTimeAgo.apply({}, args);
    }


    /************************************
        Week of Year
    ************************************/


    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;

        d = d === 0 ? 7 : d;
        weekday = weekday != null ? weekday : firstDayOfWeek;
        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    /************************************
        Top Level Functions
    ************************************/

    function makeMoment(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || moment.localeData(config._l);

        if (input === null || (format === undefined && input === '')) {
            return moment.invalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (moment.isMoment(input)) {
            return new Moment(input, true);
        } else if (format) {
            if (isArray(format)) {
                makeDateFromStringAndArray(config);
            } else {
                makeDateFromStringAndFormat(config);
            }
        } else {
            makeDateFromInput(config);
        }

        return new Moment(config);
    }

    moment = function (input, format, locale, strict) {
        var c;

        if (typeof(locale) === "boolean") {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._i = input;
        c._f = format;
        c._l = locale;
        c._strict = strict;
        c._isUTC = false;
        c._pf = defaultParsingFlags();

        return makeMoment(c);
    };

    moment.suppressDeprecationWarnings = false;

    moment.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i);
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return moment();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    moment.min = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    };

    moment.max = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    };

    // creating with utc
    moment.utc = function (input, format, locale, strict) {
        var c;

        if (typeof(locale) === "boolean") {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._useUTC = true;
        c._isUTC = true;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        c._pf = defaultParsingFlags();

        return makeMoment(c).utc();
    };

    // creating with unix timestamp (in seconds)
    moment.unix = function (input) {
        return moment(input * 1000);
    };

    // duration
    moment.duration = function (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            parseIso,
            diffRes;

        if (moment.isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoDurationRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            parseIso = function (inp) {
                // We'd normally use ~~inp for this, but unfortunately it also
                // converts floats to ints.
                // inp may be undefined, so careful calling replace on it.
                var res = inp && parseFloat(inp.replace(',', '.'));
                // apply sign while we're at it
                return (isNaN(res) ? 0 : res) * sign;
            };
            duration = {
                y: parseIso(match[2]),
                M: parseIso(match[3]),
                d: parseIso(match[4]),
                h: parseIso(match[5]),
                m: parseIso(match[6]),
                s: parseIso(match[7]),
                w: parseIso(match[8])
            };
        } else if (typeof duration === 'object' &&
                ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(moment(duration.from), moment(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (moment.isDuration(input) && input.hasOwnProperty('_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    };

    // version number
    moment.version = VERSION;

    // default format
    moment.defaultFormat = isoFormat;

    // constant that refers to the ISO standard
    moment.ISO_8601 = function () {};

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    moment.momentProperties = momentProperties;

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    moment.updateOffset = function () {};

    // This function allows you to set a threshold for relative time strings
    moment.relativeTimeThreshold = function (threshold, limit) {
        if (relativeTimeThresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return relativeTimeThresholds[threshold];
        }
        relativeTimeThresholds[threshold] = limit;
        return true;
    };

    moment.lang = deprecate(
        "moment.lang is deprecated. Use moment.locale instead.",
        function (key, value) {
            return moment.locale(key, value);
        }
    );

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    moment.locale = function (key, values) {
        var data;
        if (key) {
            if (typeof(values) !== "undefined") {
                data = moment.defineLocale(key, values);
            }
            else {
                data = moment.localeData(key);
            }

            if (data) {
                moment.duration._locale = moment._locale = data;
            }
        }

        return moment._locale._abbr;
    };

    moment.defineLocale = function (name, values) {
        if (values !== null) {
            values.abbr = name;
            if (!locales[name]) {
                locales[name] = new Locale();
            }
            locales[name].set(values);

            // backwards compat for now: also set the locale
            moment.locale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    };

    moment.langData = deprecate(
        "moment.langData is deprecated. Use moment.localeData instead.",
        function (key) {
            return moment.localeData(key);
        }
    );

    // returns locale data
    moment.localeData = function (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return moment._locale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    };

    // compare moment object
    moment.isMoment = function (obj) {
        return obj instanceof Moment ||
            (obj != null &&  obj.hasOwnProperty('_isAMomentObject'));
    };

    // for typechecking Duration objects
    moment.isDuration = function (obj) {
        return obj instanceof Duration;
    };

    for (i = lists.length - 1; i >= 0; --i) {
        makeList(lists[i]);
    }

    moment.normalizeUnits = function (units) {
        return normalizeUnits(units);
    };

    moment.invalid = function (flags) {
        var m = moment.utc(NaN);
        if (flags != null) {
            extend(m._pf, flags);
        }
        else {
            m._pf.userInvalidated = true;
        }

        return m;
    };

    moment.parseZone = function () {
        return moment.apply(null, arguments).parseZone();
    };

    moment.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    /************************************
        Moment Prototype
    ************************************/


    extend(moment.fn = Moment.prototype, {

        clone : function () {
            return moment(this);
        },

        valueOf : function () {
            return +this._d + ((this._offset || 0) * 60000);
        },

        unix : function () {
            return Math.floor(+this / 1000);
        },

        toString : function () {
            return this.clone().locale('en').format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
        },

        toDate : function () {
            return this._offset ? new Date(+this) : this._d;
        },

        toISOString : function () {
            var m = moment(this).utc();
            if (0 < m.year() && m.year() <= 9999) {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            } else {
                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        },

        toArray : function () {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hours(),
                m.minutes(),
                m.seconds(),
                m.milliseconds()
            ];
        },

        isValid : function () {
            return isValid(this);
        },

        isDSTShifted : function () {
            if (this._a) {
                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
            }

            return false;
        },

        parsingFlags : function () {
            return extend({}, this._pf);
        },

        invalidAt: function () {
            return this._pf.overflow;
        },

        utc : function (keepLocalTime) {
            return this.zone(0, keepLocalTime);
        },

        local : function (keepLocalTime) {
            if (this._isUTC) {
                this.zone(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.add(this._d.getTimezoneOffset(), 'm');
                }
            }
            return this;
        },

        format : function (inputString) {
            var output = formatMoment(this, inputString || moment.defaultFormat);
            return this.localeData().postformat(output);
        },

        add : createAdder(1, 'add'),

        subtract : createAdder(-1, 'subtract'),

        diff : function (input, units, asFloat) {
            var that = makeAs(input, this),
                zoneDiff = (this.zone() - that.zone()) * 6e4,
                diff, output;

            units = normalizeUnits(units);

            if (units === 'year' || units === 'month') {
                // average number of days in the months in the given dates
                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2
                // difference in months
                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());
                // adjust by taking difference in days, average number of days
                // and dst in the given months.
                output += ((this - moment(this).startOf('month')) -
                        (that - moment(that).startOf('month'))) / diff;
                // same as above but with zones, to negate all dst
                output -= ((this.zone() - moment(this).startOf('month').zone()) -
                        (that.zone() - moment(that).startOf('month').zone())) * 6e4 / diff;
                if (units === 'year') {
                    output = output / 12;
                }
            } else {
                diff = (this - that);
                output = units === 'second' ? diff / 1e3 : // 1000
                    units === 'minute' ? diff / 6e4 : // 1000 * 60
                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                    diff;
            }
            return asFloat ? output : absRound(output);
        },

        from : function (time, withoutSuffix) {
            return moment.duration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        },

        fromNow : function (withoutSuffix) {
            return this.from(moment(), withoutSuffix);
        },

        calendar : function (time) {
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're zone'd or not.
            var now = time || moment(),
                sod = makeAs(now, this).startOf('day'),
                diff = this.diff(sod, 'days', true),
                format = diff < -6 ? 'sameElse' :
                    diff < -1 ? 'lastWeek' :
                    diff < 0 ? 'lastDay' :
                    diff < 1 ? 'sameDay' :
                    diff < 2 ? 'nextDay' :
                    diff < 7 ? 'nextWeek' : 'sameElse';
            return this.format(this.localeData().calendar(format, this));
        },

        isLeapYear : function () {
            return isLeapYear(this.year());
        },

        isDST : function () {
            return (this.zone() < this.clone().month(0).zone() ||
                this.zone() < this.clone().month(5).zone());
        },

        day : function (input) {
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        },

        month : makeAccessor('Month', true),

        startOf : function (units) {
            units = normalizeUnits(units);
            // the following switch intentionally omits break keywords
            // to utilize falling through the cases.
            switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
                /* falls through */
            }

            // weeks are a special case
            if (units === 'week') {
                this.weekday(0);
            } else if (units === 'isoWeek') {
                this.isoWeekday(1);
            }

            // quarters are also special
            if (units === 'quarter') {
                this.month(Math.floor(this.month() / 3) * 3);
            }

            return this;
        },

        endOf: function (units) {
            units = normalizeUnits(units);
            return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
        },

        isAfter: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) > +moment(input).startOf(units);
        },

        isBefore: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) < +moment(input).startOf(units);
        },

        isSame: function (input, units) {
            units = units || 'ms';
            return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);
        },

        min: deprecate(
                 'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
                 function (other) {
                     other = moment.apply(null, arguments);
                     return other < this ? this : other;
                 }
         ),

        max: deprecate(
                'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
                function (other) {
                    other = moment.apply(null, arguments);
                    return other > this ? this : other;
                }
        ),

        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[zone(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist int zone
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        zone : function (input, keepLocalTime) {
            var offset = this._offset || 0,
                localAdjust;
            if (input != null) {
                if (typeof input === 'string') {
                    input = timezoneMinutesFromString(input);
                }
                if (Math.abs(input) < 16) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = this._d.getTimezoneOffset();
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.subtract(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addOrSubtractDurationFromMoment(this,
                                moment.duration(offset - input, 'm'), 1, false);
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        moment.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }
            } else {
                return this._isUTC ? offset : this._d.getTimezoneOffset();
            }
            return this;
        },

        zoneAbbr : function () {
            return this._isUTC ? 'UTC' : '';
        },

        zoneName : function () {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        },

        parseZone : function () {
            if (this._tzm) {
                this.zone(this._tzm);
            } else if (typeof this._i === 'string') {
                this.zone(this._i);
            }
            return this;
        },

        hasAlignedHourOffset : function (input) {
            if (!input) {
                input = 0;
            }
            else {
                input = moment(input).zone();
            }

            return (this.zone() - input) % 60 === 0;
        },

        daysInMonth : function () {
            return daysInMonth(this.year(), this.month());
        },

        dayOfYear : function (input) {
            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
        },

        quarter : function (input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        },

        weekYear : function (input) {
            var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        isoWeekYear : function (input) {
            var year = weekOfYear(this, 1, 4).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        week : function (input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        isoWeek : function (input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        weekday : function (input) {
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        },

        isoWeekday : function (input) {
            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.
            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
        },

        isoWeeksInYear : function () {
            return weeksInYear(this.year(), 1, 4);
        },

        weeksInYear : function () {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units]();
        },

        set : function (units, value) {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                this[units](value);
            }
            return this;
        },

        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        locale : function (key) {
            if (key === undefined) {
                return this._locale._abbr;
            } else {
                this._locale = moment.localeData(key);
                return this;
            }
        },

        lang : deprecate(
            "moment().lang() is deprecated. Use moment().localeData() instead.",
            function (key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    this._locale = moment.localeData(key);
                    return this;
                }
            }
        ),

        localeData : function () {
            return this._locale;
        }
    });

    function rawMonthSetter(mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(),
                daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function rawGetter(mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function rawSetter(mom, unit, value) {
        if (unit === 'Month') {
            return rawMonthSetter(mom, value);
        } else {
            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    function makeAccessor(unit, keepTime) {
        return function (value) {
            if (value != null) {
                rawSetter(this, unit, value);
                moment.updateOffset(this, keepTime);
                return this;
            } else {
                return rawGetter(this, unit);
            }
        };
    }

    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
    // moment.fn.month is defined separately
    moment.fn.date = makeAccessor('Date', true);
    moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));
    moment.fn.year = makeAccessor('FullYear', true);
    moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));

    // add plural methods
    moment.fn.days = moment.fn.day;
    moment.fn.months = moment.fn.month;
    moment.fn.weeks = moment.fn.week;
    moment.fn.isoWeeks = moment.fn.isoWeek;
    moment.fn.quarters = moment.fn.quarter;

    // add aliased format methods
    moment.fn.toJSON = moment.fn.toISOString;

    /************************************
        Duration Prototype
    ************************************/


    function daysToYears (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        return days * 400 / 146097;
    }

    function yearsToDays (years) {
        // years * 365 + absRound(years / 4) -
        //     absRound(years / 100) + absRound(years / 400);
        return years * 146097 / 400;
    }

    extend(moment.duration.fn = Duration.prototype, {

        _bubble : function () {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds, minutes, hours, years = 0;

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absRound(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absRound(seconds / 60);
            data.minutes = minutes % 60;

            hours = absRound(minutes / 60);
            data.hours = hours % 24;

            days += absRound(hours / 24);

            // Accurately convert days to years, assume start from year 0.
            years = absRound(daysToYears(days));
            days -= absRound(yearsToDays(years));

            // 30 days to a month
            // TODO (iskren): Use anchor date (like 1st Jan) to compute this.
            months += absRound(days / 30);
            days %= 30;

            // 12 months -> 1 year
            years += absRound(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;
        },

        abs : function () {
            this._milliseconds = Math.abs(this._milliseconds);
            this._days = Math.abs(this._days);
            this._months = Math.abs(this._months);

            this._data.milliseconds = Math.abs(this._data.milliseconds);
            this._data.seconds = Math.abs(this._data.seconds);
            this._data.minutes = Math.abs(this._data.minutes);
            this._data.hours = Math.abs(this._data.hours);
            this._data.months = Math.abs(this._data.months);
            this._data.years = Math.abs(this._data.years);

            return this;
        },

        weeks : function () {
            return absRound(this.days() / 7);
        },

        valueOf : function () {
            return this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6;
        },

        humanize : function (withSuffix) {
            var output = relativeTime(this, !withSuffix, this.localeData());

            if (withSuffix) {
                output = this.localeData().pastFuture(+this, output);
            }

            return this.localeData().postformat(output);
        },

        add : function (input, val) {
            // supports only 2.0-style add(1, 's') or add(moment)
            var dur = moment.duration(input, val);

            this._milliseconds += dur._milliseconds;
            this._days += dur._days;
            this._months += dur._months;

            this._bubble();

            return this;
        },

        subtract : function (input, val) {
            var dur = moment.duration(input, val);

            this._milliseconds -= dur._milliseconds;
            this._days -= dur._days;
            this._months -= dur._months;

            this._bubble();

            return this;
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units.toLowerCase() + 's']();
        },

        as : function (units) {
            var days, months;
            units = normalizeUnits(units);

            days = this._days + this._milliseconds / 864e5;
            if (units === 'month' || units === 'year') {
                months = this._months + daysToYears(days) * 12;
                return units === 'month' ? months : months / 12;
            } else {
                days += yearsToDays(this._months / 12);
                switch (units) {
                    case 'week': return days / 7;
                    case 'day': return days;
                    case 'hour': return days * 24;
                    case 'minute': return days * 24 * 60;
                    case 'second': return days * 24 * 60 * 60;
                    case 'millisecond': return days * 24 * 60 * 60 * 1000;
                    default: throw new Error('Unknown unit ' + units);
                }
            }
        },

        lang : moment.fn.lang,
        locale : moment.fn.locale,

        toIsoString : deprecate(
            "toIsoString() is deprecated. Please use toISOString() instead " +
            "(notice the capitals)",
            function () {
                return this.toISOString();
            }
        ),

        toISOString : function () {
            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var years = Math.abs(this.years()),
                months = Math.abs(this.months()),
                days = Math.abs(this.days()),
                hours = Math.abs(this.hours()),
                minutes = Math.abs(this.minutes()),
                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

            if (!this.asSeconds()) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            return (this.asSeconds() < 0 ? '-' : '') +
                'P' +
                (years ? years + 'Y' : '') +
                (months ? months + 'M' : '') +
                (days ? days + 'D' : '') +
                ((hours || minutes || seconds) ? 'T' : '') +
                (hours ? hours + 'H' : '') +
                (minutes ? minutes + 'M' : '') +
                (seconds ? seconds + 'S' : '');
        },

        localeData : function () {
            return this._locale;
        }
    });

    function makeDurationGetter(name) {
        moment.duration.fn[name] = function () {
            return this._data[name];
        };
    }

    for (i in unitMillisecondFactors) {
        if (unitMillisecondFactors.hasOwnProperty(i)) {
            makeDurationGetter(i.toLowerCase());
        }
    }

    moment.duration.fn.asMilliseconds = function () {
        return this.as('ms');
    };
    moment.duration.fn.asSeconds = function () {
        return this.as('s');
    };
    moment.duration.fn.asMinutes = function () {
        return this.as('m');
    };
    moment.duration.fn.asHours = function () {
        return this.as('h');
    };
    moment.duration.fn.asDays = function () {
        return this.as('d');
    };
    moment.duration.fn.asWeeks = function () {
        return this.as('weeks');
    };
    moment.duration.fn.asMonths = function () {
        return this.as('M');
    };
    moment.duration.fn.asYears = function () {
        return this.as('y');
    };

    /************************************
        Default Locale
    ************************************/


    // Set default locale, other locale will inherit from English.
    moment.locale('en', {
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    /* EMBED_LOCALES */

    /************************************
        Exposing Moment
    ************************************/

    function makeGlobal(shouldDeprecate) {
        /*global ender:false */
        if (typeof ender !== 'undefined') {
            return;
        }
        oldGlobalMoment = globalScope.moment;
        if (shouldDeprecate) {
            globalScope.moment = deprecate(
                    'Accessing Moment through the global scope is ' +
                    'deprecated, and will be removed in an upcoming ' +
                    'release.',
                    moment);
        } else {
            globalScope.moment = moment;
        }
    }

    // CommonJS module is defined
    if (hasModule) {
        module.exports = moment;
    } else if (typeof define === 'function' && define.amd) {
        define('moment', function (require, exports, module) {
            if (module.config && module.config() && module.config().noGlobal === true) {
                // release the global variable
                globalScope.moment = oldGlobalMoment;
            }

            return moment;
        });
        makeGlobal(true);
    } else {
        makeGlobal();
    }
}).call(this);
/**
* @version: 1.3.12
* @author: Dan Grossman http://www.dangrossman.info/
* @date: 2014-08-18
* @copyright: Copyright (c) 2012-2014 Dan Grossman. All rights reserved.
* @license: Licensed under Apache License v2.0. See http://www.apache.org/licenses/LICENSE-2.0
* @website: http://www.improvely.com/
*/

(function(root, factory) {

  if (typeof define === 'function' && define.amd) {
    define(['moment', 'jquery', 'exports'], function(momentjs, $, exports) {
      root.daterangepicker = factory(root, exports, momentjs, $);
    });

  } else if (typeof exports !== 'undefined') {
    var momentjs = require('moment');
    var jQuery;
    try {
      jQuery = require('jquery');
    } catch (err) {
      jQuery = window.jQuery;
      if (!jQuery) throw new Error('jQuery dependency not found');
    }

    factory(root, exports, momentjs, jQuery);

  // Finally, as a browser global.
  } else {
    root.daterangepicker = factory(root, {}, root.moment, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(this, function(root, daterangepicker, moment, $) {

    var DateRangePicker = function (element, options, cb) {

        // by default, the daterangepicker element is placed at the bottom of HTML body
        this.parentEl = 'body';

        //element that triggered the date range picker
        this.element = $(element);

        //tracks visible state
        this.isShowing = false;

        //create the picker HTML object
        var DRPTemplate = '<div class="daterangepicker dropdown-menu">' +
                '<div class="calendar left"></div>' +
                '<div class="calendar right"></div>' +
                '<div class="ranges">' +
                  '<div class="range_inputs">' +
                    '<div class="daterangepicker_start_input">' +
                      '<label for="daterangepicker_start"></label>' +
                      '<input class="input-mini" type="text" name="daterangepicker_start" value="" />' +
                    '</div>' +
                    '<div class="daterangepicker_end_input">' +
                      '<label for="daterangepicker_end"></label>' +
                      '<input class="input-mini" type="text" name="daterangepicker_end" value="" />' +
                    '</div>' +
                    '<button class="applyBtn" disabled="disabled"></button>&nbsp;' +
                    '<button class="cancelBtn"></button>' +
                  '</div>' +
                '</div>' +
              '</div>';

        //custom options
        if (typeof options !== 'object' || options === null)
            options = {};

        this.parentEl = (typeof options === 'object' && options.parentEl && $(options.parentEl).length) ? $(options.parentEl) : $(this.parentEl);
        this.container = $(DRPTemplate).appendTo(this.parentEl);

        this.setOptions(options, cb);

        //apply CSS classes and labels to buttons
        var c = this.container;
        $.each(this.buttonClasses, function (idx, val) {
            c.find('button').addClass(val);
        });
        this.container.find('.daterangepicker_start_input label').html(this.locale.fromLabel);
        this.container.find('.daterangepicker_end_input label').html(this.locale.toLabel);
        if (this.applyClass.length)
            this.container.find('.applyBtn').addClass(this.applyClass);
        if (this.cancelClass.length)
            this.container.find('.cancelBtn').addClass(this.cancelClass);
        this.container.find('.applyBtn').html(this.locale.applyLabel);
        this.container.find('.cancelBtn').html(this.locale.cancelLabel);

        //event listeners

        this.container.find('.calendar')
            .on('click.daterangepicker', '.prev', $.proxy(this.clickPrev, this))
            .on('click.daterangepicker', '.next', $.proxy(this.clickNext, this))
            .on('click.daterangepicker', 'td.available', $.proxy(this.clickDate, this))
            .on('mouseenter.daterangepicker', 'td.available', $.proxy(this.hoverDate, this))
            .on('mouseleave.daterangepicker', 'td.available', $.proxy(this.updateFormInputs, this))
            .on('change.daterangepicker', 'select.yearselect', $.proxy(this.updateMonthYear, this))
            .on('change.daterangepicker', 'select.monthselect', $.proxy(this.updateMonthYear, this))
            .on('change.daterangepicker', 'select.hourselect,select.minuteselect,select.ampmselect', $.proxy(this.updateTime, this));

        this.container.find('.ranges')
            .on('click.daterangepicker', 'button.applyBtn', $.proxy(this.clickApply, this))
            .on('click.daterangepicker', 'button.cancelBtn', $.proxy(this.clickCancel, this))
            .on('click.daterangepicker', '.daterangepicker_start_input,.daterangepicker_end_input', $.proxy(this.showCalendars, this))
            .on('change.daterangepicker', '.daterangepicker_start_input,.daterangepicker_end_input', $.proxy(this.inputsChanged, this))
            .on('keydown.daterangepicker', '.daterangepicker_start_input,.daterangepicker_end_input', $.proxy(this.inputsKeydown, this))
            .on('click.daterangepicker', 'li', $.proxy(this.clickRange, this))
            .on('mouseenter.daterangepicker', 'li', $.proxy(this.enterRange, this))
            .on('mouseleave.daterangepicker', 'li', $.proxy(this.updateFormInputs, this));

        if (this.element.is('input')) {
            this.element.on({
                'click.daterangepicker': $.proxy(this.show, this),
                'focus.daterangepicker': $.proxy(this.show, this),
                'keyup.daterangepicker': $.proxy(this.updateFromControl, this)
            });
        } else {
            this.element.on('click.daterangepicker', $.proxy(this.toggle, this));
        }

    };

    DateRangePicker.prototype = {

        constructor: DateRangePicker,

        setOptions: function(options, callback) {

            this.startDate = moment().startOf('day');
            this.endDate = moment().endOf('day');
            this.minDate = false;
            this.maxDate = false;
            this.dateLimit = false;

            this.showDropdowns = false;
            this.showWeekNumbers = false;
            this.timePicker = false;
            this.timePickerIncrement = 30;
            this.timePicker12Hour = true;
            this.singleDatePicker = false;
            this.ranges = {};

            this.opens = 'right';
            if (this.element.hasClass('pull-right'))
                this.opens = 'left';

            this.buttonClasses = ['btn', 'btn-small btn-sm'];
            this.applyClass = 'btn-success';
            this.cancelClass = 'btn-default';

            this.format = 'MM/DD/YYYY';
            this.separator = ' - ';

            this.locale = {
                applyLabel: 'Apply',
                cancelLabel: 'Cancel',
                fromLabel: 'From',
                toLabel: 'To',
                weekLabel: 'W',
                customRangeLabel: 'Custom Range',
                daysOfWeek: moment.weekdaysMin(),
                monthNames: moment.monthsShort(),
                firstDay: moment.localeData()._week.dow
            };

            this.cb = function () { };

            if (typeof options.format === 'string')
                this.format = options.format;

            if (typeof options.separator === 'string')
                this.separator = options.separator;

            if (typeof options.startDate === 'string')
                this.startDate = moment(options.startDate, this.format);

            if (typeof options.endDate === 'string')
                this.endDate = moment(options.endDate, this.format);

            if (typeof options.minDate === 'string')
                this.minDate = moment(options.minDate, this.format);

            if (typeof options.maxDate === 'string')
                this.maxDate = moment(options.maxDate, this.format);

            if (typeof options.startDate === 'object')
                this.startDate = moment(options.startDate);

            if (typeof options.endDate === 'object')
                this.endDate = moment(options.endDate);

            if (typeof options.minDate === 'object')
                this.minDate = moment(options.minDate);

            if (typeof options.maxDate === 'object')
                this.maxDate = moment(options.maxDate);

            if (typeof options.applyClass === 'string')
                this.applyClass = options.applyClass;

            if (typeof options.cancelClass === 'string')
                this.cancelClass = options.cancelClass;

            if (typeof options.dateLimit === 'object')
                this.dateLimit = options.dateLimit;

            if (typeof options.locale === 'object') {

                if (typeof options.locale.daysOfWeek === 'object') {
                    // Create a copy of daysOfWeek to avoid modification of original
                    // options object for reusability in multiple daterangepicker instances
                    this.locale.daysOfWeek = options.locale.daysOfWeek.slice();
                }

                if (typeof options.locale.monthNames === 'object') {
                  this.locale.monthNames = options.locale.monthNames.slice();
                }

                if (typeof options.locale.firstDay === 'number') {
                  this.locale.firstDay = options.locale.firstDay;
                }

                if (typeof options.locale.applyLabel === 'string') {
                  this.locale.applyLabel = options.locale.applyLabel;
                }

                if (typeof options.locale.cancelLabel === 'string') {
                  this.locale.cancelLabel = options.locale.cancelLabel;
                }

                if (typeof options.locale.fromLabel === 'string') {
                  this.locale.fromLabel = options.locale.fromLabel;
                }

                if (typeof options.locale.toLabel === 'string') {
                  this.locale.toLabel = options.locale.toLabel;
                }

                if (typeof options.locale.weekLabel === 'string') {
                  this.locale.weekLabel = options.locale.weekLabel;
                }

                if (typeof options.locale.customRangeLabel === 'string') {
                  this.locale.customRangeLabel = options.locale.customRangeLabel;
                }
            }

            if (typeof options.opens === 'string')
                this.opens = options.opens;

            if (typeof options.showWeekNumbers === 'boolean') {
                this.showWeekNumbers = options.showWeekNumbers;
            }

            if (typeof options.buttonClasses === 'string') {
                this.buttonClasses = [options.buttonClasses];
            }

            if (typeof options.buttonClasses === 'object') {
                this.buttonClasses = options.buttonClasses;
            }

            if (typeof options.showDropdowns === 'boolean') {
                this.showDropdowns = options.showDropdowns;
            }

            if (typeof options.singleDatePicker === 'boolean') {
                this.singleDatePicker = options.singleDatePicker;
            }

            if (typeof options.timePicker === 'boolean') {
                this.timePicker = options.timePicker;
            }

            if (typeof options.timePickerIncrement === 'number') {
                this.timePickerIncrement = options.timePickerIncrement;
            }

            if (typeof options.timePicker12Hour === 'boolean') {
                this.timePicker12Hour = options.timePicker12Hour;
            }

            // update day names order to firstDay
            if (this.locale.firstDay != 0) {
                var iterator = this.locale.firstDay;
                while (iterator > 0) {
                    this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift());
                    iterator--;
                }
            }

            var start, end, range;

            //if no start/end dates set, check if an input element contains initial values
            if (typeof options.startDate === 'undefined' && typeof options.endDate === 'undefined') {
                if ($(this.element).is('input[type=text]')) {
                    var val = $(this.element).val();
                    var split = val.split(this.separator);
                    start = end = null;
                    if (split.length == 2) {
                        start = moment(split[0], this.format);
                        end = moment(split[1], this.format);
                    } else if (this.singleDatePicker) {
                        start = moment(val, this.format);
                        end = moment(val, this.format);
                    }
                    if (start !== null && end !== null) {
                        this.startDate = start;
                        this.endDate = end;
                    }
                }
            }

            if (typeof options.ranges === 'object') {
                for (range in options.ranges) {

                    start = moment(options.ranges[range][0]);
                    end = moment(options.ranges[range][1]);

                    // If we have a min/max date set, bound this range
                    // to it, but only if it would otherwise fall
                    // outside of the min/max.
                    if (this.minDate && start.isBefore(this.minDate))
                        start = moment(this.minDate);

                    if (this.maxDate && end.isAfter(this.maxDate))
                        end = moment(this.maxDate);

                    // If the end of the range is before the minimum (if min is set) OR
                    // the start of the range is after the max (also if set) don't display this
                    // range option.
                    if ((this.minDate && end.isBefore(this.minDate)) || (this.maxDate && start.isAfter(this.maxDate))) {
                        continue;
                    }

                    this.ranges[range] = [start, end];
                }

                var list = '<ul>';
                for (range in this.ranges) {
                    list += '<li>' + range + '</li>';
                }
                list += '<li>' + this.locale.customRangeLabel + '</li>';
                list += '</ul>';
                this.container.find('.ranges ul').remove();
                this.container.find('.ranges').prepend(list);
            }

            if (typeof callback === 'function') {
                this.cb = callback;
            }

            if (!this.timePicker) {
                this.startDate = this.startDate.startOf('day');
                this.endDate = this.endDate.endOf('day');
            }

            if (this.singleDatePicker) {
                this.opens = 'right';
                this.container.find('.calendar.right').show();
                this.container.find('.calendar.left').hide();
                this.container.find('.ranges').hide();
                if (!this.container.find('.calendar.right').hasClass('single'))
                    this.container.find('.calendar.right').addClass('single');
            } else {
                this.container.find('.calendar.right').removeClass('single');
                this.container.find('.ranges').show();
            }

            this.oldStartDate = this.startDate.clone();
            this.oldEndDate = this.endDate.clone();
            this.oldChosenLabel = this.chosenLabel;

            this.leftCalendar = {
                month: moment([this.startDate.year(), this.startDate.month(), 1, this.startDate.hour(), this.startDate.minute()]),
                calendar: []
            };

            this.rightCalendar = {
                month: moment([this.endDate.year(), this.endDate.month(), 1, this.endDate.hour(), this.endDate.minute()]),
                calendar: []
            };

            if (this.opens == 'right') {
                //swap calendar positions
                var left = this.container.find('.calendar.left');
                var right = this.container.find('.calendar.right');

                if (right.hasClass('single')) {
                    right.removeClass('single');
                    left.addClass('single');
                }

                left.removeClass('left').addClass('right');
                right.removeClass('right').addClass('left');

                if (this.singleDatePicker) {
                    left.show();
                    right.hide();
                }
            }

            if (typeof options.ranges === 'undefined' && !this.singleDatePicker) {
                this.container.addClass('show-calendar');
            }

            this.container.addClass('opens' + this.opens);

            this.updateView();
            this.updateCalendars();

        },

        setStartDate: function(startDate) {
            if (typeof startDate === 'string')
                this.startDate = moment(startDate, this.format);

            if (typeof startDate === 'object')
                this.startDate = moment(startDate);

            if (!this.timePicker)
                this.startDate = this.startDate.startOf('day');

            this.oldStartDate = this.startDate.clone();

            this.updateView();
            this.updateCalendars();
            this.updateInputText();
        },

        setEndDate: function(endDate) {
            if (typeof endDate === 'string')
                this.endDate = moment(endDate, this.format);

            if (typeof endDate === 'object')
                this.endDate = moment(endDate);

            if (!this.timePicker)
                this.endDate = this.endDate.endOf('day');

            this.oldEndDate = this.endDate.clone();

            this.updateView();
            this.updateCalendars();
            this.updateInputText();
        },

        updateView: function () {
            this.leftCalendar.month.month(this.startDate.month()).year(this.startDate.year()).hour(this.startDate.hour()).minute(this.startDate.minute());
            this.rightCalendar.month.month(this.endDate.month()).year(this.endDate.year()).hour(this.endDate.hour()).minute(this.endDate.minute());
            this.updateFormInputs();
        },

        updateFormInputs: function () {
            this.container.find('input[name=daterangepicker_start]').val(this.startDate.format(this.format));
            this.container.find('input[name=daterangepicker_end]').val(this.endDate.format(this.format));

            if (this.startDate.isSame(this.endDate) || this.startDate.isBefore(this.endDate)) {
                this.container.find('button.applyBtn').removeAttr('disabled');
            } else {
                this.container.find('button.applyBtn').attr('disabled', 'disabled');
            }
        },

        updateFromControl: function () {
            if (!this.element.is('input')) return;
            if (!this.element.val().length) return;

            var dateString = this.element.val().split(this.separator),
                start = null,
                end = null;

            if(dateString.length === 2) {
                start = moment(dateString[0], this.format);
                end = moment(dateString[1], this.format);
            }

            if (this.singleDatePicker || start === null || end === null) {
                start = moment(this.element.val(), this.format);
                end = start;
            }

            if (end.isBefore(start)) return;

            this.oldStartDate = this.startDate.clone();
            this.oldEndDate = this.endDate.clone();

            this.startDate = start;
            this.endDate = end;

            if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate))
                this.notify();

            this.updateCalendars();
        },

        notify: function () {
            this.updateView();
            this.cb(this.startDate, this.endDate, this.chosenLabel);
        },

        move: function () {
            var parentOffset = { top: 0, left: 0 };
            var parentRightEdge = $(window).width();
            if (!this.parentEl.is('body')) {
                parentOffset = {
                    top: this.parentEl.offset().top - this.parentEl.scrollTop(),
                    left: this.parentEl.offset().left - this.parentEl.scrollLeft()
                };
                parentRightEdge = this.parentEl[0].clientWidth + this.parentEl.offset().left;
            }

            if (this.opens == 'left') {
                this.container.css({
                    top: this.element.offset().top + this.element.outerHeight() - parentOffset.top,
                    right: parentRightEdge - this.element.offset().left - this.element.outerWidth(),
                    left: 'auto'
                });
                if (this.container.offset().left < 0) {
                    this.container.css({
                        right: 'auto',
                        left: 9
                    });
                }
            } else {
                this.container.css({
                    top: this.element.offset().top + this.element.outerHeight() - parentOffset.top,
                    left: this.element.offset().left - parentOffset.left,
                    right: 'auto'
                });
                if (this.container.offset().left + this.container.outerWidth() > $(window).width()) {
                    this.container.css({
                        left: 'auto',
                        right: 0
                    });
                }
            }
        },

        toggle: function (e) {
            if (this.element.hasClass('active')) {
                this.hide();
            } else {
                this.show();
            }
        },

        show: function (e) {
            if (this.isShowing) return;

            this.element.addClass('active');
            this.container.show();
            this.move();

            // Create a click proxy that is private to this instance of datepicker, for unbinding
            this._outsideClickProxy = $.proxy(function (e) { this.outsideClick(e); }, this);
            // Bind global datepicker mousedown for hiding and
            $(document)
              .on('mousedown.daterangepicker', this._outsideClickProxy)
              // also explicitly play nice with Bootstrap dropdowns, which stopPropagation when clicking them
              .on('click.daterangepicker', '[data-toggle=dropdown]', this._outsideClickProxy)
              // and also close when focus changes to outside the picker (eg. tabbing between controls)
              .on('focusin.daterangepicker', this._outsideClickProxy);

            this.isShowing = true;
            this.element.trigger('show.daterangepicker', this);
        },

        outsideClick: function (e) {
            var target = $(e.target);
            // if the page is clicked anywhere except within the daterangerpicker/button
            // itself then call this.hide()
            if (
                target.closest(this.element).length ||
                target.closest(this.container).length ||
                target.closest('.calendar-date').length
                ) return;
            this.hide();
        },

        hide: function (e) {
            if (!this.isShowing) return;

            $(document)
              .off('mousedown.daterangepicker')
              .off('click.daterangepicker', '[data-toggle=dropdown]')
              .off('focusin.daterangepicker');

            this.element.removeClass('active');
            this.container.hide();

            if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate))
                this.notify();

            this.oldStartDate = this.startDate.clone();
            this.oldEndDate = this.endDate.clone();

            this.isShowing = false;
            this.element.trigger('hide.daterangepicker', this);
        },

        enterRange: function (e) {
            // mouse pointer has entered a range label
            var label = e.target.innerHTML;
            if (label == this.locale.customRangeLabel) {
                this.updateView();
            } else {
                var dates = this.ranges[label];
                this.container.find('input[name=daterangepicker_start]').val(dates[0].format(this.format));
                this.container.find('input[name=daterangepicker_end]').val(dates[1].format(this.format));
            }
        },

        showCalendars: function() {
            this.container.addClass('show-calendar');
            this.move();
            this.element.trigger('showCalendar.daterangepicker', this);
        },

        hideCalendars: function() {
            this.container.removeClass('show-calendar');
            this.element.trigger('hideCalendar.daterangepicker', this);
        },

        // when a date is typed into the start to end date textboxes
        inputsChanged: function (e) {
            var el = $(e.target);
            var date = moment(el.val());
            if (!date.isValid()) return;

            var startDate, endDate;
            if (el.attr('name') === 'daterangepicker_start') {
                startDate = date;
                endDate = this.endDate;
            } else {
                startDate = this.startDate;
                endDate = date;
            }
            this.setCustomDates(startDate, endDate);
        },

        inputsKeydown: function(e) {
            if (e.keyCode === 13) {
                this.inputsChanged(e);
                this.notify();
            }
        },

        updateInputText: function() {
            if (this.element.is('input') && !this.singleDatePicker) {
                this.element.val(this.startDate.format(this.format) + this.separator + this.endDate.format(this.format));
            } else if (this.element.is('input')) {
                this.element.val(this.startDate.format(this.format));
            }
        },

        clickRange: function (e) {
            var label = e.target.innerHTML;
            this.chosenLabel = label;
            if (label == this.locale.customRangeLabel) {
                this.showCalendars();
            } else {
                var dates = this.ranges[label];

                this.startDate = dates[0];
                this.endDate = dates[1];

                if (!this.timePicker) {
                    this.startDate.startOf('day');
                    this.endDate.endOf('day');
                }

                this.leftCalendar.month.month(this.startDate.month()).year(this.startDate.year()).hour(this.startDate.hour()).minute(this.startDate.minute());
                this.rightCalendar.month.month(this.endDate.month()).year(this.endDate.year()).hour(this.endDate.hour()).minute(this.endDate.minute());
                this.updateCalendars();

                this.updateInputText();

                this.hideCalendars();
                this.hide();
                this.element.trigger('apply.daterangepicker', this);
            }
        },

        clickPrev: function (e) {
            var cal = $(e.target).parents('.calendar');
            if (cal.hasClass('left')) {
                this.leftCalendar.month.subtract(1, 'month');
            } else {
                this.rightCalendar.month.subtract(1, 'month');
            }
            this.updateCalendars();
        },

        clickNext: function (e) {
            var cal = $(e.target).parents('.calendar');
            if (cal.hasClass('left')) {
                this.leftCalendar.month.add(1, 'month');
            } else {
                this.rightCalendar.month.add(1, 'month');
            }
            this.updateCalendars();
        },

        hoverDate: function (e) {
            var title = $(e.target).attr('data-title');
            var row = title.substr(1, 1);
            var col = title.substr(3, 1);
            var cal = $(e.target).parents('.calendar');

            if (cal.hasClass('left')) {
                this.container.find('input[name=daterangepicker_start]').val(this.leftCalendar.calendar[row][col].format(this.format));
            } else {
                this.container.find('input[name=daterangepicker_end]').val(this.rightCalendar.calendar[row][col].format(this.format));
            }
        },

        setCustomDates: function(startDate, endDate) {
            this.chosenLabel = this.locale.customRangeLabel;
            if (startDate.isAfter(endDate)) {
                var difference = this.endDate.diff(this.startDate);
                endDate = moment(startDate).add(difference, 'ms');
            }
            this.startDate = startDate;
            this.endDate = endDate;

            this.updateView();
            this.updateCalendars();
        },

        clickDate: function (e) {
            var title = $(e.target).attr('data-title');
            var row = title.substr(1, 1);
            var col = title.substr(3, 1);
            var cal = $(e.target).parents('.calendar');

            var startDate, endDate;
            if (cal.hasClass('left')) {
                startDate = this.leftCalendar.calendar[row][col];
                endDate = this.endDate;
                if (typeof this.dateLimit === 'object') {
                    var maxDate = moment(startDate).add(this.dateLimit).startOf('day');
                    if (endDate.isAfter(maxDate)) {
                        endDate = maxDate;
                    }
                }
            } else {
                startDate = this.startDate;
                endDate = this.rightCalendar.calendar[row][col];
                if (typeof this.dateLimit === 'object') {
                    var minDate = moment(endDate).subtract(this.dateLimit).startOf('day');
                    if (startDate.isBefore(minDate)) {
                        startDate = minDate;
                    }
                }
            }

            if (this.singleDatePicker && cal.hasClass('left')) {
                endDate = startDate.clone();
            } else if (this.singleDatePicker && cal.hasClass('right')) {
                startDate = endDate.clone();
            }

            cal.find('td').removeClass('active');

            $(e.target).addClass('active');

            this.setCustomDates(startDate, endDate);

            if (!this.timePicker)
                endDate.endOf('day');

            if (this.singleDatePicker)
                this.clickApply();
        },

        clickApply: function (e) {
            this.updateInputText();
            this.hide();
            this.element.trigger('apply.daterangepicker', this);
        },

        clickCancel: function (e) {
            this.startDate = this.oldStartDate;
            this.endDate = this.oldEndDate;
            this.chosenLabel = this.oldChosenLabel;
            this.updateView();
            this.updateCalendars();
            this.hide();
            this.element.trigger('cancel.daterangepicker', this);
        },

        updateMonthYear: function (e) {
            var isLeft = $(e.target).closest('.calendar').hasClass('left'),
                leftOrRight = isLeft ? 'left' : 'right',
                cal = this.container.find('.calendar.'+leftOrRight);

            // Month must be Number for new moment versions
            var month = parseInt(cal.find('.monthselect').val(), 10);
            var year = cal.find('.yearselect').val();

            this[leftOrRight+'Calendar'].month.month(month).year(year);
            this.updateCalendars();
        },

        updateTime: function(e) {

            var cal = $(e.target).closest('.calendar'),
                isLeft = cal.hasClass('left');

            var hour = parseInt(cal.find('.hourselect').val(), 10);
            var minute = parseInt(cal.find('.minuteselect').val(), 10);

            if (this.timePicker12Hour) {
                var ampm = cal.find('.ampmselect').val();
                if (ampm === 'PM' && hour < 12)
                    hour += 12;
                if (ampm === 'AM' && hour === 12)
                    hour = 0;
            }

            if (isLeft) {
                var start = this.startDate.clone();
                start.hour(hour);
                start.minute(minute);
                this.startDate = start;
                this.leftCalendar.month.hour(hour).minute(minute);
            } else {
                var end = this.endDate.clone();
                end.hour(hour);
                end.minute(minute);
                this.endDate = end;
                this.rightCalendar.month.hour(hour).minute(minute);
            }

            this.updateCalendars();
        },

        updateCalendars: function () {
            this.leftCalendar.calendar = this.buildCalendar(this.leftCalendar.month.month(), this.leftCalendar.month.year(), this.leftCalendar.month.hour(), this.leftCalendar.month.minute(), 'left');
            this.rightCalendar.calendar = this.buildCalendar(this.rightCalendar.month.month(), this.rightCalendar.month.year(), this.rightCalendar.month.hour(), this.rightCalendar.month.minute(), 'right');
            this.container.find('.calendar.left').empty().html(this.renderCalendar(this.leftCalendar.calendar, this.startDate, this.minDate, this.maxDate));
            
            var minDate = this.minDate;
            if (!this.singleDatePicker)
                minDate = this.startDate;
            this.container.find('.calendar.right').empty().html(this.renderCalendar(this.rightCalendar.calendar, this.endDate, minDate, this.maxDate));

            this.container.find('.ranges li').removeClass('active');
            var customRange = true;
            var i = 0;
            for (var range in this.ranges) {
                if (this.timePicker) {
                    if (this.startDate.isSame(this.ranges[range][0]) && this.endDate.isSame(this.ranges[range][1])) {
                        customRange = false;
                        this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')')
                            .addClass('active').html();
                    }
                } else {
                    //ignore times when comparing dates if time picker is not enabled
                    if (this.startDate.format('YYYY-MM-DD') == this.ranges[range][0].format('YYYY-MM-DD') && this.endDate.format('YYYY-MM-DD') == this.ranges[range][1].format('YYYY-MM-DD')) {
                        customRange = false;
                        this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')')
                            .addClass('active').html();
                    }
                }
                i++;
            }
            if (customRange) {
                this.chosenLabel = this.container.find('.ranges li:last').addClass('active').html();
                this.showCalendars();
            }
        },

        buildCalendar: function (month, year, hour, minute, side) {
            var daysInMonth = moment([year, month]).daysInMonth();
            var firstDay = moment([year, month, 1]);
            var lastDay = moment([year, month, daysInMonth]);
            var lastMonth = moment(firstDay).subtract(1, 'month').month();
            var lastYear = moment(firstDay).subtract(1, 'month').year();

            var daysInLastMonth = moment([lastYear, lastMonth]).daysInMonth();

            var dayOfWeek = firstDay.day();

            var i;

            //initialize a 6 rows x 7 columns array for the calendar
            var calendar = [];
            calendar.firstDay = firstDay;
            calendar.lastDay = lastDay;

            for (i = 0; i < 6; i++) {
                calendar[i] = [];
            }

            //populate the calendar with date objects
            var startDay = daysInLastMonth - dayOfWeek + this.locale.firstDay + 1;
            if (startDay > daysInLastMonth)
                startDay -= 7;

            if (dayOfWeek == this.locale.firstDay)
                startDay = daysInLastMonth - 6;

            var curDate = moment([lastYear, lastMonth, startDay, 12, minute]);
            var col, row;
            for (i = 0, col = 0, row = 0; i < 42; i++, col++, curDate = moment(curDate).add(24, 'hour')) {
                if (i > 0 && col % 7 === 0) {
                    col = 0;
                    row++;
                }
                calendar[row][col] = curDate.clone().hour(hour);
                curDate.hour(12);
            }

            return calendar;
        },

        renderDropdowns: function (selected, minDate, maxDate) {
            var currentMonth = selected.month();
            var monthHtml = '<select class="monthselect">';
            var inMinYear = false;
            var inMaxYear = false;

            for (var m = 0; m < 12; m++) {
                if ((!inMinYear || m >= minDate.month()) && (!inMaxYear || m <= maxDate.month())) {
                    monthHtml += "<option value='" + m + "'" +
                        (m === currentMonth ? " selected='selected'" : "") +
                        ">" + this.locale.monthNames[m] + "</option>";
                }
            }
            monthHtml += "</select>";

            var currentYear = selected.year();
            var maxYear = (maxDate && maxDate.year()) || (currentYear + 5);
            var minYear = (minDate && minDate.year()) || (currentYear - 50);
            var yearHtml = '<select class="yearselect">';

            for (var y = minYear; y <= maxYear; y++) {
                yearHtml += '<option value="' + y + '"' +
                    (y === currentYear ? ' selected="selected"' : '') +
                    '>' + y + '</option>';
            }

            yearHtml += '</select>';

            return monthHtml + yearHtml;
        },

        renderCalendar: function (calendar, selected, minDate, maxDate) {

            var html = '<div class="calendar-date">';
            html += '<table class="table-condensed">';
            html += '<thead>';
            html += '<tr>';

            // add empty cell for week number
            if (this.showWeekNumbers)
                html += '<th></th>';

            if (!minDate || minDate.isBefore(calendar.firstDay)) {
                html += '<th class="prev available"><i class="fa fa-arrow-left icon-arrow-left glyphicon glyphicon-arrow-left"></i></th>';
            } else {
                html += '<th></th>';
            }

            var dateHtml = this.locale.monthNames[calendar[1][1].month()] + calendar[1][1].format(" YYYY");

            if (this.showDropdowns) {
                dateHtml = this.renderDropdowns(calendar[1][1], minDate, maxDate);
            }

            html += '<th colspan="5" class="month">' + dateHtml + '</th>';
            if (!maxDate || maxDate.isAfter(calendar.lastDay)) {
                html += '<th class="next available"><i class="fa fa-arrow-right icon-arrow-right glyphicon glyphicon-arrow-right"></i></th>';
            } else {
                html += '<th></th>';
            }

            html += '</tr>';
            html += '<tr>';

            // add week number label
            if (this.showWeekNumbers)
                html += '<th class="week">' + this.locale.weekLabel + '</th>';

            $.each(this.locale.daysOfWeek, function (index, dayOfWeek) {
                html += '<th>' + dayOfWeek + '</th>';
            });

            html += '</tr>';
            html += '</thead>';
            html += '<tbody>';

            for (var row = 0; row < 6; row++) {
                html += '<tr>';

                // add week number
                if (this.showWeekNumbers)
                    html += '<td class="week">' + calendar[row][0].week() + '</td>';

                for (var col = 0; col < 7; col++) {
                    var cname = 'available ';
                    cname += (calendar[row][col].month() == calendar[1][1].month()) ? '' : 'off';

                    if ((minDate && calendar[row][col].isBefore(minDate, 'day')) || (maxDate && calendar[row][col].isAfter(maxDate, 'day'))) {
                        cname = ' off disabled ';
                    } else if (calendar[row][col].format('YYYY-MM-DD') == selected.format('YYYY-MM-DD')) {
                        cname += ' active ';
                        if (calendar[row][col].format('YYYY-MM-DD') == this.startDate.format('YYYY-MM-DD')) {
                            cname += ' start-date ';
                        }
                        if (calendar[row][col].format('YYYY-MM-DD') == this.endDate.format('YYYY-MM-DD')) {
                            cname += ' end-date ';
                        }
                    } else if (calendar[row][col] >= this.startDate && calendar[row][col] <= this.endDate) {
                        cname += ' in-range ';
                        if (calendar[row][col].isSame(this.startDate)) { cname += ' start-date '; }
                        if (calendar[row][col].isSame(this.endDate)) { cname += ' end-date '; }
                    }

                    var title = 'r' + row + 'c' + col;
                    html += '<td class="' + cname.replace(/\s+/g, ' ').replace(/^\s?(.*?)\s?$/, '$1') + '" data-title="' + title + '">' + calendar[row][col].date() + '</td>';
                }
                html += '</tr>';
            }

            html += '</tbody>';
            html += '</table>';
            html += '</div>';

            var i;
            if (this.timePicker) {

                html += '<div class="calendar-time">';
                html += '<select class="hourselect">';
                var start = 0;
                var end = 23;
                var selected_hour = selected.hour();
                if (this.timePicker12Hour) {
                    start = 1;
                    end = 12;
                    if (selected_hour >= 12)
                        selected_hour -= 12;
                    if (selected_hour === 0)
                        selected_hour = 12;
                }

                for (i = start; i <= end; i++) {
                    if (i == selected_hour) {
                        html += '<option value="' + i + '" selected="selected">' + i + '</option>';
                    } else {
                        html += '<option value="' + i + '">' + i + '</option>';
                    }
                }

                html += '</select> : ';

                html += '<select class="minuteselect">';

                for (i = 0; i < 60; i += this.timePickerIncrement) {
                    var num = i;
                    if (num < 10)
                        num = '0' + num;
                    if (i == selected.minute()) {
                        html += '<option value="' + i + '" selected="selected">' + num + '</option>';
                    } else {
                        html += '<option value="' + i + '">' + num + '</option>';
                    }
                }

                html += '</select> ';

                if (this.timePicker12Hour) {
                    html += '<select class="ampmselect">';
                    if (selected.hour() >= 12) {
                        html += '<option value="AM">AM</option><option value="PM" selected="selected">PM</option>';
                    } else {
                        html += '<option value="AM" selected="selected">AM</option><option value="PM">PM</option>';
                    }
                    html += '</select>';
                }

                html += '</div>';

            }

            return html;

        },

        remove: function() {

            this.container.remove();
            this.element.off('.daterangepicker');
            this.element.removeData('daterangepicker');

        }

    };

    $.fn.daterangepicker = function (options, cb) {
        this.each(function () {
            var el = $(this);
            if (el.data('daterangepicker'))
                el.data('daterangepicker').remove();
            el.data('daterangepicker', new DateRangePicker(el, options, cb));
        });
        return this;
    };

}));

/*!
 * PATCHED by Artem Mevsha
 * added strings 308-316
 *
 * PATCHED by Denis Vitiuk
 * added strings 320-322
 *
 * dragtable
 *
 * @Version 2.0.13
 *
 * Copyright (c) 2010-2013, Andres akottr@gmail.com
 * Dual licensed under the MIT (MIT-LICENSE.txt)
 * and GPL (GPL-LICENSE.txt) licenses.
 *
 * Inspired by the the dragtable from Dan Vanderkam (danvk.org/dragtable/)
 * Thanks to the jquery and jqueryui comitters
 *
 * Any comment, bug report, feature-request is welcome
 * Feel free to contact me.
 */

/* TOKNOW:
 * For IE7 you need this css rule:
 * table {
 *   border-collapse: collapse;
 * }
 * Or take a clean reset.css (see http://meyerweb.com/eric/tools/css/reset/)
 */

/* TODO: investigate
 * Does not work properly with css rule:
 * html {
 *      overflow: -moz-scrollbars-vertical;
 *  }
 * Workaround:
 * Fixing Firefox issues by scrolling down the page
 * http://stackoverflow.com/questions/2451528/jquery-ui-sortable-scroll-helper-element-offset-firefox-issue
 *
 * var start = $.noop;
 * var beforeStop = $.noop;
 * if($.browser.mozilla) {
 * var start = function (event, ui) {
 *               if( ui.helper !== undefined )
 *                 ui.helper.css('position','absolute').css('margin-top', $(window).scrollTop() );
 *               }
 * var beforeStop = function (event, ui) {
 *              if( ui.offset !== undefined )
 *                ui.helper.css('margin-top', 0);
 *              }
 * }
 *
 * and pass this as start and stop function to the sortable initialisation
 * start: start,
 * beforeStop: beforeStop
 */
/*
 * Special thx to all pull requests comitters
 */

(function($) {
  $.widget("akottr.dragtable", {
    options: {
      revert: false,               // smooth revert
      dragHandle: '.table-handle', // handle for moving cols, if not exists the whole 'th' is the handle
      maxMovingRows: 50,           // 1 -> only header. 40 row should be enough, the rest is usually not in the viewport
      excludeFooter: false,        // excludes the footer row(s) while moving other columns. Make sense if there is a footer with a colspan. */
      onlyHeaderThreshold: 100,    // TODO:  not implemented yet, switch automatically between entire col moving / only header moving
      dragaccept: null,            // draggable cols -> default all
      persistState: null,          // url or function -> plug in your custom persistState function right here. function call is persistState(originalTable)
      restoreState: null,          // JSON-Object or function:  some kind of experimental aka Quick-Hack TODO: do it better
      exact: true,                 // removes pixels, so that the overlay table width fits exactly the original table width
      clickDelay: 10,              // ms to wait before rendering sortable list and delegating click event
      containment: null,           // @see http://api.jqueryui.com/sortable/#option-containment, use it if you want to move in 2 dimesnions (together with axis: null)
      cursor: 'move',              // @see http://api.jqueryui.com/sortable/#option-cursor
      cursorAt: false,             // @see http://api.jqueryui.com/sortable/#option-cursorAt
      distance: 0,                 // @see http://api.jqueryui.com/sortable/#option-distance, for immediate feedback use "0"
      tolerance: 'pointer',        // @see http://api.jqueryui.com/sortable/#option-tolerance
      axis: 'x',                   // @see http://api.jqueryui.com/sortable/#option-axis, Only vertical moving is allowed. Use 'x' or null. Use this in conjunction with the 'containment' setting
      beforeStart: $.noop,         // returning FALSE will stop the execution chain.
      beforeMoving: $.noop,
      beforeReorganize: $.noop,
      beforeStop: $.noop
    },
    originalTable: {
      el: null,
      selectedHandle: null,
      sortOrder: null,
      startIndex: 0,
      endIndex: 0
    },
    sortableTable: {
      el: $(),
      selectedHandle: $(),
      movingRow: $()
    },
    persistState: function() {
      var _this = this;
      this.originalTable.el.find('th').each(function(i) {
        if (this.id !== '') {
          _this.originalTable.sortOrder[this.id] = i;
        }
      });
      $.ajax({
        url: this.options.persistState,
        data: this.originalTable.sortOrder
      });
    },
    /*
     * persistObj looks like
     * {'id1':'2','id3':'3','id2':'1'}
     * table looks like
     * |   id2  |   id1   |   id3   |
     */
    _restoreState: function(persistObj) {
      for (var n in persistObj) {
        this.originalTable.startIndex = $('#' + n).closest('th').prevAll().size() + 1;
        this.originalTable.endIndex = parseInt(persistObj[n] + 1, 10);
        this._bubbleCols();
      }
    },
    // bubble the moved col left or right
    _bubbleCols: function() {
      var i, j, col1, col2;
      var from = this.originalTable.startIndex;
      var to = this.originalTable.endIndex;
      /* Find children thead and tbody.
       * Only to process the immediate tr-children. Bugfix for inner tables
       */
      var thtb = this.originalTable.el.children();
      if (this.options.excludeFooter) {
        thtb = thtb.not('tfoot');
      }
      if (from < to) {
        for (i = from; i < to; i++) {
          col1 = thtb.find('> tr > td:nth-child(' + i + ')')
            .add(thtb.find('> tr > th:nth-child(' + i + ')'));
          col2 = thtb.find('> tr > td:nth-child(' + (i + 1) + ')')
            .add(thtb.find('> tr > th:nth-child(' + (i + 1) + ')'));
          for (j = 0; j < col1.length; j++) {
            swapNodes(col1[j], col2[j]);
          }
        }
      } else {
        for (i = from; i > to; i--) {
          col1 = thtb.find('> tr > td:nth-child(' + i + ')')
            .add(thtb.find('> tr > th:nth-child(' + i + ')'));
          col2 = thtb.find('> tr > td:nth-child(' + (i - 1) + ')')
            .add(thtb.find('> tr > th:nth-child(' + (i - 1) + ')'));
          for (j = 0; j < col1.length; j++) {
            swapNodes(col1[j], col2[j]);
          }
        }
      }
    },
    _rearrangeTableBackroundProcessing: function() {
      var _this = this;
      return function() {
        _this._bubbleCols();
        _this.options.beforeStop(_this.originalTable);
        _this.sortableTable.el.remove();
        restoreTextSelection();
        // persist state if necessary
        if (_this.options.persistState !== null) {
          $.isFunction(_this.options.persistState) ? _this.options.persistState(_this.originalTable) : _this.persistState();
        }
      };
    },
    _rearrangeTable: function() {
      var _this = this;
      return function() {
        // remove handler-class -> handler is now finished
        _this.originalTable.selectedHandle.removeClass('dragtable-handle-selected');
        // add disabled class -> reorgorganisation starts soon
        _this.sortableTable.el.sortable("disable");
        _this.sortableTable.el.addClass('dragtable-disabled');
        _this.options.beforeReorganize(_this.originalTable, _this.sortableTable);
        // do reorganisation asynchronous
        // for chrome a little bit more than 1 ms because we want to force a rerender
        _this.originalTable.endIndex = _this.sortableTable.movingRow.prevAll().size() + 1;
        setTimeout(_this._rearrangeTableBackroundProcessing(), 50);
      };
    },
    /*
     * Disrupts the table. The original table stays the same.
     * But on a layer above the original table we are constructing a list (ul > li)
     * each li with a separate table representig a single col of the original table.
     */
    _generateSortable: function(e) {
      !e.cancelBubble && (e.cancelBubble = true);
      var _this = this;
      // table attributes
      var attrs = this.originalTable.el[0].attributes;
      var attrsString = '';
      for (var i = 0; i < attrs.length; i++) {
        if (attrs[i].nodeValue && attrs[i].nodeName != 'id' && attrs[i].nodeName != 'width') {
          attrsString += attrs[i].nodeName + '="' + attrs[i].nodeValue + '" ';
        }
      }

      // row attributes
      var rowAttrsArr = [];
      //compute height, special handling for ie needed :-(
      var heightArr = [];
      this.originalTable.el.find('tr').slice(0, this.options.maxMovingRows).each(function(i, v) {
        // row attributes
        var attrs = this.attributes;
        var attrsString = "";
        for (var j = 0; j < attrs.length; j++) {
          if (attrs[j].nodeValue && attrs[j].nodeName != 'id') {
            attrsString += " " + attrs[j].nodeName + '="' + attrs[j].nodeValue + '"';
          }
        }
        rowAttrsArr.push(attrsString);
        heightArr.push($(this).height());
      });

      // compute width, no special handling for ie needed :-)
      var widthArr = [];
      // compute total width, needed for not wrapping around after the screen ends (floating)
      var totalWidth = 0;
      /* Find children thead and tbody.
       * Only to process the immediate tr-children. Bugfix for inner tables
       */
      var thtb = _this.originalTable.el.children();
      if (this.options.excludeFooter) {
        thtb = thtb.not('tfoot');
      }
      thtb.find('> tr > th').each(function(i, v) {
        var w = $(this).outerWidth();
        if ($(this).is(':hidden')){
          w = 0;
        }
        widthArr.push(w);
        totalWidth += w;
      });
      if(_this.options.exact) {
          var difference = totalWidth - _this.originalTable.el.outerWidth();
          widthArr[0] -= difference;
      }
      // one extra px on right and left side
      totalWidth += 2

      var sortableHtml = '<ul class="dragtable-sortable" style="position:absolute; width:' + totalWidth + 'px;">';
      // assemble the needed html
      thtb.find('> tr > th').each(function(i, v) {
        sortableHtml += '<li>';
        sortableHtml += '<table ' + attrsString + '>';
        var row = thtb.find('> tr > th:nth-child(' + (i + 1) + ')');
        if (_this.options.maxMovingRows > 1) {
          row = row.add(thtb.find('> tr > td:nth-child(' + (i + 1) + ')').slice(0, _this.options.maxMovingRows - 1));
        }
        row.each(function(j) {
          // TODO: May cause duplicate style-Attribute
          var row_content = $(this).clone().wrap('<div></div>').parent().html();
          if (row_content.toLowerCase().indexOf('<th') === 0) sortableHtml += "<thead>";
          sortableHtml += '<tr ' + rowAttrsArr[j] + '" style="height:' + heightArr[j] + 'px;">';
          sortableHtml += row_content;
          if (row_content.toLowerCase().indexOf('<th') === 0) sortableHtml += "</thead>";
          sortableHtml += '</tr>';
        });
        sortableHtml += '</table>';
        sortableHtml += '</li>';
      });
      sortableHtml += '</ul>';
      this.sortableTable.el = this.originalTable.el.before(sortableHtml).prev();
      // set width if necessary
      this.sortableTable.el.find('> li > table').each(function(i, v) {
        $(this).css('width', widthArr[i] + 'px');
      });

      // assign this.sortableTable.selectedHandle
      this.sortableTable.selectedHandle = this.sortableTable.el.find('th .dragtable-handle-selected');

      var items = !this.options.dragaccept ? 'li' : 'li:has(' + this.options.dragaccept + ')';
      this.sortableTable.el.sortable({
        items: items,
        stop: this._rearrangeTable(),
        // pass thru options for sortable widget
        revert: this.options.revert,
        tolerance: this.options.tolerance,
        containment: this.options.containment,
        cursor: this.options.cursor,
        cursorAt: this.options.cursorAt,
        distance: this.options.distance,
        axis: this.options.axis
      });

      // assign start index
      this.originalTable.startIndex = $(e.target).closest('th').prevAll().size() + 1;

      this.options.beforeMoving(this.originalTable, this.sortableTable);
      // Start moving by delegating the original event to the new sortable table
      this.sortableTable.movingRow = this.sortableTable.el.find('> li:nth-child(' + this.originalTable.startIndex + ')');

      // prevent the user from drag selecting "highlighting" surrounding page elements
      disableTextSelection();
      // clone the initial event and trigger the sort with it
      this.sortableTable.movingRow.trigger($.extend($.Event(e.type), {
        which: 1,
        clientX: e.clientX,
        clientY: e.clientY,
        pageX: $('.crm-table-wrapper').scrollLeft() + e.pageX,
        pageY: e.pageY,
        screenX: e.screenX,
        screenY: e.screenY
      }));

      // Some inner divs to deliver the posibillity to style the placeholder more sophisticated
      var placeholder = this.sortableTable.el.find('.ui-sortable-placeholder');
      if(!placeholder.height()  <= 0) {
        placeholder.css('height', this.sortableTable.el.find('.ui-sortable-helper').height());
      }

      // event before drag each column for table with scrollbar
      this._beforeDrag();
    },
    bindTo: {},
    _beforeDrag: function() {
      var $wrapper = $('.crm-table-wrapper');
      $wrapper.find('.dragtable-sortable').wrap('<div class="dragtable-wrapper"></div>');
      $wrapper.find('.dragtable-wrapper').width($('.crm-table-wrapper').width()).scrollLeft($('.crm-table-wrapper').scrollLeft());
      $wrapper.find('.dragtable-wrapper th:hidden').each(function(){
        $(this).closest('li').hide();
      });
    },
    _create: function() {
      this.originalTable = {
        el: this.element,
        selectedHandle: $(),
        sortOrder: {},
        startIndex: 0,
        endIndex: 0
      };
      // bind draggable to 'th' by default
      this.bindTo = this.originalTable.el.find('th');
      // filter only the cols that are accepted
      if (this.options.dragaccept) {
        this.bindTo = this.bindTo.filter(this.options.dragaccept);
      }
      // bind draggable to handle if exists
      if (this.bindTo.find(this.options.dragHandle).size() > 0) {
        this.bindTo = this.bindTo.find(this.options.dragHandle);
      }
      // restore state if necessary
      if (this.options.restoreState !== null) {
        $.isFunction(this.options.restoreState) ? this.options.restoreState(this.originalTable) : this._restoreState(this.options.restoreState);
      }
      var _this = this;
      this.bindTo.mousedown(function(evt) {
        // listen only to left mouse click
        if(evt.which!==1) return;
        if (_this.options.beforeStart(_this.originalTable) === false) {
          return;
        }
        clearTimeout(this.downTimer);
        this.downTimer = setTimeout(function() {
          _this.originalTable.selectedHandle = $(this);
          _this.originalTable.selectedHandle.addClass('dragtable-handle-selected');
          _this._generateSortable(evt);
        }, _this.options.clickDelay);
      }).mouseup(function(evt) {
        clearTimeout(this.downTimer);
      });
    },
    redraw: function(){
      this.destroy();
      this._create();
    },
    destroy: function() {
      this.bindTo.unbind('mousedown');
      $.Widget.prototype.destroy.apply(this, arguments); // default destroy
      // now do other stuff particular to this widget
    }
  });

  /** closure-scoped "private" functions **/

  var body_onselectstart_save = $(document.body).attr('onselectstart'),
    body_unselectable_save = $(document.body).attr('unselectable');

  // css properties to disable user-select on the body tag by appending a <style> tag to the <head>
  // remove any current document selections

  function disableTextSelection() {
    // jQuery doesn't support the element.text attribute in MSIE 8
    // http://stackoverflow.com/questions/2692770/style-style-textcss-appendtohead-does-not-work-in-ie
    var $style = $('<style id="__dragtable_disable_text_selection__" type="text/css">body { -ms-user-select:none;-moz-user-select:-moz-none;-khtml-user-select:none;-webkit-user-select:none;user-select:none; }</style>');
    $(document.head).append($style);
    $(document.body).attr('onselectstart', 'return false;').attr('unselectable', 'on');
    if (window.getSelection) {
      window.getSelection().removeAllRanges();
    } else {
      document.selection.empty(); // MSIE http://msdn.microsoft.com/en-us/library/ms535869%28v=VS.85%29.aspx
    }
  }

  // remove the <style> tag, and restore the original <body> onselectstart attribute

  function restoreTextSelection() {
    $('#__dragtable_disable_text_selection__').remove();
    if (body_onselectstart_save) {
      $(document.body).attr('onselectstart', body_onselectstart_save);
    } else {
      $(document.body).removeAttr('onselectstart');
    }
    if (body_unselectable_save) {
      $(document.body).attr('unselectable', body_unselectable_save);
    } else {
      $(document.body).removeAttr('unselectable');
    }
  }

  function swapNodes(a, b) {
    var aparent = a.parentNode;
    var asibling = a.nextSibling === b ? a : a.nextSibling;
    b.parentNode.insertBefore(a, b);
    aparent.insertBefore(b, asibling);
  }
})(jQuery);

(function ($) {
    "use strict";

    //функція сховання правого сайд бара
    function second_passed() {  
        $('#container').removeClass('nyw');
        $('.header').removeClass('nyw');
        $('.right-sidebar').removeClass('nyw');        
        $('#main-content').removeClass('nyw');
    }

    $(document).ready(function () {
        /*==Left Navigation Accordion ==*/
        if ($.fn.dcAccordion) {
            $('#nav-accordion').dcAccordion({
                eventType: 'click',
                autoClose: true,
                saveState: true,
                disableLink: true,
                speed: 'slow',
                showCount: false,
                autoExpand: true,
                classExpand: 'dcjq-current-parent'
            });
        }
        /*==Slim Scroll ==*/
        if ($.fn.slimScroll) {
            $('.event-list').slimscroll({
                height: '305px',
                wheelStep: 20
            });
            $('.conversation-list').slimscroll({
                height: '360px',
                wheelStep: 35
            });
            $('.to-do-list.scrollable').slimscroll({
                height: '300px',
                wheelStep: 35
            });
        }
        /*==Nice Scroll ==*/
        if ($.fn.niceScroll) {


            $(".leftside-navigation").niceScroll({
                cursorcolor: "#1FB5AD",
                cursorborder: "0px solid #fff",
                cursorborderradius: "0px",
                cursorwidth: "3px"
            });

            $(".leftside-navigation").getNiceScroll().resize();
            if ($('#sidebar').hasClass('hide-left-bar')) {
                $(".leftside-navigation").getNiceScroll().hide();
            }
            $(".leftside-navigation").getNiceScroll().show();
        }

        /*==Easy Pie chart ==*/
        if ($.fn.easyPieChart) {

            $('.notification-pie-chart').easyPieChart({
                onStep: function (from, to, percent) {
                    $(this.el).find('.percent').text(Math.round(percent));
                },
                barColor: "#39b6ac",
                lineWidth: 3,
                size: 50,
                trackColor: "#efefef",
                scaleColor: "#cccccc"

            });

            $('.pc-epie-chart').easyPieChart({
                onStep: function(from, to, percent) {
                    $(this.el).find('.percent').text(Math.round(percent));
                },
                barColor: "#5bc6f0",
                lineWidth: 3,
                size:50,
                trackColor: "#32323a",
                scaleColor:"#cccccc"

            });

        }

        /*== SPARKLINE==*/
        if ($.fn.sparkline) {

            $(".d-pending").sparkline([3, 1], {
                type: 'pie',
                width: '40',
                height: '40',
                sliceColors: ['#e1e1e1', '#8175c9']
            });



            var sparkLine = function () {
                $(".sparkline").each(function () {
                    var $data = $(this).data();
                    ($data.type == 'pie') && $data.sliceColors && ($data.sliceColors = eval($data.sliceColors));
                    ($data.type == 'bar') && $data.stackedBarColor && ($data.stackedBarColor = eval($data.stackedBarColor));

                    $data.valueSpots = {
                        '0:': $data.spotColor
                    };
                    $(this).sparkline($data.data || "html", $data);


                    if ($(this).data("compositeData")) {
                        $spdata.composite = true;
                        $spdata.minSpotColor = false;
                        $spdata.maxSpotColor = false;
                        $spdata.valueSpots = {
                            '0:': $spdata.spotColor
                        };
                        $(this).sparkline($(this).data("compositeData"), $spdata);
                    };
                });
            };

            var sparkResize;
            $(window).resize(function (e) {
                clearTimeout(sparkResize);
                sparkResize = setTimeout(function () {
                    sparkLine(true)
                }, 500);
            });
            sparkLine(false);



        }


        if ($(".target-sell").length) {
            if ($.fn.plot) {
                var datatPie = [30, 50];
                // DONUT
                $.plot($(".target-sell"), datatPie, {
                    series: {
                        pie: {
                            innerRadius: 0.6,
                            show: true,
                            label: {
                                show: false

                            },
                            stroke: {
                                width: .01,
                                color: '#fff'

                            }
                        }




                    },

                    legend: {
                        show: true
                    },
                    grid: {
                        hoverable: true,
                        clickable: true
                    },

                    colors: ["#ff6d60", "#cbcdd9"]
                });
            }
        }



        /*==Collapsible==*/
        //сворачивает/разворачивает список каналов
        /*$('.widget-head').click(function (e) {
            var widgetElem = $(this).children('.widget-collapse').children('i');

            $(this)
                .next('.widget-container')
                .slideToggle('slow');
            if ($(widgetElem).hasClass('ico-minus')) {
                $(widgetElem).removeClass('ico-minus');
                $(widgetElem).addClass('ico-plus');
            } else {
                $(widgetElem).removeClass('ico-plus');
                $(widgetElem).addClass('ico-minus');
            }
            e.preventDefault();
        });*/




        /*==Sidebar Toggle==*/

        $(".leftside-navigation .sub-menu > a").click(function () {
            var o = ($(this).offset());
            var diff = 80 - o.top;
            if (diff > 0)
                $(".leftside-navigation").scrollTo("-=" + Math.abs(diff), 500);
            else
                $(".leftside-navigation").scrollTo("+=" + Math.abs(diff), 500);
        });



        $('.sidebar-toggle-box .fa-bars').click(function (e) {

            $(".leftside-navigation").niceScroll({
                cursorcolor: "#1FB5AD",
                cursorborder: "0px solid #fff",
                cursorborderradius: "0px",
                cursorwidth: "3px"
            });

            $('#sidebar').toggleClass('hide-left-bar');
            if ($('#sidebar').hasClass('hide-left-bar')) {
                $(".leftside-navigation").getNiceScroll().hide();
            }
            $(".leftside-navigation").getNiceScroll().show();
            $('#main-content').toggleClass('merge-left');
            e.stopPropagation();

            // if (instanceAdditionalPanel && instanceAdditionalPanel.isOpen()) {
            //     instanceAdditionalPanel.close();
            // }

            if ($('.header').hasClass('merge-header')) {
                $('.header').removeClass('merge-header')
            }


        });

        // Toggle Rigth Menu
        /*$('.toggle-right-box .fa-bars').click(function (e) {
            $('#container').addClass('nyw');
            $('.header').addClass('nyw');
            $('.right-sidebar').addClass('nyw');
            $('#main-content').addClass('nyw');
            $('#container').toggleClass('open-right-panel');
            $('.right-sidebar').toggleClass('open-right-bar');
            $('.header').toggleClass('merge-header');

            setTimeout(second_passed, 300) 

            e.stopPropagation();
        });*/

        $('.header,#main-content,#sidebar').click(function () {
            // if ($('#container').hasClass('open-right-panel')) {
            //     $('#container').removeClass('open-right-panel')
            // }
            // if ($('.right-sidebar').hasClass('open-right-bar')) {
            //     $('.right-sidebar').removeClass('open-right-bar')
            // }
            // if ($('.header').hasClass('merge-header')) {
            //     $('.header').removeClass('merge-header')
            // }


        });


        // $('.panel .tools .fa').click(function () {
        //     var el = $(this).closest(".panel").children(".panel-body");
        //     if ($(this).hasClass("fa-chevron-down")) {
        //         $(this).removeClass("fa-chevron-down").addClass("fa-chevron-up");
        //         el.slideUp(200);
        //     } else {
        //         $(this).removeClass("fa-chevron-up").addClass("fa-chevron-down");
        //         el.slideDown(200); }
        // });

        $(document).on('click', '.panel .tools .fa-cog', function () {
            $(this).removeClass('fa-chevron-down');
        });

        $(document).on('click', '.panel .tools .fa-times', function () {
            $(this).parents(".panel").parent().remove();
        });

        // tool tips

        $('.tooltips').tooltip();

        // popovers

        $('.popovers').popover();

    });


})(jQuery);
var LocalStorage = function(){
    for(var key in LocalStorageObject) {
        this[key] = LocalStorageObject[key];
    }
}


var LocalStorageObject = {
    key : '',
    value : '',
    pci : null,
    pdi : null,
    async : false,

    clear : function(){
        this.key = '';
        this.value = '';
        this.pci = null;
        this.pdi = null;
        this.async = false;

        return this;
    },
    isLocalStorageAvailable : function(){
        try {
            return 'localStorage' in window && window['localStorage'] !== null;
        } catch (e) {
            return false;
        }
    },
    writeStorage : function(key, value){
        if(this.isLocalStorageAvailable) localStorage.setItem(key, value);
        return this;
    },
    readStorage : function(key){
        if(this.isLocalStorageAvailable) return localStorage.getItem(key);
    },
    setKey : function(key){
        this.key = key;
        return this;
    },
    getKey : function(){
        return this.key;
    },
    setPci : function(pci){
        this.pci = pci;
        return this;
    },
    setPdi : function(pdi){
        this.pdi = pdi;
        return this;
    },
    setAsync : function(async){
        this.async = async;
        return this;
    },

    /**
    *   Запись параметра в локальное хранилище
        index - уникальний индекс данных в массиве 
        value_append - сами данные
        set_in_array - если true, данние из value_append будут помещены в мыссив
        append - если true, данные будут добавлены к имеющимся  
    */
    setValue : function(index, value_append, set_in_array, append){
        var value = this.readStorage(this.getKey());
        var beSet = false;
        value = JSON.parse(value);

        var result = {}; 
        var value_new = [];
        if(!$.isEmptyObject(value)){
            $.each(value, function(key, val){
                if(key == index){
                    value_new = val;
                    if(append == true){
                        if($.isArray(value_new))
                            value_new.push(value_append);
                        else value_new += value_append;
                    } else {
                        if(set_in_array == true)
                            value_new = [value_append];
                        else value_new = value_append;
                    }
                    result[key] = value_new;
                    beSet = true;
                } else {
                    result[key] = val;
                }
            });
        }
        if(beSet == false){
            if(set_in_array == true)
                result[index] = [value_append];
            else
                result[index] = value_append;
        } 
        this.writeStorage(this.getKey(), JSON.stringify(result));
        
        return this;
    },
    
    
    getValue : function(index){
        var value = this.readStorage(this.getKey());
        value = JSON.parse(value);
        return (value && value[index] ? value[index] : false);
    },
    
    setValueToServer : function(index, value, callback, context){
        if (context && !AjaxContainers[context._action_key]) {
            return;
        }

        AjaxObj
            .createInstance()
            .setUrl(Global.urls.url_set_user_storage)
            .setData({
                'type' : this.getKey(),
                'index' : index,
                'value' : value,
                'pci' : this.pci,
                'pdi' : this.pdi,
            })
            .setType('POST')
            .setDataType('json')
            .setAsync(this.async)
            .setCallBackSuccess(function(data) {
                if(typeof(callback) == 'function') callback(data);
            })
            .setCallBackError(function(){
                if(typeof(callback) == 'function') callback(false);
            })
            .send();
    },

    getValueFromServer : function(index, callback){
        $.ajax({
            url: Global.urls.url_get_user_storage,
            data : {
                'type' : this.getKey(),
                'index' : index,
                'pci' : this.pci,
                'pdi' : this.pdi,
            },
            dataType: "json", type: "POST", async: this.async,
            success: function(data) {
                if(data.status == true)
                    if(typeof(callback) == 'function') callback(data.value);
                else
                    if(typeof(callback) == 'function') callback(false);
            },
            error: function(){
                if(typeof(callback) == 'function') callback(false);
            },
        });
    },

    deleteFromServer : function(index, callback){
        $.ajax({
            url: $('#global_params').data('delete_user_storage'),
            data : {
                'type' : this.getKey(),
                'index' : index,
                'pci' : this.pci,
                'pdi' : this.pdi,
            },
            dataType: "json", type: "POST", async: this.async,
            success: function(data) {
                if(data.status = true)
                    if(typeof(callback) == 'function') callback(data.value);
                else
                    if(typeof(callback) == 'function') callback(false);
            },
            error: function(){
                if(typeof(callback) == 'function') callback(false);
            },
        });
    },

    delete : function(index){
        var value = this.readStorage(this.getKey());
        value = JSON.parse(value);

        var result = {}; 
        if(!$.isEmptyObject(value)){
            $.each(value, function(key, val){
                if(key == index){
                    return true;  
                } else {
                    result[key] = val;
                }
            });
        }
        this.writeStorage(this.getKey(), JSON.stringify(result));
        
        return this;
    },    
    
   
    
}

// Show/Hide rows in the ListView
//ThDisplay
var ListViewDisplay = {
    _this : null,
    _index : null,
    _hidden_group_index : [],
    
    setThis : function(_this){
        ListViewDisplay._this = _this;
        return this;
    },
    
    setIndex : function(index){
        if(!index){
            if(ListViewDisplay._this == null)
                index = $('.local-storage').data('hidden_index');
            else index = $(ListViewDisplay._this).closest('.local-storage').data('hidden_index');
        }
        ListViewDisplay._index = index;
        return this;
    },
    getColumnWidth : function(){
        var col_index = {};
        $('.list-table thead').find('th').each(function(i, ul){
            if(i==0) return true;
            if($(ul).css('display') == 'none') return true;
            col_index[$(ul).data('name')] = $(ul).width();
        });
        return col_index;
    },
    setHiddenGroupIndex : function(context){
        var table = $('.list_view_block .crm-table');
        ListViewDisplay._hidden_group_index = [];
        $('.table-dropdown').find('input[type="checkbox"]').each(function(i, ul){
            var el = $(ul);
            if(el.attr('checked') != 'checked'){
                var index = table.find('th[data-group_index="'+el.data('group_index')+'"]').hide().index();
                ListViewDisplay.hideAllRows(table, index, true);
                ListViewDisplay._hidden_group_index.push(el.data('group_index'));
            } else {
                var index = table.find('th[data-group_index="'+el.data('group_index')+'"]').show().index();
                ListViewDisplay.hideAllRows(table, index, false);
            }
        });
        ListViewDisplay.writeLocalStorage(context);
        ListView.editLinkreDraw();
        return this;
    },

    setFromStorage : function(){
        ListViewDisplay.readLocalStorage();
        $('.table-dropdown ul input').each(function(i, ul){
            if($.inArray($(ul).data('group_index')+'', ListViewDisplay._hidden_group_index) != -1){
                $(ul).attr('checked', false);
            } else {
                $(ul).attr('checked', true);
            }
        });

        return this;
    },

    hideAllRows : function(table, index, hide){
        table.find('tbody tr').each(function(i, ul){
            if(hide == true){
                $(ul).children('td').eq(index).hide();
            } else {
                $(ul).children('td').eq(index).show();
            }
        });
    },

    writeLocalStorage : function(context){
        var lStorage = new LocalStorage();

        lStorage
            .clear()
            .setKey('list_th_hide')
            .setValueToServer(ListViewDisplay._index, ListViewDisplay._hidden_group_index, null, context);
    },

    readLocalStorage : function(){
        var lStorage = new LocalStorage();

        lStorage
            .clear()
            .setKey('list_th_hide')
            .getValueFromServer(ListViewDisplay._index, function(data){ ListViewDisplay._hidden_group_index = data; });
    },
}




var ListViewPosition = {
    _this : null,
    _index : null,
    _storage_value : {},

    setThis : function(_this){
        this._this = _this;
        return this;
    },

    prepare : function(){
        this.prepareStorageValue();
        this.prepareIndex();

        return this;
    },

    prepareStorageValue : function(){
        var _this = this;

        $.each($(this._this).find('th[data-name]'), function (key, value) {
            var $value = $(value);
            _this._storage_value[$value.data('name')] = $value.index();
        })

        return this;
    },

    prepareIndex : function(){
        this._index = this._this.data('sort_index');
        return this;
    },


    writeLocalStorage : function(context){
        var lStorage = new LocalStorage();
        var _this = this;

        lStorage
            .clear()
            .setKey('list_th_position')
            .setValueToServer(_this._index, _this._storage_value, null, context);
    },


}

/**
 * Created by andrew on 10/4/17.
 */

;(function (exports) {
    var _public, Url,
        _self = {}; //link for instance

    _public = {
        url: null,
        constructor: function (url) {
            if (url) {
                this.setUrl(url);
            }

            return this;
        },
        setUrl: function (url) {
            this.url = url;

            return this;
        },
        getUrl: function () {
            return this.url;
        },
        appendParams: function (value) {
            this.url = Url.appendParams(this.url, value);

            return this;
        },
        replaceParams: function(key, value){
            var json;

            if (!this.url) {
                return null;
            }

            json = Url.getParams(this.url) || {};

            this.url = this.url.replace(key, json[key]);

            return this.url;
        },
        parse: function() {
            return Url.getParams(this.url);
        },
        getParams: function() {
            return Url.getParams(this.url);
        },
        removeParams: function (key) {
            var json, index;

            json = Url.getParams(this.url) || {};

            this.url = this.url.replace(key+'='+json[key], '');

            index = this.url.lastIndexOf('&');

            if (index > 0) {
                this.url = this.url.substring(0, index);
            }

            return this;
        },
        getCopyId: function () {
            return Url.getCopyId(this.url);
        },
        /*работает с перезаписыванием по ключу параметров в юрл*/
        jsonToUrl: function (json) {
            var result, str,
                _this = this,
                currentUrl = Url.getParams(this.url),
                url = this.url.split('?');

            str = this.url;

            if (!Object.keys(json).length) return this;

            $.each(Object.keys(json), function (key, value) {
                if(url[1]){
                    result = str + '&';
                } else {
                    result = str + '?';
                }

                if (currentUrl && currentUrl[value]) {
                    //replace
                    result = str.replace(value+'='+currentUrl[value], value+'='+json[value])
                } else { // new
                    result += value +'=' + json[value];
                }

                str = result;
                url = result.split('?');

               return this;
            });
            this.url = str;

            return this;
        }
    };

    Url = {
        createInstance: function (url) {
            var Obj = function(){
                for(var key in _public){
                    this[key] = _public[key];
                }
            }

            return new Obj().constructor(url);
        },
        // добавляет параметры в урлу
        appendParams: function(base_url, params_str){
            var result,
                url = base_url.split("?");

            params_str = (typeof params_str == 'undefined') ? '' : params_str;

            if (params_str) {
                if(url[1]){
                    result = base_url + '&' + params_str;
                } else {
                    result = base_url + '?' + params_str;
                }
            }

            return result;
        },
        parse: function(url){
            return JSON.parse('{"' + decodeURI(url).replace(/"/g, '\\"').replace(/&/g, '","').replace(/=/g, '":"') + '"}');
        },
        // возвращает параметры урла как обьект
        parseURLParams: function(url){
            var $_GET = {};

            if(!url) url = window.location.search.substring(1).split("&");

            for(var i = 0; i < url.length; i++){
                var getVar = url[i].split("=");
                if(getVar[0]) $_GET[getVar[0]] = typeof(getVar[1]) == "undefined" ? "" : getVar[1];
            }
            return $_GET;
        },
        setHash: function (hash) {
            history.pushState(null, null, hash);
        },
        replaceHash: function (hash) {
            history.replaceState(null, null, hash);
        },
        getCurrent : function () {
            return document.location.href;
        },
        redirect: function (url) {
            document.location.href = url;
        },
        replace: function (from, to) {
            history.replaceState(null, null, location.href.replace(from, to));
        },
        replaceState: function (from, to) {
            history.replaceState(null, null, location.href.replace(from, to));
        },
        getCopyId: function (url) {
            var copy_id = url.substring(url.lastIndexOf('/')+1);

            return copy_id;
        },
        parseFull: function () {
            var array,
                data = {};

            array = location.pathname.substring(1).split('/');
            data['controller'] = array[1];

            if ($.inArray(array[1],[ListView._type, CalendarView._type, ProcessView.type])>= 0) {
                data['action'] = 'show';
            }

            data['pathname'] = location.pathname.substring();
            data['id'] =  this.getCopyId(location.pathname);

            return data;
        },
        appendParam: function (param) {
            history.replaceState(null, null, param);
        },
        getId: function (url) {
            return url.substring(url.lastIndexOf('/')+1);
        },
        getParams: function(url){
            var result = null;
            url = url.split("?");

            if(url[1]){
                result = {};
                var params = url[1].split("&");

                $.each(params, function(key, value){
                    var value_tmp = value.split("=");
                    if(typeof value_tmp[1] == 'undefined') value_tmp[1] = '';
                    result[value_tmp[0]] = value_tmp[1];
                });
            }

            return result;
        },
        getParam: function(url, key){
            var result = this.getParams(url || decodeURI(location.href));

            return result && result[key];
        },
        getWithOutParams: function(url, with_out_key, return_params_only){
            if(!url) return url;
            url_list = url.split("?");
            var params = this.getParams(url);
            var params_tmp = [];

            if(params && !$.isEmptyObject(params)){
                $.each(params, function(key, value){
                    if($.inArray(key, with_out_key) === -1){
                        params_tmp.push(key + '=' + value);
                    }
                });
            }

            params = '';
            if(params_tmp && !$.isEmptyObject(params_tmp)){
                $.each(params_tmp, function(key, value){
                    params = params_tmp.join('&');
                });
            }

            if(params){
                if(return_params_only == false)
                    return url_list[0] + '?' + params;
                else
                    return params;
            } else {
                if(return_params_only == false)
                    return url_list[0];
                else
                    return '';
            }
        },
        clean: function () {
            var url,
                part = location.href.indexOf('?');

            if (part) {
                if (!location.href.substring(part+1).length) {
                    url = location.href.substring(0, location.href.indexOf('?'));
                    history.replaceState(null, null, url);
                }
            }

            return this;
        },
    }

    exports.Url = Url;
})(window);

/**
 * Created by andrew on 11/23/17.
 */

/*------------------------------------------------------*/
/*--         modalDialog                              --*/
/*------------------------------------------------------*/

;(function (exports) {
    var _private, _public, ModalDialog,
        _self = {}; //link for instance

    var ModelDialog = {
        disableOutClick: false, // true - agree, false - disagree
    };

    _private = {
        _model:null,

        createModel : function (modalParent) {
            _self._model = Object.create(modalParent || ModelGlobal);

            for(var key in ModelDialog) {
                _self._model[key] = ModelDialog[key];
            };

            return _self._model;
        },
        onClickOutDialog : function(e) {
            var $this = $(this),
                client = $this.find('.client-name'),
                editable = client.find('.editable-field');

            $('.emoji-menu').hide();
            if (editable.html() == '') {
                $this.find('.edit-dropdown').addClass('open')
                    .end().find('.client-name .form-control').select();
            }

            editable.addClass('opacityIn');
            client.find('.edit-dropdown').removeClass('open');

            return true;
        },
        onKeyUpInfoPopUp : function (e) {
            if (e.keyCode == 13) {
                $(this).trigger('click');
            }
        },
        onClickOutSide : function(e) {
            var instance = e.data.instance;

            if (instance.getStatusAllowToCloseOutSide() &&  $(e.target).is('.modal.in') && window.getSelection().type != 'Range') {
                instance.hide();
            }
        },
    };

    _public = {
        _parent: null,
        content_instance: null,
        _allow_close_out_side: true,

        //always check attribute
        setPosition: function (position) {
            if ($(this._content).filter('[data-is-center]').length || position) {
                position = ($(window).height()-256)/2+'px';
            } else {
                position = 0;
            }

            $('.select[data-type="template"]').closest('.modal-dialog').css('margin-top', position);
            $('.panel.sm_extension[data-action="add"]').css('margin-top', position);
        },
        setParent: function (_parent) {
            this._parent = _parent;
        },
        setStatusAllowToCloseOutSide: function (status) {
            this._allow_close_out_side = status;

            return this;
        },
        getStatusAllowToCloseOutSide: function () {
            return this._allow_close_out_side;
        },
        getContentInstance: function () {
            return this.content_instance;
        },
        setContentInstance: function (instance) {
            this.content_instance = instance;

            return this;
        }
    };

    ModalDialog = {
        TYPE_POSITION_TOP: 0,
        TYPE_POSITION_CENTER: 1,

        _interface: 'modalDialog',
        _content: null, // content part window
        _element: null,
        _scrolled: null, // was scrolled
        default_module_name : 'modal_dialog',
        modal_dialog_shown : [],
        modal_dialog_shown_window : [],
        dinamic_data : null,
        callback_success : {},
        _callback_success: null,
        _store_instances: {},
        _enable_click_outside: true,
        _show_backdrop : true,
        _name_clazz_title : '',
        _cleaning: null,

        createInstance : function(modelParent){
            var Obj, instance;

            Obj = function(){
                for(var key in modalDialog){
                    this[key] = modalDialog[key];
                }

                for(var key in _public){
                    this[key] = _public[key];
                }
            }

            Obj.prototype = Object.create(Global);

            _self.createModel(modelParent);

            instance = new Obj().constructor();
            instance.timestamp = moment().unix();
            instance.addInstance(instance.timestamp, instance);

            return instance;
        },
        getModel : function () {
            return _self._model;
        },
        getOpens: function () {
            var _this = this,
                data = {};

            $.each($('.edit-view'), function () {
                var key = $(this).data('unique_index');

                data[key] = _this.getDataFromStore(key);
            });

            return data;
        },
        constructor : function () {
            this.events();

            return this;
        },

        // реализация интерфейсов.
        implements: function (object) {
            object.implements.call(this);

            return this;
        },

        importInstance : function (instance) {
            var _instance = this
                .createInstance()
                .importModel(instance)

            return _instance;
        },

        getInstanceByKey : function(key){
            return this.getInstanceFromKey(key);
        },
        onCancelDialog : function(e) {
            Console.log('onCancelDialog()', e);
            var json = $(this).closest('.edit-view').data();
            
            if (!json) return true;
            
            var key = Global.createUniqueKey(json.copy_id, json.id);

            if (key) {
                Draft.removeDraft(key);
            }
        },
        importModel : function (data) {

            for(var key in data){
                if (typeof data[key] != 'object') {
                    this[key] = data[key];
                }
            }

            return this;
        },
        saveInstance : function (instance) {
            if (instance) {
                this._store_instances[instance._interface] = instance;
            }
            return this;
        },
        getInstanceFromStorage : function (key) {
            return key ? this._store_instances[key] : null;
        },
        setParentClass : function (title) {
            if (title) {
                this._name_clazz_title = title;
            }
            return this;
        },
        setShowBackdrop : function (status) {
            this._show_backdrop = status;

            return this;
        },
        setViewPosition : function () {
            if (!Base.isEditView()) {
                $('.upload-modal').closest('.modal').addClass('popup-upload');
            }
            return this;
        },
        setContent : function (data) {
            this._content = data;
            return this;
        },
        setElement : function (_element) {
            this._element = _element;

            return this;
        },
        //getModalName
        getModalName : function(index){
            if(typeof index == 'undefined' || index == false){
                index = modalDialog.modal_dialog_shown.length - 1;
            } else {
                index = modalDialog.modal_dialog_shown.length - index;
            }
            return modalDialog.modal_dialog_shown[index];
        },

        isOpen : function () {
            return modalDialog.modal_dialog_shown.length ? true : false;
        },
        getCountOpen : function () {
            return modalDialog.modal_dialog_shown.length;
        },

        setCleaning: function(bool) {
            this._cleaning = bool;

            return this;
        },
        isOpenAsHandler : function (callback) {
            if (typeof callback == 'function' && this.isOpen()) {
                callback();
            }
            return this;
        },
        //setCallbackSuccess
        setCallbackSuccess : function(callback){
            var modal_name = this.getModalName();
            modalDialog.callback_success[modal_name] = callback;

            return this;
        },

        deleteCallbackSuccess : function(modal_name){
            if(typeof (modal_name) == 'undefined' || modal_name == false){
                modal_name = modalDialog.getModalName();
            }
            delete modalDialog.callback_success[modal_name];

            return this;
        },

        setScrollTop : function (value) {
            $('.modal').last().scrollTop(value);

            return this;
        },
        getScrollTop : function () {
            return $('.modal').last().scrollTop();
        },

        //getCallbackSuccess
        getCallbackSuccess : function(){
            var modal_name = modalDialog.getModalName();
            if(typeof modalDialog.callback_success[modal_name] == 'function'){
                var callback = modalDialog.callback_success[modal_name];
                modalDialog.deleteCallbackSuccess(modal_name);

                return callback;
            }

            return false;
        },

        //getNewModalName
        getNewModalName : function(){
            for(var i=1; i<100; i++){
                if($('#' + modalDialog.default_module_name + i).length == 0) return modalDialog.default_module_name + i;
            }
            return this;
        },
        afterUpdateContent : function () {
            Global.setScroll();
        },
        events: function () {
            var _this = this,
                model = this.getModel();

            this._events = [
                { parent: document, selector: '.info-popup .yes-button', event: 'click', func: _self.onKeyUpInfoPopUp},
                { parent: document, disable: model.disableOutClick, selector: '#modal_dialog_container .modal', event: 'click', func: _self.onClickOutSide},
                { parent: document, selector: '.modal-dialog', event: 'click', func: _self.onClickOutDialog},
                { parent: document, selector: '.modal-dialog .close-button', event: 'click', func: _self.onCancelDialog}
            ]

            this.addEvents(this._events, {
                'instance': this
            });

            var time = setTimeout(function () {
                clearTimeout(time);
                $('.info-popup .yes-button, .info-popup .close-button').focus();

                $('.modal').last().off('scroll').on('scroll',function() {
                    var key = $(this).find('.edit-view').data('unique_index')

                    modalDialog.getDataFromStore(key)._scrolled = true;
                });
            }, 100);

            return this;
        },

        //show
        show : function(data, noMiddle, callback, modal_name){
            var $dialog, childModal, modal_name, context,
                content = data || this._content,
                ev = $(data).find('.edit-view');

            if (this._cleaning) {
                $('#modal_dialog_container').empty();
            }

            modalDialog.setDataToStore(ev.data('unique_index'), this.getContentInstance() || {});

            if(!modal_name){
                modal_name = modalDialog.getNewModalName();
            }
            modalDialog.modal_dialog_shown.push('#' + modal_name);

            //callback
            if($.isFunction(callback)){
                modalDialog.callback_success['#' + modal_name] = callback;
            }

            context = '<div class="modal {0}" id="'+modal_name+'" tabindex="-1" role="dialog" aria-labelledby="constructorLabel" aria-hidden="true">{1}</div>';
            context = context.replace('{0}', this._name_clazz_title);
            context = context.replace('{1}', content);

            this.modal_dialog_shown_window.push(data);
            $('#modal_dialog_container').append(context);

            //save instance
            this.setElement($('.modal .modal-dialog').last());
            var key = this.timestamp,
                $element = $(this._element);

            $element.data()[key] = this;
            $element.attr('data-key', key);

            this
                .setContent(content)
                .setPosition();

            $dialog = $('#' + modal_name);
            $dialog.modal({
                backdrop: 'static',
                keyboard: false
            });
            childModal = $dialog.find('.modal-dialog');

            if(ev && ev.data('unique_index')){
                $(this._element).data({
                    'edit-view': ev.data()
                })
            }

            //abstract ініціювання view
            if (this._parent) {
                this._parent.initView();
            }

            $dialog.modal('show');
            if(modalDialog.modal_dialog_shown.length > 1) {
                if(noMiddle === true) {
                    $(modalDialog.getModalName()).addClass('back-modal');
                    $(modalDialog.getModalName(2)).hide();

                    // Запрещаем вывод одного и того же модального окна 2 раза
                    var copy_id = $dialog.find('.edit-view').data('copy_id');
                    if ( $(modalDialog.getModalName(2)).find('.edit-view').data('copy_id') == copy_id ) {
                        $(modalDialog.getModalName()).modal('hide');
                    }

                }
                else {
                    $(modalDialog.getModalName(2)).append($('body > .modal-backdrop.in'));

                    childModal = $('#' + modal_name + ' .modal-dialog');
                    childModal.css('margin-top', $(window).height() / 2 - childModal.height() / 2 + 'px');
                }

                if ($('.modal-backdrop.in').length > 1) {
                    $('.modal-backdrop.in').last().remove();
                }
            } else if($('#' + modal_name).find('.modal-dialog').hasClass('upload-modal')) { // This is sile upload in inline-edit. Vertical align for modal
                var $modal = $('#' + modal_name).find('.upload-modal');
                $modal.css('margin-top', $(window).height() / 2 - $modal.height() / 2 + 'px');
            }

            $dialog = childModal.filter('[data-is-center]');
            $dialog.filter('[data-is-center]').css('margin-top', ($(window).height()-$dialog.height())/2+'px'); // window is center

            if (!this._show_backdrop) {
                $('.modal-backdrop').remove();
            }

            if(ev && ev.data('unique_index')){
                // start RefreshMessagesInterval
                EditView.activityMessages.startRefreshMessagesInterval();
            }

            return this.setContent(content);
        },

        //setWidth
        setWidth : function(_dialog_name, width){
            $(modalDialog.getModalName() + ' .').css('width', width);
            return this;
        },

        //hide
        hide : function(modal, dinamic_data, modal_name){
            if(dinamic_data){
                modalDialog.dinamic_data = dinamic_data;
            }
            if(modal_name){
                modal_name = '#' + modal_name;
            } else {
                modal_name = modalDialog.getModalName();
            }

            if(typeof modal == 'undefined' || modal == false){
                var modal = $(modal_name);
            }

            if(modal.length){
                if(!modal.find('#drop_zone').length){
                    if (!instanceEditView) {
                        instanceEditView = new EditViewContainer();
                    }
                    instanceEditView.removeByIndex(modal.find('.edit-view').data('unique_index'))
                }
                modal.modal('hide');
            }

            if(modalDialog.modal_dialog_shown.length > 0){
                $(modalDialog.getModalName()).modal();
            } else {
                modalDialog.modal_dialog_shown_window = [];
                modalDialog._instance = null;
            }

            return this;
        },
        hideAll : function(callback){
            modalDialog.modal_dialog_shown = [];
            modalDialog.modal_dialog_shown_window = [];
            modalDialog.dinamic_data = null;
            modalDialog.callback_success = {};
            modalDialog._instance = null;

            modalDialog.clearDataStore();

            $('.fake-backdrop').remove();


            $('#modal_dialog_container .modal').each(function(i, modal){
                var entity_key = $(modal).find('.modal-dialod').data('entity_key');
                if(!entity_key){
                    return true;
                }
                var entity = Entity.getInstance(entity_key);
                if(entity){
                    entity.destroy(true)
                }
                return false;
            });

            $('#modal_dialog_container').html('');
            $('.modal-backdrop.in').remove();
            $('body').removeClass('modal-open');

            if($.isFunction(callback)){
                callback();
            }

            return this;
        }

    }

    eventPath = '.modal';
    $(document).off('hidden.bs.modal', eventPath).on('hidden.bs.modal', eventPath, function(e){
        var _this = this,
            modal_name = modalDialog.getModalName(),
            this_copy_id = $(modal_name).find('.edit-view').data('copy_id'),
            this_data_id = $(modal_name).find('.edit-view').data('id'),
            modal_dialog = $(modal_name).find('.edit-view');

        if(modal_dialog.length > 0){
            var _uploads_id = [];
            var _activity_message_id = [];
            modal_dialog.find('.upload_file').each(function(i, ul){
                if($(ul).val()) _uploads_id.push($(ul).val());
            });
            modal_dialog.find('.element[data-type="block_activity"] .element[data-type="message"][data-status="temp"]').each(function(i, ul){
                if($(ul).data('id')) _activity_message_id.push($(ul).data('id'));
            });

            if(_uploads_id.length || _activity_message_id) Global.clearRubbish(_uploads_id, _activity_message_id);


            if(typeof(modal_dialog.data('history')) != 'undefined' && modal_dialog.data('history') == 'hide' && !$('.bpm_block').length) {
                History.close();
            }
        }

        $('body').removeClass('modal-open');


        var sdm_copy_id = $(modal_name).find('.edit-view').data('copy_id');
        var sdm_id = $(modal_name).find('.edit-view').data('id');


        //callback
        var callback = modalDialog.getCallbackSuccess();
        var dinamic_data = modalDialog.dinamic_data

        // remove module from array
        modalDialog.modal_dialog_shown.pop();
        modalDialog.dinamic_data = null;
        $(modal_name).remove();

        //stop RefreshMessagesInterval
        if(modalDialog.modal_dialog_shown.length == false){
            EditView.activityMessages.stopRefreshMessagesInterval();
        }

        //callback run
        if($.isFunction(callback)){
            callback(_this, e);
        }

        // if(typeof modalDialog.callback_pv == 'function'){
        //     modalDialog.callback_pv();
        // }

        if(modalDialog.modal_dialog_shown.length <= 1 && EditView.saved_first_ev){
            EditView.saved_first_ev = false;
            instanceGlobal.contentReload
                .prepareVariablesToGeneralContent()
                .run();
        }


        // parent module
        $(modalDialog.getModalName()).show().find('.modal-backdrop.in').appendTo('body');

        //обновляем сабмодули

        if(typeof(this_copy_id) != 'undefined' && this_copy_id){
            var copy_id = $(modalDialog.getModalName()).find('.edit-view').data('copy_id');

            if(typeof(copy_id) != 'undefined' && copy_id){
                var _edit_view_object = $(modalDialog.getModalName()).find('.edit-view[data-copy_id="' + copy_id + '"]');

                EditView.subModules.updateSubModuleDataList(_this, _edit_view_object, function(){
                    if(EditView.activityMessages.issetBlockActivity(_edit_view_object) && EditView.activityMessages.refresh_messages == false){
                        EditView.activityMessages.refreshMessages($(_edit_view_object).find('.element[data-type="block_activity"]'));

                        var _data = null;
                        if(!this_data_id && dinamic_data && dinamic_data.id){
                            _data  = {'data_id' : dinamic_data.id}
                        }
                        EditView.relates.reloadSDMChannel($(_edit_view_object).find('.element[data-type="drop_down"] .element[data-type="drop_down_button"][data-reloader="activity_channel"]'), _data);
                    }
                })


                if(sdm_copy_id && sdm_id){
                    EditView.relates.reloadSDM($(modalDialog.getModalName()).find('.edit-view .element[data-type="drop_down"] .element[data-type="drop_down_button"][data-relate_copy_id="' + sdm_copy_id + '"]'));
                    Global.addOperationInSDM();
                }
            }
        }


        var entity_key = $(_this).find('.modal-dialog').data('entity_key');
        if(typeof entity_key != 'undefined' && entity_key){
            var entity = Entity.getInstance(entity_key);
            if(entity){
                entity.destroy()
            }
        }



        var notificationTimeOut = setTimeout(function () {
            clearTimeout(notificationTimeOut);
            HeaderNotice.refreshAllHeaderNotices();
        }, 50);

        $('.file-block').removeClass('has-file');
        //NiceScroll.init();
        if (modalDialog.modal_dialog_shown.length > 0) {
            $('body').addClass('modal-open');
            EditView.textRedLine();
            jScrollRemove();
            jScrollInit();
            setTimeout(function(){ EditView.textRedLine();}, 100);
        }
        $('.datepicker-dropdown.dropdown-menu').hide();

        if (!$.isFunction(callback)) { // preloader hide run in callback
            instanceGlobal.contentReload.preloaderHide();
        }
    });

    $(document).on('click', '.modal .yes-button', function(){
        //callback
        var callback = modalDialog.getCallbackSuccess();

        if($.isFunction(callback)){
            callback(this);
        }
    });

    $(document).on('click', '.confirm-yes-button', function(){
        var _this = this;
        var code_action = Message.getCodeAction(_this);
        var params = Message.getParams(_this);


        if(!code_action) return;

        switch(code_action[0]){
            case '100' : //ACTION_SUB_MODULE_EDIT_VIEW_CREATE
                var copy_id = $(modalDialog.getModalName()).find('.edit-view').data('copy_id');
                EditView.save(copy_id, {}, function(data){
                    var edit_view = $(modalDialog.getModalName()).find('.edit-view');
                    $(edit_view).closest('.edit-view').data('id', data.id);

                    EditView.subModules.updateSubModuleDataList(null, edit_view, function(){
                        var sub_module = $(edit_view).find('.sm_extension[data-type="submodule"][data-relate_copy_id="'+params.copy_id+'"] .submodule_edit_view_dnt-create');
                        if(modalDialog.modal_dialog_shown.length == 1) EditView.saved_first_ev = true;
                        EditView.subModules.cardCreate(sub_module);
                    });
                });
                break;

            case '101' : //ACTION_SUB_MODULE_EDIT_VIEW_EDIT
                var copy_id = $(modalDialog.getModalName()).find('.edit-view').data('copy_id');
                EditView.save(copy_id, {}, function(data){
                    var edit_view = $(modalDialog.getModalName()).find('.edit-view');
                    $(edit_view).closest('.edit-view').data('id', data.id);

                    EditView.subModules.updateSubModuleDataList(null, edit_view, function(){
                        var sub_module = $(edit_view).find('.sm_extension[data-type="submodule"][data-relate_copy_id="'+params.copy_id+'"] .submodule_edit_view_dnt-edit');
                        if(modalDialog.modal_dialog_shown.length == 1) EditView.saved_first_ev = true;
                        EditView.subModules.cardEditSM(sub_module);
                    });
                });
                break;

            case '102' : //ACTION_SUB_MODULE_EDIT_VIEW_SELECT
                var copy_id = $(modalDialog.getModalName()).find('.edit-view').data('copy_id');

                EditView.save(copy_id, false, function(data){
                    var edit_view = $(modalDialog.getModalName()).find('.edit-view');
                    $(edit_view).closest('.edit-view').data('id', data.id);

                    EditView.subModules.updateSubModuleDataList(null, edit_view, function(){
                        var sub_module = $(edit_view).find('.sm_extension[data-type="submodule"][data-relate_copy_id="'+params.copy_id+'"] .submodule_edit_view_dnt-select');
                        if(modalDialog.modal_dialog_shown.length == 1) EditView.saved_first_ev = true;
                        EditView.subModules.cardSelect(sub_module);
                    });
                });
                break;

            case '103' : //ACTION_SUB_MODULE_EDIT_VIEW_DELETE
                var copy_id = $(modalDialog.getModalName()).find('.edit-view').data('copy_id');
                EditView.save(copy_id, {}, function(data){
                    var edit_view = $(modalDialog.getModalName()).find('.edit-view');
                    $(edit_view).closest('.edit-view').data('id', data.id);

                    EditView.subModules.updateSubModuleDataList(null, edit_view, function(){
                        var sub_module = $(edit_view).find('.sm_extension[data-type="submodule"][data-relate_copy_id="'+params.copy_id+'"] .submodule_edit_view_dnt-delete');
                        if(modalDialog.modal_dialog_shown.length == 1) EditView.saved_first_ev = true;
                        EditView.subModules.cardRemoved(sub_module,false);
                    });
                });
                break;

            case '104' : //ACTION_CONSTRUCTOR_PRIMARY_RELATE_CHANGE
            case '105' : //ACTION_CONSTRUCTOR_SCHEMA_TYPE_TO_ONE_CHANGE
            case '107' : //ACTION_MODULE_DELETE_TEMPLATES
            case '108' : //ACTION_SUB_MODULE_TEMPLATE_REMOVE
            case '109' : //ACTION_RELATE_CHENGED_SDM
            case '111' : //ACTION_PROCESS_BO_CLEAR
            case '8002' : //REPORTS. ACTION_DELETE_ELEMENT
                var _data = Constructor.getModuleDataParams();
                _data['confirm_code_action'] = code_action;
                _data['confirm_params'] = params;

                Constructor.moduleSave(_data, function(result_save){
                    if(result_save.status == true){
                        deleteTableStatus(_data.copy_id);
                        removeTableOrder(_data.copy_id);

                        callback = function(){
                            instanceGlobal.contentReload
                                .prepareVariablesToGeneralContent()
                                .run();
                        }
                        modalDialog.setCallbackSuccess(callback);
                        modalDialog.hide();
                    }
                })
                break;
            case '8001' : //REPORTS. ACTION_DELETE_MODULE
                var copy_id_list = [];
                var _data = {};

                if(modalDialog.modal_dialog_shown.length){ // length=1
                    copy_id_list.push($(modalDialog.getModalName()).find('.constructor').data('copy_id'));
                } else {
                    $('.list_view_block[data-page_name="constructor"] table input.input_ch:checked').closest('tr').each(function(i, ul){
                        copy_id_list.push($(ul).data('copy_id'));
                    });
                }

                if(copy_id_list == false || $.isEmptyObject(copy_id_list)) return;

                _data['confirm_code_action'] = code_action;
                _data['confirm_params'] = params;
                _data['copy_id'] = copy_id_list;

                Constructor.moduleDelete(_data);

                break;
            case '106' : //ACTION_SUB_MODULE_EDIT_VIEW_CREATE_SELECT
                var copy_id = $(modalDialog.getModalName()).find('.edit-view').data('copy_id');
                EditView.save(copy_id, {}, function(data){
                    var edit_view = $(modalDialog.getModalName()).find('.edit-view');
                    $(edit_view).closest('.edit-view').data('id', data.id);

                    EditView.subModules.updateSubModuleDataList(null, edit_view, function(){
                        var sub_module = $(edit_view).find('.sm_extension[data-type="submodule"][data-relate_copy_id="'+params.copy_id+'"] .submodule_edit_view_dnt-create-select');
                        if(modalDialog.modal_dialog_shown.length == 1) EditView.saved_first_ev = true;
                        //EditView.subModules.addCardSelect(sub_module, params.parent_class);
                        EditView.subModules.addCardSelect(sub_module, 'edit-view');
                    });
                });
                break;
            /*
             case '110' : //ACTION_PROCESS_OBJECT_INSTANCE
             var copy_id = $(modalDialog.getModalName()).find('.edit-view').data('copy_id');
             EditView.save(copy_id, {}, function(vars){
             var edit_view = $(modalDialog.getModalName()).find('.edit-view');
             $(edit_view).closest('.edit-view').data('id', vars.data.id);

             EditView.subModules.addNewProcesses(copy_id, vars.data.id, function(){
             EditView.subModules.updateSubModuleDataList(null, edit_view, function(){
             if(modalDialog.modal_dialog_shown.length == 1) EditView.saved_first_ev = true;
             });
             });


             });

             break;
             */
        }

    });


    for(var key in _public) {
        ModalDialog[key] = _public[key];
    }

    for(var key in _private) {
        _self[key] = _private[key];
    }

    for(var key in ModalDialog) {
        _self[key] = ModalDialog[key];
    }


    exports.modalDialog = ModalDialog;
})(window);

/**
 * Created by andrew on 9/13/17.
 */

var Profile = {
    _instance: null,
    _interface: 'Profile',
    _url: null,

    getInstance : function(){
        return this._instance;
    },

    createInstance : function(){

        var Obj = function(){
            for(var key in Profile){
                this[key] = Profile[key];
            }
        }

        return Profile._instance = new Obj().constructor();
    },
    setUrl: function (url) {
        this._url = url;

        return this;
    },
    constructor: function () {
        this.events()
            .setStyleOfDescription();

        return this;
    },

    actions: {
        onKeyUp: function(e) {

            if ($('[data-type="profile_personal_information"].active').length) {
                if (e.keyCode === 27 && $(e.target).find('.upload-modal').length) { // esc
                    modalDialog.hideAll()
                }
            }

            return true;
        },
        onProfileOpenTab : function (e) {
            e.preventDefault();
            var $this = $(this),
                url = $this.attr('href');

            if (!StartupGuide.getInstance()) {
                history.pushState(null, null, url);
            }
            AjaxContainers.cash.snapshot();

            // e.preventDefault();
            // var $this = $(this);

            // BackForwardHistory
            //     .getInstance()
            //     .setHash($this.attr('href'))
            //     .snapshot();
        },
        onSaveSmallFields: function() {
            var $editable, $editableField,
                $this = $(this),
                data = {};

            $editable = $this.closest('.editable-block');

            $editableField = $editable.find('.editable-field');
            $editableField.text($editable.find('input').val());

            data[$editableField.data('name')] = $editableField.text();

            $.ajax({
                'url': Global.urls.url_profile_personal_contact_save,
                'data': data, 'type' : "POST", 'dataType': 'json', async : false,
                success: function(data){

                    if (data.status == true) {
                        var time = setTimeout(function () {
                            clearTimeout(time);
                            $editable.find('.edit-dropdown').removeClass('open');
                            $editableField.css('opacity', '1');
                        }, 50);
                    }
                },
                error: function(){
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                }
            });
        },
        onChangeNotification: function(event){
            var _data = event.data.instance.getNotificationSettingData(),
                ajax = new Ajax();

            ajax
                .setAsync(false)
                .setUrl(Global.urls.url_profile_html_refresh)
                .setData(_data)
                .setType('POST')
                .setDataType('json')
                .setCallBackSuccess(function(data) {
                    if(data.status == true){
                        $('.element[data-type="profile_notification_settings"]').children().html($(data.html).children().html());
                        Global.initSelects();
                    }
                })
                .setCallBackError(function(jqXHR, textStatus, errorThrown){
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                })
                .send();

        },
        onSaveNotificationSettings: function(event){
            var guideParam = null,
                _data = event.data.instance.getNotificationSettingData();

            if (StartupGuide.getInstance()) {
                guideParam = {
                    visible : 'true'
                };
            } else {
                instanceGlobal.preloaderShow($(this), guideParam);
            }

            $.ajax({
                'url': Global.urls.url_profile_save,
                'data': _data,
                'type' : "POST", 'dataType': 'json', async : false,
                success: function(data){
                    if(data.status == false){
                        var ppi = $('.element[data-type="profile_notification_settings"]');

                        ppi.parent().append(data.html).find('.element[data-type="profile_notification_settings"]').addClass('active');
                        $('.selectpicker').selectpicker();
                        ppi.remove();

                    } else if(data.status == true){
                        var vars = {
                            'selector_content_box' : '#content_container',
                        }

                        instanceGlobal.contentReload
                            .createInstance()
                            .clear()
                            .setVars(vars)
                            .setUrl(Url.getCurrent())
                            .setPreloaderAutoHide(guideParam ? false : true)
                            .setCallBackComplete(function (data) {
                                if (data.status && guideParam) {
                                    StartupGuide.getInstance().runNext();
                                }
                            })
                            .loadThis()
                    }
                },
                error: function(){
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                }
            });
        },
        onSavePersonalInfo: function(){
            var _this = this;
            var element_data = {};

            instanceGlobal.preloaderShow($(this));

            $(_this).closest('.element[data-type="profile_personal_information"]').find('.element[data-field_type="text"]').each(function(i, ul){
                element_data[$(ul).data('type')] = $(ul).val();
            })

            element_data['removeBackground'] = $('.background-field').data('remove') || false;

            var _data = {
                'action' : 'personal_information',
                'data' : element_data
            };

            $.ajax({
                'url': Global.urls.url_profile_save,
                'data': _data,
                'type' : "POST", 'dataType': 'json', async : false,
                success: function(data){
                    if(data.status == false){
                        var ppi = $(_this).closest('.element[data-type="profile_personal_information"]');
                        ppi.parent().append(data.html).find('.element[data-type="profile_personal_information"]').addClass('active');
                        $('.selectpicker').selectpicker();
                        ppi.remove();
                    } else if(data.status == true){
//debugger;
                        var vars = {
                            'content_blocks_different' : [
                                    {'name':'main_top_user_menu', 'selector':'.element[data-type="user_menu"]'},
                                    {'name':'main_left_module_menu', 'selector':'.element[data-type="left_menu"]'}
                                ],
                            'selector_content_box' : '#content_container',
                        }
                        instanceGlobal.contentReload
                            .clear()
                            .setUrl(Url.getCurrent())
                            .setVars(vars)
                            .setCallBackSuccessComplete(function(){
                                crmParams.reloadFromServer();
                            })
                            .loadThis();
                    }
                },
                error: function(){
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                }
            });
        },
        onRestorePassword: function(){
            var element = document.getElementById("profile-loader");
            element.classList.remove("hidden");
            var _this = this;
            var element_data = {};
            instanceGlobal.preloaderShow($(this));
            element_data['email'] = $(_this).data('email');
            element_data['removeBackground'] = $('.background-field').data('remove') || false;

            var _data = {

                'UsersModel' : element_data
            };

            $.ajax({
                'url': Global.urls.url_restore,
                'data': _data,
                'type' : "POST", 'dataType': 'json', async : true,
                success: function(data){
                    $('.profile-loader').addClass('hidden')
                    if(data.status == false){
                        Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                    } else if(data.status == true){
//debugger;
                        Message.show([{'message': data.html }], true);
                    }
                },
                error: function(){
                    $('.profile-loader').addClass('hidden')
                    Message.show([{ 'message': Global.urls.url_ajax_error }], true);
                }
            });
        },
        onRemoveBackground: function (e){
            $('.background-field').data('remove', true);
            $(e.target).closest('.remove').remove();
        },
        onSaveApi: function(event){
            var _this = this,
                _data = event.data.instance.getApiData();

            instanceGlobal.preloaderShow($(this));

            setTimeout(function () {
                $.ajax({
                    'url': Global.urls.url_profile_save,
                    'data': _data,
                    'type' : 'POST', 'dataType': 'json', async : false,
                    success: function(data){
                        var ppi = $(_this).closest('.element[data-type="profile_api"]');

                        if(data.status == false){
                            ppi.parent().append(data.html).find('.element[data-type="profile_api"]').addClass('active');
                            $('.selectpicker').selectpicker();
                            ppi.remove();
                        }

                        ppi.find('.b-spinner').remove();
                        ppi.find('.profile_form').removeClass('init-preloader set-preloader');
                    },
                    error: function(){
                        Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                    }
                });
            }, 300);

        },
        onApiRegenerateToken : function(){
            var _this = this;

            $.ajax({
                'url': Global.urls.url_profile_api_regenerate_token,
                'type' : 'POST', 'dataType': 'text', async : false,
                success: function(api_key){
                    $(_this).closest('.element[data-type="profile_api"]').find('.element[data-type="api_key"]').val(api_key);
                },
                error: function(){
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                }
            });
        },
        onRemoveAvatar: function(){
            var _this = this;
            Global.Files.fileDeleteAvatar(function(data){
                if(data.status == false){
                    Message.show(data.messages, false);
                } else {
                    $(_this).closest('.element[data-type="profile"]').html(data.view.avatar_140);
                    $('.element[data-type="main_top_profile_menu_user"]').find('.list-view-avatar').after(data.view.avatar_32).remove();
                    imagePreview(true);
                    NiceScroll.init();
                    setCheckboxHeight();
                }
            });
        },
        onClickProfileActivityMore: function(event){
            event.data.instance.activityLoadMore();
        },
    },
    events: function () {
        var path = this.actions;

        this._events = [
            { parent: document, selector: 'body:not(.guide) .element[data-type="profile"] .nav a', event: 'click', func: path.onProfileOpenTab},
            { parent: document, selector: '.element[data-type="profile-activity-more"]', event: 'click', func: path.onClickProfileActivityMore },
            { parent: document, selector: '.element[data-type="remove_image"][data-name="profile"]', event: 'click', func: path.onRemoveAvatar},
            { parent: document, selector: 'body', event: 'keyup', func: path.onKeyUp},
            //personal_information
            { parent: document, selector: '.element[data-type="personal_information_save"]', event: 'click', func: path.onSavePersonalInfo},
            { parent: document, selector: '.element[data-type="restore-password"]', event: 'click', func: path.onRestorePassword},
            //notification_settings save
            { parent: document, selector: '.element[data-type="notification_settings_save"]', event: 'click', func: path.onSaveNotificationSettings},
            //notification_settings change
            { parent: document, selector: '.element[data-type="setting_notification"], .element[data-type="sending_method"], .element[data-type="notifications_modules"]', event: 'change', func: path.onChangeNotification},
            { parent: document, selector: '.profile-contacts .edit_view-save-input-hidden', event: 'click', func: path.onSaveSmallFields},
            //api save
            { parent: document, selector: '.element[data-type="api_save"]', event: 'click', func: path.onSaveApi},
            { parent: document, selector: '.background-field .remove .element', event: 'click', func: path.onRemoveBackground},
            { parent: document, selector: '.element[data-type="api_regenerate_token"]', event: 'click', func: path.onApiRegenerateToken}
        ];

        Global.addEvents(this._events, {
            instance: this
        });

        return this;
    },
    setStyleOfDescription: function() {
        var $profile = $('.profile-information');

        $profile.css({
            height: $profile.height() - 28 +'px'
        });
    },
    setEnableNotification: function(){
        $('.element[data-type="setting_notification"]').val(1).trigger('change');
    },
    getNotificationSettingData: function(){
        var element_data = {};

        $('.element[data-type="profile_notification_settings"]').find(
            '.element[data-field_type="text"],'+
            '.element[data-field_type="check"],'+
            '.element[data-field_type="radio"],'+
            '.element[data-field_type="check_array"]').each(function(i, ul)
        {

            switch($(ul).data('field_type')){
                case 'text' :
                    element_data[$(ul).data('type')] = $(ul).val();
                    break;
                case 'radio' :
                case 'check' :
                    if($(ul).prop("checked") == false) return true;

                    element_data[$(ul).data('type')] = ($(ul).val());
                    break;
                case 'check_array' :
                    if($(ul).prop("checked") == false) return true;

                    if(element_data[$(ul).data('type')])
                        element_data[$(ul).data('type')].push($(ul).val())
                    else
                        element_data[$(ul).data('type')] = [$(ul).val()];

                    break;
            }

        })

        var _data = {
            'action' : 'notification_settings',
            'data' : element_data
        };

        return _data;
    },
    getApiData : function(){
        var element_data = {};

        $('.element[data-type="profile_api"]').find(
            '.element[data-field_type="text"],'+
            '.element[data-field_type="check"]').each(function(i, ul)
        {

            switch($(ul).data('field_type')){
                case 'text' :
                    element_data[$(ul).data('type')] = $(ul).val();
                    break;
                case 'radio' :
                case 'check' :
                    element_data[$(ul).data('type')] = $(ul).prop("checked") ? "1" : "0";
                    break;
            }

        })

        var _data = {
            'action' : 'api',
            'data' : element_data
        };

        return _data;
    },
    activityLoadMore : function(){
        var data,
            activity_data = $('.element[data-type="profile-activity-data"]');

        data = {
            'last_date' : activity_data.data('date'),
            'page' : activity_data.data('page'),
            'notification_position' : activity_data.data('notification_position')
        };

        $.get(this._url, data, function(data) {
            if(data.status == true){
                HeaderNotice.addLinkActions(data.link_actions);
                $('.prof_activity .notification:last').after(data.html);
                imagePreview(true);
            }
            if(data.more == true){
                activity_data.data('page', data.page);
                activity_data.data('date', data.date);
                activity_data.data('notification_position', data.notification_position);
            } else {
                $('.prof_activity .load_more').empty();
            }
        }, 'json');
    },
    destroy: function () {
        var instance = Profile.getInstance(); //  STATIC || instance

        if (instance) {
            Global.removeEvents(instance._events);
        }
        Profile._instance = null; // static - instance can be only one
    }

}


/**************************************************************
 *               Communications
 ***************************************************************/

var Communication = {
        _interface: 'communication',

        _copy_id: 13,
        _instance: null,
        _params: 0,
        _parent : null,

        getFilter: null,

        getInstance: function(){
            if(!Communication._instance){
                Communication._instance = Communication.createInstance();
            }

            return Communication._instance;
        },

        createInstance: function () {
            var Obj = function () {
                for (var key in Communication) {
                    this[key] = Communication[key];
                }
            }

            return new Obj().constructor();
        },
        constructor: function () {
            this.events();

            this.getFilter = Filter; //.createInstance();

            return this;
        },
        setId: function (id) {
            this._copy_id = id;

            return this;
        },
        getId: function () {
            return this._copy_id;
        },
        isCommunicationsEditView: function () {
            return $('.edit-view[data-copy_id="'+this.getId()+'"]').length ? true : false;
        },
        isCommunicationsModule: function () {
            return $('.list_view_block[data-copy_id=' + this.getId() + ']').length || $('.process_view_block[data-copy_id=' + this.getId() + ']').length ? true : false;
        },

        openMenuServices: function () {
            this.actions.onClickServicesParams();

            return this;
        },
        showPreloader: function () {
            var status = false;

            if (this.isCommunicationsModule()) {
                ViewType.getPreloader().showPreloader();
                status = true;
            }

            return status;
        },
        events: function () {
            var data = {
                    instance: this
                },
                path = this.actions;


            this._events = [
                {
                    parent: document,
                    selector: '.element[data-type="communications-settings"]:not([data-name])',
                    event: 'click',
                    func: path.onClickServicesParams
                },
                {
                    parent: document,
                    selector: '.element[data-type="communications-settings"][data-name]',
                    event: 'click',
                    func: path.onClickUpdateService
                },
                {
                    parent: document,
                    selector: 'ul.channels-list>li.element[data-type="communications_menu_channel"]',
                    event: 'click',
                    func: path.onGetChannel
                },
                {parent: document, selector: '.right-sidebar .edit_view_dnt-add', event: 'click', func: path.onAddCard},
                {
                    parent: document,
                    selector: '.communication-services .list-services .element[data-id]',
                    event: 'click',
                    func: path.onClickOpenParams
                },
                {
                    parent: document,
                    selector: '.communication-services .service-param .close-button-back',
                    event: 'click',
                    func: path.onClickCloseParams
                },
                {parent: document, selector: '.activity-ext', event: 'click', func: path.onClickAreaText},

                // ??? !!! Нельзя привязываться только к атрибутам
                {
                    parent: document,
                    selector: '[data-type_comment="email"] .emoji-wysiwyg-editor',
                    event: 'keyup',
                    func: path.onKeyUpAreaText
                },


                {
                    parent: document,
                    selector: '.communication-services .element[data-type="save"]',
                    event: 'click',
                    func: path.onSave
                },
                {
                    parent: document,
                    selector: '.edit-view .element[data-type="editors"] .element[data-type="drop_down"] .link .element[data-type="add-channel"]',
                    event: 'click',
                    func: path.onAddChannel
                },
                {parent: document, selector: '.activity-ext input.form-control', event: 'click', func: path.onFocusArea},
                {parent: document, selector: '.activity-ext input.form-control', event: 'blur', func: path.onBlurInput},
                {
                    parent: document,
                    selector: '.communication-services .service-param:not([data-update="false"]) .close-button',
                    event: 'click',
                    func: path.onClickServiceParamClose
                },
                {
                    parent: document,
                    selector: '.communication-services .service-param:not([data-update="true"]) .close-button',
                    event: 'click',
                    func: path.onClickPopupClose
                },
                {
                    parent: document,
                    selector: '.communication-services [data-type="list-services"] select',
                    event: 'change',
                    func: path.onChangeService
                },
                {parent: document, selector: '.activity-ext .recipients input', event: 'keyup', func: path.onAddRecipient},
                {parent: document, selector: '.activity-ext .recipients', event: 'click', func: path.onFocus},
                {
                    parent: document,
                    selector: '.activity-ext .recipients .todo-remove',
                    event: 'click',
                    func: path.onRemoveRecipient
                },
            ]

            Global.addEvents(this._events, data);

            return this;
        },

        importModel: function (data) {
            for (var key in data) {
                if (typeof data[key] != 'object') {
                    this[key] = data[key];
                }
            }

            return this;
        },

        initTextArea: function () {
            var offset, offsetTop, $list,
                $communication = $('[data-sub_type="btn-group-editors"]'),
                $activity = $communication.find('.activity-ext'),
                $textArea = $communication.find('.message_field[data-type_comment="email"] .emoji-wysiwyg-editor:visible'),
                $message = $activity.find('.message');

            if (!$activity.length) {
                return this;
            }

            $list = $activity.find('li');
            offset = $activity.find('[data-type="data"]').height();
            offsetTop = parseInt($textArea.css('padding-top'));

            if (offsetTop == 0) {
                $textArea.css({
                    'padding-top': offset - 14,
                    'padding-bottom': 4
                });
            } else {
                $textArea.css({
                    'padding-top': $list.first().height() * $list.length + 4,
                    'padding-bottom': 4
                });
            }
            if ($.browser && $.browser.mozilla) {
                $textArea.height($list.first().height());
            }

            Global.groupDropDowns().init();

            $.each($activity.find('input'), function () {
                var $this = $(this);

                ($this.val().length) ? $this.removeClass('empty') : $this.addClass('empty');
            })

            if ($textArea.length && $textArea.html().length) {
                $message.addClass('hide')
            } else {
                $message.removeClass('hide')
            }
            return this;
        },
        reloadChannel: function () {
            var _this = this;

            if (this.interval_actions == null && QuickViewPanel.getInstance()) {
                this.interval_actions = setInterval(function () {
                    if (QuickViewPanel.getInstance()) {
                        _this.refreshMenuItems(true);
                    } else {
                        clearInterval(_this.interval_actions);
                    }
                }, crmParams.global.intervals.quick_view.block_communications);
            }
        },
        refreshMenuItems: function (period) {
            CommunicationsBlock
                .getInstance()
                .setPeriod(period)
                .refreshChannels(false);
        },

    actions: {
        onAddChannel : function (e) {
            var _this = $(this).closest('.edit-view').find('.element[data-type="block"] .sm_extension[data-type="submodule"][data-relate_copy_id="'+Communication.getId()+'"] .submodule_edit_view_dnt-create');

            if(!_this){
                return;
            }

            Preloader
                .createInstance()
                .setModal(true)
                .setModalSub(true)

            EditView.subModules.cardCreate(_this);

        },
        onFocus : function () {
            $(this).find('input').focus();
        },
        onClickSubWindow : function (step, param) {
            var $blocks = $('[data-type="sub-window"]');

            $blocks.filter('.active').find('.panel-body>.element').addClass('hide');
            $blocks.removeClass('active')

            if (step == 1) {
                $blocks.first().addClass('active');
            } else if (step == 2) {
                var $element = $blocks.last();

                $element.addClass('active');
                if (param == 'change') {
                    $('.close-button').attr('data-dismiss', 'modal');
                    $element.find('[data-type="list-services"]').removeClass('hide');
                    $element.find('[data-id="'+ $element.find('select').val() +'"]').removeClass('hide');
                    Global.initSelects();
                }
            }
        },

        onClickUpdateService : function (e) {
            var $this = $(this);

            $.ajax({
                url: '/module/communication/UpdateService/' + e.data.instance.copy_id,
                data : {
                    name : $this.attr('data-name')
                },
                type: "POST",
                timeout : crmParams.global.ajax.get_url_timeout,
                success: function(data) {
                    if(data.status == true){
                        Message.show(data.html, true);
                    }
                    e.data.instance.onClickSubWindow(2, 'change');
                    return false;
                },
                error: function(jqXHR, textStatus, errorThrown){
                    Message.showErrorAjax(jqXHR, textStatus);
                },
            });
            return false;
        },

        onClickServicesParams : function (e) {
            var id,
                data = {};

            if (e) {
                data.page = 2;
                id = e.data.instance._copy_id;
            } else {
                data.page = 1;
                id = Communication._copy_id;
            }

            data.page = (e) ? 2 : 1;

            AjaxObj.createInstance()
                .setUrl('/module/communication/serviceParams/' + id)
                .setData(data)
                .setType("post")
                .setDataType('html')
                .setTimeOut(crmParams.global.ajax.get_url_timeout)
                .setCallBackSuccess(function (html) {
                        Communication.createInstance().instanceDialog = modalDialog
                            .createInstance()
                            .show(html)

                    Global.initSelects();
                })
                .send();

            return false;
        },

        onRemoveRecipient : function (e) {
            $(this).closest('.recipients').remove();
            e.data.instance.initTextArea();
        },
        onFocus : function () {
            $(this).find('input').focus();
        },
        onAddRecipient : function (e) {
            var $this = $(this),
                $activityExt = $('.activity-ext');

            if (e.keyCode == 13) {
                var $object = $activityExt.find('li.recipients').last(),
                    $clone = $object.clone();

                $clone.find('input').val('');

                $object.after($clone);
                e.data.instance.initTextArea();
            } else {
                ($this.val().length) ? $this.removeClass('empty') : $this.addClass('empty');
            }
        },
        onClickPopupClose : function (e) {
            $('[data-type="modal-dialog"]').modal('hide');
        },
        onChangeService : function () {
            var $this = $(this),
                $services = $('.service-param [data-id]'),
                id = $this.val();

            $services.addClass('hide').filter('[data-id="'+id+'"]').removeClass('hide');
        },
        onClickServiceParamClose : function (e) {
            e.data.instance.onClickSubWindow(1);
        },
        onBlurInput : function () {
            $('.emoji-wysiwyg-editor').removeClass('focus');
        },
        onFocusArea : function () {
            $('.emoji-wysiwyg-editor').addClass('focus');
        },
        onKeyUpAreaText : function () {
            var $this = $(this),
                $message = $this.closest('.activity-ext').find('.message');

            ($this.html().length) ? $message.addClass('hide') : $message.removeClass('hide');
        },
        onClickUpdateService : function (e) {
            var $this = $(this);

            AjaxObj
                .createInstance()
                .setUrl('/module/communication/UpdateService/' + Communication.copy_id)
                .setData({
                    name: $this.attr('data-name')
                })
                .setType("POST")
                .setTimeOut(crmParams.global.ajax.get_url_timeout)
                .setCallBackSuccess(function (data) {
                    if (data.status == true) {
                        Message.show(data.html, true);
                    }
                    e.data.instance.onClickSubWindow(2, 'change');
                    return false;
                })
                .send();

            return false;
        },
        onGetChannel : function(e){
            var $this = $(this);

            if (($this.closest('.panel-heading').length && $this.closest('.process_view_block').length) // What we is on PV
                || $this.closest('.sm_extension_data.editing').length) {
                return;
            }
            var parent = QuickViewPanel.getInstance() || e.data.instance,
                EVInstance = EditView.createInstance().setParent(parent);

            EVInstance
                .setAfterLoadViewCallBack(function () {
                    $this.find('.user-status').empty()
                })
                .editCard(this, null, function(data){
                    this.runAfterEditCardLV(data);

                    Global
                        .createLinkByEV($('.edit-view:last'))
                        .fixSubstrateInModal();
            });
        },
        onAddCard : function (e) {
            var instance,
                QV = QuickViewPanel.getInstance();

            instance = EditView.createInstance().setParent(QV)

            if (QV) {
                instance.setPreloader(QV.getModel().getCurrentModel().getPreloader());
            }

            instance.addCard(this, null, function(data){
                this.runAfterAddCardLV(data);
                Communication.initTextArea();
            });
        },
        onSave : function (e) {
            var time,
                $bloks = $('.element.active[data-type="sub-window"] [data-id].element:not(.hide)'),
                $inputs = $bloks.find('input, select'),
                $this = $(this),
                ajax = AjaxObj.createInstance(),
                data = {
                    id : parseInt($bloks.attr('data-id')),
                    source_name : 'email',
                    service_name : $bloks.attr('data-service-name'),
                    signature : $bloks.find('textarea.element[data-name="signature"]').val(),
                    list : {}
                };

            $.each($inputs, function(key, value) {
                var $value = $(value),
                    key = $value.attr('data-name');

                data.list[key] = $value.val();
            });

            Global.btnSaveSetDisabled($this, true);

            ajax.setData(data)
                .setAsync(false)
                .setType('POST')
                .setUrl('/module/communication/SaveServiceParams/' + e.data.instance._copy_id)
                .setDataType('json')
                .setCallBackSuccess(function(data){
                    if(data.status == 'access_error' || data.status == 'error'){
                        Message.show(data.messages, false);
                    } else if (data.status == 'error_email_connect') {
                        Message.show([{'type': 'error', 'message': data.messages}], false);
                    } else if(data.status == 'error_validate'){
                        $this.closest('.sm_extension').find('.element[data-type="objects"] .errorMessage').html('');
                        $.each(data.messages, function(data_type, message){
                            $this.closest('.sm_extension').find('.element[data-type="objects"] .element[data-type="'+data_type+'"] .errorMessage').html(message);
                        })
                    } else if(data.status){
                        $this.closest('.sm_extension').find('.element[data-type="objects"] .errorMessage').html('');
                        if(Communication.getInstance().instanceDialog){
                            Communication.getInstance().instanceDialog.hide();
                        }
                        else {
                            $('.close-button:visible').trigger('click');
                        }
                    }
                    Global.btnSaveSetDisabled($this, false);
                })
                // .setCallBackError(function(jqXHR, textStatus, errorThrown){
                //     Message.showErrorAjax(jqXHR, textStatus);
                // });

            time = setTimeout(function () {
                clearTimeout(time);
                ajax.send();
            }, 50)
        },
        onClickAreaText : function (e) {
            var $this = $(this),
                $target = $(e.target);

            if ($target.is('.form-control') || $target.is('.form-control')) {
                return;
            }

            $this.find('.emoji-wysiwyg-editor').addClass('is-focused').focus();
            return false;
        },
        onClickOpenParams : function (e) {
            var $block,
                $this = $(this);

            $block = $('[data-type="sub-window"]').removeClass('active').last();
            Global.initSelects();
            $block.addClass('active');
            $block.find('[data-id="'+$this.attr('data-id')+'"]').removeClass('hide');
            $block.find('.panel-heading .title').html($this.find('.text').text());
            $block.find('.errorMessage').html('');

            return false;
        },
        onClickCloseParams : function (e) {
            var $block,

            $block = $('[data-type="sub-window"]').removeClass('active').first();
            Global.initSelects();
            $block.addClass('active');
            $('[data-type="sub-window"]').last().find('.panel-body .element[data-service-name]').addClass('hide');

            return false;
        },
    },
    remove: function () {

    },
    destroy: function () {
        var instance = Communication._instance;

        if (instance) {
            Global.removeEvents(this._events);
            Communication._instance = null;
        }
        delete this;
    }
}









/**************************************************************
*               CommunicationsBlock
***************************************************************/


var CommunicationsBlock = {
    _status: false,
    _instance: null,
    _nice_scroll: null,

    _update_store_data: null,
    _period: null,


    _visible : false,
    _name : null,
    _block_group : null,
    _block_object : null,
    _there_is_data : null,


    getInstance : function(status){
        if(status || !CommunicationsBlock._instance){
            if(CommunicationsBlock._instance){
                CommunicationsBlock._instance.destroy();
            }

            CommunicationsBlock._instance = this.createInstance();
        }
        return CommunicationsBlock._instance;
    },

    createInstance : function(){
        var Obj = function(){
            for(var key in CommunicationsBlock){
                this[key] = CommunicationsBlock[key];
            }
        }

        return CommunicationsBlock._instance = new Obj().constructor();
    },

    constructor: function () {
        this.events();

        return this;
    },
    setName : function(name){
        this._name = name;
        return this;
    },
    getName : function(){
        return this._name;
    },
    setBlockGroup : function(block_group){
        this._block_group = block_group;
        return this;
    },
    getBlockGroup : function(){
        return this._block_group;
    },
    setBlockObject : function(block_object){
        this._block_object = block_object;
        return this;
    },
    getBlockObject : function(){
        return $('.right-sidebar [data-type="content"] [data-name="'+this._name+'"]');
    },
    setThereIsData : function(there_is_data){
        this._there_is_data = there_is_data
        return this;
    },
    getThereIsData : function(){
        return this._there_is_data;
    },
    setPeriod : function (period) {
        this._period = period || CommunicationsBlock._period;
        return this;
    },
    setVisible : function(visible){
        this._visible = visible;
    },
    getVisible : function(){
        return this._visible;
    },
    setUpdateStoreData : function (bool) {
        this._update_store_data = bool || CommunicationsBlock._update_store_data;
        return this;
    },
    updateContent: function () {
        CommunicationsBlock
            .getInstance()
            .setPeriod(true)
            .setUpdateStoreData(true)
            .refreshChannels(true);

        return this;
    },
    events : function () {
        var actions = this.actions;

        this._events = [
            { parent: document, selector: '.right-sidebar .widget-container .ajax_content_reload', event: 'click', func: actions.onOpenAllChannel},
        ]

        Global.addEvents(this._events, {
            instance: this
        });

        return this;
    },

    actions : {
        // onOpenAllChannel
        onOpenAllChannel : function () {
            ProcessView.destroy();
        },
    },

    show : function(){
        this._visible = true;
        $(this.getBlockObject()).removeClass('hide');

        var instance = Communication.getInstance();

        if (instance) {
            instance.reloadChannel();
        }

        return this;
    },

    hide : function(){
        this._visible = false;
        $(this.getBlockObject()).addClass('hide');

        return this;
    },

    refreshChannels: function(check) {
        if(check == true){//проверять ли в каком модуле находимся
            if(!Communication.isCommunicationsEditView() && crmParams.page_interface_type !== PAGE_IT_COMMUNICATIONS){//усли мы не в модуле/карточке коммуникаций, то выходим
                return false;
            }
        }

        this.resizeNiceScroll()
            .update(this.activeMenu.ACTION_UPDATE_CURRENT_LIST);
    },

    setStatus : function(status){
        this._status = status;
        return this;
    },

    initScroll: function(parent){
        QuickViewPanel.setVerticalPosition();

        if (parent && parent._type == 'events') {} else this._nice_scroll.clear();

        this.resizeNiceScroll();
        return this;
    },

    resizeNiceScroll: function () {
        var time,
            _this = this,
            $channel = $(_this._block_object).find('.channels-list');

        this._nice_scroll.init();

        if (!this._nice_scroll._native || !Object.keys(this._nice_scroll._native).length) return this;

        this._nice_scroll._native.scrollend(function () {
            if(_this.getThereIsData() == false){
                return;
            }

            if ((parseInt(this.scrollvaluemax) - 55) <= (parseInt(this.scroll.y)) && _this._nice_scroll._status_balance_data) {
                _this._nice_scroll.setStatusLoadData(false);

                QuickViewPanel.getInstance().setStatusLoad(QuickViewPanel.VIEW_PRELOADER_IN_BOTTOM);

                if (!$channel.find('.small-preloading').length) {
                    $channel.append(Preloader._item_li_for_loading).find('>li.small-preloading').addClass('init-preloader set-preloader');
                }

                _this._nice_scroll.update();
                $channel.getNiceScroll(0).doScrollTop(999999);
                time = setTimeout(function () {
                    clearTimeout(time);
                    _this.update(_this.activeMenu.ACTION_UPDATE_WITH_NEXT);
                }, 1000);
            }
        });

        return this;
    },

    update: function(action){
        var request, time,
            active_com_menu_model = this.activeMenu,
            panel = QuickViewPanel.getInstance();

        active_com_menu_model._parent = this;
        this.self = active_com_menu_model;

        request = function () {
            active_com_menu_model
                .setAction(action)
                .run();
        }

        if (!this._period) {
            panel.setPreloaderToView();
            time = setTimeout(function () {
                clearTimeout(time);
                request()
            }, 100);
        } else {
            request();
        }

        this._period = CommunicationsBlock._period; // clear
    },

    updateMenuByPermissions: function(){
        CommunicationsBlock.checkModulePermission('rule_view',
            Communication.getId(),
            function () {
                QuickViewPanel.show();
            },
            function () {
                QuickViewPanel.close();
            },
            true);

        CommunicationsBlock.checkModulePermission('rule_create',
            Communication.getId(),
            function () {
                var btn_create_channel = $('.right-sidebar .edit_view_dnt-add');
                if (btn_create_channel.length > 0) {
                    btn_create_channel.show();
                }
            },
            function() {
                var btn_create_channel = $('.right-sidebar .edit_view_dnt-add');
                if (btn_create_channel.length > 0) {
                    btn_create_channel.hide();
                }
            }
        );
    },

    checkModulePermission: function(permission_const,copy_id,callback_true,callback_false,check_active_module){
        var _data = {
            permission_const: permission_const,
            copy_id: copy_id,
            check_active_module: check_active_module,
        };
        $.ajax({
            url: '/module/permission/CheckModulePermission/' + 3,
            data: _data,
            type: 'POST', async: false, dataType: "json",
            success: function (data) {
                if (data.status == true) {
                    callback_true();
                }
                else {
                    callback_false();
                }
            },
            error: function (xhr) {
                if (xhr.status) {
                    Message.show([{'type': 'error', 'message': Global.urls.url_ajax_error}], true);
                }
            }
        });
    },

    activeMenu : {

        ACTION_UPDATE_CURRENT_LIST :       1,
        ACTION_UPDATE_WITH_NEXT :          2,

        _action : null,
        _this : null,
        _error : false,
        _ajax_result : null,
        _search_text : '',
        _limit : 20,
        _parent : null,
        _running : false,

        init : function(){
            if(this._error) return this;
            return this;
        },

        setError : function(){
            this._error = true;
            return this;
        },

        setAction : function(action){
            this._action = action;
            return this;
        },

        setThis : function(_this){
            if(typeof _this == 'undefined' || !_this) return this.setError();

            this._this = _this;
            return this;
        },

        setSearchText : function(text){
            if(typeof(text) != 'undefined' && text){
                this._search_text = text; //encodeURI(text);
            } else {
                this._search_text = '';
            }
            return this;
        },

        clearSearchText : function () {
            this._search_text = '';
        },

        getSearchText : function(){
            return this._search_text;
        },

        getChannelsObject : function () {
            return $('.element[data-type="communications_menu_channel"]');
        },

        getCurrentCount : function(){
            var channels_object = this.getChannelsObject();
            if(!channels_object){
                return 0
            }
            return channels_object.length;
        },

        getLimitItems : function(){
            var limit = this.getCurrentCount();
            if(!limit || limit < this._limit){
                limit = this._limit;
            }

            return limit;
        },

        run : function(){
            if(this._error) return this;
            if(this._running == true) return this;

            this._running = true;

            var ajax_data = this.getAjaxData();

            this.runAjax(ajax_data);

            return this;
        },

        //getAjaxData
        getAjaxData : function(){
            var result = {
                'block_name' : this._parent.getName(),
            };

            switch(this._action){
                case this.ACTION_UPDATE_WITH_NEXT:
                    result['limit'] = this.getCurrentCount() + this._limit;
                    result['offset'] = 1;
                    break;
                case this.ACTION_UPDATE_CURRENT_LIST:
                    result['limit'] = this.getLimitItems();
                    result['offset'] = 1;
                    break;
            }

            return result;
        },


        //runAjax
        runAjax : function(ajax_data){
            var _url,
                _this = this;

            if(this._error){
                this._running = false
                return this;
            }

            _url = this.getUrl();

            AjaxObj
                .createInstance()
                .setAsync(true)
                .setData(ajax_data)
                .setUrl(_url)
                .setType('post')
                .setCallBackComplete(function(){
                    _this._running = false;
                })
                .setCallBackSuccess(function(data){
                    _this._running = false;
                    if(data.status){
                        _this.runAfterAjaxSuccess(data);
                    } else {
                        CommunicationsBlock.getInstance().setStatus(false);
                        this.preloader();
                    }
                })
                .send();
        },

        preloader: function (callback) {
            var $element = Preloader._item_li_for_loading,
                $channel = $('.channels-list'),
                $list = $channel.find('>li');

            if (CommunicationsBlock.getInstance()._status) {
                if ($list.length) {
                    $list.last().after($element);

                    var time = setTimeout(function () {
                        clearTimeout(time);

                        if (Global.isHandler(callback)) {
                            callback();
                        }
                    }, 200);
                }
            } else {
                $('.channels-list li.small-preloading').remove();
                this._parent._parent.getPreloader().hideFull();
            }
        },

        //runAfterAjaxSuccess
        runAfterAjaxSuccess : function(data){
            this._ajax_result = data;
            CommunicationsBlock.getInstance()._nice_scroll.setStatusLoadData(data.there_is_data)

            if(this._error){
                return;
            }

            switch (this._action){
                case this.ACTION_UPDATE_CURRENT_LIST:
                case this.ACTION_UPDATE_WITH_NEXT:
                    var _this = this;
                    CommunicationsBlock.getInstance().setStatus(false);
                    this.preloader();
                    _this.refreshChannelsHtml();
                    break;
            }

            if (this._action == this.ACTION_UPDATE_WITH_NEXT || this._parent._update_store_data) {
                this._parent._parent.setStoreData(data['html_result']);
                this._parent._update_store_data = CommunicationsBlock._update_store_data;
            }

            _this._parent.resizeNiceScroll();
        },

        refreshChannelsHtml: function(){
            var $channel = $('.right-sidebar .channels-list[data-copy_id="'+Communication.getId()+'"]'),
                html_result = this._ajax_result['html_result']

            $channel.html(html_result);

            if(html_result && !html_result.length){
                $channel.height(0);
            } else {
                QuickViewPanel.setVerticalPosition();
            }
        },

        addChannelsHtml: function(){
            this.getChannelsObject().last().after(this._ajax_result['html_result']);
        },


        removeChannels : function(){
            this.getChannelsObject().remove();

            return this;
        },


        getUrl : function(){
            var str = '';

            switch(this._action){
                case this.ACTION_UPDATE_WITH_NEXT :
                case this.ACTION_UPDATE_CURRENT_LIST :
                default : {
                    var url,
                        data = QuickViewPanel.getInstance().search.getParamAsJson();

                    str = '/quickView/getItems';
                    url = Url.createInstance().setUrl(str);

                    if (data.search.length) {
                        str = url.jsonToUrl(data).getUrl();
                    }
                }
            }

            return str;
        },


    },

    destroy : function () {
        CommunicationsBlock._instance = null;
        Events.removeHandler(Events.TYPE_EVENT_RESIZE, 'initScroll');
        NiceScroll.clear($('.right-stat-bar[data-name="communications"] .channels-list'));
    }
}



/**************************************************************
 *               Calls
 ***************************************************************/

var Calls = {
        _interface: 'calls',

        _copy_id: 14,
        _instance: null,
        _params: 0,


        getFilter: null,

        getInstance: function(){
            if(!Calls._instance){
                Calls._instance = Calls.createInstance();
            }

            return Calls._instance;
        },

        createInstance: function () {
            var Obj = function () {
                for (var key in Calls) {
                    this[key] = Calls[key];
                }
            }

            return new Obj().constructor();
        },

        constructor: function () {
            this.events();

            this.getFilter = Filter; //.createInstance();

            return this;
        },
        setId: function (id) {
            this._copy_id = id;

            return this;
        },
        getId: function () {
            return this._copy_id;
        },
        isCallsEditView: function () {
            return $('.edit-view[data-copy_id="'+this.getId()+'"]').length ? true : false;
        },
        isCallsModule: function () {
            return $('.list_view_block[data-copy_id=' + this.getId() + ']').length || $('.process_view_block[data-copy_id=' + this.getId() + ']').length ? true : false;
        },
        openMenuServices: function () {
            this.actions.onClickServicesParams();

            return this;
        },

        events: function () {
            var data = {
                    instance: this
                },
                path = this.actions;


            this._events = [
                {
                    parent: document,
                    selector: '.element[data-type="calls-settings"]:not([data-name])',
                    event: 'click',
                    func: path.onClickServicesParams
                },
                {
                    parent: document,
                    selector: '.element[data-type="calls-settings"][data-name]',
                    event: 'click',
                    func: path.onClickUpdateService
                },
                {
                    parent: document,
                    selector: 'ul.channels-list>li.element[data-type="calls_menu_channel"]',
                    event: 'click',
                    func: path.onGetChannel
                },
                // {parent: document, selector: '.right-sidebar .edit_view_dnt-add', event: 'click', func: path.onAddCard},
                {
                    parent: document,
                    selector: '.calls-services .list-services .element[data-id]',
                    event: 'click',
                    func: path.onClickOpenParams
                },
                {
                    parent: document,
                    selector: '.calls-services .service-param .close-button-back',
                    event: 'click',
                    func: path.onClickCloseParams
                },
                {parent: document, selector: '.activity-ext', event: 'click', func: path.onClickAreaText},

                // ??? !!! Нельзя привязываться только к атрибутам
                {
                    parent: document,
                    selector: '[data-type_comment="email"] .emoji-wysiwyg-editor',
                    event: 'keyup',
                    func: path.onKeyUpAreaText
                },


                {
                    parent: document,
                    selector: '.calls-services .element[data-type="save"]',
                    event: 'click',
                    func: path.onSave
                },
                {
                    parent: document,
                    selector: '.edit-view .element[data-type="editors"] .element[data-type="drop_down"] .link .element[data-type="add-channel"]',
                    event: 'click',
                    func: path.onAddChannel
                },
                {parent: document, selector: '.activity-ext input.form-control', event: 'click', func: path.onFocusArea},
                {parent: document, selector: '.activity-ext input.form-control', event: 'blur', func: path.onBlurInput},
                {
                    parent: document,
                    selector: '.calls-services .service-param:not([data-update="false"]) .close-button',
                    event: 'click',
                    func: path.onClickServiceParamClose
                },
                {
                    parent: document,
                    selector: '.calls-services .service-param:not([data-update="true"]) .close-button',
                    event: 'click',
                    func: path.onClickPopupClose
                },
                {
                    parent: document,
                    selector: '.calls-services [data-type="list-services"] select',
                    event: 'change',
                    func: path.onChangeService
                },
                {parent: document, selector: '.activity-ext .recipients input', event: 'keyup', func: path.onAddRecipient},
                {parent: document, selector: '.activity-ext .recipients', event: 'click', func: path.onFocus},
                {
                    parent: document,
                    selector: '.activity-ext .recipients .todo-remove',
                    event: 'click',
                    func: path.onRemoveRecipient
                },
            ]

            Global.addEvents(this._events, data);

            return this;
        },

        importModel: function (data) {
            for (var key in data) {
                if (typeof data[key] != 'object') {
                    this[key] = data[key];
                }
            }

            return this;
        },

        initTextArea: function () {
            var offset, offsetTop, $list,
                $calls = $('[data-sub_type="btn-group-editors"]'),
                $activity = $calls.find('.activity-ext'),
                $textArea = $calls.find('.message_field[data-type_comment="email"] .emoji-wysiwyg-editor:visible'),
                $message = $activity.find('.message');

            if (!$activity.length) {
                return this;
            }

            $list = $activity.find('li');
            offset = $activity.find('[data-type="data"]').height();
            offsetTop = parseInt($textArea.css('padding-top'));

            if (offsetTop == 0) {
                $textArea.css({
                    'padding-top': offset - 14,
                    'padding-bottom': 4
                });
            } else {
                $textArea.css({
                    'padding-top': $list.first().height() * $list.length + 4,
                    'padding-bottom': 4
                });
            }
            if ($.browser && $.browser.mozilla) {
                $textArea.height($list.first().height());
            }

            Global.groupDropDowns().init();

            $.each($activity.find('input'), function () {
                var $this = $(this);

                ($this.val().length) ? $this.removeClass('empty') : $this.addClass('empty');
            })

            if ($textArea.length && $textArea.html().length) {
                $message.addClass('hide')
            } else {
                $message.removeClass('hide')
            }
            return this;
        },
        reloadChannel: function () {
            var _this = this;

            if (this.interval_actions == null) {
                this.interval_actions = setInterval(function () {
                    _this.refreshMenuItems(true);
                }, crmParams.global.intervals.quick_view.block_calls);
            }
        },
        refreshMenuItems: function (period) {
            CallsBlock
                .getInstance()
                .setPeriod(period)
                .refreshChannels(false);
        },
        getMessages: function ($element) {
            // var data = {};
            //
            // data.id = $element.attr('data-id');
            //
            // $.ajax({
            //     url: '/module/calls/changeChannel',
            //     data : data,
            //     type: "POST",
            //     timeout : crmParams.global.ajax.get_url_timeout,
            //     success: function(data) {
            //         if(data.status == true){
            //             Message.show(data.html, true);
            //
            //         }
            //         return false;
            //     },
            //     error: function(jqXHR, textStatus, errorThrown){
            //         Message.showErrorAjax(jqXHR, textStatus);
            //     },
            // });
            // return false;
        },

    actions: {
        onAddChannel : function (e) {
            var _this = $(this).closest('.edit-view').find('.element[data-type="block"] .sm_extension[data-type="submodule"][data-relate_copy_id="'+Calls.getId()+'"] .submodule_edit_view_dnt-create');

            if(!_this){
                return;
            }

            Preloader
                .createInstance()
                .setModal(true)
                .setModalSub(true)

            EditView.subModules.cardCreate(_this);

        },
        onFocus : function () {
            $(this).find('input').focus();
        },
        onClickSubWindow : function (step, param) {
            var $blocks = $('[data-type="sub-window"]');

            $blocks.filter('.active').find('.panel-body>.element').addClass('hide');
            $blocks.removeClass('active')

            if (step == 1) {
                $blocks.first().addClass('active');
            } else if (step == 2) {
                var $element = $blocks.last();

                $element.addClass('active');
                if (param == 'change') {
                    $('.close-button').attr('data-dismiss', 'modal');
                    $element.find('[data-type="list-services"]').removeClass('hide');
                    $element.find('[data-id="'+ $element.find('select').val() +'"]').removeClass('hide');
                    Global.initSelects();
                }
            }
        },

        onClickUpdateService : function (e) {
            var $this = $(this);

            $.ajax({
                url: '/module/calls/UpdateService/' + e.data.instance.copy_id,
                data : {
                    name : $this.attr('data-name')
                },
                type: "POST",
                timeout : crmParams.global.ajax.get_url_timeout,
                success: function(data) {
                    if(data.status == true){
                        Message.show(data.html, true);
                    }
                    e.data.instance.onClickSubWindow(2, 'change');
                    return false;
                },
                error: function(jqXHR, textStatus, errorThrown){
                    Message.showErrorAjax(jqXHR, textStatus);
                },
            });
            return false;
        },

        onClickServicesParams : function (e) {
            var id,
                data = {};

            if (e) {
                data.page = 2;
                id = e.data.instance._copy_id;
            } else {
                data.page = 1;
                id = Calls._copy_id;
            }

            data.page = (e) ? 2 : 1;

            AjaxObj.createInstance()
                .setUrl('/module/calls/serviceParams/' + id)
                .setData(data)
                .setType("post")
                .setDataType('html')
                .setTimeOut(crmParams.global.ajax.get_url_timeout)
                .setCallBackSuccess(function (html) {
                    Calls.createInstance().instanceDialog = modalDialog
                            .createInstance()
                            .show(html)

                    Global.initSelects();
                })
                .send();

            return false;
        },

        onRemoveRecipient : function (e) {
            $(this).closest('.recipients').remove();
            e.data.instance.initTextArea();
        },
        onFocus : function () {
            $(this).find('input').focus();
        },
        onAddRecipient : function (e) {
            var $this = $(this),
                $activityExt = $('.activity-ext');

            if (e.keyCode == 13) {
                var $object = $activityExt.find('li.recipients').last(),
                    $clone = $object.clone();

                $clone.find('input').val('');

                $object.after($clone);
                e.data.instance.initTextArea();
            } else {
                ($this.val().length) ? $this.removeClass('empty') : $this.addClass('empty');
            }
        },
        onClickPopupClose : function (e) {
            $('[data-type="modal-dialog"]').modal('hide');
        },
        onChangeService : function () {
            var $this = $(this),
                $services = $('.service-param [data-id]'),
                id = $this.val();

            $services.addClass('hide').filter('[data-id="'+id+'"]').removeClass('hide');
        },
        onClickServiceParamClose : function (e) {
            e.data.instance.onClickSubWindow(1);
        },
        onBlurInput : function () {
            $('.emoji-wysiwyg-editor').removeClass('focus');
        },
        onFocusArea : function () {
            $('.emoji-wysiwyg-editor').addClass('focus');
        },
        onKeyUpAreaText : function () {
            var $this = $(this),
                $message = $this.closest('.activity-ext').find('.message');

            ($this.html().length) ? $message.addClass('hide') : $message.removeClass('hide');
        },
        onClickUpdateService : function (e) {
            var $this = $(this);

            AjaxObj
                .createInstance()
                .setUrl('/module/calls/UpdateService/' + Calls.copy_id)
                .setData({
                    name: $this.attr('data-name')
                })
                .setType("POST")
                .setTimeOut(crmParams.global.ajax.get_url_timeout)
                .setCallBackSuccess(function (data) {
                    if (data.status == true) {
                        Message.show(data.html, true);
                    }
                    e.data.instance.onClickSubWindow(2, 'change');
                    return false;
                })
                .send();

            return false;
        },
        onGetChannel : function(e){
            var $this = $(this);

            if (($this.closest('.panel-heading').length && $this.closest('.process_view_block').length) // What we is on PV
                || $this.closest('.sm_extension_data.editing').length) {
                return;
            }
            var EVInstance = EditView.createInstance();

            EVInstance
                .setParent(QuickViewPanel.getInstance())
                .editCard(this, null, function(data){
                    EVInstance.runAfterEditCardLV(data);

                    Global
                        .createLinkByEV($('.edit-view:last'))
                        .fixSubstrateInModal();

                    Calls.initTextArea(); //.events()
            });
        },
        onAddCard : function (e) {
            var instance = EditView.createInstance().setParent(QuickViewPanel.getInstance())

            instance.addCard(this, null, function(data){
                instance.runAfterAddCardLV(data);
                Calls.initTextArea();
            });
        },
        onSave : function (e) {
            var time,
                $bloks = $('.element.active[data-type="sub-window"] [data-id].element:not(.hide)'),
                $inputs = $bloks.find('input'),
                $this = $(this),
                ajax = AjaxObj.createInstance(),
                data = {
                    id : parseInt($bloks.attr('data-id')),
                    source_name : 'email',
                    service_name : $bloks.attr('data-service-name'),
                    signature : $bloks.find('textarea.element[data-name="signature"]').val(),
                    list : {}
                };

            $.each($inputs, function(key, value) {
                var $value = $(value),
                    key = $value.attr('data-name');

                data.list[key] = $value.val();
            });

            Global.btnSaveSetDisabled($this, true);

            ajax.setData(data)
                .setAsync(false)
                .setType('POST')
                .setUrl('/module/calls/SaveServiceParams/' + e.data.instance._copy_id)
                .setDataType('json')
                .setCallBackSuccess(function(data){
                    if(data.status == 'access_error' || data.status == 'error'){
                        Message.show(data.messages, false);
                    } else if (data.status == 'error_email_connect') {
                        Message.show([{'type': 'error', 'message': data.messages}], false);
                    } else if(data.status == 'error_validate'){
                        $this.closest('.sm_extension').find('.element[data-type="objects"] .errorMessage').html('');
                        $.each(data.messages, function(data_type, message){
                            $this.closest('.sm_extension').find('.element[data-type="objects"] .element[data-type="'+data_type+'"] .errorMessage').html(message);
                        })
                    } else if(data.status){
                        $this.closest('.sm_extension').find('.element[data-type="objects"] .errorMessage').html('');
                        if(Calls.getInstance().instanceDialog){
                            Calls.getInstance().instanceDialog.hide();
                        }
                        else {
                            $('.close-button:visible').trigger('click');
                        }
                    }
                    Global.btnSaveSetDisabled($this, false);
                })
                // .setCallBackError(function(jqXHR, textStatus, errorThrown){
                //     Message.showErrorAjax(jqXHR, textStatus);
                // });

            time = setTimeout(function () {
                clearTimeout(time);
                ajax.send();
            }, 50)
        },
        onClickAreaText : function (e) {
            var $this = $(this),
                $target = $(e.target);

            if ($target.is('.form-control') || $target.is('.form-control')) {
                return;
            }

            $this.find('.emoji-wysiwyg-editor').addClass('is-focused').focus();
            return false;
        },
        onClickOpenParams : function (e) {
            var $block,
                $this = $(this);

            $block = $('[data-type="sub-window"]').removeClass('active').last();
            Global.initSelects();
            $block.addClass('active');
            $block.find('[data-id="'+$this.attr('data-id')+'"]').removeClass('hide');
            $block.find('.panel-heading .title').html($this.find('.text').text());
            $block.find('.errorMessage').html('');

            return false;
        },
        onClickCloseParams : function (e) {
            var $block,

            $block = $('[data-type="sub-window"]').removeClass('active').first();
            Global.initSelects();
            $block.addClass('active');
            $('[data-type="sub-window"]').last().find('.panel-body .element[data-service-name]').addClass('hide');

            return false;
        },
    },
    remove: function () {

    },
    destroy: function () {
        var instance = Calls._instance;

        if (instance) {
            Global.removeEvents(this._events);
            Calls._instance = null;
        }
        delete this;
    }
}









/**************************************************************
*               CallsBlock
***************************************************************/


var CallsBlock = {
    _status: false,
    _instance: null,
    _nice_scroll: null,
    _update_store_data: null,
    _period: null,
    _parent:null,

    _visible : false,
    _name : null,
    _block_group : null,
    _block_object : null,
    _there_is_data : null,


    getInstance : function(status){
        if(status || !CallsBlock._instance){
            if(CallsBlock._instance){
                CallsBlock._instance.destroy();
            }

            CallsBlock._instance = this.createInstance();
        }
        return CallsBlock._instance;
    },

    createInstance : function(){
        var Obj = function(){
            for(var key in CallsBlock){
                this[key] = CallsBlock[key];
            }
        }

        return CallsBlock._instance = new Obj().constructor();
    },

    constructor: function () {
        this.events();

        return this;
    },
    setName : function(name){
        this._name = name;
        return this;
    },
    getName : function(){
        return this._name;
    },
    setBlockGroup : function(block_group){
        this._block_group = block_group;
        return this;
    },
    getBlockGroup : function(){
        return this._block_group;
    },
    setBlockObject : function(block_object){
        this._block_object = block_object;
        return this;
    },
    getBlockObject : function(){
        return $('.right-sidebar [data-type="content"] [data-name="'+this._name+'"]');
    },
    setThereIsData : function(there_is_data){
        this._there_is_data = there_is_data
        return this;
    },
    getThereIsData : function(){
        return this._there_is_data;
    },
    setPeriod : function (period) {
        this._period = period || CallsBlock._period;
        return this;
    },
    setVisible : function(visible){
        this._visible = visible;
    },
    getVisible : function(){
        return this._visible;
    },
    setUpdateStoreData : function (bool) {
        this._update_store_data = bool || CallsBlock._update_store_data;
        return this;
    },

    events : function () {
        var actions = this.actions;

        this._events = [
            { parent: document, selector: '.right-sidebar .widget-container .ajax_content_reload', event: 'click', func: actions.onOpenAllChannel},
        ]

        Global.addEvents(this._events, {
            instance: this
        });

        return this;
    },
    actions : {
        // onOpenAllChannel
        onOpenAllChannel : function () {
            ProcessView.destroy();
        },

        // onSwitchBlock
        // onSwitchBlock : function(e){
        //     var baseInstance = e.data.instance;
        //
        //     QuickViewPanel.getInstance().hideBlocksByBlockGroup(baseInstance.getBlockGroup());
        //     QuickViewPanel.getInstance().showBlock($(this).data('block_name'));
        //
        //     var block_model = QuickViewPanel.getInstance().getBlockModelByName($(this).data('block_name'));
        //     if(!block_model.activeMenu.getCurrentCount()){
        //         block_model.update(block_model.activeMenu.ACTION_UPDATE_CURRENT_LIST);
        //     }
        // },
    },

    show : function(){
        this._visible = true;
        $(this.getBlockObject()).removeClass('hide');
        return this;
    },

    hide : function(){
        this._visible = false;
        $(this.getBlockObject()).addClass('hide');

        return this;
    },

    refreshChannels: function(check) {
        if(this.getVisible() == false){
            return false;
        }


        if(check == true){//проверять ли в каком модуле находимся
            if(!Calls.isCallsEditView() && crmParams.page_interface_type !== PAGE_IT_CALLS){//усли мы не в модуле/карточке Звонки, то выходим
                return false;
            }
        }

        this.resizeNiceScroll();
        if ($('.right-sidebar').length) {
            this.update(this.activeMenu.ACTION_UPDATE_CURRENT_LIST);
        }
    },

    setStatus : function(status){
        this._status = status;
        return this;
    },

    initScroll: function(){
        QuickViewPanel.setVerticalPosition();

        this.resizeNiceScroll();

        return this;
    },

    resizeNiceScroll: function () {
        var time,
            _this = this,
            $channel = $(this._block_object).find('.channels-list');

        this._nice_scroll.init();

        if (!this._nice_scroll._native || !Object.keys(this._nice_scroll._native).length) return this;

        this._nice_scroll._native.scrollend(function () {
            if(_this.getThereIsData() == false){
                return;
            }

            if ((parseInt(this.scrollvaluemax) - 55) <= (parseInt(this.scroll.y)) && _this._nice_scroll._status_balance_data) {
                _this._nice_scroll.setStatusLoadData(false);

                QuickViewPanel.getInstance().setStatusLoad(QuickViewPanel.VIEW_PRELOADER_IN_BOTTOM);

                if (!$channel.find('.small-preloading').length) {
                    $channel.append(Preloader._item_li_for_loading).find('>li.small-preloading').addClass('init-preloader set-preloader');
                }

                _this._nice_scroll.update();
                $channel.getNiceScroll(0).doScrollTop(999999);
                time = setTimeout(function () {
                    clearTimeout(time);
                    _this.update(_this.activeMenu.ACTION_UPDATE_WITH_NEXT);
                }, 1000);
            }
        });
    },

    update: function(action){
        var request, time,
            active_com_menu_model = this.activeMenu,
            panel = QuickViewPanel.getInstance();

        active_com_menu_model._parent = this;
        this.self = active_com_menu_model;

        request = function () {
            active_com_menu_model
                .setAction(action)
                .run();
        }

        if (!this._period) {
            panel.setPreloaderToView();
            time = setTimeout(function () {
                clearTimeout(time);
                request()
            }, 100);
        } else {
            request();
        }

        this._period = CallsBlock._period; // clear
    },

    updateMenuByPermissions: function(){
        CallsBlock.checkModulePermission('rule_view',
            Calls.getId(),
            function () {
                QuickViewPanel.show();
            },
            function () {
                QuickViewPanel.close();
            },
            true);

        CallsBlock.checkModulePermission('rule_create',
            Calls.getId(),
            function () {
                var btn_create_channel = $('.right-sidebar .edit_view_dnt-add');
                if (btn_create_channel.length > 0) {
                    btn_create_channel.show();
                }
            },
            function() {
                var btn_create_channel = $('.right-sidebar .edit_view_dnt-add');
                if (btn_create_channel.length > 0) {
                    btn_create_channel.hide();
                }
            }
        );
    },

    checkModulePermission: function(permission_const,copy_id,callback_true,callback_false,check_active_module){
        var _data = {
            permission_const: permission_const,
            copy_id: copy_id,
            check_active_module: check_active_module,
        };
        $.ajax({
            url: '/module/permission/CheckModulePermission/' + 3,
            data: _data,
            type: 'POST', async: false, dataType: "json",
            success: function (data) {
                if (data.status == true) {
                    callback_true();
                }
                else {
                    callback_false();
                }
            },
            error: function (xhr) {
                if (xhr.status) {
                    Message.show([{'type': 'error', 'message': Global.urls.url_ajax_error}], true);
                }
            }
        });
    },

    activeMenu : {

        ACTION_UPDATE_CURRENT_LIST :       1,
        ACTION_UPDATE_WITH_NEXT :          2,

        _action : null,
        _parent : null,
        _this : null,
        _error : false,
        _ajax_result : null,
        _search_text : '',
        _limit : 20,
        _running : false,


        init : function(){
            if(this._error) return this;
            return this;
        },

        setError : function(){
            this._error = true;
            return this;
        },

        setAction : function(action){
            this._action = action;
            return this;
        },

        setThis : function(_this){
            if(typeof _this == 'undefined' || !_this) return this.setError();

            this._this = _this;
            return this;
        },

        setSearchText : function(text){
            if(typeof(text) != 'undefined' && text){
                this._search_text = text; //encodeURI(text);
            } else {
                this._search_text = '';
            }
            return this;
        },

        clearSearchText : function () {
            this._search_text = '';
        },

        getSearchText : function(){
            return this._search_text;
        },

        getChannelsObject : function () {
            return $('.element[data-type="calls_menu_channel"]');
        },

        getCurrentCount : function(){
            var channels_object = this.getChannelsObject();
            if(!channels_object){
                return 0
            }
            return channels_object.length;
        },

        getLimitItems : function(){
            var limit = this.getCurrentCount();
            if(!limit || limit < this._limit){
                limit = this._limit;
            }

            return limit;
        },

        run : function(){
            if(this._error) return this;
            if(this._running == true) return this;

            this._running = true;

            var ajax_data = this.getAjaxData();

            this.runAjax(ajax_data);

            return this;
        },


        //getAjaxData
        getAjaxData : function(){
            var result = {
                'block_name' : this._parent.getName(),
            };

            switch(this._action){
                case this.ACTION_UPDATE_WITH_NEXT:
                    result['limit'] = this.getCurrentCount() + this._limit;
                    result['offset'] = 1;
                    break;
                case this.ACTION_UPDATE_CURRENT_LIST:
                    result['limit'] = this.getLimitItems();
                    result['offset'] = 1;
                    break;
            }

            return result;
        },



        //runAjax
        runAjax : function(ajax_data){
            var _url,
                _this = this;

            if(this._error){
                this._running = false
                return this;
            }

            _url = this.getUrl();

            AjaxObj
                .createInstance()
                .setAsync(true)
                .setData(ajax_data)
                .setUrl(_url)
                .setType('post')
                .setCallBackComplete(function(){
                    _this._running = false;
                })
                .setCallBackSuccess(function(data){
                    _this._running = false;
                    if(data.status){
                        _this.runAfterAjaxSuccess(data);
                    } else {
                        CallsBlock.getInstance().setStatus(false);
                        this.preloader();
                    }
                })
                .send();
        },

        preloader: function (callback) {
            var $element = Preloader._item_li_for_loading,
                $channel = $('.channels-list'),
                $list = $channel.find('>li');

            if (CallsBlock.getInstance()._status) {
                if ($list.length) {
                    $list.last().after($element);

                    var time = setTimeout(function () {
                        clearTimeout(time);

                        if (Global.isHandler(callback)) {
                            callback();
                        }
                    }, 200);
                }
            } else {
                $('.channels-list li.small-preloading').remove();
                this._parent._parent.getPreloader().hide();
            }
        },

        //runAfterAjaxSuccess
        runAfterAjaxSuccess : function(data){
            this._ajax_result = data;
            CallsBlock.getInstance()._nice_scroll.setStatusLoadData(data.there_is_data)

            if(this._error){
                return;
            }

            switch (this._action){
                case this.ACTION_UPDATE_CURRENT_LIST:
                case this.ACTION_UPDATE_WITH_NEXT:
                    var _this = this;
                    CallsBlock.getInstance().setStatus(false);
                    this.preloader();
                    _this.refreshChannelsHtml();
                    break;
            }

            if (this._action == this.ACTION_UPDATE_WITH_NEXT || this._parent._update_store_data) {
                this._parent._parent.setStoreData(data['html_result']);
                this._parent._update_store_data = CallsBlock._update_store_data;
            }

            _this._parent.resizeNiceScroll();
        },

        refreshChannelsHtml: function(){
            var $channel = $('.right-sidebar .channels-list[data-copy_id="'+Calls.getId()+'"]'),
                html_result = this._ajax_result['html_result']

            $channel.html(html_result);

            if(html_result && !html_result.length){
                $channel.height(0);
            } else {
                QuickViewPanel.setVerticalPosition();
            }
        },

        addChannelsHtml: function(){
            this.getChannelsObject().last().after(this._ajax_result['html_result']);
        },

        removeChannels : function(){
            this.getChannelsObject().remove();

            return this;
        },

        getUrl : function(){
            var str = '';

            switch(this._action){
                case this.ACTION_UPDATE_WITH_NEXT :
                case this.ACTION_UPDATE_CURRENT_LIST :
                default : {
                    var url,
                        data = QuickViewPanel.getInstance().search.getParamAsJson();

                    str = '/quickView/getItems';
                    url = Url.createInstance().setUrl(str);

                    if (data.search.length) {
                        str = url.jsonToUrl(data).getUrl();
                    }
                }
            }

            return str;
        },
    },


    destroy : function () {
        CallsBlock._instance = null;
        Events.removeHandler(Events.TYPE_EVENT_RESIZE, 'initScroll');
        NiceScroll.clear($('.right-stat-bar[data-name="cals"] .channels-list'));
    }
}


/**
 * Created by andrew on 7/16/18.
 */
;(function (exports) {
    var _private, modelEvents, Events,
        _self = {}; //link for instance

    _private = {
        line_resize: null,
        line_scroll: null,
        line_ajax_complete: null,
        line_body_click: null,
        line_change_hash: null,
        line_pop_state: null,
        line_update_data: null,
        line_destroy_data: null,
        line_window_load: null,
        line_snapshot: null,
        line_load_graph: null,

        _type: 'events',

        getObject: function (type) {
            var list = null;

            switch (type) {
                case Events.TYPE_AJAX_COMPLETE: {
                    list = this.line_ajax_complete;
                    break;
                }
                case this.TYPE_EVENT_RESIZE: {
                    list = this.line_resize;
                    break;
                }
                case this.TYPE_EVENT_BODY_CLICK: {
                    list = this.line_body_click;
                    break;
                }
                case this.TYPE_EVENT_SCROLL: {
                    list = this.line_scroll;
                    break;
                }
                case this.TYPE_LOAD_GRAPH: {
                    list = this.line_load_graph;
                    break;
                }
                case this.TYPE_POP_STATE: {
                    list = this.line_pop_state;
                    break;
                }
                case this.TYPE_CHANGE_HASH: {
                    list = this.line_change_hash;
                    break;
                }
                case this.TYPE_DESTROY: {
                    list = this.line_destroy_data;
                    break;
                }
                case this.TYPE_UPDATE_DATA: {
                    list = this.line_update_data;
                    break;
                }
                case this.TYPE_WINDOW_LOAD: {
                    list = this.line_window_load;
                    break;
                }
                case this.TYPE_SNAPSHOT: {
                    list = this.line_snapshot;
                    break;
                }
                default : {
                    break;
                }
            }

            return list;
        },
        universal: function (list, model) {
            var status = null;
            list = list || [];
            model = model || {};

            $.each(Object.keys(list), function (key, value) {
                status = list[value](model.event, model.data)
            });

            return status;
        },
        helperChangeHash: function (model) {
            this.universal(this.line_change_hash, model);
        },
        helperPopState: function (model) {
            this.universal(this.line_pop_state, model);
        },
        helperTypeAjaxComplete: function (model) {
            this.universal(this.line_ajax_complete, model);
        },
        helperBodyClick: function (model) {
            this.universal(this.line_body_click, model);
        },
        helperScroll: function (model) {
            this.universal(this.line_scroll, model);
        },
        helperUpdateData: function (model) {
            return this.universal(this.line_update_data, model);
        },
        helperDestroy: function (model) {
            return this.universal(this.line_destroy_data, model);
        },
        helperWindowLoad: function (model) {
            return this.universal(this.line_window_load, model);
        },
        helperLoadGraph: function (model) {
            return this.universal(this.line_load_graph, model);
        },
        helperSnapshot: function (model) {
            return this.universal(this.line_snapshot, model);
        },
        helperResize: function (model) {
            var list = this.line_resize,
                _this = this;

            if (list && list.initScroll) {
            }

            $.each(Object.keys(list), function (key, value) {
                if (list[value].handler) {
                    list[value].handler.call(list[value].instance, _this);
                } else {
                    list[value](model.event, model.data);
                }
            });
        },
    };

    modelEvents = {
        _type: null,
        _handler: null,
        _instance: null,
        _key: null,

        //{ type: '', key: '', handler: '', instance: ''}
        run: function () {
            var object = _self.getObject(this._type);

            if (object) {
                object[this._key] = this._handler; // TODO: ошибочное, проверить.
                object[this._key].handler = this._handler;
                object[this._key].instance = this._instance;
            }

            return this;
        },
        setKey: function (key) {
            this._key = key;

            return this;
        },
        setInstance: function (instance) {
            this._instance = instance

            return this;
        },
        setHandler: function (handler) {
            this._handler = handler;

            return this;
        },
        setType: function (type) {
            this._type = type;

            return this;
        },
        constructor: function () {
            return this;
        }
    };

    Events = {
        type: 'Events',
        TYPE_EVENT_RESIZE: 1,
        TYPE_EVENT_BODY_CLICK: 2,
        TYPE_AJAX_COMPLETE : 3,
        TYPE_EVENT_SCROLL: 4,
        TYPE_CHANGE_HASH: 5,
        TYPE_POP_STATE: 6,
        TYPE_UPDATE_DATA: 7,
        TYPE_DESTROY: 8,
        TYPE_WINDOW_LOAD: 9,
        TYPE_SNAPSHOT: 10,
        TYPE_LOAD_GRAPH: 11,

        createInstance: function () {
            var Obj = function(){
                for(var key in modelEvents){
                    this[key] = modelEvents[key];
                }
            }

            Obj.prototype = Object.create(Global);

            return new Obj().constructor();
        },

        removeHandler: function (json) {
            if (json.type && _self.getObject(json.type)) {
                delete _self.getObject(json.type)[json.key];
            }
            return this;
        },
        init: function () {
            _self.line_resize = {};
            _self.line_ajax_complete = {};
            _self.line_scroll = {};
            _self.line_body_click = {};
            _self.line_change_hash = {};
            _self.line_update_data = {};
            _self.line_destroy_data = {};
            _self.line_window_load = {};
            _self.line_snapshot = {};
            _self.line_load_graph = {};

            return this;
        },
        getCountLine: function (type) {
            var count = 0;

            switch (type) {
                case Events.TYPE_EVENT_RESIZE: {
                    count = Object.keys(_self.line_resize).length
                    break;
                }
                case Events.TYPE_EVENT_SCROLL: {
                    count = Object.keys(_self.line_scroll).length
                    break;
                }
                case Events.TYPE_LOAD_GRAPH: {
                    count = Object.keys(_self.line_load_graph).length
                    break;
                }
                case Events.TYPE_UPDATE_DATA: {
                    count = Object.keys(_self.line_update_data).length
                    break;
                }
                default: break;
            }

            return count;
        },
        runHandler: function (type, model) {
            var status = null;

            switch (type) {
                case Events.TYPE_EVENT_RESIZE: {
                    _self.helperResize(model);
                    break;
                }
                case Events.TYPE_EVENT_SCROLL: {
                    _self.helperScroll(model);
                    break;
                }
                case Events.TYPE_AJAX_COMPLETE: {
                    _self.helperTypeAjaxComplete(model);
                    break;
                }
                case Events.TYPE_EVENT_BODY_CLICK: {
                    _self.helperBodyClick(model);
                    break;
                }
                case Events.TYPE_CHANGE_HASH: {
                    _self.helperChangeHash(model);
                    break;
                }
                case Events.TYPE_UPDATE_DATA: {
                    status = _self.helperUpdateData(model);
                    break;
                }
                case Events.TYPE_WINDOW_LOAD: {
                    status = _self.helperWindowLoad(model);
                    break;
                }

                case Events.TYPE_DESTROY: {
                    status = _self.helperDestroy(model);
                    break;
                }
                case Events.TYPE_SNAPSHOT: {
                    status = _self.helperSnapshot(model);
                    break;
                }
                case Events.TYPE_POP_STATE: {
                    _self.helperPopState(model);
                    break;
                }
                case Events.TYPE_LOAD_GRAPH: {
                    _self.helperLoadGraph(model);
                    break;
                }

                default: break;
            }
            return status;
        },
        run: function () {
            $window.on('resize', function(e) {
                _self.helperResize(e);
            });

            $window.on('scroll', function(e) {
                if (QuickViewPanel.isHover()) {
                    return false;
                }
                _self.helperScroll(e);
            });

            $('body').on('click', function(e) {
                _self.helperBodyClick(e);
            });

            $(window).load(function (e) {
                if (!ModelGlobal.isAuth()) {
                    return;
                }

                var callback;

                setTimeout (function(){
                    var instance = Global.getInstance(),
                        subInstance = ViewType.getCurrentInstance();

                    instance.setPreloader(instance.preloader && instance.preloader.destroy());

                    $('#container').removeClass('set-preloader reload-page show');

                    setCheckboxHeight();
                    $('body > .nicescroll-rails').css('opacity','1');

                    if (subInstance) {
                        subInstance.afterLoadView()
                    }
                }, 500);
                Global.responsiveNav();
                poliDot();

                if (typeof ListViewDisplay == 'undefined') {
                    return;
                }
                ListViewDisplay
                    .setIndex()
                    .setHiddenGroupIndex();

                if (EditView.willExist()) {
                    callback = function () {
                        _self.helperWindowLoad(e);
                    };
                } else {
                    _self.helperWindowLoad(e);
                }

                History.loadModal(callback);

                ;
            });

            return this;
        }
    }

    for(var key in _private){
        _self[key] = _private[key];
    }

    for(var key in Events){
        _self[key] = Events[key];
    }

    exports.Events = Events;
})(window);




;(function (exports) {
    var _private, _public, _protected,
        _self = {}; //link for instance

    _protected = {

    };
    /*config file package.json environments -> editor:
    * 1 - emoji
    * 2 - tinymci
    */
    var redactor = {
        type: null,

        setType: function (type) {
            this.type = type;

            return this;
        },
        isEmoji: function () {
            return crmParams.activity_editor == Constant.EDITOR_EMOJI
        },
        isTinyMCE: function () {
            return crmParams.activity_editor == Constant.EDITOR_TINY_MCE
        },
        enablePaste: function(_this) {
            switch ( crmParams.activity_editor) {
                case Constant.EDITOR_EMOJI: {
                    $('.emoji-wysiwyg-editor').on('paste', function() {
                        var wysiwyg = $(this);
                        _this
                            .setElement(wysiwyg)
                            .setPoint(wysiwyg.closest('.element[data-type="editors"]'))
                            .calcPositionDeltaScroll();

                        setTimeout(function(){
                            var notImages = wysiwyg.find('*:not(:has(img[src*="static/images/emoji"]))');
                            notImages.find('input, video, textarea, select, button, iframe, style, script, meta').remove();
                            notImages.find('br').removeAttr('style');

                            while (notImages.filter('*[style]').not('br').length) {
                                var values = notImages.filter('*[style]').not('br');
                                $.each(values, function(key, val){
                                    var it = $(this),
                                        attributes = $.map(this.attributes, function (item) {
                                            return item.name;
                                        });
                                    if (it.is('[src*="static/images/emoji"]')) return true;
                                    $.each(attributes, function(i, item) {
                                        it.removeAttr(item);
                                    });

                                    $.each((it.is('table')) ? [it] : [], function (key,val){
                                        var parent = val.wrap( "<div></div>" ).parent();
                                        parent.html(parent.text());
                                    });

                                    if (it.find("*").not("b, strong, em").first().is('br')) {
                                        it.find('>br').wrap( "<div></div>" ).parent();
                                        if (!it.text().length) {
                                            it.before(it.html());
                                            it.remove();
                                        }
                                        return true;
                                    }

                                    if (it.find(">div").length) {
                                        it.before(it.html());
                                        it.remove();
                                        return true;
                                    }

                                    it.find(">*").each(function(){
                                        var t = $(this);
                                        if ( t.text().length==0 && !t.is('br')) {
                                            if (t.find('>br').length) return true;
                                            t.remove();
                                        } else {
                                            if (t.is('div')) {
                                                if (t.find('>br').length) return true;
                                                it.before(t.clone());
                                                t.remove();
                                            } else {
                                                if (t.text().length) {
                                                    t.after(' '+t.text()).remove();
                                                };
                                            };
                                        };
                                    });

                                    !it.text().trim().length && !it.find('br').length && !it.is('br') ? it.remove() : '';
                                    if (it.is('a')) {
                                        it.after('<div>'+it.text()+'</div>').remove();
                                    }
                                });
                                notImages = wysiwyg.find('*:not(:has(img[src*="static/images/emoji"]))');
                            }

                            //if (!this.editing) {
                            modalDialog.setScrollTop(_this._position_scroll_relative_point);
                            //}
                        }, 100);
                    });

                    break;
                }
                case Constant.EDITOR_TINY_MCE: {
                    break;
                }
                default: break
            }

        },
        getContent: function($root, type) {
            var content = '';

            switch ( crmParams.activity_editor) {
                case Constant.EDITOR_EMOJI: {
                    content = $root.find('[data-type_comment="'+type+'"] .emoji-wysiwyg-editor').html();
                    break;
                }
                case Constant.EDITOR_TINY_MCE: {
                    if (!tinyMCE.activeEditor) {
                        return '';
                    }
                    content = tinyMCE.activeEditor.getContent();
                    break;
                }
                default: break
            }

            return content;
        },
        getObject: function($root, type) {
            var object = '';

            switch ( crmParams.activity_editor) {
                case Constant.EDITOR_EMOJI: {
                    object = $root.find('[data-type_comment="'+type+'"] .emoji-wysiwyg-editor');
                    break;
                }
                case Constant.EDITOR_TINY_MCE: {
                    object = $root.find('[data-type_comment="' + type + '"] .emojis-wysiwyg'); // 4 - version
                    break;
                }
                default: break
            }

            return object;
        },


    setContent: function ($root, data, options) {
        var content = '';
        /*
        * When change version of TinyMCI, you need change classes
        * */
        //object = $root.find('[data-type_comment="' + type + '"] .tox-tinymce'); // 5 - version
        // object = $root.find('[data-type_comment="' + type + '"] .emojis-wysiwyg'); // 4 - version

        switch (crmParams.activity_editor) {
            case Constant.EDITOR_EMOJI: {
                $root.find('form div.emoji-wysiwyg-editor')
                    .empty()

                $root.find('form div.emoji-wysiwyg-editor')
                    .html(data.message.text)
                    .attr('data-id', options.id)
                    .addClass('editting');
                $root.find('.element[data-type="block_attachments"]')
                    .html(data.message.attachments);

                break;
            }
            case Constant.EDITOR_TINY_MCE: {
                var id = $root.find('form textarea').attr('id');

                tinymce.get(id).focus();
                $root
                    //.find('form div.tox-tinymce') // 5 version
                    .find('form .emojis-wysiwyg') // 4 version
                    .attr('data-id', options.id)
                    .addClass('editting');

                tinyMCE.activeEditor.setContent(data.message.text)

                break;
            }
            default:
                break
        }

        return content;
    },
    init: function (ev) {
        var _this = this;

        switch (crmParams.activity_editor) {
            case Constant.EDITOR_EMOJI: {
                $('.emojis-plain').emojiarea({wysiwyg: false});
                break;
            }
            case Constant.EDITOR_TINY_MCE: {
                tinymce.init({
                    selector: 'textarea.emojis-wysiwyg',
                    setup: function (editor) {
                        editor.on('focus', function (e) {
                            ev.find('.btn.send_massage_activity').last().show('fast');
                        });
                        editor.on('keyup', EditView.onKeyUp);
                        editor.on('paste', function (e) {
                            setTimeout(function () {
                                var sub = ($(e.currentTarget).text() || '').substring($(e.currentTarget).text().length - redactor.keyDetectCopying.length);
                                if (sub.length == redactor.keyDetectCopying.length) {
                                    redactor.pasteAfterCopying($(e.currentTarget));
                                    return;
                                }
                            }, 100);
                        });
                    },
                    plugins: "emoticons",
                    toolbar: "emoticons",
                    branding: false,
                    contextmenu: "link image imagetools table spellchecker"
                })
                break;
            }
        }

        $.each(ev.find('[data-editor_type]'), function (){
            var $this = $(this);
            var type = $this.data('editor_type');
            console.log('type', type);
            switch (type) {
                case 'tiny_mce': {
                    tinymce.init({
                        selector: 'textarea[data-editor_type="tiny_mce"]',
                        setup: function (editor) {
                            editor.on('focus', function (e) {
                                ev.find('.btn.send_massage_activity').last().show('fast');
                            });
                            editor.on('keyup', EditView.onKeyUp);
                            editor.on('paste', function (e) {
                                setTimeout(function () {
                                    var sub = ($(e.currentTarget).text() || '').substring($(e.currentTarget).text().length - redactor.keyDetectCopying.length);
                                    if (sub.length == redactor.keyDetectCopying.length) {
                                        redactor.pasteAfterCopying($(e.currentTarget));
                                        return;
                                    }
                                }, 100);
                            });
                        },
                        plugins: "emoticons",
                        menubar: "false",
                        formats: {
                            // Changes the default format for h1 to have a class of heading
                            h1: { block: 'h1', classes: 'heading' },
                            bold: [
                                { inline: 'strong', remove: 'all' },
                                { inline: 'span', styles: { fontWeight: 'bold' } },
                                { inline: 'b', remove: 'all' }
                            ]
                        },
                        branding: false,
                        contextmenu: "link image imagetools table spellchecker"
                    })
                    break
                }
            }
        });
    },

        close: function (target) {
            var $editing = $('.edit-view .editting');

            if ($editing.length) {
                var $comment = $editing.closest('.user_comment'),
                    modelEditView = $comment.closest('.edit-view').data();

                if (modelEditView && modelEditView.updateMessage) {
                    $comment.after(modelEditView.updateMessage);
                    $comment.remove();
                }
            }
        }
    }


    _private = {
        onCancelDialog: function(e){
        },
        onSave: function(e){
            var $this = $(this),
                instance = e.data.instance,
                process_view_block = $('.process_view_block');

            if (instanceGlobal.currentInstance.type === 'process') {
                ProcessEvents.getInstance().editView.onClickSave($(this));
                return;
            }

            clearTimeout(window.saveDraftTime);

            if (process_view_block.data('page_name') == 'processView'){
                var currentStatePageName = {
                    posScroll: process_view_block.find('.process_wrapper').scrollLeft(),
                    list: []
                };
                process_view_block.find('.process_list > li .slimscrolldiv').each(function () {
                    var t = $(this);
                    if (t.getNiceScroll(0))
                    {
                        currentStatePageName.list.push({
                            position :  t.getNiceScroll(0).getScrollTop(),
                            data_unique_index : t.closest('section.panel').attr('data-unique_index')
                        });
                    }
                });
                localStorage.setItem('currentStatePageName', JSON.stringify(currentStatePageName));
            }

            var $view = $(this).closest('.edit-view'),
                $general = $view.find('.message_field[data-type_comment="general"] .emoji-wysiwyg-editor'),
                $email = $view.find('.message_field[data-type_comment="email"] .emoji-wysiwyg-editor');

            $view.find('.client-name .title-edit.open').removeClass('open');
            if ((($general.length) && ($general.html() !== ""))
                || (($email.length) && ($email.html() !== ""))) {
                $view.find('.send_massage_activity').trigger('click', {
                    status:true,
                    callback: function() {
                        if (EditView.activityMessages.data_status) {
                            instance.save($view.data('copy_id'));
                        }
                    }
                });
                return;
            } else if ($view.find('.task_comments>.task_message .file_thumb.file_other').text() == "GDoc") {
                $view.find('.emoji-wysiwyg-editor').text(Message.translate_local('Added document Google Doc'));
                $view.find('.send_massage_activity').trigger('click');
            }

            if (EditView.activityMessages.request_start) {
                var intervalId = setInterval(function() {
                    if(!EditView.activityMessages.request_start) {
                        instance.save($view.data('copy_id'));
                        clearInterval(intervalID);
                    }
                }, 300);
            } else {
                instance.setHandlerAfterSave(
                    instanceGlobal.currentInstance.type == PAGE_IT_REPORTS
                    && instance.getParent()._interface != QuickViewPanel._interface  ? function () {
                            Reports.Constructor
                                .createInstance()
                                .setElementHtml($this)
                                .open()

                        } : null)
                    .save($view.data('copy_id'));
            }
        },
        onChangeContentActivity: function () {

        },
        onClickDelete : function(e){
            var  modal,
                _this = this,
                edit_view = $(_this).closest('.edit-view'),
                id = edit_view.data('id'),
                copy_id = edit_view.data('copy_id'),
                instance = e.data.instance,
                parent_copy_id = edit_view.data('parent_copy_id'),
                $modal = edit_view.closest('.modal-dialog');



            modal = $modal.data()[$modal.data('key')];

            if(!id){
                Message.show([{'type':'error', 'message':'You can not delete any unsaved data'}], true);
                return;
            } else {

                var _function = function(){

                    var params = {'id': [id]}
                    if(!parent_copy_id || typeof(parent_copy_id) == 'undefined'){
                        var pci = $('.list_view_block.sm_extension, .process_view_block.sm_extension, .bpm_block.sm_extension').data('parent_copy_id');
                        var pdi = $('.list_view_block.sm_extension, .process_view_block.sm_extension, .bpm_block.sm_extension').data('parent_data_id');
                        if(pci) params['pci'] = pci;
                        if(pdi) params['pdi'] = pdi;
                    }

                    Global.getModel().removeData({
                        copy_id: copy_id,
                        data: params
                    }, function(data){
                        if(data.status){
                            if(!parent_copy_id || typeof(parent_copy_id) == 'undefined'){
                                if(!data.messages){
                                    History.close(true);

                                    var parent = instance.getParent();

                                    if (parent && parent._type == QuickViewPanel._type) {
                                        QuickViewPanel.updateContent(true);
                                        return this;
                                    }

                                    if (Events.getCountLine(Events.TYPE_UPDATE_DATA)) {
                                        modalDialog.hide();
                                        Events.runHandler(Events.TYPE_UPDATE_DATA, {
                                            event: e,
                                            data: null
                                        });
                                    } else {
                                        if($('.process_view_block.sm_extension').length){
                                            var card = $('.process_view_block.sm_extension .element[data-name="process_view_panel"]  li.element[data-type="drop_down"][data-id="' + id + '"]');
                                            var panel = card.closest('.element[data-name="panel"]');

                                            card.remove();

                                            var sorting_list_id_list = ProcessView.convert.dataIdToSortingListIdList([id])
                                            ProcessView.initLists(sorting_list_id_list);

                                            instanceGlobal.contentReload.preloaderHide();

                                            ProcessView.checkAndRemoveEmptyPanel(panel);
                                        } else {
                                            callback = function(){
                                                if (instanceGlobal.currentInstance.type == PAGE_IT_REPORTS && Global.isReport()) {
                                                    Reports.Constructor
                                                        .createInstance()
                                                        .setElementHtml($(_this))
                                                        .open()
                                                } else {
                                                    instanceGlobal.contentReload
                                                        .createInstance()
                                                        .prepareVariablesToGeneralContent()
                                                        .setSearch(Search.getInstance(true).getText())
                                                        .run();
                                                }
                                            }
                                        }

                                        if(typeof callback == 'function'){
                                            modalDialog.setCallbackSuccess(callback);
                                        }
                                        modalDialog.hide();
                                    }

                                    CommunicationsBlock.updateContent();
                                } else {
                                    Message.show(data.messages, false);
                                    instance.getParent().getPreloader().hide();
                                }
                            } else {
                                $(modalDialog.getModalName(2)).find('.element[data-type="drop_down_button"][data-relate_copy_id="' + copy_id + '"]').data('id', '');
                                modalDialog.hide();
                                Preloader.destroy();
                            }
                        } else if(data.messages){
                            Message.show(data.messages, false);
                        }

                        HeaderNotice.refreshAllHeaderNotices();
                        EditView.textRedLine();
                        jScrollRemove();
                        jScrollInit();
                        EditView.textRedLine();
                        setTimeout(function(){
                            EditView.textRedLine();
                        }, 100);
                    })
                }

                Message
                    .createInstance()
                    .setHandlerAsConfirmAgree(function () {
                        modal
                            .hide()
                            .isOpenAsHandler(function () {
                                instance
                                    .getParent()
                                    .showPreloader();
                            })

                        var time = setTimeout(function () {
                            clearTimeout(time);

                            _function();
                        }, 100);
                    })
                    .show([{'type':'confirm', 'message': Message.translate_local('Delete data')+ '?'}], false, null, Message.TYPE_DIALOG_CONFIRM);
            }
        },
        onBtnCopy : function(e){
            var modal,
                $this = $(this),
                $editView = $this.closest('.edit-view'),
                id = $editView.data('id'),
                $modal = $this.closest('.modal-dialog'),
                instance = e.data.instance,
                copy_id = $editView.data('copy_id');

            var modelGlobal = Global.getModel();

            modal = $modal.data()[$modal.data('key')];

            if(!id){
                Message.show([{'type':'error', 'message':'You can not copy any unsaved data'}], true);
                return;
            } else {
                var pci,
                    pdi,
                    parent_copy_id = $this.closest('.edit-view').data('parent_copy_id'),
                    parent_data_id = $this.closest('.edit-view').data('parent_data_id'),
                    params = {
                        'id' : [id],
                        'parent_copy_id' : parent_copy_id,
                        'parent_data_id' : parent_data_id,
                        'this_template' : $this.closest('.edit-view').data('this_template'),
                    };

                if(!parent_copy_id || typeof(parent_copy_id) == 'undefined'){
                    pci = $('.list_view_block.sm_extension, .process_view_block.sm_extension, .bpm_block.sm_extension').data('parent_copy_id');
                    if(pci) params['pci'] = pci;
                }
                if(!parent_data_id || typeof(parent_data_id) == 'undefined'){
                    pdi = $('.list_view_block.sm_extension, .process_view_block.sm_extension, .bpm_block.sm_extension').data('parent_data_id');
                    if(pdi) params['pdi'] = pdi;
                }


                modelGlobal.copyData({
                    copy_id: copy_id,
                    data: params
                }, function (data) {
                    if(data.status){

                        if (Events.getCountLine(Events.TYPE_UPDATE_DATA)) {
                            modalDialog.hide();

                            Events.runHandler(Events.TYPE_UPDATE_DATA, {
                                event: e,
                                data: data
                            });
                        } else {
                            if(!$this.closest('.edit-view').data('parent_copy_id')){
                                if($('.process_view_block.sm_extension').length){
                                    callback = function(){
                                        var preloader = instance.getParent().getPreloader(),
                                            contentReload = instanceGlobal.contentReload.createInstance();

                                        iPreloader.implements.call(contentReload);

                                        contentReload
                                            .setPreloader(preloader)
                                            .reDefinition()
                                            .showPreloader()
                                            .prepareVariablesToGeneralContent()
                                            .appendVars({
                                                'module': {
                                                    'data_id_list': [data.id[0]],
                                                    'sorting_list_id' : ProcessView.sorting_list_id,
                                                    'process_view_action' : ProcessView.ACTION_COPY_ENTITY
                                                }
                                            })
                                            .setCallBackSuccessComplete(function(){
                                                var sorting_list_id_list = ProcessView.convert.dataIdToSortingListIdList([data.id[0]])
                                                ProcessView.initLists(sorting_list_id_list);

                                                this.actionShowEditView(data.id[0]);
                                            })
                                            .prepareVariablesToProcessView()
                                            .run();
                                    };
                                } else {
                                    callback = function(){
                                        if (instanceGlobal.currentInstance.type == PAGE_IT_REPORTS && Global.isReport()) {
                                            Reports.Constructor
                                                .createInstance()
                                                .setElementHtml($this)
                                                .open()
                                        } else {
                                            var preloader = instance.getParent().getPreloader(),
                                                contentReload = instanceGlobal.contentReload.createInstance();

                                            iPreloader.implements.call(contentReload);

                                            contentReload
                                                .setPreloader(preloader)
                                                .reDefinition()
                                                .showPreloader()
                                                .prepareVariablesToGeneralContent()
                                                .setCallBackSuccessComplete(function () {
                                                    var copy_id2 = this._vars['module']['copy_id'];
                                                    this._vars['module']['copy_id'] = copy_id;
                                                    this.actionShowEditView(data.id[0]);
                                                    this._vars['module']['copy_id'] = copy_id2;
                                                })
                                                .run();
                                        }
                                    };
                                }

                                modalDialog.setCallbackSuccess(callback);
                            }
                            modalDialog.hide();
                        }
                    }
                });
            }
        },
        //додавання комментаря
        onSendMessageActivity : function(e, param){
            var $messageCont, type,
                $this = $(this),
                $content,
                instance = e.data.instance,
                $editView = $this.closest('.edit-view'),
                $taskMessages = $this.closest('.task_message'),
                status_editing = $taskMessages.find('.editting').length,
                activity = instance.activityMessages,
                key = $editView.data('unique_index');

            if(activity.request_start){
                return;
            }

            if (status_editing) {
                if (modalDialog.getDataFromStore(key)._scrolled) {
                    activity
                        .setElement($this)
                        .calcPositionDeltaScroll();
                }
            }

            type = $taskMessages.attr('data-type_comment');
            $messageCont = redactor.getObject($taskMessages, type)

            if(type==='email')
            {
                EditView.checkServiceParams(Communication._copy_id);
            }

            if (redactor.isEmoji()) {
                $.each($messageCont.find('div'), function(){
                    $(this).html($(this).html().replace(/&nbsp;/g,' ').trim());
                });
            }

            $content = redactor.getContent($taskMessages, type);

            activity.addMessage($messageCont, $content, function(upload_files){
                var $button = $editView.find('.buttons-section');

                if (!upload_files) {
                    $this.hide('fast');
                };

                if (status_editing) {
                    modalDialog.setScrollTop($button.position().top - activity._position_delta_scroll);
                }

                activity.activityImagesNoRedact();

                Communication.initTextArea();

                if (param && param.status) {
                    param.callback();
                }
                CommunicationsBlock
                    .getInstance()
                    .setPeriod(true)
                    .refreshChannels(true);
            });

            return true;
        },
        // onClickBtnEnding : function(e){
        //     e.preventDefault();
        //
        //     var $this = $(this), $element, $timeBlock,
        //         currentDate, outputDate,
        //         instance = e.data.instance,
        //         $item = $this.find('.date-time'),
        //         currentFormat = crmParams.getCurrentFormatDate(),
        //         $target = $(e.target),
        //         $parent = $this.parent(),
        //         $elementValue = $this.find('.element[data-type="value"]');
        //
        //     $element = $parent.find('.element[data-type="calendar-place"]');
        //     $timeBlock = $parent.find('.time-block');
        //     $this.data().param = {};
        //
        //     if ($target.parent().is('.checkbox-line') || $target.is('.checkbox-line') || $target.is('.description')) {
        //         return false; // next
        //     }
        //
        //     if ($parent.is('.open')) {
        //         $parent.toggleClass('open');
        //         return;
        //     }
        //
        //     $parent.toggleClass('open');
        //
        //     if ($item.val()) {
        //         outputDate = moment($item.val(), crmParams.FORMAT_DATE).format(currentFormat);
        //     } else {
        //         outputDate = moment().format(currentFormat);
        //     }
        //
        //     if (!$element.data().datepicker) {
        //         instance.dateTimePopUp
        //             .setElement($parent)
        //             .setCurrentFormat()
        //             .setTimer(!$elementValue.is('.only-date'))
        //             .setOutputDate(outputDate)
        //             .setOutputBlock($elementValue)
        //             .init();
        //     }
        //
        //     instance.dateTimePopUp.setDefaultParam({
        //         'time' : $timeBlock.data().timepicker.getTime()
        //     });
        // }
    };

    _public = {
        url_after_save: null,

        prepateDataForDraft: function(model, beginDraft) {
            var data = this.prepareData(model.copy_id) || {};
            var json = {};

            $.each( data, function( key, value ) {
                if (key.indexOf('EditViewModel') == 0) {
                    var nameOfField = key.substring(14, key.length-1);
                    json[nameOfField] = value;
                }
            });

            json['activity'] = this.getActivityData();

            if (beginDraft) {
                var draft = {};
                $.each(Object.keys(beginDraft || {}), function (key, value) {
                    $.each(Object.keys(json || {}), function (_key, _item) {
                        if (value == _item) {
                            if (typeof beginDraft[value] == "object") {
                                var one = JSON.stringify(beginDraft[value]);
                                var two = JSON.stringify(json[_item]);

                                if (one !== two) {
                                    draft[value] = json[_item];
                                }
                            } else {
                                if (beginDraft[value] != json[_item]) {
                                    draft[value] = json[_item];
                                }
                            }
                        }
                    })
                })
                json = draft;
            }

            return json;
        },
        getActivityData: function () {
            var $taskMessages = $('.edit-view.in').find('.task_message');
            var type = $taskMessages.attr('data-type_comment');

            return redactor.getContent($taskMessages, type);
        },
        editCardByParam : function(model){
            var data = model.data,
                _this = this;

            AjaxObj
                .createInstance()
                .setUrl(Global.urls.url_edit_view_edit +'/' + data['copy_id'])
                .setData(data)
                .setAsync(true)
                .setTimeOut(crmParams.global.ajax.get_url_timeout)
                .setDataType('json')
                .setType('POST')
                .setCallBackSuccess(function(data) {
                    if(data.status == 'access_error'){
                        Message.show(data.messages, false);
                    } else {
                        if(data.status == 'error'){
                            Message.show(data.messages);
                        } else {

                            EditView
                                .createModel(data)
                                .setView()
                                .drawReadOnlyFields();

                            model.callback(data);

                            _this.afterLoadView(data);
                        }
                    }
                    Preloader.modalHide();
                })
                .setCallBackError(function(jqXHR, textStatus, errorThrown){
                    Message.showErrorAjax(jqXHR, textStatus);
                    Preloader.modalHide();
                })
                .setCallBackDone(function() {
                    $('.modal .contacts-block img').on('load', function() {
                        EditView.contactImg();
                    });
                    EditView.emptyFields();
                    EditView.hiddenBlocks();

                    QuickViewPanel.updateContent();
                })
                .send()
        },
        constructor : function (modal_dialog) {
            iModule.implements.call(this);
            iPreloader.implements.call(this);
            iLifeCycle.implements.call(this);
            iDraft.implements.call(this);

            if (modal_dialog) {
                this._modal_instance = modal_dialog;
                modal_dialog.setContentInstance(this);
            }

            this.events()
                .reDefinition();

            return this;
        },
        events: function () {
            this._events = [
                { parent: document, selector: '.edit_view_btn-copy', event: 'click', func: _self.onBtnCopy}, // Копируем запись(и))
                { parent: document, selector: '.edit_view_btn-delete', event: 'click', func: _self.onClickDelete}, // Копируем запись(и))
                { parent: document, selector: '.edit_view-save-input-hidden', event: 'click', func: EditView.saveContacts}, // save text by click on "Save"
                { parent: document, selector: '.edit_view_btn-save', event: 'click', func: _self.onSave },
                { parent: document, selector: '.edit_view .close-button', event: 'click', func: _self.onCancelDialog},
                { parent: document, selector: '.edit_view .emoji-wysiwyg-editor', event: 'change', func: _self.onChangeContentActivity},
                { parent: document, selector: '.task_message .btn.send_massage_activity', event: 'click', func: _self.onSendMessageActivity}
            ]
            Global.addEvents(this._events, {
                instance: this
            });

            return this;
        },
        //спрацьовує коли карточка Записалась в DOM, визиває модал діалог.
        initView: function (data) {

        },
        setUrlAfterSave: function (url) {
            this.url_after_save = url;

            return this;
        },
        // addInitials: function () {
        //     var $list = $('[data-type="message"]');
        //
        //     try {
        //         $.each($list, function () {
        //             var initials,
        //                 $this = $(this),
        //                 name = $this.find('.user_comment_name').text();
        //
        //             initials = name.split(' ')[0].substring(0, 1);
        //             initials += name.split(' ')[1].substring(0, 1)
        //
        //             var $avatar_block = $this.find('.user_comment_pic');
        //
        //             if (!$avatar_block.find('.initials').length) {
        //                 $avatar_block.append('<span class="list-view-avatar initials">'+initials+'</span>');
        //             }
        //         });
        //     } catch (e) {
        //         console.log('Error by parse name in EditView');
        //     }
        //
        //     return this;
        // },
        reDefinition: function () {
            this.afterViewChanges = function () {
                var instance = Reports.getInstance();

                if (instance) {
                    instance.setCountLoadedGraph(null);
                    Reports.preloaderForGraph.remove($('.edit-view'));
                }
                // this.addInitials();

                return this;
            };

            //спрацьовує після callback (її потрібно визвати :) )
            this.afterLoadView = function (data) {
                History.addState(this);

                Global.addOperationInSDM();
                Global.getModel().money.groupSymbols($('.edit-view .money_type'));

                var key = Draft.createKeyByEV(this.getModel())
                this.setKeyOfDraft(key);
                this.getModalInstance()._keyOfDraft = key;

                Communication
                    .initTextArea()
                    .events()

                if (this.isAfterLoadViewCallBack()) {
                    this.callAfterLoadViewCallBack()
                }

                this.beginDraft = this.prepateDataForDraft(this.getModel(), this.beginDraft);

                if (data.draft) {
                    Message.showConfirmDialog.call(this,{
                        type: 'confirm',
                        message: Message.translate_local('Found data that you entered earlier but did not save. Download?'),
                        closeAfterConfirm: true
                    }, data.draft, this.onLoadDraft)
                }
            }

            this.onChange = function () {
                $('.form-control.time').each(function(i, ul){
                    initElements('.edit-view', $(ul).val());
                });

                return this;
            }
            return this;
        }
    };

    var instanceEditView = null;
    var EditViewContainer = function (data) {
        this.editView_shown = {};
    }

    EditViewContainer.prototype = Object.create(_Global.prototype);
    EditViewContainer.prototype.get = function () {
        return this.editView_shown;
    }
    EditViewContainer.prototype.getByIndex = function (index) {
        return this.editView_shown[index];
    }
    EditViewContainer.prototype.remove = function () {
        this.editView_shown = {};
    }
    EditViewContainer.prototype.removeByIndex = function (index) {
        delete this.editView_shown[index];
    }

    var ModelEditView = {
        $: null,
        _name_class_model: 'ModelEditView',
        //...other properties build dynamically
        copy_id: null,
        id: null,
        parent_copy_id: null,
        parent_data_id: null,
        pci: null,
        pdi: null,
        relate_template: null,
        template_data_id: null,
        this_template: null,
        
        constructor: function (data) {
            for (var key in data){
                this[key] = data[key];
            }

            return this;
        },
        setView: function () {
            var _this = this;
            var $editView = $('.edit-view:last');
            this.$ = $editView;

            Object.keys(this.$.data()).filter(function(item){
                _this[item] = _this.$.data(item);
            })
            var json = Url.getParams(location.href);
            this['finished_object'] = json && json.finished_object || 0; // 1 true 0 false

            $editView.data(this._name_class_model, this);

            return this;
        },
        drawReadOnlyFields: function () {
          this.showReadOnlyFields(this.$);
        },
    };

    var EditView = {
        saved_first_ev : false,
        _interface: 'EditView',
        _handler_after_save: null,

        _modal_instance: null,

        // реализация интерфейса
        implements: function (object) {
            object.implements.call(this);

            return this;
        },
        onKeyUp: function(e){
            if (e.keyCode === 27) { // esc
                redactor.close();
            }
            if ($('.edit-view.in').length) {
                EditView.saveDraftToLocalStorage(e);
            }

            return true;
        },
        saveDraftToLocalStorage: function(e) {
            clearTimeout(window.saveDraftTime);

            var ev = EditView.getInstance();
            var model = ev && ev.getModel();

            if (!model || $(e.target).is('.edit_view_btn-save')) { return };

            var data = ev.prepateDataForDraft(model, ev.beginDraft);

            window.saveDraftTime = setTimeout( function () {
                if (!model) return;

                var key = ev.getKeyOfDraft();
                var draft = JSON.parse(LocalStorageObject.readStorage(Draft.getKey()) || '{}');

                draft[key] = data;
                Console.log('saveDraftToLocalStorage()', draft);
                LocalStorageObject.writeStorage(Draft.getKey(), JSON.stringify(draft));
            }, Environments.sendDraftJsonToLocalStorage);

            return this;
        },
        editCard : function(element, _data, callback){
            var $element = $(element),
                _this = this;

            if (this._preloader) {
                this._preloader.modalRun();
            } else Preloader.modalShow();

            var _data = _data || {};

            switch($element.data('controller')){
                case 'sdm' :
                case 'edit_view_edit_sdm' :
                    element_data = $element.closest('.element_data');
                    _data['copy_id'] = element_data.data('relate_copy_id');
                    _data['id'] = element_data.data('id');
                    _data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(null, (EditView.countEditView() == 1 ? true : false));
                    _data['pci'] = 0;
                    _data['pdi'] = 0;

                    if($element.closest('.sm_extension').data('type') == 'submodule'){
                        _data['parent_copy_id'] = $element.closest('.edit-view').data('copy_id');
                        _data['parent_data_id'] = $element.closest('.edit-view').data('id');
                    }
                    _data['this_template'] = 0;
                    _data['from_template'] = 0;
                    _data['finished_object'] = 0;
                    break;

                case 'module_param' :
                    var sm_extension = $element.closest('.sm_extension');
                    _data['copy_id'] = sm_extension.data('parent_copy_id');
                    _data['id'] = sm_extension.data('parent_data_id');
                    _data['pci'] = 0;
                    _data['pdi'] = 0;
                    _data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(null, (EditView.countEditView() == 1 ? true : false));
                    _data['this_template'] = 0;
                    _data['from_template'] = 0;
                    _data['finished_object'] = 0;
                    break;

                case 'module_param_report' :
                case 'module_param_bpm' :
                    var sm_extension = $element.closest('.sm_extension');
                    _data['copy_id'] = sm_extension.data('copy_id');
                    _data['id'] = sm_extension.data('id');
                    _data['pci'] = sm_extension.data('parent_copy_id');
                    _data['pdi'] = sm_extension.data('parent_data_id');
                    _data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(null, (EditView.countEditView() == 1 ? true : false));
                    _data['this_template'] = sm_extension.data('this_template');
                    _data['from_template'] = 0;
                    _data['finished_object'] = 0;
                    break;
                default:
                    var sm_extension = $element.closest('.sm_extension');
                    _data['copy_id'] = sm_extension.data('copy_id');
                    _data['id'] = $(element).closest('.sm_extension_data').data('id');
                    _data['pci'] = sm_extension.data('parent_copy_id');
                    _data['pdi'] = sm_extension.data('parent_data_id');
                    _data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(null, (EditView.countEditView() == 1 ? true : false));
                    _data['this_template'] = sm_extension.data('this_template');
                    _data['from_template'] = 0;
                    _data['finished_object'] = 0;

                    var finished_object = sm_extension.find('.element.active[data-type="finished_object"]');
                    if(typeof finished_object != 'undefined' && finished_object.length){
                        _data['finished_object'] = 1;
                    }
                    break;
            }

            if(_data['template_data_id']){
                _data['from_template'] = 1;
                _data['id'] = _data['template_data_id'];
            }

            AjaxObj
                .createInstance()
                .setUrl(Global.urls.url_edit_view_edit +'/'+_data['copy_id'])
                .setData(_data)
                .setAsync(true)
                .setTimeOut(crmParams.global.ajax.get_url_timeout)
                .setDataType('json')
                .setType('POST')
                .setCallBackSuccess(function(data) {
                    if(data.status == 'access_error'){
                        Message.show(data.messages, false);
                    } else {
                        if(data.status == 'error'){
                            Message.show(data.messages);
                        } else {
                            // if (_this.isOpenCard($(data.data).find('.edit-view'))) {
                            //     return;
                            // }

                            if (EditView.getQueueStatus()) {
                                if (EditView.getCounterQueue() > 1 || EditView.getCounterQueue()== 0) {
                                    return;
                                }
                                EditView.clearQueue();
                            }

                            _this.getModalInstance()
                                .saveInstance(_this)
                                .show(data.data, true);

                            EditView
                                .createModel(data)
                                .setView()
                                .drawReadOnlyFields();

                            callback.call(_this, data);

                            _this.afterLoadView(data);
                        }
                    }
                    Preloader.modalHide();

                })
                .setCallBackError(function(jqXHR, textStatus, errorThrown){
                    Message.showErrorAjax(jqXHR, textStatus);
                    Preloader.modalHide();
                })
                .setCallBackDone(function() {
                    $('.modal .contacts-block img').on('load', function() {
                        EditView.contactImg();
                    });
                    EditView.emptyFields();
                    EditView.hiddenBlocks();
                })
                .send()
        },

        getInstance : function(){
            return _self._instance;
        },

        getModel: function() {
            return $('.edit-view:last').data(ModelEditView._name_class_model)
        },

        isOpen: function () {

        },

        willExist: function () {
            var url = Url.createInstance().setUrl(location.href),
                json = url.parse();

            return (json && json.modal_ev) ? true : false;
        },
        createModel: function (data) {
            var model = Object.create(ModelGlobal.protected);

            for (var key in ModelEditView){
                model[key] = ModelEditView[key];
            }

            return model.constructor(data);
        },

        createInstance : function(modal_dialog){
            var Obj = function(){
                for(var key in EditView){
                    this[key] = EditView[key];
                }

                for(var key in _public){
                    this[key] = _public[key];
                }
            }

            Obj.prototype = Object.create(Global);

            return _self._instance = new Obj().constructor(modal_dialog);
        },

        // Удаляем запись(и))
        saveContacts : function(e, next) {
            var $element = $('.editable-block .edit-dropdown.open'),
                $editable = $element.closest('.editable-block');

            if ($(e.target).filter('input[type=text]').closest('.contact-item').length
                || !$element.length) return false;

            if (!next) {
                e ? e.stopPropagation() : '';
            }
            $editable.find('.editable-field').text($element.find('input').val()).css('opacity', '1');
            $editable.find('.edit-dropdown').removeClass('open');
            return false;
        },
        //obsolete - устаревшее
        setModalInstance: function (instance) {
            this._modal_instance = instance;

            return this;
        },
        //BASE
        getModal: function () {
            return this._modal_instance || modalDialog.createInstance();
        },
        //DEPRECATED
        getModalInstance: function () {
            return this._modal_instance || modalDialog.createInstance();
        },

        setPreloaderByMenu : function (_const) {
            var arr = [Preloader.PV, Preloader.REPORT],
                label = true,
                parent = this.getParent() || {};

            if (parent._interface != QuickViewPanel._interface || Communication.isCommunicationsModule()) {
                arr.push(Preloader.LV)
            } else {
                var instance = QuickViewPanel.getInstance();

                if (instance) {
                    instance.setPreloaderToView(instance._instance_preloader);
                    label = false;
                }
            }

            if (label) {
                Preloader.createInstance()
                    .setFromBlock(_const)
                    .setWhereContentHide(arr)
                    .run()
            } else {
                parent.getPreloader().show();
            }
        },
        setHandlerAfterSave : function (handler) {
            if (handler) {
                this._handler_after_save = handler;
            }

            return this;
        },

        setModifier : function (status) {
            if (status) {
                EditView.modifier = true;
            } else {
                delete EditView.modifier;
            }
        },
        changeBlockLoadedMessages : function ($activity) {
            var $block = $activity || $('.element[data-type="block_message"]'),
                $data = $block.find('[data-type="message"]');

            $.each($data, function () {
                var $preview = $(this).find('.image-preview.name');

                if ($preview.length && !$preview.attr('href').length) {
                    $preview.closest('.thumb-block').addClass('hidden')
                }
            });

            return this;
        },
        close : function () {
            delete EditView.modifier; // temp

            if (EditView.modifier) {
                delete EditView.modifier;
                //Message.show(Message.translate_local('Changes have not been saved. Do you want to save?'), true);
                var _data = {};
                // _data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(_this, true);
                // _data['parent_copy_id'] = $(_this).closest('.edit-view').data('copy_id');
                // _data['parent_data_id'] = $(_this).closest('.edit-view').data('id');
                // _data['parent_relate_data_list'] = EditView.relateDataStory.getRelateDataList();
                // _data['this_template'] = $(_this).closest('.edit-view').data('this_template');
                // _data['relate_template'] = $(_this).closest('.sm_extension[data-type="submodule"]').data('relate_template');
                _data['copy_id'] = $(modalDialog.getModalName()).find('.edit-view').data('copy_id');
                _data['status'] = 'changed';

                $.ajax({
                    url: Global.urls.url_edit_view_edit +'/'+_data['copy_id'],
                    data : _data,
                    dataType: "json",
                    type: "POST",
                    success: function(data) {
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        }
                        Preloader.modalHide();
                    }
                });
            } else {
                modalDialog.hide();
            }
        },
        setTitle : function(view) {
            var client = view.find('.client-name') || $([]);

            if (client.length && client.find('.edit-dropdown.open').length || client.closest('[data-module="process"]').length) {
                client.each(function() {
                    var _this = $(this);
                    var value = _this.find('input.element[data-type="module_title"]').val();

                    if (_this.is('[data-type="field_type_hidden"]')) { // for constructor block with avatarom
                        _this.find('[data-type="title"]').val(value);
                    }
                    if (value) {
                        _this.find('span.editable-field').removeClass('empty').text(value);
                    }
                });
                client.find('.element[data-type="module_title"]').removeClass('opacityOut');
                client.find('.editable-field').attr('style','');

                EditView.setModifier(true);
            }
        },

        replaceForLink: function (message) {
            var list = message || $('.user_comment[data-type="message"]');

            list.each(function () {
                var  _this = $(this);
                var userComment = _this.find('.user_comment_text');
                var reg = /(www\.\w*\.[\w]*)|((htt)\w+[:]\/\/([\w:\/_.?=&%+#A-Z-\[\]+;\,{}]*))/igm

                var text = userComment.html().replace(reg, function(s){
                    s = s.replace('&nbsp;','');
                    return "<a href='"+ (/:\/\//.exec(s) === null ? "http://" + s : s ) + "' target='_blank'>" + s +"</a>";
                });
                _this.find('.user_comment_text').html(text);
            });
        },

        getEditViewUrl : function(){
            var url;
            var copy_id = $('.list_view_block.sm_extension, .process_view_block.sm_extension, .bpm_block.sm_extension').data('copy_id');

            switch(copy_id){
                case 8:
                    url = Global.urls.url_edit_view_report_constructor;
                    break;
                default :
                    url = Global.urls.url_edit_view_edit;
            }

            return url;
        },

        show : function(copy_id, id, url, callback){
            var _data = {},
                _this = this,
                preloader = this.getPreloader(),
                sm_extension = $('.sm_extension');

            _data['copy_id'] = copy_id;
            _data['id'] = id;
            _data['pci'] = sm_extension.data('parent_copy_id');
            _data['pdi'] = sm_extension.data('parent_data_id');
            _data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(null, false);
            _data['this_template'] = sm_extension.data('this_template');
            _data['from_template'] = 0;

            if (preloader) {
                preloader.modalRun();
            } else Preloader.modalShow();

            $.ajax({
                url: url,
                data : _data,
                dataType: "json",
                type: "POST",
                success: function(data) {
                    if(data.status == 'error' || data.status == 'access_error'){
                        Message.show(data.messages, false);
                        HeaderNotice.refreshAllHeaderNotices();
                    } else {
                        if(data.status == 'data'){
                            var modelEditView = EditView.createModel(data)
                            History.add(copy_id, '', {});

                            var modal = _this.getModalInstance() || modalDialog.createInstance();

                            modal.saveInstance(_this)
                                .show(data.data, true);

                            modelEditView
                                .setView()
                                .drawReadOnlyFields();

                            EditView.setBlockDisplayStatus($('.edit-view[data-copy_id="'+copy_id+'"]'));
                            EditView.changeBlockLoadedMessages();

                            niceScrollInit();
                            imagePreview();
                            $('.form-control.time').each(function(){
                                initElements('.edit-view', $(this).val());
                            });
                            EditView.activityMessages.init();
                            textAreaResize();

                            if(typeof callback == 'function'){
                                callback();
                            }

                            _this.afterLoadView(data);
                        }
                    }
                    Preloader.modalHide();
                },
                error: function(){
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error}], true);
                }
            }).done(function() {
                $('.modal .contacts-block img').on('load', function() {
                    EditView.contactImg();
                });
                EditView.hiddenBlocks();
                EditView.textRedLine();
                jScrollRemove();
                jScrollInit();
                setTimeout(function(){ jScrollRemove(); jScrollInit(); }, 200);
                Global.createLinkByEV($('.edit-view.in:last'));
                //Temp.initSubModule();
            });

        },

        prepareData : function(copy_id, params) {
            var params = params || {};
            var _this = $('.edit-view:visible[data-copy_id="'+copy_id+'"]');
            var  date_time = '';

            // данные формы модуля
            _this.find('.element_data[data-type="module_title"], .element_edit_hidden, .element[data-type="block_panel_contact"] .file-box, .element[data-type="block"] .element[data-type="panel"] .file-box, .element[data-type="block"] .element[data-type="attachments"], .element[data-type="block"] .element[data-type="block_activity"], input[type="text"], input[type="password"], input[type="email"], input[type="submit"], input[type="button"], input[type="hidden"]:not(.upload_file), input:checked, textarea, select, .element_module').each(function(e){
                var $this = $(this),
                    value = $this.val();

                if($this.hasClass('date')){
                    if(value) date_time = value; else date_time = '';
                } else
                if($this.hasClass('time')){
                    if(value)
                        if(date_time) date_time += ' ' + value;

                    params[$this.attr('name')] = date_time;
                    date_time = '';
                } else
                if($this.hasClass('date-time')){
                    params[$this.attr('name')] = {
                        'date_time' : value,
                        'all_day' : $this.data('all_day')
                    };
                } else
                if($this.hasClass('element_data')){
                    params[$this.data('name')] = $this.text();
                } else
                //file-box
                if($this.hasClass('file-box')){
                    var _files = [];
                    $this.find('input.upload_file').each(function(i, ul){
                        if($(ul).val()) _files.push($(ul).val());
                    });
                    if($.isEmptyObject(_files)){
                        _files = '';
                    }
                    params[$this.data('name')] = _files;
                } else
                //attachments
                if($this.hasClass('element') && $this.data('type') == 'attachments'){
                    var _files = [];
                    $this.find('.file-box .file-block[data-type="attachments"]').each(function(i, ul){
                        $(this).find('input.upload_file').each(function(i, ul){
                            if($(ul).val()) _files.push($(ul).val());
                        });
                    })
                    if($.isEmptyObject(_files)){
                        _files = '';
                    }
                    params[$(this).data('name')] = _files;
                } else
                //block_activity
                if($(this).hasClass('element') && $(this).data('type') == 'block_activity'){
                    var activity_messages = [];
                    $(this).find('.element[data-type="message"]').each(function(i, ul){
                        if($(ul).data('status') == 'temp') activity_messages.push($(ul).data('id'));
                    });
                    params['element_block_activity'] = activity_messages;
                } else
                if($(this).hasClass('element_edit_hidden')){
                    params[$(this).data('name')] = $(this).text();
                } else
                if($(this).hasClass('element_edit_access')){
                    params[$(this).attr('name')] = {'id' : $(this).val(), 'type' :  $(this).find('option[value="'+$(this).val()+'"]').data('type')};
                } else
                if($(this).hasClass('element_module')) {
                    params[$(this).attr('name')] = $(this).data('id');
                } else if ($(this).attr('name')){
                    params[$(this).attr('name')] = $(this).val();
                }
                // $('.table-section .crm-table-wrapper').getNiceScroll().remove();
                // niceScrollInit();
            });


            // edit-view params
            params['id'] = _this.data('id');
            params['parent_copy_id'] = _this.data('parent_copy_id');
            params['parent_data_id'] = _this.data('parent_data_id');
            params['this_template'] = _this.data('this_template');
            params['relate_template'] = _this.data('relate_template');
            params['block_unique_index'] = _this.data('block_unique_index');
            params['auto_new_card'] = _this.data('auto_new_card');
            params['unique_index'] = _this.data('unique_index');
            params['params'] = _this.data('params');

            if(_this.data('template_data_id')){
                params['template_data_id'] = _this.data('template_data_id');
                params['from_template'] = 1;
            }

            // родительская форма
            if(!params['parent_copy_id'] && !params['parent_data_id']){
                var pci = $('.list_view_block.sm_extension, .process_view_block.sm_extension, .bpm_block.sm_extension').data('parent_copy_id');
                var pdi = $('.list_view_block.sm_extension, .process_view_block.sm_extension, .bpm_block.sm_extension').data('parent_data_id');
                if(pci) params['pci'] = pci;
                if(pdi) params['pdi'] = pdi;
            }

            // субмодули
            var params_submodule = [];
            var submodule_tmp = [];
            $(modalDialog.getModalName() + ' .sm_extension[data-type="submodule"]').each(function(i, ul){
                $(ul).find('table tbody tr').each(function(i1, ul1){
                    submodule_tmp.push($(ul1).data('id'));
                });
                params_submodule.push({
                    'relate_table_module_id' :  $(ul).data('relate_table_module_id'),
                    'data_id_list': submodule_tmp,
                });
                submodule_tmp = [];
            });
            params['submodules'] = params_submodule;

            // element_relate
            params_submodule = [];
            _this.find('.element_relate, .element_relate_dinamic').each(function(i, ul){
                if($(ul).hasClass('element_relate_this') || $(ul).hasClass('element_filter')) return true;
                if($(ul).data('save') == false) return true;
                var relate_params = {
                    'name' : $(ul).attr('name'),
                    'relate_copy_id' :  $(ul).data('relate_copy_id'),
                    'id': $(ul).data('id'),
                };
                if($(ul).attr('disabled') == 'disabled') relate_params.disabled = 1;
                params_submodule.push(relate_params);
            });

            params['element_relate'] = params_submodule;

            // element_relate_this
            _this.find('.element_relate_this').each(function(i, ul){
                params[$(ul).attr('name')] = $(this).data('id');
            });

            // element_relate_participant
            var element_responsible = [];
            _this.find('.element_relate_participant').each(function(i, ul){
                element_responsible.push({
                    'name' : $(ul).attr('name'),
                    'participant_id': $(ul).data('participant_id'),
                    'ug_id': $(ul).data('ug_id'),
                    'ug_type': $(ul).data('ug_type'),
                    'responsible' : "1",
                });
            });
            params['element_responsible'] = element_responsible;

            // block_attributes: block_participant and other
            var block_attributes = {
                'block_participant' : {}
            };

            var block_participant_type_list = ['participant', 'email'];
            for(var i=0; i<block_participant_type_list.length; i++){
                var data_type = block_participant_type_list[i];

                var element_participant_id = [];
                var element_participant = [];

                //participant
                if(data_type == 'participant'){
                    _this.find('.element[data-type="block_participant"] .element[data-type="block-card"]>.element[data-type="' + data_type + '"]').each(function(i, ul){
                        var participant_id = $(ul).data('participant_id');
                        if(participant_id){
                            element_participant_id.push({
                                'participant_id': participant_id,
                                'ug_id': $(ul).data('ug_id'),
                                'ug_type': $(ul).data('ug_type'),
                                'responsible': $(ul).data('responsible'),
                            });
                        } else {
                            element_participant.push({
                                'participant_id': null,
                                'ug_id': $(ul).data('ug_id'),
                                'ug_type': $(ul).data('ug_type'),
                                'responsible': $(ul).data('responsible'),
                            });
                        }
                    });
                } else
                //email
                if(data_type == 'email'){
                    _this.find('.element[data-type="block_participant"] .element[data-type="block-card"]>.element[data-type="' + data_type + '"]').each(function(i, ul){
                        var participant_email_id = $(ul).data('participant_email_id');
                        if(participant_email_id){
                            element_participant_id.push({
                                'participant_email_id': participant_email_id,
                                'email_id' : $(ul).data('email_id'),
                            });
                        } else {
                            element_participant.push({
                                'participant_email_id': null,
                                'email_id' : $(ul).data('email_id'),
                            });
                        }
                    });
                }

                block_attributes['block_participant'][data_type] = {
                    'element_participant_id': element_participant_id,
                    'element_participant': element_participant,
                }
            }

            params['block_attributes'] = block_attributes;
            params['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(_this.find('div'), (EditView.countEditView() == 1 ? true : false));

            return params;
        },
        save : function(copy_id, params, callback, send_url){
            var _this = $('.edit-view:visible[data-copy_id="'+copy_id+'"]'),
                _contentType = 'application/x-www-form-urlencoded',
                _object = this;

            var _params = this.prepareData(copy_id, params);
            var $btn = _this.find('.edit_view_btn-save');
            var instance = this;

            Global.btnSaveSetDisabled($btn, true);

            if(typeof(send_url) == 'undefined' || send_url == false) send_url = Global.urls.url_edit_view_edit +'/'+copy_id;

            // сохраняем
            $.ajax({
                url : send_url,
                data : _params,
                type : 'POST', dataType: "json",
                contentType: _contentType,
                success: function(data){

                    if(data.status == 'save'){

                        QuickViewPanel.updateContent();
                        Draft.removeDraftFromLocalStorage(instance.getKeyOfDraft);

                        /*
                    if(!_this.data('id') && _this.data('template_data_id') && data.id){
                        _this.data('id', data.id);
                        var params_relate = {
                            'id': data.id,
                            'primary_entities': EditView.relateDataStory.getPrimaryEtitiesFromEditView(_this.find('div'), (EditView.countEditView() == 1 ? true : false))
                        };
                        $.post($('#global_params').data('url_edit_view_update_relate_for_template') + '/' + copy_id, params_relate);
                    }
                    */
                        if(typeof(data.attributes_data) != 'undefined' && data.attributes_data && typeof(data.attributes_data.module_title) != 'undefined' && data.attributes_data.module_title){
                            $(_this).find('.element[data-type="module_title"]').val(data.attributes_data.module_title);
                            $(_this).find('.element_data[data-type="module_title"]').text(data.attributes_data.module_title);
                        }
                        //$(edit_view).closest('.edit-view').find('.element[data-type="module_title"]').text(data.attributes_data.module_title);


                        _this.closest('.edit-view').data('template_data_id', '');
                        var parent_copy_id = _this.data('parent_copy_id');
                        // if from SM

                        if(parent_copy_id){
                            if(typeof(callback) == 'function' || _object._handler_after_save){
                                callback(data);
                            } else {
                                modalDialog.hide(false, data);
                                imagePreview();
                                EditView.textRedLine();
                                jScrollRemove();
                                jScrollInit();
                                EditView.textRedLine();

                                if(data.ev_refresh_field) {
                                    fields = JSON.parse(data.ev_refresh_field);
                                    for (id in fields) {
                                        $('#'+id).val(fields[id]).change();
                                    }
                                }

                                if(data.auto_next_card != false){
                                    var _edit_view_object = $('.edit-view[data-copy_id="'+parent_copy_id+'"]');
                                    _edit_view_object.data('auto_new_card', data.id);
                                    $( '.panel-body[data-relate_copy_id="' + data.auto_next_card + '"] .submodule_edit_view_dnt-create-select' ).trigger('click');
                                } else {
                                    if(data.params){
                                        var params = JSON.parse(JSON.stringify(data.params));
                                        //дополнительная обработка
                                        if(params['create_new_card']) {
                                            $( '.edit-view[data-copy_id="' + params['parent_copy_id'] + '"]').data('default_data', JSON.stringify(data.params['default_data']));
                                            $( '.panel-body[data-relate_copy_id="' + params['this_copy_id'] + '"] .submodule_edit_view_dnt-create' ).trigger('click');
                                        }
                                        if(params['edit_next_card']){
                                            $('.panel-body[data-relate_copy_id="' + params['copy_id'] + '"] .sm_extension_data[data-id="'+params['id']+'"] .submodule_edit_view_dnt-edit').trigger('click');
                                        }
                                    }
                                }
                            }
                            Global.btnSaveSetDisabled($btn, false);
                        } else {
                            if (_object._handler_after_save) {
                                callback = _object._handler_after_save;
                            }
                            if(typeof(callback) == 'function'){
                                callback(data);
                                Global.btnSaveSetDisabled($btn, false);
                            } else {
                                var element,
                                    url,
                                    data_id_list = [],
                                    sorting_list_id = ProcessView.sorting_list_id;

                                History.close(true);
                                modalDialog.hideAll();

                                // for new Project
                                if(typeof data['show_child_list_entities'] != 'undefined' && data['show_child_list_entities']){

                                    var content_vars = data['show_child_list_entities']['vars'];
                                    if(content_vars){
                                        instanceGlobal.preloaderShow($([]), {project: true});

                                        instanceGlobal.contentReload
                                            .addContentVars(content_vars)
                                            .clear()
                                            .setActionKey(data['show_child_list_entities']['action_key'])
                                            .setVars(data['show_child_list_entities']['vars'])
                                            .run();

                                        return true;
                                    }
                                }


                                if(_params['id'] !== null && _params['id']){
                                    data_id_list.push(_params['id']);
                                }
                                if(data['id'] !== null && data['id'] && _params['id'] != data['id']){
                                    data_id_list.push(data['id']);
                                }


                                if (callback == null) {
                                    if (instanceGlobal.currentInstance.type == PAGE_IT_REPORTS && instanceGlobal.currentInstance._open_sub_link) {
                                        delete instanceGlobal.currentInstance._open_sub_link;
                                        element = $('.crm-table-wrapper a.modal_dialog:first');

                                    } else element = $('#content_container');
                                }

                                var parent;
                                if (_object.getParent) {
                                    parent = _object.getParent();
                                }

                                if (parent && parent._type == QuickViewPanel._type) {
                                    QuickViewPanel.updateContent(true);

                                    if (!Communication.showPreloader()) {
                                        return this;
                                    }
                                } else {
                                    if (_object.showPreloader && _object.isPreloader()) {
                                        _object.showPreloader();
                                    } else {
                                        if (!parent
                                            || parent._type != QuickViewPanel._type
                                            || Communication.isCommunicationsModule()) {
                                            instanceGlobal.preloaderShow(element, {
                                                status: 'create'
                                            })
                                        }
                                    }
                                }

                                if (Events.getCountLine(Events.TYPE_UPDATE_DATA)) {
                                    Events.runHandler(Events.TYPE_UPDATE_DATA, {
                                        event: null,
                                        data: null
                                    });
                                } else {
                                    var _list_exist = true,
                                        url = _object.url_after_save;
                                    var data = {
                                        'module' : {
                                            'data_id_list' : data_id_list
                                        }};
                                    var $element = _object.getParentElement && _object.getParentElement();

                                    if (!$element || $element && !$element.closest('.filter-block').length) {
                                        data.module['sorting_list_id'] = ProcessView.sorting_list_id;
                                    } else {
                                        _list_exist = false;
                                    }

                                    Global.getInstance().setContentReloadInstance(instanceGlobal.contentReload);
                                    instanceGlobal.contentReload
                                        .prepareVariablesToGeneralContent()
                                        .setUrl(url)
                                        .setCallBackSuccessComplete(function(){

                                            // if processView:
                                            if(Global.isProcessView()){
                                                //1 - preloader
                                                var param = { status: 'create' },
                                                    sorting_list_id_list = ProcessView.convert.dataIdToSortingListIdList(data_id_list),
                                                    instance = ProcessView.getInstance();

                                                if (instance) {
                                                    $.each(sorting_list_id_list, function(i, id){ // ????
                                                        if(instance.$panel_change && instance.$panel_change.attr('data-sorting_list_id') != id){
                                                            param = {
                                                                $: $('section[data-sorting_list_id="'+id+'"]')
                                                            };
                                                            return false;
                                                        }
                                                    })
                                                }

                                                instanceGlobal.preloaderShow(element, param);
                                                instance.initLists(sorting_list_id_list);

                                                // 2 - removing empty lists
                                                if ($('section.panel[data-sorting_list_id]').length>1) {
                                                    $.each($('section.panel[data-sorting_list_id=""]'), function (key, value) {
                                                        var $value = $(value);
                                                        if (!$value.find('li').length) {
                                                            $value.remove();
                                                        }
                                                    })
                                                }

                                                instanceGlobal.contentReload.preloaderHide();

                                                // 3 - removing empty list
                                                if(sorting_list_id){
                                                    $('.process_view_block.sm_extension .element[data-name="process_view_panel"] .element[data-name="panel"] .panel[data-sorting_list_id="' + sorting_list_id + '"]').each(function(i, ul){
                                                        instance.checkAndRemoveEmptyPanel($(ul).closest('.element[data-name="panel"]'));
                                                    })
                                                }
                                            }
                                        })
                                        .appendVars(data)
                                        .prepareVariablesToProcessView(_list_exist)
                                        .run();
                                }
                            }
                        }

                        // открытие формы, что не прошла валидацию
                    } else {
                        if(data.status == 'data'){
                            /*var blocks = [];
                        _this.find('.element.panel .column').each(function(){
                            blocks.push($(this));
                        });*/

                            Global.blockErrors.init();
                            var blocks_errors = [];
                            $(data.data).find('.element.panel .column').each(function(){
                                var _this = $(this);
                                if (_this.find('.file-block').length) {
                                    _this = _this.closest('.columns-section');
                                }
                                blocks_errors.push(_this);
                            });
                            $('.errorMessage').remove();
                            $('.b_error').removeClass('b_error');

                            var i = 0;
                            for(; i < blocks_errors.length; i++){
                                var error, name,
                                    checkElName = blocks_errors[i].find('.errorMessage').closest('.column').find('*[name*="EditViewModel"]').attr('name'),
                                    block = _this.find('.element.panel .column *[name="'+checkElName+'"]').closest('.column');

                                if (block.length>1) {
                                    name = blocks_errors[i].find('>div[data-name*="EditViewModel"]').data('name');

                                    block = _this.find('.element.panel .columns-section [data-name="'+name+'"]').find('.column');
                                };

                                block.find('.errorMessage').remove();
                                error = blocks_errors[i].find('.errorMessage');

                                if (error.length){
                                    //blocks[i].append(error[0].outerHTML);
                                    block.addClass('b_error').append(error[0].outerHTML);
                                }
                            }

                            // если не использовать EditView.activityMessages.init() то можно удалить еэти 2 строки
                            //edit_view.find('.task_comments .emoji-wysiwyg-editor').remove();
                            //edit_view.find('.task_comments .emoji-button').remove();

                            //$(_this).closest('.edit-view').html(data.data);
                            imagePreview();
                        } else {
                            if(data.status == 'access_error'){
                                imagePreview();
                                Message.show(data.messages, false);
                                // ошибка окрытия формы
                            } else {
                                if(data.status == 'error'){
                                    imagePreview();
                                    Message.show(data.messages, false);
                                }
                            }
                        }
                        EditView.scrollToError();
                        Global.btnSaveSetDisabled($btn, false);
                    }
                    //EditView.activityMessages.init();
                },
                error: function(jqXHR, textStatus, errorThrown){
                    Message.showErrorAjax(jqXHR, textStatus);
                    Global.btnSaveSetDisabled($btn, false);
                },
            }).done(function(){
                EditView.textRedLine();
                jScrollRemove();
                jScrollInit();
                EditView.textRedLine();
            });
        },

        // сохраняем состояние блоков в userStorage
        saveBlockDisplayStatus : function(object){
            var value = [];
            var copy_id = $(object).closest('.edit-view').data('copy_id');
            if(typeof(copy_id) == 'undefined' || !copy_id) return;

            $(object).closest('.panel-body').find('.element[data-type="block"]').each(function(i, ul){
                var block = $(ul);
                var unique_index = block.data('unique_index');

                var a_switch = block.find('.element[data-type="switch"]');
                var status = 'fa-chevron-up';
                if(a_switch.hasClass('fa-chevron-down')) status = 'fa-chevron-down';

                value.push({'unique_index' : unique_index, 'status' : status});

            });

            if(value){
                var index = 'editView' + '_' + $(object).closest('.edit-view').data('copy_id');
                var lStorage = new LocalStorage();
                lStorage
                    .clear()
                    .setKey('ev_block_display')
                    .setValueToServer(index, value);
            }
        },


        // сохраняем состояние блоков в userStorage
        setBlockDisplayStatus : function(popup_object){
            $(popup_object).find('.panel-body').find('.panel-body').each(function(i, ul){
                var a_switch = $(ul).closest('.panel').find('.element[data-type="switch"]');
                var status = 'fa-chevron-up';
                if(a_switch.hasClass('fa-chevron-down')) status = 'fa-chevron-down';
                Global.setBlockDisplay($(ul), status, 0);
            });
        },

        addCard : function(element, _data, callback){
            var $element = $(element),
                _this = this,
                sm_extension = $element.closest('.process_view_block.sm_extension, .list_view_block.sm_extension, .edit-view.sm_extension, .bpm_block.sm_extension, .right-sidebar'),
                copy_id =  this.copy_id || sm_extension.data('copy_id');

            _data = _data;

            EditView.checkServiceParams(_data, copy_id, function(_data) {
                var _data = _data || {};

                if ($element.closest('.process_view_block').length) {
                    instanceGlobal.preloaderShow($element);
                }

                _data['pci'] = sm_extension.data('parent_copy_id');
                _data['pdi'] = sm_extension.data('parent_data_id');
                _data['this_template'] = sm_extension.data('this_template');
                _data['finished_object'] = 0;
                _data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(null, (EditView.countEditView() == 1 ? true : false));

                if(sm_extension.hasClass('edit-view')){
                    _data['finished_object'] = sm_extension.data('finished_object');
                } else {
                    var finished_object = sm_extension.find('.element.active[data-type="finished_object"]');
                    if(typeof finished_object != 'undefined' && finished_object.length){
                        _data['finished_object'] = 1;
                    }
                }

                Preloader.modalShow();
                $.ajax({
                    url: Global.urls.url_edit_view_edit + '/' + copy_id,
                    dataType: "json",
                    data : _data,
                    type: "POST",
                    success: function(data) {
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status == 'error'){
                                Message.show(data.messages);
                            } else {
                                callback.call(_this, data);
                                initElements('.edit-view', $('.time').last().val());
                            }
                        }
                        Preloader.modalHide();
                    },
                    error: function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                        Preloader.modalHide();
                    },
                }).done(function() {
                    $('.modal .contacts-block img').on('load', function() {
                        EditView.contactImg();
                    });
                    EditView.emptyFields();
                    EditView.hiddenBlocks();
                });

                //Preloader.hide();
            });
        },

        checkServiceParams : function(_data, copy_id, callback){
            if(copy_id!==Communication._copy_id){
                if(typeof(callback) == 'function') {
                    return callback(_data);
                }
                else {
                    return;
                }
            }

            $.ajax({
                url: '/module/communication/CheckServiceParams' + '/' + Communication._copy_id,
                dataType: "json",
                data: null,
                type: "POST",
                success: function (data) {
                    if (data.status == 'access_error') {
                        Message.show(data.messages, false);
                    } else {
                        if(data.status == 'error'){
                            Message.show(data.messages);
                        } else {
                            setTimeout(function(){
                                if(!data.check){
                                    Communication.openMenuServices();
                                } else {
                                    if(typeof(callback) == 'function'){
                                        callback(_data);
                                    }
                                }
                            }, 200);
                        }
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    callback();
                },
            });
        },

        runAfterAddCardLV : function(data){
            if(data.status == 'data'){
                var model = EditView.createModel(data);

                this.getModalInstance()
                    .saveInstance(this)
                    .show(data.data, true);

                model
                    .setView()
                    .drawReadOnlyFields();

                EditView.setBlockDisplayStatus($('.edit-view[data-copy_id="'+data.copy_id+'"]'));
                History.add(data.copy_id, '', {});
                jScrollInit();

                Global.addOperationInSDM();

                niceScrollCreate($('.submodule-table'));
                var $modal = $(modalDialog.getModalName()).find('.client-name');
                if ( $modal.find('span').first().text() == "" ) {
                    $modal.find('.edit-dropdown').first().addClass('open');
                }
            }
            EditView.activityMessages.init();
            textAreaResize();
        },


        runAfterEditCardLV : function(data){
            if(data.status == 'data'){
                Global.addOperationInSDM();

                Global.getModel().money.groupSymbols($('.edit-view .money_type'));
                this.setBlockDisplayStatus($('.edit-view[data-copy_id="'+data.copy_id+'"]'));
                imagePreview();
                this.textRedLine();
                jScrollRemove();
                jScrollInit();
                this.textRedLine();
                niceScrollCreate($('.submodule-table'));

                this.activityMessages.init();
                textAreaResize();
            }
        },
        onLoadDraft: function (draft) {
            Draft.removeDraft(this.getKeyOfDraft());

            var data = draft.data;
            var $editView = $('.edit-view.in');

            Object.keys(data).filter(function (item) {
                var value = data[item];

                switch (item) {
                    case "b_date_ending": {
                        var object = $editView.find('[name="EditViewModel[b_date_ending]"]');
                        var $root = object.closest('.crm-dropdown');
                        $root.find('>label').removeAttr('datetime');

                        UI.setDataTimeBlock($root, value);

                        break;
                    }
                    case "activity": {
                        var root = $editView.find('.task_message');
                        redactor.setContent(root, {
                            message:{
                                text: value
                            },
                            attachment: []
                        }, {
                            id: 0
                        });
                        break;
                    }
                    case "module_title": {
                        $editView.find('[data-name="EditViewModel[module_title]"]').text(value);
                        break
                    };

                    default: break;
                }
            });

            $editView.find('input[type=text]').each(function(item) {
                var $this = $(this);
                var id = $this.attr('id');

                if (!id) return;

                var value = data[id];
                $this.val(value);
            });

            $editView.find('button[data-id]').each(function(item) {
                var $button = $(this);
                var $select = $button.parent().prev();
                var id = $select.attr('id');

                if (!id) return true;

                var value = data[id];

                if (value) {
                    if (id == "b_status") {
                        UI.setSelect($select, value, 'data-content');
                    } else {
                        UI.setSelect($select, value);
                    }
                }
            });

            $editView.find('.form-datetime').each(function(item) {
                var $this = $(this);
                var $date = $this.find('.date');
                var $time = $this.find('.time');
                var $common = $this.find('input');
                var value = $common.attr('name');
                value = data[value.substring(14, value.length-1)];

                if (value) {
                    if ($date.length) {
                        var v = value.toString().split(' ')[0];
                        $date.removeData('datepicker');
                        $date.attr('value', v).val(v);
                    }

                    if ($time.length) {
                        var v = value.toString().split(' ')[1];
                        $time.removeData('timepicker');
                        $time.attr('value', v).val(v);
                    }
                }
            });

            this.onChange();
            //modalDialog.hide();
        },
        addCardFromTemplate : function(_this, _default_data){
            var $this = $(_this),
                _data = {},
                instance = EditView.createInstance(),

                $smExtension = $this.closest('.sm_extension'),
                project_select = $smExtension.find('.element[data-type="project_select"]').val(),
                project_name = $smExtension.find('.element[data-type="project_name"]').val();

            if(_default_data){
                _data.default_data = _default_data;
            }

            switch (project_select) {
                case 'from_template': {
                    _data.template_data_id = $smExtension.find('.element[data-type="template"]').val();
                    _data.module_title = project_name;

                    instance.editCard( _this, _data,
                        function(data){
                            instance.runAfterEditCardLV(data);
                        }
                    );

                    break;
                }
                case 'new_card': {
                    var block_field_name = $smExtension.find('.element[data-type="block_field_name"]').val();

                    if(block_field_name) {
                        var obj = {},
                            block_unique_index = $smExtension.find('.element[data-type="block"]').val();

                        obj[block_field_name] = block_unique_index;
                        _data.default_data = obj;
                    }

                    _data.module_title = project_name;

                    instance.addCard(_this, _data, function(data){
                        instance.runAfterAddCardLV(data);
                    });
                    break;
                }
                default: break;
            }
        },

        cardSelectValidate : function(_this, callback){
            /*
        var project_name = $(_this).closest('.sm_extension').find('.element[data-type="project_name"]').val();
        if(!project_name){
            Message.show([{
                    'type':'error',
                    'message': 'You must fill in the "{s}"',
                    'params' : {'s' : $(_this).closest('.sm_extension').find('.element[data-type="project_name"]').closest('li').find('.inputs-label').text()}}]
                    , true, function(){
                        callback(false);
                    });
            return;
        }

        var project_select = $(_this).closest('.sm_extension').find('.element[data-type="project_select"]').val();
        var template_select = $(_this).closest('.sm_extension').find('select.element[data-type="template"] option');

        if(project_select == 'from_template' && (!template_select || !template_select.length)){
            Message.show([{
                    'type':'error',
                    'message': 'You must fill templates'
                    }]
                , true, function(){
                    callback(false);
                });
            return;
        }

        callback(true);
        */
            var projectNameMessage = $('#project_name_error');
            projectNameMessage.hide();
            $('#block_error').hide();
            $('#template_error').hide();
            var project_name = $(_this).closest('.sm_extension').find('.element[data-type="project_name"]').val();
            if(!project_name){
                projectNameMessage.show().closest('.column').addClass('b_error');
                callback(false);
            }

            var project_select = $(_this).closest('.sm_extension').find('.element[data-type="project_select"]').val();
            if(project_select == 'from_template'){
                var block_field_name = $(_this).closest('.sm_extension').find('.element[data-type="block_field_name"]').val();
                if(block_field_name) {
                    //используются блоки
                    var block_select = $(_this).closest('.sm_extension').find('select.element[data-type="block"]').val();
                    if(block_select=='' || !block_select){
                        $('#block_error').show().closest('.column').addClass('b_error');
                        callback(false);
                        return;
                    }
                }

                var template_select = $(_this).closest('.sm_extension').find('select.element[data-type="template"]').val();
                if(template_select=='' || !template_select){
                    $('#template_error').show().closest('.column').addClass('b_error');
                    callback(false);
                    return;
                }
            }
            if(!project_name){
                return;
            }
            callback(true);
        },

        addCardSelect : function(_this, parent_class, _data){
            var copy_id = _this.data('copy_id');

            if(!_data) var _data = {};

            _data['parent_copy_id'] = _this.data('parent_copy_id'),
                _data['parent_data_id'] = _this.data('parent_data_id'),
                _data['this_template'] = _this.data('this_template'),
                _data['parent_class'] = parent_class,
                _data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(null, (EditView.countEditView() == 1 ? true : false));
            _data['finished_object'] = 0;

            var finished_object = $(_this).find('.element.active[data-type="finished_object"]');
            if(typeof finished_object != 'undefined' && finished_object.length){
                _data['finished_object'] = 1;
            }


            $.ajax({
                url: Global.urls.url_edit_view_edit_select + '/' + copy_id,
                data: _data,
                dataType: "json",
                type: "POST",
                success: function(data) {
                    if(data.status == 'access_error'){
                        Message.show(data.messages, false);
                    } else {
                        if(data.status == 'error'){
                            Message.show(data.messages);
                        } else {
                            if(data.status == true){
                                modalDialog.show(data.data, true);
                                jScrollInit();
                                niceScrollCreate($('.submodule-table'));
                                imagePreview();
                                $('.form-control.time').each(function(){
                                    initElements('.edit-view', $(this).val());
                                });
                            }
                        }
                    }
                },
                error: function(){
                    Message.show([{'type':'error', 'message':  Global.urls.url_ajax_error }], true);
                },
            });
        },




        /**
         * changeTemplateValue
         */
        changeTemplateValue : function(_this){
            var objects = {};
            var copy_id = $(_this).closest('.sm_extension').data('copy_id');
            var template = $(_this).closest('.sm_extension').find('.element[data-type="template"]');
            if(template.data('changed') != '1') return;

            var data_id = template.val();
            if(!data_id){
                $(_this).closest('.sm_extension').find('.element[data-type="dinamic"]').remove();
                return;
            }


            if($(_this).closest('.modal-dialog').hasClass('edit-view') == false){
                objects.binding_object = null;
            }
            objects.participants = null;

            var data = {
                'action' : ProcessObj.PROCESS_BPM_PARAMS_ACTION_CHECK,
                'process_id' : data_id,
                'objects' : objects
            }

            var ajax = new Ajax();
            ajax
                .setData(data)
                .setAsync(false)
                .setUrl('/module/listView/changeTemplateValue/' + copy_id)
                .setDataType('json')
                .setCallBackSuccess(function(data){
                    if(data.status == 'access_error' || data.status == 'error'){
                        Message.show(data.messages, false);
                    } else {
                        $(_this).closest('.sm_extension').find('.element[data-type="dinamic"]').remove();
                        if(data.status == false){
                            $(_this).closest('.sm_extension').find('.element[data-type="objects"]').children('li:last').after(data.message);
                        }
                    }

                })
                .setCallBackError(function(jqXHR, textStatus, errorThrown){
                    Message.showErrorAjax(jqXHR, textStatus);
                })
                .send();
        },






        contactImg : function(){
            $img = $('.modal .contacts-block img.thumb')
            if ($img.width() > $img.height()) {
                var widImg = ($img.width()-$img.closest('a').width())/2;
                $('.modal .contacts-block img.thumb').css({'margin-left':'-'+widImg+'px', 'margin-top':'0'});
            } else {
                var widImg = ($img.height()-$img.closest('a').height())/2;
                $('.modal .contacts-block img.thumb').css({'margin-top':'-'+widImg+'px' , 'margin-left':'0'});
            }
        },

        emptyFields : function(){
            $('span.client-name .editable-field').each(function(){
                if ($(this).html() == '') {
                    $(this).addClass('empty');
                }

            });
        },

        textRedLine : function($this){
            if ($this) {
                if ($this.hasClass('submodule-link')) {
                    $this.find('.list-view-avatar').each(function(){
                        if($(this).closest('.edit-view').length && $(this).closest('.name').height() > 20) {
                            $(this).css('float','left');
                            $(this).closest('.name').css({'white-space':'normal', 'line-height':'16px'});
                            if ($(this).closest('.name').height() > 40) {
                                $(this).closest('.name').css({ 'word-break':'break-all',
                                    'max-height':'32px',
                                    'display':'inline-block' });
                            } else if ($(this).closest('.name').height() < 20) {
                                $(this).closest('.name').css('line-height', '28px');
                            }
                        } else {
                            $(this).closest('.name').css('width','auto');
                            if ($(this).closest('td').width() && $(this).closest('.name').width() > $(this).closest('td').width()-20) {
                                $(this).closest('.name').css({'white-space':'normal', 'line-height':'16px'});
                                if ($(this).closest('.name').length){
                                    $(this).css('float','left');
                                };
                                $(this).closest('td').css('overflow-x',' hidden');
                            }
                            $(this).closest('.name').css('width','100%');
                        }
                    });
                }
            } else {
                $('.sm_extension[data-type="submodule"] .crm-table-wrapper .list-view-avatar').each(function(){ //+.submodule_edit_view_dnt-edit//.addClass('sub_ava_cell');
                    var $text,
                        $this = $(this),
                        $parent = $this.parent(),
                        $td = $(this).closest('td'),
                        $next = $this.next();

                    $td.css('min-width','140px');

                    if ($parent.is('.text')) {
                        $parent.before($this);
                    }

                    if ($this.closest('a').is('[data-controller="sdm"]') || $this.closest('.element_data[data-ug_type="user"]').length) {
                        if (!$this.parent().is('.parent-avatar')) $this.wrap('<div class="parent-avatar"></div>');
                    }

                    if ($next.is('.navigation_module_link_child_from_submodule')) {
                        $next.find('*').first().before($this.wrap('<div class="parent-avatar"></div>').parent());
                    }

                    $next = $this.next();

                    if ($next.hasClass('submodule_edit_view_dnt-edit') || $next.hasClass('navigation_module_link_child_from_submodule')){
                        $next.css('float','right').width($(this).closest('td').width()-$(this).width()-6);
                    }

                    if ($next.height()<20) {
                        $next.css('margin-top','7px');
                    } else if ($next.height()>19) {
                        $next.css('margin-top','0');
                    }
                });
                $('.sm_extension[data-type="submodule"] .crm-table-wrapper table tr:nth-child(2) .list-view-avatar').each(function(){
                    var tdNumb = $(this).closest('td').index()+1;
                    var widthReMake = $(this).next().width();
                    $(this).closest('table').find('tr:first-child td:nth-child('+tdNumb+') .list-view-avatar').next().width(widthReMake);
                });
            }

            var $list = $('[data-type="submodule"] .text');
            $.each($list, function (key, value) {
                if ($(value).text().indexOf('_')>0) {
                    $(value).addClass('one-line');
                }
            });

            $('.sm_extension[data-type="submodule"] .sm_extension_data .name .file').each(function(){
                $(this).closest('td').addClass('sub_file_cell');
                if ($(this).next().height()>19) {
                    $(this).next().css('margin-top','-4px');
                    $(this).closest('a').css('margin-top','5px');
                }
            });
        },

        SMCrmTable : function ($list) {
            $.each($list, function(){ //+.submodule_edit_view_dnt-edit//.addClass('sub_ava_cell');
                var $this = $(this),
                    $td = $(this).closest('td'),
                    $next = $this.next();

                $td.css('min-width','140px');

                if ($this.parent().is('.text')) {
                    $this.parent().before($this);
                }

                if ($this.closest('a').is('[data-controller="sdm"]')) {
                    $this.wrap('<div class="parent-avatar"></div>');
                }

                if ($next.is('.navigation_module_link_child_from_submodule')) {
                    $next.find('*').first().before($this.wrap('<div class="parent-avatar"></div>').parent());
                }

                if ($this.next().hasClass('submodule_edit_view_dnt-edit') || $this.next().hasClass('navigation_module_link_child_from_submodule')){
                    $this.next().css('float','right').width($this.closest('td').width()-$this.width()-6);
                } else {
                    if (!$this.parent().hasClass('element_data')) {
                        if ($this.closest('td').width()>80){
                            if (!$this.parent().is('.parent-avatar')) $this.parent().addClass('pull-right').width($this.closest('td').width()-40);
                        } else {
                        }
                    }
                }

                if ($(this).next().height()<20) {
                    $(this).next().css('margin-top','7px');
                } else if ($(this).next().height()>19) {
                    $(this).next().css('margin-top','0');
                }

                if ($this.parent().is('[data-name="b_responsible"]')) {
                    var _height = $next.height();
                    $td.height(_height);
                    if ($(this).next().height()<20) {
                        $(this).next().css('margin-top','0');
                    }
                }
            });
            $('.sm_extension[data-type="submodule"] .crm-table-wrapper table tr:nth-child(2) .list-view-avatar').each(function(){
                var tdNumb = $(this).closest('td').index()+1;
                var widthReMake = $(this).next().width();
                $(this).closest('table').find('tr:first-child td:nth-child('+tdNumb+') .list-view-avatar').next().width(widthReMake);
            });

            $('.sm_extension[data-type="submodule"] .sm_extension_data .name .file').each(function(){
                $(this).closest('td').addClass('sub_file_cell');
                if ($(this).next().height()>19) {
                    $(this).next().css('margin-top','-4px');
                    $(this).closest('a').css('margin-top','5px');
                }
            });
        },

        hiddenBlocks : function() {
            $('.modal:visible .edit-view .panel-body:hidden').prev().css('padding-bottom','5px');
            $('.modal .edit-view .buttons-block').each(function(){
                if($(this).closest('.panel').next().find('.contacts-block').length>0 || $(this).closest('.panel').next().find('.participants-block').length>0){} else {
                    $(this).closest('.panel').css('padding-bottom','35px');
                }
            });
            $('.edit-view .fa-chevron-up').each(function(){
                $(this).closest('.panel[data-type="block"]').find('.panel-body').hide();
            });
            Participant.addResponsibleIfNotExist();
        },

        scrollToError : function() {
            $('.errorMessage').each(function(ind, ele){
                if ($(this).text() !== '') {
                    if ($(this).is(':hidden')) {
                        $(this).closest('.panel-body').show();
                        $(this).closest('.panel').find('.fa-chevron-up').removeClass('fa-chevron-up').addClass('fa-chevron-down');
                    }
                    $('.modal').animate({
                        scrollTop: Math.abs($('.edit-view').offset().top-$(this).offset().top)
                    }, 500);
                    return false;
                }
            });
        },


        countEditView : function(){
            return $('.edit-view').length;
        },



        refreshBlockActivity : function(_edit_view_object){
            if(EditView.activityMessages.issetBlockActivity(_edit_view_object)){
                if(EditView.activityMessages.refresh_messages){
                    EditView.activityMessages.refreshMessages($(_edit_view_object).find('.element[data-type="block_activity"]'));
                }
                EditView.relates.reloadSDMChannel($(_edit_view_object).find('.element[data-type="drop_down"] .element[data-type="drop_down_button"][data-reloader="activity_channel"]'));
            }
        },



        /********************************
         *       relateDataStory
         *********************************/
        relateDataStory : {
            list_relate : {},

            getPrimaryEtitiesFromEditView : function(_this, return_this_copy_id){
                var result = {'primary_pci' : null, 'primary_pdi' : null};

                if(!_this) return result;
                var parent = $(_this).closest('.edit-view').find('.element_relate[data-reloader="parent"]');
                if(parent.length == 0){
                    if(return_this_copy_id == true){ // только для первой дочерней формы editView
                        result['primary_pci'] = $(_this).closest('.edit-view').data('copy_id');
                        result['primary_pdi'] = $(_this).closest('.edit-view').data('id');
                    }
                    return result;

                } else {
                    result['primary_pci'] = parent.data('relate_copy_id');
                    result['primary_pdi'] = parent.data('id');
                }

                return result;
            },

            findRelateDataList : function(_this){
                var result = {};
                $(_this).closest('.edit-view').find('.element_relate').each(function(i, ul){
                    realte_result = $(ul).data('id');
                    if(!realte_result) realte_result = null;
                    result[$(ul).data('relate_copy_id')] = realte_result;
                });
                return result;
            },

            findRelateDataListFromInLine : function(_this){
                var result = {};
                $(_this).closest('.sm_extension_data.editing').find('.element_relate').each(function(i, ul){
                    realte_result = $(ul).data('id');
                    if(!realte_result) realte_result = null;
                    result[$(ul).data('relate_copy_id')] = realte_result;
                });
                return result;
            },

            findSubModuleDataListPrimaryModule : function(_this, return_this_copy_id){
                var primary = EditView.relateDataStory.getPrimaryEtitiesFromEditView(_this, return_this_copy_id);

                if(primary.primary_pci == false){
                    return EditView.relateDataStory.findSubModuleDataList(_this);
                }

                parent_edit_view = $('.edit-view[data-copy_id="'+primary.primary_pci+'"] div');
                return EditView.relateDataStory.findSubModuleDataList(parent_edit_view);
            },

            findSubModuleDataList : function(_this){
                var result = {};
                $(_this).closest('.edit-view').find('.sm_extension[data-type="submodule"]').each(function(i, ul){
                    var sub_result = [];
                    $(ul).find('table.crm-table tbody .sm_extension_data').each(function(i, ul){
                        sub_result.push($(ul).data('id'));
                    });
                    if($.isEmptyObject(sub_result)) sub_result = null;
                    result[$(ul).data('relate_copy_id')] = sub_result;
                });

                return result;
            },

            setAll : function(_this){
                EditView.relateDataStory.list_relate = EditView.relateDataStory.findRelateDataList(_this);
            },

            clearAll : function(_this){
                EditView.relateDataStory.list_relate = {};
                EditView.relateDataStory.list_primary = {};
            },

            getRelateDataList : function(){
                var list = EditView.relateDataStory.list_relate;
                return list;
            },
        },






        /**********************************
         *         relates
         **********************************/
        relates : {

            reloadSDM : function(_this){
                $(_this).each(function(i,ul){
                    var data = {};

                    data['copy_id'] = $(ul).closest('.edit-view').data('copy_id');
                    if(typeof(data['copy_id']) == 'undefined' || !data['copy_id']) return;

                    data['id'] = $(ul).closest('.edit-view').data('id');
                    data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(ul, true);
                    data['this_template'] = $(ul).closest('.edit-view').data('this_template');
                    data['pci'] = $('.list_view_block.sm_extension, .process_view_block.sm_extension, .bpm_block.sm_extension').data('parent_copy_id') || '';
                    data['pdi'] = $('.list_view_block.sm_extension, .process_view_block.sm_extension, .bpm_block.sm_extension').data('parent_data_id') || '';
                    data['relate_element'] = {
                        'copy_id' : $(ul).data('relate_copy_id'),
                        'data_id' : $(ul).data('id'),
                        'sub_type' : $(ul).data('sub_type')
                    }

                    $.ajax({
                        'url' : Global.urls.url_edit_view_relate_reload_sdm +'/'+data['copy_id'],
                        'data' : data,
                        'dataType' : "json",
                        'type' : "POST", async : false,
                        'success' : function(data_r) {
                            if(data_r.status == false){
                                return;
                            } else if(data_r.status == true){
                                var disabled = $(ul).closest('.element[data-type="drop_down"]').find('.element[data-type="drop_down_button"]').attr('disabled');
                                var html = $(data_r.html);
                                html.find('.element[data-type="drop_down_button"]').attr('disabled', disabled);
                                $(ul).closest('.column').html(html);
                                Global.createLinkByEV(html.closest('.edit-view.in'));
                            }
                        },
                        'error' : function(){
                            Message.show([{'type':'error', 'message':  Global.urls.url_ajax_error }], true);
                        },
                    });
                });
            },


            reloadSDMChannel : function(_drop_down_button, _data){
                if(!_drop_down_button){
                    return;
                }

                var edit_view = $(_drop_down_button).closest('.edit-view');
                var data = {
                    'copy_id' : edit_view.data('copy_id'),
                    'id' : edit_view.data('id'),
                    'data_id' : $(_drop_down_button).data('id')
                };

                if(_data){
                    for(key in _data){
                        data[key] = _data[key];
                    }
                }

                $.ajax({
                    'url' : Global.urls.url_edit_view_relate_reload_sdm_channel +'/'+data['copy_id'],
                    'data' : data,
                    'dataType' : "json",
                    'type' : "POST",
                    'async' : true,
                    'success' : function(data_r) {
                        if(data_r.status == false){
                            return;
                        } else if(data_r.status == true){
                            $(_drop_down_button).closest('.element[data-type="drop_down"]').replaceWith(data_r.html);
                        }
                    },
                    'error' : function(){
                        Message.show([{'type':'error', 'message':  Global.urls.url_ajax_error }], true);
                    },
                });

            },


            reloadEditView : function(_this, base_id, callback){
                var relate = $(_this).closest('.column').find('.element_relate');
                if(relate.data('reloader') != 'parent') return;

                var data = {};

                if(_this){
                    data['relate_get_value'] = 1;
                    data['relate_check_about_parent'] = 1;
                    data['copy_id'] = $(_this).closest('.edit-view').data('copy_id');
                    data['id'] = $(_this).closest('.edit-view').data('id');

                    var relate_id = relate.data('id');
                    if(typeof(base_id) != 'undefined' && base_id && base_id != relate_id){
                        data['relate_get_value'] = 0;
                    }


                    data['primary_entities'] = {
                        'primary_pci' : relate.data('relate_copy_id'),
                        'primary_pdi' : relate_id,
                    };

                    data['parent_relate_data_list'] = EditView.relateDataStory.findRelateDataList(_this);
                    data['this_template'] = $(_this).closest('.edit-view').data('this_template');
                    //data['from_template'] = 0;
                    data['pci'] = $('.list_view_block.sm_extension, .process_view_block.sm_extension, .bpm_block.sm_extension').data('parent_copy_id');
                    data['pdi'] = $('.list_view_block.sm_extension, .process_view_block.sm_extension, .bpm_block.sm_extension').data('parent_data_id');
                }

                $.ajax({
                    'url' : Global.urls.url_edit_view_relate_reload +'/'+data['copy_id'],
                    'data' : data,
                    'dataType' : "json",
                    'type' : "POST", async : true,
                    'success' : function(data) {
                        if(data.status == false){
                            Message.show(data.messages);
                        } else if(data.status == true){
                            if(data.data_list){
                                TodoList.clear(_this);
                                $.each(data.data_list, function(relate_copy_id, html){
                                    $(_this).closest('.edit-view').find('.element_relate[data-relate_copy_id="'+relate_copy_id+'"][data-reloader="children"]').closest('.column').html(html);
                                });
                            }
                            if(typeof(callback) == 'function' && callback){
                                callback();
                            }
                        }
                    },
                    'error' : function(){
                        Message.show([{'type':'error', 'message':  Global.urls.url_ajax_error }], true);
                    },
                });

            },

            reloadInLine : function(_this, data, base_id, only_parent, callback, relate_check_about_parent){
                if(_this && !data){
                    var relate = $(_this).closest('.data_edit');
                    var reloader = relate.find('.element_relate').data('reloader');
                    if(only_parent == true){
                        if(reloader != 'parent') return;
                    } else {
                        if(reloader != 'parent' && reloader != 'one_to_one') return;
                    }

                    var data = {};

                    data['relate_get_value'] = 1;
                    data['relate_check_about_parent'] = relate_check_about_parent || 0;
                    data['copy_id'] = $(_this).closest('.sm_extension').data('copy_id');
                    data['id'] = $(_this).closest('.sm_extension_data.editing').data('id');

                    var relate_id = $(_this).closest('.sm_extension_data.editing').find('.data_edit  .element_relate').data('id');
                    if(typeof(base_id) != 'undefined' && base_id && base_id != relate_id)
                        data['relate_get_value'] = 0;

                    data['primary_entities'] = {
                        'primary_pci' : $(_this).closest('.sm_extension_data.editing').find('.data_edit .element_relate').data('relate_copy_id'),
                        'primary_pdi' : relate_id,
                    };

                    data['parent_relate_data_list'] = EditView.relateDataStory.findRelateDataListFromInLine(_this);
                    data['this_template'] = $('.list_view_block.sm_extension, .process_view_block.sm_extension, .bpm_block.sm_extension').data('this_template');
                    //data['from_template'] = 0;
                    data['pci'] = $('.list_view_block.sm_extension, .process_view_block.sm_extension, .bpm_block.sm_extension').data('parent_copy_id');
                    data['pdi'] = $('.list_view_block.sm_extension, .process_view_block.sm_extension, .bpm_block.sm_extension').data('parent_data_id');
                };

                if (inLineEdit.attributes["todo_list"] && $('tr.editing').data('open') == true) {
                    var text = inLineEdit.attributes["todo_list_text"];

                    $('#todo_list').next().find('.filter-option').text(text);
                }

                $.ajax({
                    'url' : Global.urls.url_edit_view_relate_reload +'/'+data['copy_id'],
                    'data' : data,
                    'dataType' : "json",
                    'type' : "POST", async : true,
                    'success' : function(data) {
                        if (data.status==false ) {
                        }
                        if(data.status == false && data.messages){
                            Message.show(data.messages);
                        } else
                        if(data.status == true){
                            if(data.data_list){
                                $.each(data.data_list, function(relate_copy_id, html){
                                    if(only_parent == true)
                                        $(_this).closest('.sm_extension_data.editing').find('.element_relate[data-relate_copy_id="'+relate_copy_id+'"][data-reloader="children"]').closest('div').html($(html).html());
                                    else
                                        $(_this).closest('.sm_extension_data.editing').find('.element_relate[data-relate_copy_id="'+relate_copy_id+'"]').closest('div').html($(html).html());
                                });


                                var el = $(_this).closest('.sm_extension_data.editing').find('td.data_edit .element_relate[data-module_parent="1"]');

                                if(el.length){
                                    TodoList.rebuild(el, function (data) {
                                        TodoList.setValue(inLineEdit.attributes.todo_list);
                                    }, callback);
                                } else {
                                    TodoList.clear(_this);
                                    callback ? callback() : null;
                                }
                            }
                        }
                    },
                    'error' : function(){
                        Message.show([{'type':'error', 'message':  Global.urls.url_ajax_error }], true);
                    },
                });

            },


            cardCreate : function(_this, callback){
                var copy_id = $(_this).closest('.element[data-type="drop_down"]').find('.element[data-type="drop_down_button"]').data('relate_copy_id')

                //EditView.relateDataStory.setAll(_this);

                if(!_data) var _data = {};
                _data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(_this, true);
                _data['parent_copy_id'] = $(_this).closest('.edit-view').data('copy_id');
                _data['parent_data_id'] = $(_this).closest('.edit-view').data('id');
                _data['parent_relate_data_list'] = EditView.relateDataStory.getRelateDataList();
                _data['this_template'] = $(_this).closest('.edit-view').data('this_template');
                _data['relate_template'] = '0';
                _data['parent_object'] = 'sdm';
                Preloader.modalShow();
                Preloader.modalSub();
                $.ajax({
                    url: Global.urls.url_edit_view_edit + '/' + copy_id,
                    data : _data,
                    dataType: "json",
                    type: "POST",
                    success: function(data){
                        if(data.status == 'error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status == 'data'){
                                modalDialog.show(data.data, true);
                                EditView.setBlockDisplayStatus($('.edit-view[data-copy_id="'+copy_id+'"]'));
                                var $modal = $(modalDialog.getModalName()).find('.client-name');
                                if ( $modal.find('span').first().text() == "" ) {

                                    $modal.find('.edit-dropdown').first().addClass('open');
                                }
                                $('.form-control.time').each(function(){
                                    initElements('.edit-view', $(_this).val());
                                });
                            }
                        }
                        Preloader.modalHide();
                    },
                    error: function(){
                        Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                        Preloader.modalHide();
                    },
                }).done(function(){
                    EditView.activityMessages.init();
                    textAreaResize();
                    EditView.hiddenBlocks();
                    EditView.textRedLine();
                    jScrollRemove();
                    jScrollInit();
                    EditView.textRedLine();
                });


            },


            /*
        reloadActivityMessages: function (copy_id,data_id,module_title,relate_copy_id,relate_data_id,_this){
            EditView.activityMessages
                .setUrl(Global.urls.url_edit_view_activity_get_messages_block)
                .setData({
                    'copy_id': copy_id,
                    'data_id': data_id,
                    'module_title': module_title,
                    'relate_copy_id': relate_copy_id,
                    'relate_data_id': relate_data_id
                })
                .setElement(_this)
                .setHandler(function (data) {
                    if(data['result_html']){
                        $('.comments_block.element[data-type="block_message"]').replaceWith(data['result_html']);
                    }
                })
                .ajax();
        }
        */
        },




        /**********************************
         *         subModules
         **********************************/
        subModules : {
            //EditView.relates.reloadActivityMessages(copy_id,data_id,module_title,Communication._copy_id, $this.closest('.sm_extension_data').data('id'),$this);

            addNewProcesses : function(copy_id, data_id, callback){
                var data = {
                    'copy_id' : copy_id,
                    'data_id' : data_id,
                };

                var ajax = new Ajax();
                ajax
                    .setData(data)
                    .setAsync(false)
                    .setUrl('/module/listView/addNewProcessesSubModule/' + copy_id)
                    .setCallBackSuccess(function(data){
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status){
                                callback(data);
                            } else {
                                Message.show(data.messages, false);
                            }
                        }
                    })
                    .setCallBackError(function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                    })
                    .send();


            },


            addCardFromTemplate : function(_this, _edit_view) {
                var auto_new_card, id,
                    $this = $(_this),
                    _data = {},
                    $smExtension = $this.closest('.sm_extension'),
                    project_select = $smExtension.find('.element[data-type="project_select"]').val(),
                    project_name = $smExtension.find('.element[data-type="project_name"]').val();

                _data['module_title'] = project_name;

                auto_new_card = $smExtension.data("auto_new_card");

                if(auto_new_card) {
                    $('.edit-view:visible').data('auto_new_card', auto_new_card);
                    $smExtension.data("auto_new_card", '')
                }

                switch (project_select) {
                    case 'from_template': {
                        id = $smExtension.find('.element[data-type="template"]').val();
                        _data['template_data_id'] = _data['id'] = $smExtension.find('.element[data-type="template"]').val();
                        _data['from_template'] = 1;
                        _data['auto_new_card'] = auto_new_card;
                        EditView.subModules.cardEditSM(_edit_view, _data);
                        modalDialog.hide();
                        break;
                    }
                    case 'from_process_template': {
                        ProcessObj.createFromTemplate(_this, $smExtension.find('.element[data-type="template"]').val(), function(data){
                            var edit_view_object = $('.edit-view[data-copy_id="'+$smExtension.data('parent_copy_id')+'"]');
                            EditView.subModules.updateSubModuleDataList(null, edit_view_object, function(){
                                EditView.refreshBlockActivity(edit_view_object);
                            });

                            imagePreview();
                            EditView.textRedLine();
                            EditView.textRedLine();
                            jScrollRemove();
                            jScrollInit();
                            modalDialog.hide();
                        });
                        break;
                    }
                    case 'new_card': {
                        var block_field_name = $smExtension.find('.element[data-type="block_field_name"]').val();

                        if(block_field_name) {
                            var obj = {},
                                block_unique_index = $smExtension.find('.element[data-type="block"]').val();

                            obj[block_field_name] = block_unique_index;
                            _data['default_data'] = obj;
                        }

                        Preloader
                            .createInstance()
                            .setModal(true)
                            .setModalSub(true)

                        EditView.subModules.cardCreate(_edit_view, _data);
                        modalDialog.hide();
                        break;
                    }
                    default: {
                        break;
                    }
                }
            },

            //cardCreate
            cardCreate : function(element, _data){
                var $element = $(element),
                    instance = EditView.createInstance(),
                    copy_id = $element.closest('.sm_extension').data('relate_copy_id');

                EditView.relateDataStory.setAll(element);

                if(!_data) var _data = {};

                _data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(element, true);
                _data['parent_copy_id'] = $(element).closest('.edit-view').data('copy_id');
                _data['parent_data_id'] = $(element).closest('.edit-view').data('id');
                _data['parent_relate_data_list'] = EditView.relateDataStory.getRelateDataList();
                _data['this_template'] = $(element).closest('.edit-view').data('this_template');
                _data['relate_template'] = $(element).closest('.sm_extension[data-type="submodule"]').data('relate_template');
                _data['parent_object'] = 'sub_module';

                if(!_data['parent_data_id']){
                    EditView.save(_data['parent_copy_id'], {}, function(data){
                        var edit_view = $element.closest('.edit-view');
                        edit_view.data('id', data.id);

                        EditView.subModules.updateSubModuleDataList(null, edit_view, function(){
                            var sub_module = $(edit_view).find('.sm_extension[data-type="submodule"][data-relate_copy_id="'+copy_id+'"] .submodule_edit_view_dnt-create');
                            if(modalDialog.modal_dialog_shown.length == 1) EditView.saved_first_ev = true;
                            EditView.subModules.cardCreate(sub_module);
                        });
                    });

                    return;
                }


                if($(element).closest('.edit-view').data('default_data')) {
                    var obj = {};
                    fields = JSON.parse($(element).closest('.edit-view').data('default_data'));

                    for(field in fields) {
                        if(field=='block_unique_index') {
                            _data['block_unique_index'] = fields[field];
                        }else {
                            obj[field] = fields[field];
                        }
                    }

                    _data['default_data'] = obj;
                    $(element).closest('.edit-view').data('default_data', '');
                }
                Preloader.getInstance().modalRun();
                $.ajax({
                    url: Global.urls.url_edit_view_edit+'/'+copy_id,
                    data : _data,
                    dataType: "json",
                    type: "POST",
                    success: function(data){
                        if(data.status == 'error' || data.status == 'access_error'){
                            Preloader.modalAnSub();
                            Message.show(data.messages, false);
                        } else {
                            if(data.status == 'data'){
                                var modelEditView = EditView.createModel(data);

                                modalDialog.show(data.data, true);
                                EditView.setBlockDisplayStatus($('.edit-view[data-copy_id="'+copy_id+'"]'));

                                modelEditView
                                    .setView()
                                    .drawReadOnlyFields();

                                Global.addOperationInSDM();

                                var $modal = $(modalDialog.getModalName()).find('.client-name');
                                if ( $modal.find('span').first().text() == "" ) {

                                    $modal.find('.edit-dropdown').first().addClass('open');
                                }
                                $('.form-control.time').each(function(){
                                    initElements('.edit-view', $(this).val());
                                });
                            }
                        }
                        Preloader.modalHide();
                    },
                    error: function(){
                        Preloader.modalAnSub();
                        Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                        Preloader.modalHide();
                    },
                }).done(function(){
                    EditView.activityMessages.init();
                    textAreaResize();
                    EditView.hiddenBlocks();
                    EditView.textRedLine();
                    jScrollRemove();
                    jScrollInit();
                    EditView.textRedLine();
                });
            },

            //addCardSelect
            addCardSelect : function(_this, parent_class){
                var $this = $(_this),
                    edit_view = $this.closest('.edit-view'),
                    sm_extension = $this.closest('.sm_extension');
                    //copy_id = sm_extension.data('relate_copy_id');

                var _data = {
                    'primary_entities' : EditView.relateDataStory.getPrimaryEtitiesFromEditView(edit_view, true),
                    'id' : edit_view.data('id'),
                    'parent_copy_id' : edit_view.data('copy_id'),
                    'parent_data_id' : edit_view.data('id'),
                    'this_template' : edit_view.data('this_template'),
                    'auto_new_card' : edit_view.data('auto_new_card'),
                    'parent_class' : parent_class,
                    'parent_relate_data_list' : EditView.relateDataStory.findRelateDataList(_this),
                    finished_object : 0
                };

                if(!edit_view.data('id')){
                    EditView.save(edit_view.data('copy_id'), {}, function(data){
                        edit_view.data('id', data.id);

                        EditView.subModules.updateSubModuleDataList(null, edit_view, function(){
                            var sub_module = $(edit_view).find('.sm_extension[data-type="submodule"][data-relate_copy_id="'+copy_id+'"]');
                            if(modalDialog.modal_dialog_shown.length == 1) EditView.saved_first_ev = true;
                            EditView.subModules.addCardSelect(sub_module);
                        });
                    });

                    return;
                }

                edit_view.data('auto_new_card', '');

                $.ajax({
                    url: Global.urls.url_edit_view_edit_select + '/' + sm_extension.data('relate_copy_id'),
                    data: _data,
                    dataType: "json",
                    type: "POST",
                    success: function(data) {
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status == 'error'){
                                Message.show(data.messages);
                            } else {
                                if(data.status == true){

                                    var noMiddle = true;
                                    if($(data.data).find('.edit-view.sm_extension.no_middle').length){
                                        noMiddle = false;
                                    }

                                    modalDialog.show(data.data, noMiddle);

                                    jScrollInit();
                                    niceScrollCreate($('.submodule-table'));
                                    imagePreview();
                                    $('.form-control.time').each(function(){
                                        initElements('.edit-view', $(this).val());
                                    });
                                }
                            }
                        }
                    },
                    error: function(){
                        Message.show([{'type':'error', 'message':  Global.urls.url_ajax_error }], true);
                    },
                });
            },




            cardEditSM : function(_this, _data){
                var copy_id = $(_this).closest('.sm_extension').data('relate_copy_id')

                EditView.relateDataStory.setAll(_this);

                if(!_data) var _data = {};
                _data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(_this, true);
                _data['parent_copy_id'] = $(_this).closest('.edit-view').data('copy_id');
                _data['parent_data_id'] = $(_this).closest('.edit-view').data('id');
                _data['parent_relate_data_list'] = EditView.relateDataStory.getRelateDataList();
                _data['this_template'] = $(_this).closest('.edit-view').data('this_template');
                _data['relate_template'] = $(_this).closest('.sm_extension[data-type="submodule"]').data('relate_template');
                _data['id'] = (_data['id'] ? _data['id'] : $(_this).closest('.sm_extension_data').data('id'));
                _data['parent_object'] = 'sub_module';

                if(!_data['parent_data_id']){
                    EditView.save(_data['parent_copy_id'], {}, function(data){
                        var edit_view = $(_this).closest('.edit-view');
                        edit_view.data('id', data.id);

                        EditView.subModules.updateSubModuleDataList(null, edit_view, function(){
                            var sub_module = $(edit_view).find('.sm_extension[data-type="submodule"][data-relate_copy_id="'+copy_id+'"] .submodule_edit_view_dnt-create');
                            if(modalDialog.modal_dialog_shown.length == 1) EditView.saved_first_ev = true;
                            EditView.subModules.cardEditSM(sub_module);
                        });
                    });

                    return;
                }

                Preloader.modalShow();
                Preloader.modalSub();
                $.ajax({
                    url: Global.urls.url_edit_view_edit + '/' + copy_id,
                    data : _data,
                    dataType: "json",
                    type: "POST",
                    success: function(data){
                        if(data.status == 'error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status == 'data'){
                                var modelEditView = EditView.createModel(data);

                                modalDialog.show(data.data, true);

                                modelEditView
                                    .setView()
                                    .drawReadOnlyFields();

                                EditView.setBlockDisplayStatus($('.edit-view[data-copy_id="'+copy_id+'"]'));

                                Global.addOperationInSDM();

                                var $modal = $(modalDialog.getModalName()).find('.client-name');
                                if ( $modal.find('span').first().text() == "" ) {

                                    $modal.find('.edit-dropdown').first().addClass('open');
                                }
                                $('.form-control.time').each(function(){
                                    initElements('.edit-view', $(_this).val());
                                });
                                Global.createLinkByEV($('.edit-view.in:last'));
                            }
                        }
                    },
                    error: function(){
                        Preloader.modalAnSub();
                        Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                        Preloader.modalHide();
                    },
                }).done(function(){
                    EditView.activityMessages.init();
                    textAreaResize();
                    EditView.hiddenBlocks();
                    EditView.textRedLine();
                    jScrollRemove();
                    jScrollInit();
                    EditView.textRedLine();
                    Preloader.modalHide();
                });


            },


            cardEditSDM : function(_this, _data){
                var copy_id = $(_this).closest('.element[data-type="drop_down"]').find('.element[data-type="drop_down_button"]').data('relate_copy_id')

                EditView.relateDataStory.setAll(_this);

                if(!_data) var _data = {};
                _data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(_this, true);
                _data['parent_copy_id'] = $(_this).closest('.edit-view').data('copy_id');
                _data['parent_data_id'] = $(_this).closest('.edit-view').data('id');
                _data['parent_relate_data_list'] = EditView.relateDataStory.getRelateDataList();
                _data['this_template'] = $(_this).closest('.edit-view').data('this_template');
                _data['relate_template'] = '0';

                _data['id'] = (_data['id'] ? _data['id'] : $(_this).closest('.element[data-type="drop_down"]').find('.element[data-type="drop_down_button"]').data('id'));
                _data['parent_object'] = 'sdm';
                Preloader.modalShow();
                Preloader.modalSub();

                $.ajax({
                    url: Global.urls.url_edit_view_edit + '/' + copy_id,
                    data : _data,
                    dataType: "json",
                    type: "POST",
                    success: function(data){
                        if(data.status == 'error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status == 'data'){

                                modalDialog
                                    .createInstance()
                                    .show(data.data, true);

                                EditView.setBlockDisplayStatus($('.edit-view[data-copy_id="'+copy_id+'"]'));

                                Global.addOperationInSDM();

                                var $modal = $(modalDialog.getModalName()).find('.client-name');
                                if ( $modal.find('span').first().text() == "" ) {

                                    $modal.find('.edit-dropdown').first().addClass('open');
                                }
                                $('.form-control.time').each(function(){
                                    initElements('.edit-view', $(_this).val());
                                });
                            }
                        }
                        Preloader.modalHide();
                    },
                    error: function(){
                        var $dialog;

                        Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                        Preloader.modalHide();

                        $dialog = $('.modal');
                        if ($dialog.length > 1) {
                            $dialog.first().show();
                        }
                    },
                }).done(function(){
                    EditView.activityMessages.init();
                    textAreaResize();
                    EditView.hiddenBlocks();
                    EditView.textRedLine();
                    jScrollRemove();
                    jScrollInit();
                    EditView.textRedLine();
                });


            },


            cardSelect : function(_this){
                var id_added = [];

                $(_this).closest('.sm_extension').find('table tbody tr.new').each(function(i, ul){
                    id_added.push($(ul).data('id'));
                });

                EditView.relateDataStory.setAll(_this);

                var copy_id = $(_this).closest('.sm_extension').data('relate_copy_id');
                var parent_copy_id = $(_this).closest('.edit-view').data('copy_id');
                var parent_data_id = $(_this).closest('.edit-view').data('id');

                if(!parent_data_id){
                    EditView.save(parent_copy_id, {}, function(data){
                        var edit_view = $(_this).closest('.edit-view');
                        edit_view.data('id', data.id);

                        EditView.subModules.updateSubModuleDataList(null, edit_view, function(){
                            var sub_module = $(edit_view).find('.sm_extension[data-type="submodule"][data-relate_copy_id="'+copy_id+'"] .submodule_edit_view_dnt-create');
                            if(modalDialog.modal_dialog_shown.length == 1) EditView.saved_first_ev = true;
                            EditView.subModules.cardSelect(sub_module);
                        });
                    });

                    return;
                }


                $.ajax({
                    url: Global.urls.url_list_view_add_cards_sub_module + '/' + copy_id,
                    data: {
                        'primary_entities' : EditView.relateDataStory.getPrimaryEtitiesFromEditView(_this, false),
                        'parent_copy_id' : parent_copy_id,
                        'parent_data_id' : parent_data_id,
                        'parent_relate_data_list' : EditView.relateDataStory.getRelateDataList(),
                        'this_template' : $(_this).closest('.edit-view').data('this_template'),
                        'relate_template' : $(_this).closest('.sm_extension[data-type="submodule"]').data('relate_template'),
                        'id_added' : id_added,
                    },
                    dataType: "json",
                    type: "POST",
                    success: function(data){
                        if(data.status == 'error'){
                            Message.show(data.messages, false);
                        } else if(data.status == 'data'){
                            modalDialog.show(data.html);
                            niceScrollCreate($('.submodule-table'));
                            TableSearchInit('.submodule-table', '.submodule-search');
                        }
                    },
                    error: function(){
                        Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                    },
                });

            },

            cardCopy : function(_this){
                var input = $(_this).closest('.panel-body').find('table input.checkbox:checked');
                var params = [];
                var edit_view = $(_this).closest('.edit-view');

                if(input.length == 0){
                    Message.show([{'type':'error', 'message': 'It should be noted entries'}], true);
                    return false;
                }

                //if(!confirm(Message.translate_local('Copy selected entries') + '?')) return;

                $(input).each(function(i, ul){
                    params.push($(ul).closest('tr').data('id'));
                });


                var copy_id = $(_this).closest('.sm_extension').data('relate_copy_id');
                var parent_copy_id = $(_this).closest('.edit-view').data('copy_id');
                var parent_data_id = $(_this).closest('.edit-view').data('id');

                if(!parent_data_id){
                    EditView.save(parent_copy_id, {}, function(data){
                        edit_view.data('id', data.id);

                        EditView.subModules.updateSubModuleDataList(null, edit_view, function(){
                            var sub_module = $(edit_view).find('.sm_extension[data-type="submodule"][data-relate_copy_id="'+copy_id+'"] .submodule_edit_view_dnt-create');
                            if(modalDialog.modal_dialog_shown.length == 1) EditView.saved_first_ev = true;
                            EditView.subModules.cardCopy(sub_module);
                        });
                    });

                    return;
                }


                $.post(
                    Global.urls.url_list_view_copy_for_sub_module + '/' + copy_id,
                    {
                        'id': params,
                        'primary_entities' : EditView.relateDataStory.getPrimaryEtitiesFromEditView(_this, false),
                        'parent_copy_id' : edit_view.data('copy_id'),
                        'parent_data_id' : edit_view.data('id'),
                        'this_template' : edit_view.data('this_template'),
                    },
                    function(data){
                        if(data.status == true){
                            $.ajax({
                                url : Global.urls.url_list_view_card_list_for_sub_module + '/' + $(_this).closest('.sm_extension').data('relate_copy_id'),
                                data : {
                                    'parent_copy_id' : edit_view.data('copy_id'),
                                    'parent_data_id' : edit_view.data('id'),
                                    'this_template' : edit_view.data('this_template'),
                                },
                                type : 'POST', async: false, dataType: "json",
                                success: function(data2){
                                    if(data2.status == false)
                                        Message.show(data.messages, false);
                                    else {
                                        var parent_mudule = $(_this).closest('.sm_extension');
                                        parent_mudule.after(data2.data);
                                        parent_mudule.remove();
                                    }
                                },
                                error : function(){
                                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                                }
                            });
                            EditView.subModules.updateSubModuleDataList(null, edit_view, function(){
                                EditView.refreshBlockActivity(edit_view);
                            });
                        } else {
                            Message.show(data.messages, false);
                        }
                    }, 'json').done(function(){
                    EditView.textRedLine();
                    EditView.textRedLine();
                    jScrollRemove();
                    jScrollInit();
                    EditView.textRedLine();
                });

            },

            cardRemoveTr : function(input, edit_view){
                input.closest('tr').remove();
                EditView.subModules.updateSubModuleDataList(null, edit_view, function(){
                    EditView.refreshBlockActivity(edit_view);
                });
                EditView.textRedLine();
                jScrollRemove();
                jScrollInit();
                EditView.textRedLine();
            },

            cardRemoved : function(_this, show_confirm){
                var input = $(_this).closest('.panel-body').find('table tbody input.checkbox:checked');
                var edit_view = $(_this).closest('.edit-view');

                if(edit_view.data('template_data_id') !== ''){
                    EditView.subModules.cardRemoveTr(input, edit_view);
                    return;
                }

                if(input.length == 0){
                    Message.show([{'type':'error', 'message': 'It should be noted entries'}], true);
                    return false;
                }
                if(show_confirm !== false)

                    var _function = function(){
                        id = [];
                        $.each(input, function(i, ul){
                            id.push($(ul).closest('tr').data('id'));
                        })

                        EditView.relateDataStory.setAll(_this);
                        var copy_id = $(_this).closest('.sm_extension').data('relate_copy_id');


                        //удаление
                        $.ajax({
                            url: Global.urls.url_list_view_delete_from_sub_module + '/' + copy_id,
                            data: {
                                'id': id,
                                'parent_copy_id': edit_view.data('copy_id'),
                                'parent_data_id': edit_view.data('id'),
                                'primary_entities': EditView.relateDataStory.getPrimaryEtitiesFromEditView(_this, true),
                                'this_template': edit_view.data('this_template'),
                            },
                            type: 'POST', async: false, dataType: "json",
                            success: function(data){
                                if(data.status == 'error'){
                                    Message.show(data.messages, false);
                                } else if(data.status == true){
                                    if(data.ev_refresh_field){
                                        fields = JSON.parse(data.ev_refresh_field);
                                        for(id in fields){
                                            $('#' + id).val(fields[id]).change();
                                        }
                                    }
                                    EditView.subModules.cardRemoveTr(input, edit_view);
                                }
                            },
                            error: function(){
                                Message.show([{'type': 'error', 'message': Global.urls.url_ajax_error}], true);
                            }
                        });
                    }

                if(show_confirm !== false){
                    Message.show([{
                        'type': 'confirm',
                        'message': Message.translate_local('Delete selected entries') + '?'
                    }], false, function(_this_c){
                        if($(_this_c).hasClass('yes-button')){
                            modalDialog.hide();
                            _function();
                        }
                    }, Message.TYPE_DIALOG_CONFIRM);
                }
            },

            cardTie : function(_this){
                var input = $(modalDialog.getModalName() + ' table input.checkbox:checked');
                var _select_list = [];

                if(input.length == 0){
                    Message.show([{'type':'error', 'message': 'It should be noted entries'}], true);
                    return false;
                }

                input.each(function(){
                    _select_list.push($(this).closest('.sm_extension_data').data('id'));
                });

                var copy_id = $(_this).closest('.sm_extension_relate_submodule').data('copy_id');
                var parent_copy_id = $(_this).closest('.sm_extension_relate_submodule').data('parent_copy_id');
                var parent_data_id = $(_this).closest('.sm_extension_relate_submodule').data('parent_data_id');
                var edit_view = $('.edit-view[data-copy_id="'+parent_copy_id+'"]');

                $.ajax({
                    url : Global.urls.url_list_view_insert_card_in_sub_module + '/' + copy_id,
                    data : {
                        'parent_copy_id' : parent_copy_id,
                        'parent_data_id' : parent_data_id,
                        'select_list' : _select_list,
                        'this_template' : $(_this).closest('.sm_extension_relate_submodule').data('this_template'),
                        'relate_template' : $(_this).closest('.sm_extension_relate_submodule').data('relate_template'),
                        'primary_entities' : EditView.relateDataStory.getPrimaryEtitiesFromEditView(edit_view.find('div'), true),
                    },
                    type : 'POST', async: false, dataType: "json",
                    success: function(data){
                        if(data.status == 'error'){
                            Message.show(data.messages, false);
                        } else if(data.status == true){
                            modalDialog.hide();
                            EditView.subModules.updateSubModuleDataList(null, edit_view, function(){
                                EditView.refreshBlockActivity(edit_view);
                            });
                            imagePreview();
                            EditView.textRedLine();
                            EditView.textRedLine();
                            jScrollRemove();
                            jScrollInit();
                            if(data.ev_refresh_field) {
                                fields = JSON.parse(data.ev_refresh_field);
                                for (id in fields) {
                                    $('#'+id).val(fields[id]).change();
                                }
                            }
                        }
                    },
                    error : function(){
                        Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                    }
                });
            },


            updateSubModuleDataList : function(_parent_object, edit_view, callback){
                var copy_id = $(edit_view).data('copy_id'),
                    id = $(edit_view).data('id');

                if(_parent_object !== null){
                    var parent_edit_view = $(_parent_object).find('.edit-view');
                    if(typeof(parent_edit_view) == 'undifined' || !parent_edit_view) return;
                }

                if(copy_id == false) return;

                $.ajax({
                    url: Global.urls.url_list_view_update_card_list_sub_modules + '/' + copy_id,
                    data : {
                        'id' : id,
                        'this_template' : edit_view.data('this_template'),
                    },
                    dataType: "json", type: "POST", async : false, timeout : 10000,
                    success: function(data){
                        if(data.status == true){
                            if(!$.isEmptyObject(data.data)){
                                $.each(data.data, function(relate_copy_id, html){
                                    // данные субмодуля
                                    $(edit_view)
                                        .find('.sm_extension[data-type="submodule"][data-relate_copy_id="'+relate_copy_id+'"]')
                                        .after(html)
                                        .remove();
                                });
                            }

                            if(typeof(callback) == 'function'){
                                callback();
                            }
                        }
                    },
                }).done(function(){
                    EditView.activityMessages.init();
                    textAreaResize();
                    EditView.hiddenBlocks();
                    EditView.textRedLine();
                    jScrollRemove();
                    jScrollInit();
                    EditView.textRedLine();
                    Global.createLinkByEV($('.edit-view:last'));
                });
            },



            linkNavigation : function(_this){
                var target = $(_this).data('target');
                switch(target){
                    case 'tg_edit_view':
                        EditView.subModules.cardEditSM(_this);
                        break;
                }
            },


        },





        /********************************
         *      activityMessages
         *********************************/
        activityMessages : {
            icons_path : '/static/images/emoji',
            _instance: null,
            _url: null,
            _data: null,
            _async: true,
            _handler: null,
            _element: null,
            _async: null,
            _show_message: null,
            _refresh_resource : null,
            _position_delta_scroll : null,
            _position_scroll_relative_point : null,
            _point: null,
            _editing: false,
            refresh_messages  : true,
            request_start: false,

            createInstance : function(){
                var Obj = function(){
                    for(var key in EditView.activityMessages){
                        this[key] = EditView.activityMessages[key];
                    }
                }

                return EditView.activityMessages._instance = new Obj();
            },
            setMessage: function (bool) {
                this._show_message = bool
                return this;
            },
            setData : function(json) {
                this._data = json;
                return this;
            },
            setAsync : function(bool) {
                this._async = bool;
                return this;
            },
            setElement : function(element) {
                this._element = element;
                return this;
            },
            setEditMode : function(bool) {
                this._editing = bool;
                return this;
            },
            setHandler : function(handler) {
                this._handler = handler;
                return this;
            },
            icons : {
                ':smile happy:'  : 'smilehappy.png',
                ':smile:'     : 'smile.png',
                ':smile big:'  : 'smilebig.png',
                ':smile shy:'  : 'smileshy.png',
                ':smile very shy:'  : 'smileveryshy.png',
                ':wink:'  : 'wink.png',
                ':in love:'  : 'inlove.png',
                ':kiss wink:'  : 'kisswink.png',
                ':whistle:'  : 'whistle.png',
                ':whistle shy:'  : 'whistleshy.png',
                ':whistle happy:'  : 'whistlehappy.png',
                ':tongue:'  : 'tongue.png',
                ':tongue eye:'  : 'tongueeye.png',
                ':tongue squint:'  : 'tonguesquint.png',
                ':shy:'  : 'shy.png',
                ':teeth:'  : 'teeth.png',
                ':teeth squint:'  : 'teethsquint.png',
                ':tired sad:'  : 'tiredsad.png',
                ':tired smile:'  : 'tiredsmile.png',
                ':sad side look:'  : 'sadsidelook.png',
                ':sad dawn look:'  : 'saddawn.png',
                ':sad squink:'  : 'sadsquink.png',
                ':cry:'  : 'cry.png',
                ':laugh cry:'  : 'laughcry.png',
                ':wailing:'  : 'wailing.png',
                ':tired:'  : 'tired.png',
                ':sweat:'  : 'sweat.png',
                ':sweat fear:'  : 'sweatfear.png',
                ':laugh sweat:'  : 'laughsweat.png',
                ':tired sweat:'  : 'tiredsweat.png',
                ':desperate:'  : 'desperate.png',
                ':desperate squint:'  : 'desperatesquint.png',
                ':surprised:'  : 'surprised.png',
                ':surprised brows:'  : 'surprisedbrows.png',
                ':surprised bad:'  : 'surprisedbad.png',
                ':surprised fear:'  : 'surprisedfear.png',
                ':scream:'  : 'scream.png',
                ':angry:'     : 'angry.png',
                ':very angry:'     : 'veryangry.png',
                ':boiling:'  : 'boiling.png',
                ':perplex:'  : 'perplex.png',
                ':laughing:'  : 'laughing.png',
                ':tongue smile:'  : 'tonguesmile.png',
                ':glass:'  : 'glass.png',
                ':mask:'  : 'mask.png',
                ':sleep:'  : 'sleep.png',
                ':shok surprise:'  : 'shoksurprise.png',
                ':shok:'  : 'shok.png',
                ':devil:'  : 'devil.png',
                ':devil angry:'  : 'devilangry.png',
                ':surprised o:'  : 'surprisedo.png',
                ':neutral:'  : 'neutral.png',
                ':doubts:'  : 'doubts.png',
                ':surprised o brows:'  : 'surprisedobrows.png',
                ':no moth:'  : 'nomoth.png',
                ':angel:'  : 'angel.png',
                ':smirk:'  : 'smirk.png',
                ':expressionless:'  : 'expressionless.png',
                ':good:'  : 'good.png',
                ':bad:'  : 'bad.png',
                ':ok:'  : 'ok.png',
                ':fist:'  : 'fist.png',
                ':fist up:'  : 'fistup.png',
                ':v:'  : 'v.png',
                ':hand:'  : 'hand.png',
                ':two hands:'  : 'twohands.png',
                ':up:'  : 'up.png',
                ':down:'  : 'down.png',
                ':right:'  : 'right.png',
                ':left:'  : 'left.png',
            },

            ajax : function(){
                var _this = this;

                this.request_start = true;
                this.data_status = false;

                // EditView.activityMessages.data_messages = data.messages;
                AjaxObj
                    .createInstance()
                    .setUrl(this._url + '/' + $(this._element).closest('.edit-view').data('copy_id'))
                    .setData(this._data)
                    .setType('POST')
                    .setDataType('json')
                    .setAsync(this._async)
                    .setCallBackSuccess(function(data){
                        data = data || {};

                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else if(data.status == 'error'){
                            Message.show([{'type': 'error', 'message': data.messages}], true);
                        }else {
                            if(data.status == false){
                                Message.show(data.messages);
                            } else {
                                if(data.status == true){
                                    EditView.activityMessages.data_status = true;

                                    _this._handler(data);
                                }
                            }
                        }
                    })
                    .setCallBackError(function(){
                        if(_this._show_message){
                            Message.show([{'type': 'error', 'message': Global.urls.url_ajax_error}], true);
                        }
                    })
                    .setCallBackDone(function() {
                        EditView.activityMessages.request_start = false;
                    })
                    .send();
            },

            setPoint : function (_element) {
                this._point = _element;
                this._position_scroll_relative_point = modalDialog.getScrollTop();

                return this;
            },

            init : function(){
                var $wysiwyg,
                    _this = this,
                    label = false,
                    $edit_view = $('.edit-view').last(),
                    current_ui = $edit_view.data('unique_index');

                $.emojiarea.path = EditView.activityMessages.icons_path;
                $.emojiarea.icons = EditView.activityMessages.icons;
                redactor.init($edit_view);
                if ( redactor.isTinyMCE()) {
                    return;
                }

                if ($('.user_comment_right .emojis-wysiwyg').length) {
                    $wysiwyg = $('.user_comment_right .emojis-wysiwyg').emojiarea({wysiwyg: true});
                } else if ($('.modal+.modal').length) {
                    if (!$('.modal.in:last-child .emojis-wysiwyg+.emoji-wysiwyg-editor').length) {
                        $wysiwyg = $('.modal.in:last-child .emojis-wysiwyg').emojiarea({wysiwyg: true});
                        label = true;
                    }
                } else {
                    $wysiwyg = $edit_view.find('.emojis-wysiwyg');
                    label = true;
                }

                if (label ) {
                    $.each($wysiwyg, function(key, data) {
                        if (!$(data).next().is('.emoji-wysiwyg-editor')){
                            $(data).emojiarea({wysiwyg: true})
                        }
                    })
                }

                var $wysiwyg_value = $('#emojis-wysiwyg-value');

                if ($wysiwyg && $wysiwyg.length) {
                    $wysiwyg.on('change', function() {
                        var $this = $(this);

                        if ($this.val()) {
                            $this.closest('.message_field').data('modify', true);
                        }

                        $wysiwyg_value.text($this.val());
                    });
                }

                redactor.enablePaste(_this);

                if ( redactor.isEmoji()) {
                    return;
                }

                if ($wysiwyg && $wysiwyg.length) {
                    $wysiwyg.trigger('change');
                }

                EditView.textRedLine();
                jScrollRemove();
                jScrollInit();
                EditView.textRedLine();
                $('.emoji-button+.emoji-wysiwyg-editor+.emoji-button').remove();
                $('.emoji-button+.emoji-wysiwyg-editor').remove();
                $('.message_field .emoji-wysiwyg-editor').on('focus', function(){
                    $('.message_field .emoji-wysiwyg-editor').addClass('is-focused');
                });
                $('.message_field .emoji-wysiwyg-editor').on('blur', function(){
                    setTimeout(function(){
                        $('.message_field .emoji-wysiwyg-editor').removeClass('is-focused');
                    }, 300);
                });
                $('.modal').on('hide.bs.modal', function () {
                    if ($('.message_field .emoji-wysiwyg-editor').hasClass('is-focused')) {
                        return false; // prevent closing of modal
                    }
                });

                if ($wysiwyg && $wysiwyg.find('~ [data-type="drop_down"]').length) {
                    $wysiwyg.find('~ .emoji-wysiwyg-editor').addClass('channel');
                }

                //emoji smiles
                $('.emoji-button').on('click', function() {
                    var $btn = $('a.emoji-button.target'),
                        $this = $(this);
                    $btn.removeClass('target');
                    $this.addClass('target');
                    $btn.after($('.emoji-menu:visible'));
                    //$this.closest('[data-type="message"]').addClass('b_visible');
                });
                EditView.activityMessages.activityImagesNoRedact();
            },

            before : function(unique_index){
                var $block = $('.edit-view[data-unique_index="'+unique_index+'"]'),
                    $select = $block.find('[data-type="switch_type_comment"]'),
                    $activity = $block.find('[data-type="block_activity"]');

                if ($select.length) {
                    $select.selectpicker({style: ''});
                    $select.next().find('button').addClass('btn-primary');

                    var showArea = function (value) {
                        $activity.find('[data-type="editors"] .message_field[data-type_comment]').hide().filter('[data-type_comment="'+ value +'"]').show();
                        $block.find('[data-sub_type="btn-group-editors"]').attr('data-type_comment', value);
                    };

                    showArea($select.val());

                    $select.on('change', function () {
                        var $currentMessage = $activity.find('.message_field:visible'),
                            content = $currentMessage.find('div.emoji-wysiwyg-editor').html();

                        showArea($(this).val());

                        if ($currentMessage.data('modify')) {
                            $activity.find('.message_field:visible div.emoji-wysiwyg-editor').html(content);

                            $currentMessage.removeData('modify');
                        }

                        Communication.initTextArea();
                    })

                    var time = setTimeout(function () {
                        clearTimeout(time);
                        Communication.initTextArea();
                    }, 50);
                }
            },
            setUrl : function (url) {
                this._url = url;
                return this;
            },

            setElementsDefault : function(_this){
                $(_this).closest('.element[data-type="block_activity"]').find('.emoji-wysiwyg-editor').html('');
                var $activity = $(_this).closest('.element[data-type="block_activity"]').find('.activity-ext'),
                    $recipients = $activity.find('.recipients');

                $recipients.not(':first').remove();
                $activity.find('input').val('');
                $recipients.find('.counter').html('');
                $recipients.find('.todo-remove').hide();
                Communication.initTextArea();

            },

            saveMessage : function(_this, content, callback){
                var data = {},
                    attachment = {},
                    $editView = $(_this).closest('.edit-view'),
                    id = $(_this).data('id'),
                    date_edit = {},
                    list_other_id = [],
                    type_comment = $(_this).closest('.element[data-type="edit"]').attr('data-type_comment');

                $(_this).closest('.element[data-type="block_activity"]').find('.element[data-type="block_message"] .element[data-type="message"]').each(function(i, ul){
                    date_edit[$(ul).data('id')] = $(ul).data('date_edit');
                    if($(ul).data('status') == 'temp') list_other_id.push($(ul).data('id'));
                })

                if(typeof(id) == 'undefined' || !id) id = null;

                switch (type_comment) {
                    case 'general' : {
                        data = {
                            'copy_id': $editView.data('copy_id'),
                            'data_id': $editView.data('id'),
                            'id': id,
                            'message': content,
                            'date_edit': date_edit,
                            'list_other_id': list_other_id,
                            'type_comment': 'general',
                        };
                        break;
                    }
                    case 'email' : {
                        var
                            subject_text = $editView.find('.panel-heading .client-name .element_data[data-type="module_title"]').text(),
                            channel_data_id = $editView.find('.element[data-type="block_activity"] .element[data-type="editors"] .element[data-type="drop_down_button"][data-relate_copy_id="'+Communication.createInstance().getId()+'"]').data('id');

                        // block_attributes: block_participant and other
                        var block_participant = Participant.getParticipantList($editView, ['participant', 'email'])

                        data = {
                            'copy_id': $editView.data('copy_id'),
                            'data_id': $editView.data('id'),
                            'id': id,
                            'subject': subject_text,
                            'message': content,
                            'date_edit': date_edit,
                            'list_other_id': list_other_id,
                            'type_comment': 'email',
                            'channel_data_id' : channel_data_id,
                            'block_participant' : block_participant,
                        };
                        break;

                    }
                    default: {
                        break;
                    }
                }

                $(_this).closest('.element[data-type="edit"]').find('.element[data-type="block_attachments"]').each(function(i, ul){
                    var _files = [];
                    $(ul).find('input.upload_file').each(function(i, ul){
                        if($(ul).val()) _files.push($(ul).val());
                    });
                    attachment = _files;
                })
                data['attachment'] = attachment;

                EditView.activityMessages
                    .createInstance()
                    .setUrl(Global.urls.url_edit_view_activity_save_message)
                    .setData(data)
                    .setElement(_this)
                    .setHandler(function(data){
                        EditView.activityMessages.refresh_messages = true;
                        callback(data);
                    })
                    .ajax()
            },

            //issetBlockActivity
            issetBlockActivity: function (edit_view_object) {
                if (edit_view_object) {
                    return ($(edit_view_object).find('.element[data-type="block_activity"]').length ? true : false);
                } else {
                    return ($('.edit-view .element[data-type="block_activity"]').length ? true : false);
                }
            },


            //startRefreshMessagesInterval
            startRefreshMessagesInterval: function () {
                if (this._refresh_resource == null && this.issetBlockActivity()) {
                    this._refresh_resource = setInterval(function () {
                        EditView.activityMessages.refreshMessagesInterval()
                    }, 10000);
                }
            },

            //stopRefreshMessagesInterval
            stopRefreshMessagesInterval: function () {
                if (this._refresh_resource) {
                    clearInterval(this._refresh_resource);
                    this._refresh_resource = null;
                }
            },

            //refreshMessagesInterval
            refreshMessagesInterval: function () {
                if (EditView.activityMessages.refresh_messages == false) {
                    return;
                }

                if (this.issetBlockActivity() == false) {
                    return EditView.activityMessages.stopRefreshMessagesInterval();
                }
                $('.edit-view .element[data-type="block_activity"]').each(function (i, _block_activity) {
                    EditView.activityMessages.refreshMessages(_block_activity);
                })
            },

            //refreshMessages
            refreshMessages: function (_block_activity) {
                var date_edit = {},
                    _this = this,
                    $editView = $(_block_activity).closest('.edit-view'),
                    ev = $editView.data();

                $(_block_activity).find('.element[data-type="block_message"] .element[data-type="message"]').each(function (i, ul) {
                    date_edit[$(ul).data('id')] = $(ul).data('date_edit');
                })

                var data = {
                    'copy_id': ev && ev['copy_id'] ? ev['copy_id'] : null,
                    'data_id': ev && ev['id'] ? ev['id'] : null,
                    'date_edit': date_edit,
                };

                message_alien = EditView.activityMessages
                    .createInstance()
                    .setUrl(Global.urls.url_edit_view_activity_get_message_list)
                    .setData(data)
                    .setAsync(true)
                    .setElement(_block_activity)
                    .setMessage(false)
                    .setHandler(function (data) {
                        if (data.status == true)
                            EditView.activityMessages.refreshMessagesHtml(_block_activity, data.message_list);

                        var instance = modalDialog.getDataFromStore($(_block_activity).closest('.edit-view').data('unique_index'));
                        if (instance && instance.afterViewChanges) {
                            instance.afterViewChanges();
                        }
                    })
                    .ajax();
            },

            //refreshMessagesHtml
            refreshMessagesHtml: function (_block_activity, message_list) {
                if ($.isEmptyObject(message_list)) {
                    return;
                }
                var block_message = $(_block_activity).find('.element[data-type="block_message"]');
                // обновляем
                if ($.isEmptyObject(message_list.message_alien_editing) == false) {
                    $.each(message_list.message_alien_editing, function (data_id, html) {
                        var message = block_message.find('.element[data-type="message"][data-id="' + data_id + '"]');
                        if (message.length > 0) {
                            message.html(html);
                        }
                    });
                }
                // новые
                if ($.isEmptyObject(message_list.message_alien_new) == false) {
                    $.each(message_list.message_alien_new, function (data_id, html) {
                        block_message.prepend(html);
                    });
                }
                // удаляем
                if ($.isEmptyObject(message_list.message_alien_deleted) == false) {
                    $.each(message_list.message_alien_deleted, function (i, data_id) {
                        block_message.find('.element[data-type="message"][data-id="' + data_id + '"]').remove();
                    });
                }
            },

            //addMessage
            addMessage : function(_this, content, callback){
                var $this = $(_this),
                    $editView = $this.closest('.edit-view'),
                    modelEditView = $editView.data(),
                    $attachments = $this.closest('[data-type="edit"]').find('[data-type="block_attachments"]');

                if((content == null || content == undefined) && !$this.closest('[data-type_comment="email"]').length) {
                    Message.show([{
                            'type': 'error',
                            'message': 'No message text entered'
                        }]
                        , true, function () {
                            callback(false);
                        });

                    return;
                }

                var block_activity = $this.closest('.element[data-type="block_activity"]');

                // save Message
                var funcstion_save_message = function(_this){
                    var $this = $(_this),
                        $editView = $this.closest('.edit-view'),
                        modelEditView = $editView.data(),
                        $attachments = $this.closest('[data-type="edit"]').find('[data-type="block_attachments"]');

                    EditView.activityMessages.saveMessage(_this, content,function(data){
                        EditView.activityMessages.setElementsDefault(_this)

                        var upload_files,
                            editting = $this.hasClass('editting'),
                            param = 'size=60';

                        EditView.activityMessages.request_start = false;

                        if(data.status == true){
                            // insert to block Attachments
                            var $attach = $this.closest('.edit-view').find('.element[data-type="attachments"]');
                            $.each(block_activity.find('div.col-xs-6, div.col-xs-12'), function(){
                                var $clone, $img, source, id,
                                    $this = $(this),
                                    closAtt = $this.closest('.edit-view').find('.element[data-type="attachments"] h3');

                                id = parseInt($this.find('input').attr('value'));

                                if(!$attach.find('input.upload_file[value="' + id + '"]').length){
                                    $clone = $this.clone();
                                    $img = $clone.find('img');
                                    source = $img.attr('src') || '';


                                    if(source.indexOf(param) == -1 && source.length){
                                        $img.attr({
                                            'src': source + '&' + param,
                                            'style': $img.attr('style') + ' max-height: 60px'
                                        });
                                    }

                                    $clone.insertBefore(closAtt);
                                }
                            });

                            $('.element[data-type="attachments"] .col-xs-6, .element[data-type="attachments"] .col-xs-12').not('.file-item').wrap('<div class="file-box"></div>').addClass('file-item');
                        }

                        if (redactor.isEmoji()) {
                            $this.find('div').remove();
                        }
                        // refresh messages
                        EditView.activityMessages.refreshMessagesHtml($(_this).closest('.element[data-type="block_activity"]'), data.message_list);

                        var id = $(data.message.html).filter('[data-type="message"]').data('id');
                        // insert where edit message
                        if(editting){
                            var $block = block_activity.find('.element[data-type="block_message"] .element[data-type="message"] .user_comment_right .emoji-wysiwyg-editor')
                                .closest('.element[data-type="message"]')

                            if($block.length){
                                $block.after(data.message.html).show('fast')
                                $block.remove();
                            }
                            // insert new message
                        } else {
                            var is_append = false;
                            if(id){
                                if($.isEmptyObject(data.message_list) == false && $.isEmptyObject(data.message_list.message_alien_new) == false){
                                    $.each(data.message_list.message_alien_new, function(data_id, html){
                                        if(id == data_id){
                                            is_append = true;
                                        }
                                    });
                                }
                            }

                            if(is_append == false){
                                // append new message
                                block_activity.find('.element[data-type="block_message"]')
                                    .prepend(data.message.html)
                                    .find('.element[data-type="message"]:first-child')
                                    .show('fast');
                            }
                        }

                        EditView
                            .changeBlockLoadedMessages(block_activity);

                        if (redactor.isEmoji()) {
                            if(modelEditView){
                                if(!modelEditView['activity_context']){
                                    $this.empty();
                                } else {
                                    $this.html(modelEditView['activity_context']);
                                    delete modelEditView['activity_context'];
                                    upload_files = $attachments;
                                }
                            }
                        }
                        if (redactor.isTinyMCE()) {
                            tinyMCE.activeEditor.setContent('');
                        }

                        $attachments
                            .empty();

                        if(editting){
                            block_activity
                                .find('.element[data-type="edit"] form div.emoji-wysiwyg-editor')
                                .data('id', '')
                                .removeClass('editting');
                        }
                        EditView.replaceForLink($('.element[data-type="message"][data-id="' + id + '"]'));

                        var instance = modalDialog.getDataFromStore($('.edit-view').last().closest('.edit-view').data('unique_index'));
                        if (instance && instance.afterViewChanges) {
                            instance.afterViewChanges();
                        }
                        callback(upload_files);
                    });
                }

                Participant.clearEmailParticipantIfExistsInCommunications(_this, function(_this){
                    funcstion_save_message(_this);
                });


                imagePreview();
            },

            calcPositionDeltaScroll : function () {
                var param,
                    $button = $(this._element).closest('.edit-view').find('.buttons-section'),
                    $modal = $('.modal').last();

                param = this._point_relative_calc_position_scroll ? this._point_relative_calc_position_scroll : $modal.scrollTop();
                this._position_delta_scroll = $button.position().top - param;

                return this;
            },

            //editMessage
            editMessage : function(_this, callback){
                var edit, edit_message, message, offsetOfElement,
                    $this = $(_this),
                    $editView = $this.closest('.edit-view'),
                    ev = $editView.data(),
                    $commentRight = $this.closest('.user_comment_right'),
                    $activityEdit = $this.closest('.element[data-type="block_activity"]').find('.element[data-type="edit"]'),
                    $button = $editView.find('.buttons-section');
                this
                    .setElement($this)
                    .calcPositionDeltaScroll();

                $('.user_comment_right .task_message').each(function(){
                    var $this = $(this);

                    $this.closest('.user_comment_right').find('.user_comment_box').show();
                    $this.closest('.user_comment_right').find('.user_comment_info').show();
                    $this.next().show('fast');
                    $this.remove();
                });

                var type = $(_this).closest('.user_comment').attr('data-type_comment'),
                    $area = '<div class="task_message element" ' +
                        'data-unique_index="'+ Global.createDataUnique() +'"' +
                        'data-type_comment="'+ type +'" data-type="edit"><div class="message_field" data-type_comment="'+ type +'"><form><textarea rows="5" class="emojis-wysiwyg"></textarea></form></div><div class="user_comment_adds element" data-type="block_attachments"></div></div>';

                $commentRight.append($area);
                $commentRight.find('.user_comment_box').hide();
                $(_this).closest('.user_comment_info').hide();
                $commentRight.next().hide('fast');
                /*var fields_for_editing = */
                $activityEdit.find('.message_upload_btn').clone().prependTo( $commentRight.find('.message_field') );
                $activityEdit.find('.send_massage_btns').first().clone().appendTo( $commentRight.find('.task_message') );

                $commentRight.find('.send_massage_activity').show();

                EditView.activityMessages.setEditMode(true).init();
                edit = $commentRight.find('.element[data-type="edit"]');
                edit.find('.element[data-type="switch_type_comment"]').next().hide();
                edit_message = $(_this).closest('.element[data-type="message"]');

                message = $commentRight.find('.user_comment_text');

                // unwrap links
                var results ='',
                    arrLinks = message.html().split('</a>'),
                    arrLinksLength = arrLinks.length;

                for (var i = 0; i< arrLinksLength; i++){
                    if (arrLinks[i].length) {
                        var toChar = arrLinks[i].indexOf('<a href=');
                        var fromCar = arrLinks[i].indexOf('target="_blank">');
                        results += arrLinks[i].substring(0, toChar) + arrLinks[i].substring(fromCar);
                    }
                };

                if(arrLinks.length>1){
                    message.html(results);
                    EditView.replaceForLink(message.closest('[data-type="message"]'));
                }

                //===============
                edit.find('form div.emoji-wysiwyg-editor').html(message.html());

                EditView.activityMessages
                    .setUrl(Global.urls.url_edit_view_activity_get_message_by_id)
                    .setData({
                        'copy_id' : ev['copy_id'],
                        'activity_messages_id' : edit_message.data('id')
                    })
                    .setElement(_this)
                    .setHandler(function(data){
                        EditView.activityMessages.refresh_messages = false;
                        if(data.status == true) {
                                redactor.setContent(edit_message, data, {
                                    'id' : edit_message.data('id')
                                });
                            }
                            imagePreview();
                    })
                    .ajax();

                $this.closest('.user_comment_right .message_upload_btn .upload_link_activity').remove();

                modalDialog.setScrollTop($button.position().top - this._position_delta_scroll - 19)
                var time,
                    key = $(_this).closest('.edit-view').data('unique_index');

                time = setTimeout(function () {
                    clearTimeout(time);
                    modalDialog.getDataFromStore(key)._scrolled = null;
                }, 100);

                callback();
            },

            deleteMessage : function(_this, callback){
                var data = {
                    'id' : $(_this).closest('.element[data-type="message"]').data('id'),
                    'data_id' : $(_this).closest('.edit-view').data('id'),
                };
                $(_this).closest('.element[data-type="message"]').find('.user_comment_adds .file-block').each(function(){
                    $('.element[data-type="attachments"] .file-block[data-type="activity"] .image-preview[data-id="'+$(this).find('.image-preview').data('id')+'"]').closest('.file-box').remove();
                });
                EditView.activityMessages
                    .setUrl(Global.urls.url_edit_view_activity_delete_message)
                    .setData(data)
                    .setElement(_this)
                    .setHandler(function(data){
                        $(_this).closest('.element[data-type="message"]').hide('fast', function(){
                            $(_this).remove();
                            callback();
                        });
                    })
                    .ajax()
            },

            // удаляет файл из сообщения навсегда
            deleteFile : function(upload_id, _this){
                EditView.activityMessages
                    .setUrl(Global.urls.url_edit_view_activity_delete_file)
                    .setData({'upload_id' : upload_id})
                    .setElement(_this)
                    .setHandler(function(data){})
                    .ajax();
            },

            addGooleDoc : function(_this){
                var ev = $(_this).closest('.edit-view').data();

                Global.Files.showGoogleDocView({'copy_id' : ev['copy_id']});
            },

            uploadUrlLink : function(_this){
                var data = {
                    'url' : $(_this).closest('.panel').find('input').val(),
                    'get_view' : '1',
                    'thumb_scenario' : 'activity',
                    'copy_id' : $(_this).closest('.panel').data('copy_id'),
                }
                Global.Files.uploadUrlLink(data, function(data){
                    $('.edit-view[data-copy_id="'+$(_this).closest('.panel').data('copy_id')+'"]')
                        .find('.element[data-type="block_activity"] .gdoc_target.element[data-type="edit"] .element[data-type="block_attachments"]')
                        .append(data.view);
                    modalDialog.hide();
                })



            },

            sendUploadMassage : function($target){
                var type_comment = $target.closest('.edit-view').find('.element[data-sub_type="btn-group-editors"]').attr('data-type_comment'),
                    $message = $target.closest('.task_comments .task_message');

                if (type_comment == 'general'){
                    $message.find('form .emoji-wysiwyg-editor').text(Message.translate_local('Upload file'));
                    $message.find('.send_massage_activity').trigger('click');
                }
            },

            activityImagesNoRedact : function(){
                if($('.edit-view .user_comment_adds .image-preview img').attr('src')) {
                    $('.edit-view .user_comment_adds .image-preview').closest('.user_comment').find('.user_comment_redact').remove();
                }
            },
        },



    }


    $(document).ready(function() {

        var eventPath;

        /********************************
         *      activityMessages
         *********************************/

        eventPath = 'a.user_comment_delete';
        //видалення коментаря
        $(document).off('click', eventPath).on('click', eventPath, function() {
            EditView.activityMessages.deleteMessage(this, function(){return false;});
        });

        //редагуванння комментаря
        eventPath = 'a.user_comment_redact';
        $(document).off('click', eventPath).on('click', eventPath, function() {
            var object,
                $block = $(this).closest('.user_comment');

            object = $block.closest('.edit-view').data();

            if (object) {
                object.updateMessage = $block.clone().wrap('<div/>').parent().html();
            }

            EditView.activityMessages.editMessage(this, function(){return false;})
        });

        //редагуванння комментаря
        eventPath = 'a.upload_link_activity_google_doc';
        $(document).off('click', eventPath).on('click', eventPath, function() {
            EditView.activityMessages.addGooleDoc(this);
            $('.gdoc_target').removeClass('gdoc_target');
            $(this).closest('.element[data-type="edit"]').addClass('gdoc_target');
        });

        //редагуванння комментаря
        eventPath = '.activity_btn-add-google-doc';
        $(document).off('click', eventPath).on('click', eventPath, function() {
            EditView.activityMessages.uploadUrlLink(this);
        });

        eventPath = 'form div.emoji-wysiwyg-editor';
        $(document).off('focus', eventPath).on('focus', eventPath, function(){
            $(this).closest('.task_message').find('.btn.send_massage_activity').show('fast');
        });


        /********************************
         *      activityMessages End
         *********************************/

        $(document).on('keyup', EditView.onKeyUp);

        $(document).on('click', function(e){
            if ($('.edit-view.in').length) {
                EditView.saveDraftToLocalStorage(e);
            }
            return true;
        });

        /**
         * Operations for submodule
         */
        eventPath = '.submodule-link';
        $(document).off('show.bs.dropdown', eventPath).on('show.bs.dropdown', eventPath, function () {
            TableSearchInit('.submodule-table', '.submodule-search');
            $this = $(this);
            setTimeout(function(){ EditView.textRedLine($this); }, 200);
        });

        eventPath = '.submodule-table td:first-child';
        $(document).off('click', eventPath).on('click', eventPath, function() {
            var $checkbox,
                $this = $(this),
                card_element = $this.closest('.edit-view'),

                //dd_button = $this.closest('.dropdown.submodule-link.crm-dropdown').find('[data-type="drop_down_button"]'),
                //copy_id = card_element.data('copy_id'),
                //data_id = card_element.data('id'),
                //module_title = card_element.find('span[data-type="module_title"]').text();

                /*
        if(dd_button.length>0 && Communication._copy_id && dd_button.attr('data-relate_copy_id') && dd_button.attr('data-relate_copy_id') == Communication._copy_id && $('.edit-view').length){
            EditView.relates.reloadActivityMessages(copy_id,data_id,module_title,Communication._copy_id, $this.closest('.sm_extension_data').data('id'),$this);
        }
        */
                $checkbox = $this.closest('tr').find('.checkbox');
            $checkbox.not('[data-name="all-checked"]').prop('checked', !($checkbox.is(':checked')));
        });

        $(document).on('click', '.submodule-link .submodule-search', function (e) {
            e.stopPropagation();
        });

        eventPath = '.submodule-link td';
        $(document).off('click', eventPath).on('click', eventPath, function(e){
            var _this = this;

            //if (instanceReports) return;

            base_id = null;
            var relate = $(this).closest('.submodule-link').find('.element_relate, .element_relate_this, .element_relate_participant');
            if(relate.data('reloader') == 'parent'){
                base_id = relate.data('id');
            }

            $(_this)
                .closest('.submodule-link')
                .find('.element_relate, .element_relate_this, .element_relate_participant')
                .val($(_this).find('.name').text())
                .data('id', $(this).closest('tr').data('id'));

            $(_this)
                .closest('.submodule-link')
                .find('.element_relate_participant')
                .data('ug_id', $(_this).closest('tr').data('ug_id'))
                .data('ug_type', $(_this).closest('tr').data('ug_type'));
            var tr = $(_this).closest('tr');
            tr.closest('.submodule-link').find('.element_relate, .element_relate_this, .element_relate_participant').html(tr.find('td').html());

            EditView.relates.reloadEditView(_this, base_id);
            EditView.relates.reloadInLine(_this, null, base_id, true, false, 1);
        });

        $(document).on('click', '.submodule_edit_view_dnt-create', function(){
            Preloader
                .createInstance()
                .setModal(true)
                .setModalSub(true)

            EditView.subModules.cardCreate(this);
        });

        $(document).on('click', '.submodule_edit_view_dnt-create-select', function(){
            EditView.subModules.addCardSelect(this, 'edit-view');
        });

        $(document).on('click', '.submodule_edit_view_dnt-edit', function(){
            EditView.subModules.cardEditSM(this);
        });

        $(document).on('click', '.sdm_edit_view_dnt-edit', function(){
            EditView.subModules.cardEditSDM(this);
        });

        $(document).on('click', '.submodule_edit_view_dnt-select', function(){
            EditView.subModules.cardSelect(this);
        });

        $(document).on('click', '.submodule_edit_view_dnt-copy', function(){
            EditView.subModules.cardCopy(this);
        });

        $(document).on('click', '.submodule_edit_view_dnt-delete', function(){
            EditView.subModules.cardRemoved(this);
        });

        $(document).on('click', '.submodule_list_view_btn-tie', function(){
            EditView.subModules.cardTie(this);
        });


        $(document).on('click', '.edit-view .edit-view .edit_view_select_btn-create', function(){
            var _this = this
            EditView.cardSelectValidate(_this, function(data){
                if(data){
                    var sub_module = $('.edit-view[data-copy_id="'+$(_this).closest('.sm_extension').data('parent_copy_id')+'"] .sm_extension[data-type="submodule"][data-relate_copy_id="'+$(_this).closest('.sm_extension').data('copy_id')+'"] .submodule_edit_view_dnt-create-select');
                    EditView.subModules.addCardFromTemplate(_this, sub_module);
                }
            })
        });

        $(document).on('click', '.edit-view .edit_view_select_btn-create', function(){
            $(this).closest('.edit-view').data('submitted',true);
        });





        /**
         * Uploading files
         */

        // Удаляем взагруженный файл. Используется, если input[type="hidden"]
        $(document).on('click','.element[data-type="remove_image_file"]', function() {
            $(this).addClass('hidden');
            $(this).closest('.element[data-type="file_upload_block"]').find('input[type="hidden"]').val('');
            $(this).closest('.element[data-type="file_upload_block"]').find('.element[data-type="file_view"]').val('');
        });

        //Стандартный тип, контакты - upload_link, upload_link_contact_image
        $(document).on('click','.upload_link, .element[data-type="upload_image"][data-name="edit_view"]', function() {

            var ev,
                _this = $(this);

            upload_link_class_name = 'has-file';
            var thumb_scenario = 'upload';
            var file_type = 'file';

            if(_this.hasClass('upload_link_contact_image')){
                thumb_scenario = 'avatar';
                file_type = 'file_image';
                upload_link_class_name = 'has-file-contact-image';
            }

            $('.upload-status .progress-bar').width('0%');

            _this.parent().addClass(upload_link_class_name);
            $('.upload-section').show();

            modalDialog
                .createInstance()
                .setParentClass(inLineEdit.isEditing() ? 'popup-upload' : null)
                .show('<div class="modal-dialog upload-modal">' +  $('#upload_template').html() + '</div>');

            if ($('.'+upload_link_class_name).data('type') == 'file_image') {
                $('.upload-modal #files').attr('accept', 'image/*');
                file_type = 'file_image';
            }
            // Обработчик событий для файла
            $('#files').data('thumb_scenario', thumb_scenario);
            $('#files').data('file_type', file_type);
            // copy_id
            if(_this.hasClass('upload_link')){
                var data_edit = _this.closest('td.data_edit');
                if(data_edit.length > 0){
                    $('#files').data('copy_id', _this.closest('.sm_extension').data('copy_id'));
                } else {
                    ev = _this.closest('.edit-view').data();
                    $('#files').data('copy_id', ev['copy_id']);
                }
            } else if(_this.hasClass('upload_link_contact_image')){
                var modal = _this.closest('.modal-dialog').data();

                $('#files').data('copy_id', modal['edit-view'].copy_id);
            }

            document.getElementById('files').addEventListener('change', handleFileSelect, false);
        });


        //Загрузка изображения - upload_image_link
        $(document).on('click','.upload_image_link', function() {
            var _this = $(this);

            upload_link_class_name = 'has-file';
            upload_link_class_view = _this;

            modalDialog
                .createInstance()
                .setParentClass(null)
                .show('<div class="modal-dialog upload-modal">' +  $(crmParams.message_dialog_upload_select_file).html() + '</div>');

            $('.upload-status .progress-bar').width('0%');

            // Обработчик событий для файла
            _this.parent().find('input[type="hidden"]').addClass(upload_link_class_name);
            $('.upload-modal #files').attr('accept', 'image/*');
            $('#files').data('thumb_scenario', 0);
            $('#files').data('file_type', 'file_image');
            $('#files').data('copy_id', -1);

            document.getElementById('files').addEventListener('change', handleFileSelectInput, false);
        });

        //upload_link_activity
        $(document).on('click', '.upload_link_activity', function() {
            var $this = $(this),
                $editView = $this.closest('.edit-view'),
                ev = $editView.data();

            $('.download_target').removeClass('download_target');
            $this.closest('.element[data-type="edit"]').find('.element[data-type="block_attachments"]').addClass('download_target');
            $('.upload-status .progress-bar').width('0%');
            $('.upload-section').show();

            modalDialog.show('<div class="modal-dialog upload-modal">' +  $('#upload_template').html() + '</div>');

            var handler,
                data = Url.parseFull();

            if (data && (data.id == 'profile' || data.id == 'parameters' )) {
                $('#files').data('parentElement', $this);
                handler = handleFileSelectBackground;
            } else {
                // Обработчик событий для файла
                $('#files').data('copy_id', ev['copy_id']);
                handler = handleFileSelectActivity;
            }

            document.getElementById('files').addEventListener('change', handler, false);
        });


        //Вложения
        $(document).on('click', '.element[data-type="attachments"] .drop_zone', function(e){
            return false;
        });



        // Профиль - upload profile
        $(document).on('click', '.element[data-type="upload_image"][data-name="profile"]', function() {
            $('.upload-status .progress-bar').width('0%');
            $('.upload-section').show();
            modalDialog.show('<div class="modal-dialog upload-modal">' +  $('#upload_template').html() + '</div>');
            $('.upload-modal #files').attr('accept', 'image/*');
            // Обработчик событий для файла
            document.getElementById('files').addEventListener('change', handleFileProfile, false);
        });

        $(document).on('click', '.file-block[data-type="activity"] .file-remove', function(){
            var $userComment,
                $this = $(this),
                deletedId = $this.closest('.upload-result').find('.image-preview').data('id'),
                $massageForDelete = $('.user_comment_adds a.image-preview[data-id="'+deletedId+'"]').closest('.user_comment_adds'),
                $deletedPreview = $this.closest('.modal').find('.element[data-type="block_activity"] .image-preview[data-id="'+deletedId+'"]');

            EditView.activityMessages.deleteFile(deletedId, this);
            $(this).closest('.modal').find('.element[data-type="attachments"] .image-preview[data-id="'+deletedId+'"]').closest('.file-box').remove();
            $deletedPreview.closest('.col-xs-6, .col-xs-12').remove();
            $(this).closest('.file-box').remove();

            if (!$massageForDelete.find('img').length) {
                $massageForDelete.closest('.user_comment').find('.user_comment_delete').trigger('click');
            }
        });

        $(document).on('click', '.element[data-type="attachments"] .file-remove', function(){
            $(this).closest('.col-xs-6, .col-xs-12').remove();
        });


        $(document).on('click', '.element[data-type="remove_image"][data-name="edit_view"]', function(){
            var _this = this;
            Global.Files.fileDelete($(_this).closest('.file-block').find('.upload_file').val(), false, function(data){
                if(data.status == false){
                    Message.show(data.messages, false);
                } else {
                    $(_this).closest('.file-block')
                        .find('.thumb').attr('src', '').attr('title', '')
                        .hide()
                        .closest('.file-block').find('.upload_file').val('')
                    $(_this).closest('.file-block').find('.thumb_zero').show();
                    $(_this).closest('.file-block').find('.errorMessage').text('');
                    // $('.table-section .crm-table-wrapper').getNiceScroll().remove();
                    // niceScrollInit();
                }
            });
        });


        $(document).on('click', '.file-block .btn', function() {
            $(this).next('input').trigger('click');
        });



        function getUploadStatus(bar){
            var file_status;
            $.ajax({
                url: Global.urls.url_upload_file_progress,
                dataType: 'json',
                success: function(data){
                    if(data.percent) {
                        bar.width(data.percent+'%');
                    }
                }
            });
        }


        // upload file
        function handleFileSelect(evt) {
            var status = $('.upload-status .progress-bar');
            var intervalID;
            status.width('0%');
            var _this = this;
            var form_data = new FormData();
            form_data.append(Global.urls.session_upload_progress_name, 'test');
            var has_file = $('.'+upload_link_class_name);
            form_data.append("file", evt.target.files[0]);
            form_data.append("thumb_scenario", $(_this).data('thumb_scenario'));
            form_data.append("file_type", $(_this).data('file_type'));
            form_data.append("copy_id", $(_this).data('copy_id'));

            var post_max_size = parseInt(Global.urls.post_max_size);
            var upload_max_filesize = parseInt(Global.urls.upload_max_filesize);
            if(post_max_size <  parseInt(evt.target.files[0].size)){
                Message.show([{'type':'error',
                        'message':'File size {s1} bytes exceeds the maximum size of {s2} bytes to POST request',
                        params: {'s1': evt.target.files[0].size, 's2': upload_max_filesize}}],
                    true);
                return;
            }
            if(upload_max_filesize <  parseInt(evt.target.files[0].size)){
                Message.show([{'type':'error',
                        'message':'File size {s1} bytes exceeds the maximum allowable size, amounting to {s2} bytes',
                        params: {'s1': evt.target.files[0].size, 's2': upload_max_filesize}}],
                    true);
                return;
            }

            $.ajax({
                url: Global.urls.url_upload_file,
                data: form_data,
                processData: false, type: "POST", dataType: 'json',
                contentType: false,
                timeout: 0,
                beforeSend: function() {
                    intervalID = setInterval(function(){getUploadStatus(status)}, 300);
                    $('.upload-section').hide();
                    $('.upload-status').show();
                    // Вставляем имя файла
                    $('.upload-status .upload-filename').text(evt.target.files[0].name);
                },
                complete : function(){
                    clearInterval(intervalID);
                },
                success: function(data){
                    if(data.status == false){
                        modalDialog.hide();
                        Message.show(data.messages, false);
                    } else {
                        $('.upload-section, .'+upload_link_class_name+' .upload_link').hide();
                        $('.upload-status, .'+upload_link_class_name+' .upload-result').show();
                        has_file.find('.filename').text(data.fileInfo.file_title);
                        // Вставляем миниатюру
                        if (data.fileInfo.file_type_class == 'file_image' && has_file.closest('.file-block').data('type') == 'file_image' ) {
                            has_file.find('.image-preview').attr('href', data.fileInfo.file_url)
                                .attr('title', data.fileInfo.file_title)
                                .data('id', data.fileInfo.id)
                                .data('dateupload', data.fileInfo.file_date_upload)
                                .data('filesize', data.fileInfo.file_size)
                                .data('download-link', data.fileInfo.file_url);

                            has_file.find('.file_thumb').addClass('hide');
                            if(upload_link_class_name == 'has-file')
                                has_file.find('.thumb-block').show().find('.thumb')
                                    .prop('src', data.fileInfo.file_thumb_url)
                                    .prop('title', data.fileInfo.file_title);
                            else
                            if(upload_link_class_name == 'has-file-contact-image'){
                                has_file.find('.thumb-block-contact-image').show()
                                    .find('.thumb')
                                    .show()
                                    .prop('src', data.fileInfo.file_thumb_url)
                                    .prop('title', data.fileInfo.file_title);
                                has_file.find('.thumb_zero').hide();
                            }


                            imagePreview();
                        } else {
                            has_file.find('.thumb-block').hide();
                            has_file.find('.file_thumb').show().removeClass().addClass('file_thumb ' + data.fileInfo.file_type_class).text(data.fileInfo.file_type);
                        }

                        has_file.find('.upload_link').addClass('hide');
                        has_file.closest('td').addClass('content-image');

                        // Вставляем дату и название файла
                        $('.list-view-panel .crm-table-wrapper').getNiceScroll().remove();
                        niceScrollInit();
                        status.width('100%');
                        has_file.find('.filedate').text(data.fileInfo.file_date_upload);
                        has_file.find('.upload_file').val(data.fileInfo.id);
                        has_file.find('.file-download').attr('href', data.fileInfo.file_url);
                        //проверяем, есть ли ссылка для генерации документа
                        var generate_link = has_file.find('.image-preview').data('parent_id');
                        if(!!generate_link) {
                            $('.upload-status, .'+upload_link_class_name+' .upload-result').removeClass('generate_only');
                            $('.list_view_btn-generate').hide();
                            $('.list_view_btn-generate_edit').hide();
                        }
                        has_file.removeClass(upload_link_class_name);
                        setTimeout(function() {
                            modalDialog.hide();
                            Global.blockErrors.verify();
                        }, 500);
                        setCheckboxHeight();
                    }
                },
                error: function(){
                    clearInterval(intervalID);
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                }
            });
        }


        // upload image file
        function handleFileSelectInput(evt) {
            var status = $('.upload-status .progress-bar');
            var intervalID;
            status.width('0%');
            var _this = this;
            var has_file = $('.'+upload_link_class_name);
            var form_data = new FormData();

            form_data.append(Global.urls.session_upload_progress_name, 'test');
            form_data.append("file", evt.target.files[0]);
            form_data.append("thumb_scenario", $(_this).data('thumb_scenario'));
            form_data.append("file_type", $(_this).data('file_type'));
            form_data.append("copy_id", $(_this).data('copy_id'));
            form_data.append("format", $(has_file).data('format'));
            form_data.append("image_size_pixels", $(has_file).data('image_size_pixels'));

            var post_max_size = parseInt(Global.urls.post_max_size);
            var upload_max_filesize = parseInt(Global.urls.upload_max_filesize);

            if(post_max_size <  parseInt(evt.target.files[0].size)){
                Message.show([{'type':'error',
                        'message':'File size {s1} bytes exceeds the maximum size of {s2} bytes to POST request',
                        params: {'s1': evt.target.files[0].size, 's2': upload_max_filesize}}],
                    true);
                return;
            }
            if(upload_max_filesize <  parseInt(evt.target.files[0].size)){
                Message.show([{'type':'error',
                        'message':'File size {s1} bytes exceeds the maximum allowable size, amounting to {s2} bytes',
                        params: {'s1': evt.target.files[0].size, 's2': upload_max_filesize}}],
                    true);
                return;
            }

            $.ajax({
                url: Global.urls.url_upload_file,
                data: form_data,
                processData: false, type: "POST", dataType: 'json',
                contentType: false,
                timeout: 0,
                beforeSend: function() {
                    intervalID = setInterval(function(){getUploadStatus(status)}, 300);
                    $('.upload-section').hide();
                    $('.upload-status').show();
                    // Вставляем имя файла
                    $('.upload-status .upload-filename').text(evt.target.files[0].name);
                },
                complete : function(){
                    clearInterval(intervalID);
                },
                success: function(data){
                    if(data.status == false){
                        modalDialog.hide();
                        Message.show(data.messages, false);
                    } else {
                        $('.upload-section, .'+upload_link_class_name+' .upload_link').hide();
                        $('.upload-status, .'+upload_link_class_name+' .upload-result').show();
                        $('.upload-status, .'+upload_link_class_name+' .upload-result').show();
                        $(has_file).closest('.element[data-type="file_upload_block"]').find('.element[data-type="remove_image_file"]').removeClass('hidden');

                        has_file.val(data.fileInfo.id);
                        upload_link_class_view.val(data.fileInfo.file_title);
                        has_file.removeClass(upload_link_class_name);
                        status.width('100%');
                        setTimeout(function() {
                            modalDialog.hide();
                            Global.blockErrors.verify();
                        }, 500);
                    }
                },
                error: function(){
                    clearInterval(intervalID);
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                }
            });
        }



        // upload profile file
        function handleFileProfile(evt) {
            var status = $('.upload-status .progress-bar');
            var intervalID;
            status.width('0%');
            var _this = this;
            var form_data = new FormData();
            form_data.append(Global.urls.session_upload_progress_name, 'test');
            form_data.append("file", evt.target.files[0]);
            form_data.append("thumb_scenario", "profile");
            form_data.append("file_type", "file_image");
            form_data.append("get_view", "1");
            form_data.append("copy_id", '-1');

            var post_max_size = parseInt(Global.urls.post_max_size);
            var upload_max_filesize = parseInt(Global.urls.upload_max_filesize);
            if(post_max_size <  parseInt(evt.target.files[0].size)){
                Message.show([{'type':'error',
                        'message':'File size {s1} bytes exceeds the maximum size of {s2} bytes to POST request',
                        params: {'s1': evt.target.files[0].size, 's2': upload_max_filesize}}],
                    true);
                return;
            }
            if(upload_max_filesize <  parseInt(evt.target.files[0].size)){
                Message.show([{'type':'error',
                        'message':'File size {s1} bytes exceeds the maximum allowable size, amounting to {s2} bytes',
                        params: {'s1': evt.target.files[0].size, 's2': upload_max_filesize}}],
                    true);
                return;
            }


            $.ajax({
                url: Global.urls.url_upload_file,
                data: form_data,
                processData: false, type: "POST", dataType: 'json',
                contentType: false,
                timeout: 0,
                beforeSend: function() {
                    intervalID = setInterval(function(){getUploadStatus(status)}, 300);
                    $('.upload-status').show();
                    $('.upload-section').hide(); // new line
                    $('.upload-status .upload-filename').text(evt.target.files[0].name);
                },
                complete : function(){
                    clearInterval(intervalID);
                },
                success: function(data){
                    if(data.status == false){
                        modalDialog.hide();
                        Message.show(data.messages, false);
                    } else {
                        $('.profile-information .element[data-type="profile"] .file-block').after(data.view.avatar_140).remove();
                        $('.element[data-type="main_top_profile_menu_user"]').find('.list-view-avatar').after(data.view.avatar_32).remove();
                        imagePreview();
                        niceScrollInit();
                        status.width('100%');
                        setTimeout(function() {
                            modalDialog.hide();
                        }, 500);
                        setCheckboxHeight();
                    }

                },
                error: function(){
                    clearInterval(intervalID);
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                }
            }).done(function(){
                $('.profile-information .profile-pic img').on('load', function() {
                    profileImgProp();
                });
            });
        }




        function  handleFileSelectBackground(evt) {
            var status = $('.upload-status .progress-bar');
            var intervalID;

            status.width('0%');

            var _this = this,
                parentElement = $(this).data('parentElement');

            var form_data = new FormData();

            form_data.append(Global.urls.session_upload_progress_name, 'test');
            form_data.append("file", evt.target.files[0]);
            form_data.append("file_type", "background");

            parentElement.val(evt.target.files[0].name);

            var post_max_size = parseInt(Global.urls.post_max_size);
            var upload_max_filesize = parseInt(Global.urls.upload_max_filesize);
            if(post_max_size <  parseInt(evt.target.files[0].size)){
                Message.show([{'type':'error',
                        'message':'File size {s1} bytes exceeds the maximum size of {s2} bytes to POST request',
                        params: {'s1': evt.target.files[0].size, 's2': upload_max_filesize}}],
                    true);
                return;
            }
            if(upload_max_filesize <  parseInt(evt.target.files[0].size)){
                Message.show([{'type':'error',
                        'message':'File size {s1} bytes exceeds the maximum allowable size, amounting to {s2} bytes',
                        params: {'s1': evt.target.files[0].size, 's2': upload_max_filesize}}],
                    true);
                return;
            }


            $.ajax({
                url: Global.urls.url_upload_file,
                data: form_data,
                processData: false, type: "POST", dataType: 'json',
                contentType: false,
                timeout: 0,
                beforeSend: function() {
                    intervalID = setInterval(function(){getUploadStatus(status)}, 300);
                    $('.upload-status').show();
                    $('.upload-section').hide(); // new line
                    $('.upload-status .upload-filename').text(evt.target.files[0].name);
                },
                complete : function(){
                    clearInterval(intervalID);
                },
                success: function(data){
                    if(data.status == false){
                        modalDialog.hide();
                        Message.show(data.messages, false);
                    } else {
                        var modelEditView,
                            $target = $('.download_target'),
                            $ev = $target.closest('.edit-view');

                        $('.download_target').append(data.view);
                        $('.download_target').removeClass('download_target');

                        status.width('100%');
                        setTimeout(function() {
                            modalDialog.hide();
                        }, 500);
                    }
                },
                error: function(){
                    clearInterval(intervalID);
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                }
            });
        }



        // upload activity file
        function handleFileSelectActivity(evt) {
            var status = $('.upload-status .progress-bar');
            var intervalID;
            status.width('0%');
            var _this = this;
            var form_data = new FormData();
            form_data.append(Global.urls.session_upload_progress_name, 'test');
            form_data.append("file", evt.target.files[0]);
            form_data.append("thumb_scenario", "activity");
            form_data.append("file_type", "activity");
            form_data.append("get_view", "1");
            form_data.append("copy_id", $(_this).data('copy_id'));

            var post_max_size = parseInt(Global.urls.post_max_size);
            var upload_max_filesize = parseInt(Global.urls.upload_max_filesize);
            if(post_max_size <  parseInt(evt.target.files[0].size)){
                Message.show([{'type':'error',
                        'message':'File size {s1} bytes exceeds the maximum size of {s2} bytes to POST request',
                        params: {'s1': evt.target.files[0].size, 's2': upload_max_filesize}}],
                    true);
                return;
            }
            if(upload_max_filesize <  parseInt(evt.target.files[0].size)){
                Message.show([{'type':'error',
                        'message':'File size {s1} bytes exceeds the maximum allowable size, amounting to {s2} bytes',
                        params: {'s1': evt.target.files[0].size, 's2': upload_max_filesize}}],
                    true);
                return;
            }


            $.ajax({
                url: Global.urls.url_upload_file,
                data: form_data,
                processData: false, type: "POST", dataType: 'json',
                contentType: false,
                timeout: 0,
                beforeSend: function() {
                    intervalID = setInterval(function(){getUploadStatus(status)}, 300);
                    $('.upload-status').show();
                    $('.upload-section').hide(); // new line
                    $('.upload-status .upload-filename').text(evt.target.files[0].name);
                },
                complete : function(){
                    clearInterval(intervalID);
                },
                success: function(data){
                    if(data.status == false){
                        modalDialog.hide();
                        Message.show(data.messages, false);
                    } else {
                        var modelEditView,
                            $target = $('.download_target'),
                            $ev = $target.closest('.edit-view');

                        if (!$target.closest('.element[data-type_comment="email"]').length) {
                            modelEditView = $ev.data();

                            if (modelEditView) {
                                modelEditView['activity_context'] = $ev.find('form .emoji-wysiwyg-editor').html();
                            }
                        }

                        $('.download_target').append(data.view);
                        $('.download_target').removeClass('download_target');
                        niceScrollInit();
                        status.width('100%');
                        EditView.activityMessages.sendUploadMassage($target);
                        setTimeout(function() {
                            modalDialog.hide();
                            imagePreview();
                            EditView.activityMessages.activityImagesNoRedact();
                        }, 500);
                        setCheckboxHeight();
                    }
                },
                error: function(){
                    clearInterval(intervalID);
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                }
            });
        }






        // upload Attachments file
        function handleFileSelectAttachments(evt) {
            var status = $('.upload-status .progress-bar');
            var intervalID;
            status.width('0%');
            var _this = this;

            var form_data = new FormData();
            form_data.append(Global.urls.session_upload_progress_name, 'test');
            form_data.append("file", evt.target.files[0]);
            form_data.append("thumb_scenario", "attachments");
            form_data.append("file_type", "attachments");
            form_data.append("get_view", "1");
            form_data.append("copy_id", $(_this).data('copy_id'));

            var post_max_size = parseInt(Global.urls.post_max_size);
            var upload_max_filesize = parseInt(Global.urls.upload_max_filesize);
            if(post_max_size <  parseInt(evt.target.files[0].size)){
                Message.show([{'type':'error',
                        'message':'File size {s1} bytes exceeds the maximum size of {s2} bytes to POST request',
                        params: {'s1': evt.target.files[0].size, 's2': upload_max_filesize}}],
                    true);
                return;
            }
            if(upload_max_filesize <  parseInt(evt.target.files[0].size)){
                Message.show([{'type':'error',
                        'message':'File size {s1} bytes exceeds the maximum allowable size, amounting to {s2} bytes',
                        params: {'s1': evt.target.files[0].size, 's2': upload_max_filesize}}],
                    true);
                return;
            }

            $.ajax({
                url: Global.urls.url_upload_file,
                data: form_data,
                processData: false, type: "POST", dataType: 'json',
                contentType: false,
                timeout: 0,
                beforeSend: function() {
                    intervalID = setInterval(function(){getUploadStatus(status)}, 300);
                    $('.upload-status').show();
                    $('.upload-section').hide(); // new line
                    $('.upload-status .upload-filename').text(evt.target.files[0].name);
                },
                complete : function(){
                    clearInterval(intervalID);
                },
                success: function(data){
                    if(data.status == false){
                        modalDialog.hide();
                        Message.show(data.messages, false);
                    } else {
                        var files_block = $('.download_target');

                        files_block.prepend(data.view);
                        files_block.closest('.task_comments').find('.btn.send_massage_activity').show('fast');
                        files_block.removeClass('download_target');

                        if (files_block.find('[data-type="attachments"]').length) {
                            files_block.find('.file_is_empty').hide();
                        }

                        imagePreview();
                        niceScrollInit();
                        status.width('100%');
                        setTimeout(function() {
                            modalDialog.hide();
                        }, 500);
                        setCheckboxHeight();
                    }
                },
                error: function(){
                    clearInterval(intervalID);
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                }
            });
        }






        // end of uploading files
        $(document).on('click', '.preview-file-remove', function(){
            Message.show([{'type':'confirm', 'message': Message.translate_local('Remove image')+ '?'}], false, function(_this_c){
                if($(_this_c).hasClass('yes-button')){
                    modalDialog.hide();

                    Global.Files.fileDelete($(this).data('id'), null, function(data){
                        if(data.status == false){
                            Message.show(data.messages, false);
                        } else {
                            document.location.reload();
                        }
                    });
                }
            }, Message.TYPE_DIALOG_CONFIRM);
        });


        $(document).on('click', '.edit-view .fa-chevron-up', function(){
            EditView.textRedLine();
            jScrollRemove();
            jScrollInit();
            EditView.textRedLine();
        });

        $(document).on('change','.edit-view.in input[type="text"].form-control', function(){
            EditView.setModifier(true);
        });
        $(document).on('click','.edit-view.in input[type="checkbox"], .edit-view.in .operations a', function(){
            EditView.setModifier(true);
        });

        $(document).on('dragenter', 'div.edit-view .element[data-type="block_activity"], div.edit-view .element[data-type="attachments"]', function(){
            var _this = this,
                ev = $(_this).closest('.edit-view').data();

            $('.download_target').removeClass('download_target');
            var block_activity = $(_this).closest('.panel').closest('.panel-body').find('.element[data-type="block_activity"]');

            if (block_activity.length) {
                block_activity.find('.task_comments .task_message .element[data-type="block_attachments"]').addClass('download_target');
                $('.upload-status .progress-bar').width('0%');
                $('.upload-section').show();
                modalDialog.show('<div class="modal-dialog upload-modal">' +  $('#upload_template').html() + '</div>');
                $('#files').data('copy_id', ev.copy_id);
                document.getElementById('files').addEventListener('change', handleFileSelectActivity, false);
            } else {
                var block_attachments = $(_this).closest('[data-type="attachments"]');

                if (block_attachments.length) {
                    block_attachments.addClass('download_target');

                    $('.upload-status .progress-bar').width('0%');
                    $('.upload-section').show();
                    modalDialog.show('<div class="modal-dialog upload-modal">' + $('#upload_template').html() + '</div>');
                    $('#files').data('copy_id', ev.copy_id);

                    document.getElementById('files').addEventListener('change', handleFileSelectAttachments, false);
                }
            }
        });

        $(document).on('keydown', function(e){
            if (e.ctrlKey && e.altKey && e.which == 86 && e.type == 'keydown') {
                if ($('div.edit-view .element[data-type="block_activity"]').length){
                    var _this = $('div.edit-view .element[data-type="block_activity"]');
                } else {
                    var _this = $('div.edit-view .element[data-type="attachments"]');
                }
                var modelEditView = $(_this).closest('.edit-view').data();

                $('.download_target').removeClass('download_target');
                var block_activity = $(_this).closest('.panel').closest('.panel-body').find('.element[data-type="block_activity"]');
                if (block_activity.length) {
                    block_activity.find('.task_comments>.task_message .element[data-type="block_attachments"]').addClass('download_target');
                    $('.upload-status .progress-bar').width('0%');
                    $('.upload-section').show();
                    modalDialog.show('<div class="modal-dialog upload-modal">' +  $('#upload_template').html() + '</div>');
                    $('#files').data('copy_id', modelEditView['copy_id']);
                    document.getElementById('files').addEventListener('change', handleFileSelectActivity, false);
                } else {
                    var block_attachments = $(_this).closest('[data-type="attachments"]');

                    if (block_attachments.length) {
                        block_attachments.addClass('download_target');

                        $('.upload-status .progress-bar').width('0%');
                        $('.upload-section').show();
                        modalDialog.show('<div class="modal-dialog upload-modal">' + $('#upload_template').html() + '</div>');
                        $('#files').data('copy_id', modelEditView['copy_id']);

                        document.getElementById('files').addEventListener('change', handleFileSelectAttachments, false);
                    }
                }
            }
        });

        $(document).on('click', '.edit-view.in ul.selectpicker', function(){
            var column = $(this).closest('.column');
            EditView.setModifier(true);
            if (!column.find('.errorMessage').length || !$(this).closest('.edit-view').data('submitted')) { return; }

            var selected = column.find('li.selected');

            if (column.is('.b_error') && selected.index()) {
                column.removeClass('b_error').find('.errorMessage').hide();
            } else {
                if (!selected.index()) {
                    column.addClass('b_error').find('.errorMessage').show();
                }
            }
        });

        $(document).on('hover', '.message_field .emoji-menu a img', function(){
            $emojiFrom = $(this);
            $emojiTo = $(this).parent().parent().next();
            $emojiTo.css('background-image', 'url('+$emojiFrom.attr('src')+')');
            $emojiTo.find('span').html($emojiFrom.attr('alt'));
        });

        //change color on end-date
        $(document).on('change', '.buttons-block .element[data-type="button"] label input[type="button"]',function () {
            var todayDate = new Date();
            var endDate = $(this).datepicker("getDate");
            if (todayDate.getFullYear() < endDate.getFullYear()) {
                $(this).parent().attr('datetime','');
            } else if (todayDate.getMonth()+1 < endDate.getMonth()+1) {
                $(this).parent().attr('datetime','');
            } else if (todayDate.getDate() <= endDate.getDate()) {
                $(this).parent().attr('datetime','');
            } else {
                $(this).attr('datetime','red');
            }
        });

        //change color on end-date
        //  $(document).on('change', '.buttons-block .element[data-type="button"] label input[type="button"]',function () {
        //      var $this = $(this),
        //          endDate = $this.datetimepicker("getDate"),
        //          $parent = $this.parent(),
        //          currentDate = moment($this.val()).format(crmParams.getCurrentFormatDate());
        //
        //      if (moment().diff(endDate, 'minutes') > 0) {
        //          $parent.attr('datetime','red');
        //      } else {
        //          $parent.attr('datetime','');
        //      }
        //
        //      $this.datetimepicker('hide');
        //      $this.val(moment(currentDate, crmParams.getCurrentFormatDate()).format(crmParams.FORMAT_DATE));
        //      $this.next().text(currentDate);
        //  });

        $('body').on('click', '.fa-arrow-circle-up', function(){
            $('.task_comments').on('click', '.list-view-avatar', function(){$('a.emoji-button').on('click', function(){$(this).solar();});});
        });

        $('body').on('click', '.edit-view .bootstrap-select, .list-view-panel #list-table_wrapper .bootstrap-select', function(){
            var viewType,
                $this = $(this);

            if ($this.find('ul.dropdown-menu li').length > 8 && !$this.is('.open')){
                var event = 'shown.bs.dropdown';

                viewType = $('.edit-view').length ? Constant.VIEW_TYPE_EDIT_VIEW : Constant.VIEW_TYPE_LIST_VIEW;

                $this.find('ul.dropdown-menu').css('min-width',$this.width()+'px');
                $this.find('div.dropdown-menu').addClass('padded h-auto');

                $this.off(event).on(event, function() {
                    var config,
                        $scroll = $(this).find('ul.dropdown-menu');

                    $scroll.getNiceScroll().remove();

                    if (Global.browser.isIOS()) {
                        $this.find('.dropdown-backdrop').remove();
                    }
                    DropDownListObj
                        .setViewType(viewType)
                        .setElement($this)
                        .agreeIsScroll($this.find('ul.dropdown-menu'), function (data) {
                            $this.find('ul.dropdown-menu').height(data.max_height);
                            $this.find('div.dropdown-menu').height(data.max_height);

                            config = {
                                cursorcolor: "#1FB5AD",
                                cursorborder: "0px solid #fff",
                                cursorborderradius: "0px",
                                cursorwidth: "3px",
                                railalign: 'right',
                                preservenativescrolling: false,
                                horizrailenabled:false,
                                autohidemode: false
                            }
                            niceScrollCreate($scroll, config);
                        });
                });
            } else {
                // scroll not need
                $this.find('div.dropdown-menu').css('min-height', 0);
            }
        });
    });


    for(var key in _private) {
        _self[key] = _private[key];
    }

    exports.instanceEditView = instanceEditView;
    exports.EditViewContainer = EditViewContainer;
    exports.EditView = EditView;
})(window);


;(function (exports) {
    var _private, _public,
        _self = {
            mousedown: function (event) {
                //console.log('resize mousedown - start');
                start = $(this);
                startResizeColumn = true;
                startX = event.pageX;
                startWidth = $(this).width();
                $(start).addClass("resizing");
            }
        };

    var pressed = false;
    var startX, startWidth, realWidth;

    _private = {};

    _public = {
        model: null,

        setModel: function(json) {
            this.model = json || {};
        },

        constructor: function () {
            this.events();

            return this;
        },
        collectJSON: function($table) {
            var json = {
                copy_id: 'listView_'+this.model.copy_id,
                value: {}
            };

            $.each($table.find('thead th[data-name]'), function (index, value) {
                var $this = $(this);
                json.value[$this.data().name] = parseInt($this.css('padding-left'))+$this.width() + parseInt($this.css('padding-right'));
            })

            return json;
        },
        saveData: function(data) {
            Api.history
                .createInstance()
                .setKey("list_th_width")
                .setCopyId(data.copy_id)
                .setData(data.value)
                .setUserStorage();
        },
        events: function () {
            this._events = [
                //{ parent: document,  event: 'click', func: _self.mousemove}, // save text by click on "Save"
                {
                    parent: document,
                    selector: 'table th',
                    event: 'mousedown',
                    func: _self.mousedown
                }
            ];

            this.addEvents(this._events, {
                instance: this
            });

            return this;
        },
    };

    $(document).mousemove(function (e) {
        if (startResizeColumn) {
            if (e.pageX > startX) {
                realWidth = startWidth + (e.pageX - startX);
            } else {
                realWidth = startWidth - (startX - e.pageX);
            }

            //console.log('realWidth', realWidth);
            // console.log('e.pageX', e.pageX);
            //$(start).width(startWidth + (e.pageX - startX));
            $(start).find('.table-handle').width(realWidth);
        }
    });

    $(document).mouseup(function () {
        if (startResizeColumn) {
            $(start).removeClass("resizing");
            startResizeColumn = false;

            TableColumnResize.updateColumnWidth($(start).closest('#list-table'));
        }
    });

    var TableColumnResize = {
        createInstance: function () {
            var Obj = function () {
                for (var key in _public) {
                    this[key] = _public[key];
                }
            }

            Obj.prototype = Object.create(Global);

            return _self._instance = new Obj().constructor();
        },
        updateColumnWidth: function($parent){
            var json = _self._instance.collectJSON($parent || $('#list-table:visible'));
            _self._instance.saveData(json);

            niceScroll.clear();
            niceScrollInit();
        },
    }

    exports.TableColumnResize = TableColumnResize;
})(window);
/**
 * checkbox height dummycode and niceScroll reinit
 */

;(function (exports) {
    var _private, _public, ModelListView,
        _self = {};

    ModelListView = {
        type: 'list-view',
        instance: null,
        setInstance: function (instance) {
            this.instance = instance;

            return this;
        },
        removeItem: function (e) {
            var $target = $(e.target),
                _this = this,
                _data = [];

            if($('.sm_extension_data input:checked').length == 0){
                Message.show([{'type':'error', 'message': 'It should be noted entries'}], true);
                return;
            }

            var _function = function(){
                $('.sm_extension_data input:checked').each(function(i, ul){
                    _data.push($(ul).closest('.sm_extension_data').data('id'));
                });

                _data = {
                    'id': _data,
                    'this_template': $target.closest('.list_view_block.sm_extension, .process_view_block.sm_extension').data('this_template'),
                }

                Global.getModel().removeData({
                    copy_id: $target.closest('.sm_extension').data('copy_id'),
                    data: _data
                },
                    function (data) {
                        if(data.status){
                            if(!data.messages){
                                instanceGlobal.contentReload
                                    .prepareVariablesToGeneralContent()
                                    .run();
                            } else {
                                Message.show(data.messages, false, function(){
                                    instanceGlobal.contentReload
                                        .prepareVariablesToGeneralContent()
                                        .run();
                                });
                            }
                        } else {
                            Message.show(data.messages, false);
                        }

                        HeaderNotice.refreshAllHeaderNotices();
                        QuickViewPanel.updateContent();
                    }
                )
            }

            Message
                .createInstance()
                .setHandlerAsConfirmAgree(function () {
                    modalDialog.hide();
                    _this.instance.showPreloader(true);

                    var time = setTimeout(function() {
                        clearTimeout(time);
                        _function();
                    }, 100);
                })
                .show([{'type':'confirm', 'message': Message.translate_local('Delete selected entries') + '?'}], false, null, Message.TYPE_DIALOG_CONFIRM);
        },
        copyItem: function(e){
            var $target = $(e.target),
                _this = this,
                params = [];

            if($('.sm_extension_data input:checked').length == 0){
                Message.show([{'type':'error', 'message': 'It should be noted entries'}], true);
                return;
            } else {
                $('.sm_extension_data input:checked').each(function(i, ul){
                    params.push($(ul).closest('.sm_extension_data').data('id'));
                });
            }

            this.instance.getPreloader().show();

            params = {
                'id' : params,
                'pci' : $('.list_view_block.sm_extension, .process_view_block.sm_extension').data('parent_copy_id'),
                'pdi' : $('.list_view_block.sm_extension, .process_view_block.sm_extension').data('parent_data_id'),
                'this_template' : $('.list_view_block.sm_extension, .process_view_block.sm_extension').data('this_template'),
            }

            Global.getModel().copyData({
                copy_id: $target.closest('.sm_extension').data('copy_id'),
                data: params
            }, function (data) {
                    if(data.status){
                        var instanceContent = ContentReload.createInstance();

                        iPreloader.implements.call(instanceContent);
                        Global.getInstance().setContentReloadInstance(instanceContent); // подовження роботи

                        instanceContent
                            .reDefinition()
                            .setPreloader(_this.instance.getPreloader())
                            .prepareVariablesToGeneralContent()
                            .run();
                    } else {
                        Message.show(data.messages, false);
                    }
            });
        },
        getItem: function() {
            return $('.list_view_block');
        }
    };

    var TableResize = {
        sync: function ($table) {
            //instance LV
            var $list;

            if ($table) {
                $list = $table.find('thead th');
            }

            var $ripList = $('.JCLRgrips .JCLRgrip');

            $list.filter(function (index) {
                var $item = $list.eq(index);
                var dgi = $item.attr('data-group_index');
                var $ripItem = $ripList.eq(index);

                if ($item.css('display') == 'none') {
                    $ripItem.hide();
                } else {
                    $ripItem.show();
                }

                $ripItem
                    .data('group_index', dgi)
                    .attr('group_index', dgi);
            });


            console.log('colResize sync');
        },
        send: function () {

        }
    }

    _private = {
        data_name_object: 'ModelListView',

        onClickAddCard : function() {
            Global.getInstance().addCard(this, null, null);
        },
        onFileRemove : function(){
            var _this = this,
                $this = $(this),
                activity = $this.closest('.file-block[data-type="activity"]');

            if(activity.length > 0) return;

            Global.Files.fileDelete($this.closest('.file-block').find('.upload_file').val(), false, function(data){
                if(data.status == false){
                    Message.show(data.messages, false);
                } else {
                    var files_block = $this.closest('.files-block'),
                        $container = $this.closest($this.closest('.edit-view').length ? '.file-block' : 'td');

                    $container.removeClass('content-image');
                    $container.find('.upload_link').removeClass('hide');

                    if($(_this).closest('.file-box').find('.column').length > 1){
                        $(_this).closest('.column').empty();
                    } else {
                        var generate_link = $(_this).closest('.upload-result').find('.image-preview').data('parent_id');
                        $(_this).closest('.upload-result').parent().find('.list_view_btn-generate_edit').hide();
                        $(_this).closest('.second-row').removeClass('linkMore2');
                        if(!!generate_link) {
                            $(_this).closest('.upload-result').addClass('generate_only');
                            $(_this).closest('.upload-result').parent().find('.upload_link').show();
                        }else {
                            $(_this).closest('.upload-result')
                                .find('.thumb').attr('src', '').attr('title', '')
                                .end().hide()
                                .parent().find('.upload_file').val('')
                                .parent().find('.upload_link').show();
                        }
                        $(_this).closest('.file-block').find('.errorMessage').text('');
                        $('.list-view-panel .crm-table-wrapper').getNiceScroll().remove();
                        niceScrollInit();
                        setCheckboxHeight();
                    }
                    if (!files_block.find('.file-box .upload-result:visible').length) {
                        files_block.find('.file_is_empty').show();
                    }
                }
            });
        },
        onClickTableCell : function(e){
            if(!inLineEdit.elements){
                return;
            }

            var $target = $(e.target);

            if(!$target.hasClass('data_edit') || $target.data('exit') || $target.closest('tr').is('.lot-edit')
                || instanceLotEdit && instanceLotEdit.status) {
                $target.removeData('exit');
                return true;
            }

            var trLotEdit = $('.lot-edit.editing'),
                _this = this,
                $this = $(_this),
                $row = $target.closest('tr'),
                $editingRow = $this.closest('tbody').find('>tr.editing');

            if (trLotEdit.length) {
                trLotEdit.hide();
                trLotEdit.find('input[type="text"]').removeClass('color-red').removeClass('color-green'); // TODO: delete class colors
                $('[type="checkbox"]').prop('checked', false);
                inLineEdit.removeClassEditing($('#list-table'));
            };

            if (!$this.closest('tr').is('.editing')) {
                $row.addClass('pre-editing');
            }

            in_lite_lw = _this;
            // если редактируем строку
            if(inLineEdit.isEditing($this.closest('#list-table')) == true){
                inLineEdit.save($editingRow, function(data){
                    if(data.status == true){
                        if($this.closest('tr.editing').length == 0){
                            inLineEdit.edit(_this);
                        } else{
                            inLineEdit.removeClassEditing($this.closest('#list-table'));
                        }
                    }
                });
            } else {
                inLineEdit.edit(_this);
            }

            setCheckboxHeight($this.closest('tr'));
            niceScroll.clear();
            niceScrollInit();
        },
        onClickTableLink : function (e) {
            $(e.target).closest('td').data('exit', true);
        },
        onRemoveItem: function (e) {
            var instance = e.data.instance;
            instance.getModel().removeItem(e);
        },
        onCopyItem: function (e) {
            var instance = e.data.instance;
            instance
                .getModel()
                .setInstance(instance)
                .copyItem(e);
        }
};

    _public = {
        _interface: 'ListView',
        _instance: null,

        reDefinition: function () {
            var _this = this;

            this.search.apply = function () {
                var url = this.getFullUrl(),
                    contentInstance = ContentReload.createInstance();

                iPreloader.implements.call(contentInstance);

                Global.getInstance().setContentReloadInstance(contentInstance);

                contentInstance
                    .reDefinition()
                    .clear()
                    .setPreloader(_this.preloader)
                    .prepareVariablesToGeneralContent()
                    .setUrl(url)
                    .run();
            };
            this.search.showPreloader = function () {
                _this.showPreloaderTemplate.call(_this.preloader);
                return this;
            };

            this.afterLoadView = function () {
                $('#container').removeClass('hide-nice-scroll');

                ViewType.afterLoadView();

                return this;
            }

            return this;
        },
        constructor: function () {
            var _this = this;

            iModule.implements.call(this);
            iPreloader.implements.call(this);

            this.createModel();

            this.events()
                .allMethod()
                .styling()
                .scrollOfHorizontale();

            this.setPreloader(Preloader.createInstance());

            this.showPreloaderTemplate = function () {
                NiceScroll.clear($('.list_view_block .crm-table-wrapper'));
                $('body').addClass('hide-edit-view');

                var where = Preloader.POSITION_SPINNER_CONTENT;

                if ($('[data-type="left_menu"]').is(':visible')) {
                    where = Preloader.POSITION_SPINNER_WINDOW;
                }

                this.setRunning(false)
                    .setSpinnerPosition(where)
                    .setElement('body', ['hide-edit-view'])
                    .setAddClass('#container', 'hide-nice-scroll')
                    .setWhereContentHide(Preloader.TYPE_RELOAD_TABLE_CONTENT)
                    // .setCssPositionSpinner(Preloader.css.FIXED)
                    .setPlaceForSpinner($('.list-view-panel .adv-table'))
                    .run();
            };

            this.preloader.showPreloader = this.preloader.show = function () {
                if (!this.isRunning()) {
                    _this.showPreloaderTemplate.call(_this.preloader);
                }
                return this;
            };

            imagePreview();

            return this;
        },
        events : function () {
            this._events = [
                { parent: document, selector: '.file-remove', event: 'click', func: _self.onFileRemove}, // save text by click on "Save"
                { parent: document, selector: '#list-table .data_edit .text a', event: 'click', func: _self.onClickTableLink},
                { parent: document, selector: '#list-table > tbody > tr > td', event: 'click', func: _self.onClickTableCell},
                { parent: document, selector: '.list_view_block .edit_view_dnt-add', event: 'click', func: _self.onClickAddCard},
                { parent: document, selector: '.list_view_btn-delete', event: 'click', func: _self.onRemoveItem},
                { parent: document, selector: '.list_view_btn-copy', event: 'click', func: _self.onCopyItem}
            ];

            this.addEvents(this._events, {
                instance : this
            });

            return this;
        },
        run: function () {
            //Костиль
            var subInstance = Global.getInstance().getSubInstance();
            if (subInstance && subInstance.search) {
                this.search = subInstance.search;
            } else {
                this.search = Search.createInstance();
            }

            this.filter = Filter.createInstance();

            this.reDefinition()
                .setEmits();

            ViewType.init(this);
            return this;
        },
        getItem: function () {

        },
        colResizable: function () {
            // var iteration = [];
            // var $item = this.getModel().getItem();
            // var $table = $item.find(".list-table").addClass('size-table');
            //
            // var onResized = function(e){
            //     var table = $(e.currentTarget); //reference to the resized table
            //     debugger;
            //     iteration = [];
            //     //$table
            // };
            // console.log('colResize Install');
            // var onDrag = function (e) {
            //     iteration.push(e);
            // }
            //
            // $table.colResizable({
            //     liveDrag: true,
            //     resizeMode: 'fit', // 'flex' || 'fit' || 'overflow'
            //     gripInnerHtml: "<div class='grip'></div>",
            //     draggingClass: "dragging",
            //     minWidth: 100,
            //     onDrag: onDrag,
            //     onResize: onResized
            // });
            //
            // TableResize.sync($table);

            return this;
        },
        setEmits: function () {
            var _this = this;

            Events
                .createInstance()
                .setType(Events.TYPE_EVENT_RESIZE)
                .setKey('ListViewResize')
                .setHandler(function () {
                    var instance = Preloader.getInstance();

                    if (!instance || !instance.isRunning()) {
                        _this.changeShadow();
                    }

                    _this.editLinkreDraw();
                    setCheckboxHeight();

                    poliDot();

                    return true;
                })
                .run();

            return this;
        },
        destroy : function () {
            Global.removeEvents(this._events);
            _self._instance = null;
            this.filter = null;
            this.search = null;

            Events.removeHandler({ key: 'ListViewResize', type: Events.TYPE_EVENT_RESIZE});

            return null;
        }
    };

    var ListView = {
        _type: 'ListView',

        getInstance : function(status){
            if (!_self._instance && status) {
                _self._instance = this.createInstance();
            }

            return _self._instance;
        },
        getModel: function () {
            var model = $('.list_view_block').data(_self.data_name_object);

            return model ? model.setInstance(this) : null;
        },
        createModel: function () {
            var model = Object.create(ModelGlobal.protected);

            for(var key in ModelListView) {
                model[key] = ModelListView[key];
            }

            $('.list_view_block').data(_self.data_name_object, model);
            return model;
        },
        createInstance : function(){
            var Obj = function(){
                for(var key in ListView){
                    this[key] = ListView[key];
                }
                for(var key in _public){
                    this[key] = _public[key];
                }
            }

            Obj.prototype = Object.create(Global);

            return _self._instance = new Obj().constructor();
        },
        isVisible : function() {
            return $('.list_view_block').length ? true : false;
        },
        //Конструктор
        constructorReLoad: function () {
            var contentReload,
                instance = Global.getInstance(true);

            contentReload = instance.getContentReloadInstance();
            var object = contentReload || {},
                reloadPage;

            //F5 перегрузка страницы
            if (!Object.keys(object).length) {
                reloadPage = true;
            }

            object.afterLoadView = function () {
                var instance = ListView.createInstance();

                instance
                    .setCopyId(Number(Url.getCopyId(location.pathname)))
                    .run()

                Global.getInstance().setSubInstance(instance);

                ListViewDisplay
                    .setThis(null)
                    .setIndex()
                    .setHiddenGroupIndex(this);

                //instance.colResizable();

                ListView.updateSDMField();
                var $images = $('.image-preview.name .size60px');
                if ($images.length) {
                    $images.on('load', function(){
                        setCheckboxHeight();
                    });
                } else setCheckboxHeight();
            }

            if (reloadPage) {
                object.afterLoadView();
            }


            return this;
        },
        getScrollLeft: function () {
          return $('.list-view-panel .crm-table-wrapper').scrollLeft();
        },

        editLinkreDraw : function () {
            var r,
                $list = $('.list-view-panel .pencil~.lessening');

            $.each($list.first(), function () {
                var $this = $(this),
                    $pencil = $this.prev(),
                    $cell = $this.closest('td');

                r = $cell.width() - 17 - $pencil.width();

            });

            $list.css('max-width', r ? r : '100%');

            return this;
        },
        scrollPulledLeft : function(listTablePos, settingsTablePos) {
            var $table = $('.first-cell-visible');

            if ($table.length ) {
                var tablePos = ($('#list-table').length == 1) ? listTablePos : settingsTablePos,
                    $visibleCell = $table.find('.visible-cell'),
                    offsetLeft = $table.offset().left;

                if ( offsetLeft < tablePos ) {
                    $visibleCell.addClass('with-shadow');
                } else {
                    $visibleCell.removeClass('with-shadow');
                }
            }

            return this;
        },
        allMethod : function () {
            var eventPath;

            if ($('table.crm-table').length) {
                window.tableInterval = setInterval(function () {
                    if (!ListView.getInstance()) {
                        clearInterval(window.tableInterval)
                    } else Global.updateTab()
                }, 100);

                window.generalUpdateTime = setTimeout(function (){
                    clearTimeout(window.generalUpdateTime);
                    if ($('.crm-table-wrapper').length) {
                        shadowEnd();
                    }
                }, 100);
            }

            var data = {
                //copy_id: Url.getId(location.href)
                copy_id: $('.list_view_block.sm_extension').data('copy_id')
            };

            TableColumnResize
                .createInstance()
                .setModel(data);

            /* Drag table columns*/
            $('#list-table').dragtable({
                dragaccept: '.draggable',
                clickDelay: 200,
                persistState: function(table) {
                    ListViewPosition
                        .setThis(table.el)
                        .prepare()
                        .writeLocalStorage();

                    table.el.find('th').each(function(i) {
                        if(this.id != '') {
                            table.sortOrder[this.id] = i;
                        }
                    });
                    if (!$('.reports-det-table').length>0) {
                        setTableOrder(JSON.stringify(table.sortOrder));
                    }
                    $('.dragtable-wrapper').remove();



                },
                restoreState: function(table) {
                    if (!$('.reports-det-table').length>0) {
                        getTableOrder();
                    }
                }
            });

            return this;
        },
        styling : function () {
            this.hasScrollBar();
            this.scrollPulledLeft($('#list-table_wrapper').length ? $('#list-table_wrapper').offset().left : 0, $('#settings-table_wrapper').length ? $('#settings-table_wrapper').offset().left : 0);

            this.nice_scroll = NiceScroll.createInstance(); //.setContainer(this._container);

            this.nice_scroll
                .fullClear()
                .setPosition(true)
                .setElement($('.list_view_block .crm-table-wrapper'))
                .init();

            setCheckboxHeight();

            return this;
        },
        hasScrollBar : function() {
            var $cell = $('.visible-cell');

            if ($('.crm-table').width() > $('.crm-table-wrapper').width()) {
                $cell.addClass('with-shadow');
            } else {
                $cell.removeClass('with-shadow');
            }

            return this;
        },
        scrollOfHorizontale : function () {
            var _this = this;

            $('.crm-table-wrapper').scroll(function(event) {
                event.stopPropagation();
                event.preventDefault();
                _this.scrollPulledLeft($('#list-table_wrapper').length ? $('#list-table_wrapper').offset().left : 0, $('#settings-table_wrapper').length ? $('#settings-table_wrapper').offset().left : 0);
                shadowEnd();
            });

            return this;
        },
        updateSDMField : function () {
            $('.list-view-panel [data-controller="sdm"]').not(":has(.list-view-avatar)").addClass('is-not-avatar');

            return this;
        },
        createLinkByLV: function($list) {
            $list = $list || $('.list-view-panel .crm-table tbody tr');

            $.each($list, function () {
                var _this = $(this),
                    elements = [],
                    field = _this.find('.element_data[data-name]');

                $.each(field,function (key,val) { // Get type of field
                    val = $(val);
                    var object = inLineEdit.getType(val.data('name'));

                    if (object && object['type'] == 'string' && val.data('value')) {
                        elements.push(val);
                    }
                });

                $.each(elements, function(key, val) {
                    if (val.parent().is('a')) {
                        return;
                    }

                    var data = val.closest('.data_edit'),
                        context = val.clone(),
                        reg = /(www\.\w*\.[\w]*)|((htt)\w+[:]\/\/([\w:\/_.?=&%+#A-Z-\[\]+;\,{}]*))/igm,
                        value = val.data('value').toString();

                    if (value.indexOf('http')>-1) {
                        var url = !~value.indexOf('http') ? 'http://'+value : value;
                        value = '<a href='+url+' target="_blank">' + value +'</a>';
                    } else {
                        if (value.indexOf('@') > -1) {
                            value = '<a href="mailto:' + value + '">' + value + '</a>';
                        } else {
                            value = value.replace(reg, function(s){
                                return "<a href='http://" + s + "' target='_blank'>" + s +"</a>";
                            });
                        }
                    }
                    data.find('.text[data-name="'+context.data('name')+'"]').html(value);
                });
            });

            return this;
        },
        changeShadow : function() {
            //тенюшка для таблицы при скроллинге
            var $wrapper = $('.list-view-panel .crm-table-wrapper');

            if ( $wrapper.length && $wrapper.width() < $('.first-cell-visible').width()) {
                var offsetLeft, offsetTop;

                $wrapper.find('.table-shadow').remove()
                $wrapper.append('<div class="table-shadow"></div>');

                offsetLeft = $wrapper.position().left;
                offsetTop = $wrapper.position().top;

                $wrapper.find('.table-shadow').css({
                    'left': offsetLeft + ($wrapper.width() - 2),
                    'top': offsetTop ,
                    'height' : $wrapper.height() - 6
                });
            }  else {
                $wrapper.find('.table-shadow').remove();
            }
        },
        destroy: function () {
            return _self._instance ? _self._instance.destroy() : null;;
        }
    }
    //
    // for(var key in _public) {
    //     ListView[key] = _public[key];
    // }

    for(var key in ListView) {
        _self[key] = ListView[key];
    }

    for(var key in _private) {
        _self[key] = _private[key];
    }

    exports.ListView = ListView;
})(window);


var setCheckboxHeight = function($element) {
    var $header, $list,
        $table = $('.first-cell-visible');

    $list = $element || $table.find('tbody tr');

    $.each($list, function() {
        var $this = $(this),
            offset = 0,
            offsetHeight = 1,
            maxHeight = $this.height(),
            margins = Math.round(maxHeight / 2),
            $checkbox = $this.find('.visible-cell');

        if ($this.is('.editing')) {
            offset = 1;
            offsetHeight = -1;
        };

        $checkbox
            .css({
                height: maxHeight + offsetHeight,
                'margin-top': -margins + offset,
                'z-index': 1
            })
            .find('.checkbox').css('margin-top', margins - 10);

        if ($this.hasClass('editing')) {
            var remainder = maxHeight % 2,
                trPrev = $this.closest('table').find('tr.sm_extension_data').eq($this.index()).prev();

            if (trPrev.length) {
                trPrev.find('td:first span.visible-cell').css('height', trPrev.height()+1);
            }

            if (remainder) {
                margins = Math.round((maxHeight-1) / 2);
                $checkbox.css({
                    height: maxHeight-1,
                    'margin-top': -margins,
                    'z-index': 1
                })
            }
        }
    });
    $table.find('input[type="checkbox"]').prop('disabled', false);

    $header = $table.find('thead th');
    $header.first().find('span.visible-cell').css({
        height: $header.parent().height()+1,
        'margin-top': Math.floor(-$header.parent().height()/2),
        'z-index': 1
    });


    if ($('.crm-table-wrapper img[src*="size=60"]').length && !setCheckboxHeight._not_repeat) {
        var time = setTimeout(function () {
            clearTimeout(time);
            setCheckboxHeight._not_repeat = true;
            setCheckboxHeight();
        }, 150);
    }
    delete setCheckboxHeight._not_repeat;
};

/*=======================================================
=            Table sorting with localstorage            =
=======================================================*/

var setTableOrder = function(value) {
    var tableId = $('.list_view_block').data('copy_id');
    writeStorage('columnOrder-' + tableId, value);
};

var getTableOrder = function() {
    var tableId = $('.list_view_block').data('copy_id');
    return eval('(' + readStorage('columnOrder-' + tableId) + ')');
};

// using on saving and deleting module
var removeTableOrder = function(tableId) {
    removeStorage('columnOrder-' + tableId);
};

/*-----  End of Table sorting with localstorage  ------*/


$(document).ready(function() {
    var eventPath;

    eventPath = '.table-dropdown li input';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        ListViewDisplay
            .setThis(this)
            .setIndex()
            .setHiddenGroupIndex();
        poliDot(); debugger;
        TableColumnResize.updateColumnWidth();
        $('.crm-table-wrapper').getNiceScroll().remove();
        niceScrollInit();
    });

    eventPath = '.table-dropdown li input';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        ListViewDisplay
            .setThis(this)
            .setIndex()
            .setHiddenGroupIndex();
        poliDot();

        TableColumnResize.updateColumnWidth();
        ListView.changeShadow();
        //ListView.getInstance().colResizable();

        NiceScroll
            .createInstance()
            .setElement($('.crm-table-wrapper'))
            .setPosition(true)
            .init();
    });

    /* Drag table columns was here*/


    eventPath = '.crm-table th :checkbox';
    $(document).off('click', eventPath).on('click', eventPath, function(e) {
        var rows = $(this).closest('.crm-table');
        if ($(this).prop('checked')) {
            rows.find('td :checkbox').prop('checked', true);
        } else {
            rows.find('td :checkbox').prop('checked', false);
        }
        e.stopPropagation();
    });

    eventPath = '.list_view_btn-import_and_replace';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        $.ajax({
            url: Global.urls.url_list_view_import_postprocessing+'/'+$('.sm_extension').data('copy_id'),
            data: {
                'file' : $('#import_file').val(),
                'import_skipped' : $('#import_skipped').val(),
                'type' : 'replace',
            },
            type: "POST",
            dataType: "json",
            timeout : crmParams.global.ajax.global_timeout_import,
            beforeSend: function(){
                modalDialog.show('<div class="modal-dialog upload-modal">' +  $('#upload_template').html() + '</div>');
                $('.upload-modal .upload-status .progress-bar').width('100%').addClass('in-process');
                $('.upload-modal .upload-filename').text(Message.list['Replacing data']);
                $('.upload-modal .upload-section').hide();
                $('.upload-modal .upload-status').show();
            },
            success: function(data){
                modalDialog.hide();
                $('#container.preloader').removeClass('preloader');
                modalDialog.hide();
                instanceGlobal.contentReload
                    .prepareVariablesToGeneralContent()
                    .run();
            },
            error: function(){
                modalDialog.hide();
                Message.show([{'type': 'error', 'message': Global.urls.url_ajax_error}], true);
                $('#container.preloader').removeClass('preloader');
            }
        });

    })

    eventPath = '.list_view_btn-import_and_combine';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        $.ajax({
            url: Global.urls.url_list_view_import_postprocessing+'/'+$('.sm_extension').data('copy_id'),
            data: {
                'file' : $('#import_file').val(),
                'import_skipped' : $('#import_skipped').val(),
                'type' : 'combine',
            },
            type: "POST",
            dataType: "json",
            timeout : crmParams.global.ajax.global_timeout_import,
            beforeSend: function(){
                modalDialog.show('<div class="modal-dialog upload-modal">' +  $('#upload_template').html() + '</div>');
                $('.upload-modal .upload-status .progress-bar').width('100%').addClass('in-process');
                $('.upload-modal .upload-filename').text(Message.list['Combining data']);
                $('.upload-modal .upload-section').hide();
                $('.upload-modal .upload-status').show();
            },
            success: function(data){
                modalDialog.hide();
                $('#container.preloader').removeClass('preloader');
                modalDialog.hide();
                instanceGlobal.contentReload
                    .prepareVariablesToGeneralContent()
                    .run();
            },
            error: function(){
                modalDialog.hide();
                Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                $('#container.preloader').removeClass('preloader');
            }
        });
    })

    eventPath = '#file_import_data';
    $(document).off('change', eventPath).on('change', eventPath, function(env){
        var _this = this;
        var form_data = new FormData();
        form_data.append("file", env.target.files[0]);
        form_data.append("copy_id", $('.sm_extension').data('copy_id'));
        form_data.append("this_template", $('.sm_extension').data('this_template'));
        form_data.append("pci", $('.sm_extension').data('parent_copy_id'));
        form_data.append("pdi", $('.sm_extension').data('parent_data_id'));

        instanceGlobal.preloaderShow($(_this));
        $.ajax({
            url: Global.urls.url_list_view_import+'/'+$('.sm_extension').data('copy_id'),
            data: form_data,
            timeout : crmParams.global.ajax.global_timeout_import,
            processData: false, type: "POST", dataType: 'json',
            contentType: false,
            beforeSend: function(){
                modalDialog.show('<div class="modal-dialog upload-modal">' +  $('#upload_template').html() + '</div>');
                $('.upload-modal .upload-status .progress-bar').width('0%');
                $('.upload-modal .upload-filename').text(Message.list['Import data'])
                $('.upload-modal .upload-section').hide();
                $('.upload-modal .upload-status').show();
                //$('#container').addClass('preloader');
            },
            xhr: function(){
                var xhr = $.ajaxSettings.xhr(); // получаем объект XMLHttpRequest
                xhr.upload.addEventListener('progress', function(evt){ // добавляем обработчик события progress (onprogress)
                    if(evt.lengthComputable) { // если известно количество байт
                        var percentComplete = Math.ceil(evt.loaded / evt.total * 100);
                        $('.upload-status .progress-bar').width(percentComplete+'%');
                    }
                }, false);
                return xhr;
            },
            success: function(data){
                setTimeout(function(){
                    modalDialog.hide();
                    if(data.status == true){
                        $('#container.preloader').removeClass('preloader');
                        $(_this).val('');

                        modalDialog.show(data.data, true, function(){
                            instanceGlobal.contentReload
                                .prepareVariablesToGeneralContent()
                                .run();
                        });

                    } else if(data.status == 'access_error'){
                        Message.show(data.messages, false);
                        $('#container.preloader').removeClass('preloader');
                    } else if(data.status == false){
                        Message.show(data.data, false);
                        $('#container.preloader').removeClass('preloader');
                    }
                }, 600);
            },
            error: function(){
                setTimeout(function(){
                    modalDialog.hide();
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                    $('#container.preloader').removeClass('preloader');
                }, 600);
            }
        });
    });

    eventPath = '.list_view_btn-import_data';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        $('#file_import_data').trigger('click');
    })


    eventPath = '.list_view_block .edit_view_select_dnt-add';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        EditView.addCardSelect($(this).closest('.sm_extension'), 'list-view');
    });

    eventPath = '.list-view .edit_view_select_btn-create';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        var _this = this;
        if ($(_this).is('[data-type="process"]')) {
            return;
        }

        EditView.cardSelectValidate(this, function(data){
            if(data){
                modalDialog.hide();
                EditView.addCardFromTemplate(_this);
            }
        });
        Global.blockErrors.init();
    });

    eventPath = '.modal-dialog.list-view .element[data-type="template"], .modal-dialog.process-view .element[data-type="template"], .modal-dialog.edit-view .element[data-type="template"]';
    $(document).off('change', eventPath).on('change', eventPath, function(){
        var _this = this

        EditView.changeTemplateValue(_this);
    });

    eventPath = '.select_templates_from_block';
    $(document).off('change', eventPath).on('change', eventPath, function() {
        var _this = this;
        var block_field_name = $(_this).closest('.sm_extension').find('.element[data-type="block_field_name"]').val();
        if(block_field_name) {
            $('#block_error').css('display', 'none');
            $('#template_error').css('display', 'none');
            $.ajax({
                url: Global.urls.url_list_view_load_templates_from_block +
                '/' + $(_this).closest('.sm_extension').data('copy_id'),
                data: {
                    'block_field_name' : block_field_name,
                    'block_unique_index' : $(_this).closest('.sm_extension').find('.element[data-type="block"]').val(),
                },
                type: "POST",
                dataType: "json",
                success: function(data){
                    $(_this).closest('.sm_extension').find('.element[data-type="template"]').empty();
                    $(_this).closest('.sm_extension').find('.element[data-type="template"]').append(data.templates);
                    $(_this).closest('.sm_extension').find('.element[data-type="template"]').selectpicker('refresh');

                    var template_style = ($(_this).closest('.sm_extension').find('.element[data-type="block"]').val()=='') ? 'none' : 'list-item';
                    $(_this).closest('.sm_extension').find('.element[data-type="template"]').closest('li').css('display', template_style);

                    $('#project_name_error').css('display', 'none');
                    if(!$(_this).closest('.sm_extension').find('.element[data-type="project_name"]').prop('readonly')) {
                        var template_name = $(_this).closest('.sm_extension').find('.element[data-type="template"] :selected').text();
                        $(_this).closest('.sm_extension').find('.element[data-type="project_name"]').val(template_name);
                    }

                },
                error: function(){
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                },
            });
        }
    });

    eventPath = '#select_toggle_blocks_view';
    $(document).off('change', eventPath).on('change', eventPath, function() {
        _this = $('.edit-view:last');
        var block_unique_index = $('#select_toggle_blocks_view').val();

        $.ajax({
            url: Global.urls.url_edit_view_toggle_blocks +
            '/' + $(this).closest('.edit-view').data('copy_id'),
            data: {
                'block_unique_index' : block_unique_index,
            },
            type: "POST",
            success: function(data){
                if(data.status==true) {
                    var key,
                        place = _this.find(".buttons-section"),
                        attachments = _this.find('[data-name="EditViewModel[bl_attachments]"]').closest('.panel'),
                        activity = _this.find('[data-type="block_activity"]').closest('.panel');

                    _this.find('.element[data-type="block"]').each(function(e){
                        if(jQuery.inArray($(this).data('unique_index'), data.deleted) !== -1)
                            $(this).remove()
                    });
                    _this.data('block_unique_index', block_unique_index);

                    if (attachments.length) {
                        place = attachments;
                    }  else {
                        if (activity.length) place = activity;
                    }

                    key = $(data.content).filter('.panel').data('unique_index');

                    if (!_this.find('.element[data-type="block"][data-unique_index="'+ key +'"]').length) {
                        $(data.content).insertBefore(place);
                    }

                    $('.select').selectpicker({
                        style: 'btn-white',
                        noneSelectedText: '',
                    });
                }
            },
            error: function(){
                Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
            },
        });
    });

    eventPath = '.edit_view_dnt-save';
    // сохраняем импортированные данные
    $(document).off('click', eventPath).on('click', eventPath, function(){
        var _this = this;
        var _copy_id = $(_this).closest('.sm_extension').data('copy_id');
        $.ajax({
            url: Global.urls.url_list_view_save_imported+'/'+_copy_id,
            dataType: "json",
            type: "POST",
            success: function(data) {
                if(data.status == 'access_error'){
                    Message.show(data.messages, false);
                } else {
                    if(data.status == 'error'){
                        Message.show(data.messages);
                    } else {
                        document.location.reload();
                    }
                }
            },
            error: function(){
                Message.show([{'type':'error', 'message':  Global.urls.url_ajax_error }], true);
            },
        });
    });

    // отменяем импортирование данных
    eventPath = '.edit_view_dnt-cancel';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        var _this = this;

        var _function = function(){
            var _copy_id = $(_this).closest('.sm_extension').data('copy_id');
            $.ajax({
                url: Global.urls.url_list_view_cancel_imported + '/' + _copy_id,
                dataType: "json",
                type: "POST",
                success: function(data){
                    if(data.status == 'access_error'){
                        Message.show(data.messages, false);
                    } else {
                        if(data.status == 'error'){
                            Message.show(data.messages);
                        } else {
                            document.location.reload();
                        }
                    }
                },
                error: function(){
                    Message.show([{'type': 'error', 'message': Global.urls.url_ajax_error}], true);
                },
            });
        }


        Message.show([{'type':'confirm', 'message': Message.translate_local('Delete imported data?')}], false, function(_this_c){
            if($(_this_c).hasClass('yes-button')){
                modalDialog.hide();
                _function();
            }
        }, Message.TYPE_DIALOG_CONFIRM);


    });

    //list_view_btn-additional_update
    eventPath = '.list_view_btn-additional_update';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        var _data = [];
        var _this = this;

        if($('.sm_extension_data input:checked').length == 0){
            Message.show([{'type':'error', 'message': 'It should be noted entries'}], true);
            return;
        }


        var _function = function(){
            $('.sm_extension_data input:checked').each(function(i, ul){
                _data.push($(ul).closest('.sm_extension_data').data('id'));
            });

            _data = {
                'id': _data,
                'this_template': $(_this).closest('.list_view_block.sm_extension, .process_view_block.sm_extension').data('this_template'),
            }

            var ajax = new Ajax();
            ajax
                .setData(_data)
                .setAsync(false)
                .setUrl(Global.urls.url_list_view_additional_update + '/' + $(_this).closest('.sm_extension').data('copy_id') + '?scenario=additional_update')
                .setTimeOut(0)
                .setCallBackSuccess(function(data){
                    Message.show(data.messages, false);
                    document.location.reload();
                })
                .setCallBackError(function(jqXHR, textStatus, errorThrown){
                    Message.showErrorAjax(jqXHR, textStatus);
                })
                .send();
        }


        Message.show([{'type':'confirm', 'message': Message.translate_local('Update the bills of the selected objects') + '?'}], false, function(_this_c){
            if($(_this_c).hasClass('yes-button')){
                modalDialog.hide();
                _function();
            }
        }, Message.TYPE_DIALOG_CONFIRM);
    });

    eventPath = '.list_view_btn-table_sr_export';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        var _data = [];
        var _this = this;

        if($('.sm_extension_data input:checked').length == 0){
            Message.show([{'type':'error', 'message': 'It should be noted entries'}], true);
            return;
        } else {
            $('.sm_extension_data input:checked').each(function(i, ul){
                _data.push($(ul).closest('.sm_extension_data').data('id'));
            });
        }

        all_checked = ($('#list-table').find('thead .checkbox[type="checkbox"]:checked').length) ? 1 : 0;
        document.location.href = Global.urls.url_list_view_additional_update + '/' + $(_this).closest('.sm_extension').data('copy_id') + '?scenario=table_sr_export&all_checked=' + all_checked + '&id=' + JSON.stringify(_data);

    });

    //list_view_row-delete
    eventPath = '.list_view_row-delete';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        var _this = this;

        Message.show([{'type':'confirm', 'message': Message.translate_local('Delete data') + '?'}], false, function(_this_c){
            if($(_this_c).hasClass('yes-button')){
                modalDialog.hide();

                $.post(Global.urls.url_list_view_delete+'/'+$(_this).closest('.sm_extension').data('copy_id'), {'id': [$(_this).closest('.sm_extension_data').data('id')]}, function(data){
                    if(data.status){
                        $(_this).closest('tr').remove();
                    } else {
                        Message.show(data.messages, false);
                    }
                }, 'json');
            }
        }, Message.TYPE_DIALOG_CONFIRM);

    });

    $('select[name="list-table_length"], select[name="settings-table_length"]').selectpicker({
        style: 'btn-white',
        noneSelectedText: Message.translate_local('None selected'),
    });

    var getColumnHidden = function(){
        var col_index = [];
        $('.list-table thead').find('th').each(function(i, ul){
            if(i==0) return true;
            if($(ul).css('display') == 'none') return true;
            col_index[$(ul).data('group_index')] = $(ul).width();
        });
        return col_index;
    }




    /**
     *   save_to_pdf
     */
    eventPath = '.list_view_btn-export_to_pdf';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        var _this = $('.sm_extension_export:not(.is-page-report)');
        var fields = [];

        $(_this).closest('.edit-view').find('input[type="checkbox"]:checked').each(function(i, ul){
            fields.push($(ul).data('name'));
        })
        modalDialog.hide();

        var ids = [];

        if($('.sm_extension_data input:checked').length != 0){
            $('.sm_extension_data input:checked').each(function(i, ul){
                ids.push($(ul).closest('.sm_extension_data').data('id'));
            });
        }

        var copy_id = $('.sm_extension').data('copy_id');
        var params = 'page_size=0&col_hidden=' + ListViewDisplay._hidden_group_index + '&type=pdf' + '&fields=' + JSON.stringify(fields) + '&ids=' + JSON.stringify(ids);
        if(document.location.search == '') {
            document.location.href = Global.urls.url_list_view_export + '/' + copy_id + '?' + params;
        } else {
            var url_params = Url.getWithOutParams(document.location.href, ['page_size'], true);
            document.location.href = Global.urls.url_list_view_export + '/' + copy_id + '?' + url_params + '&' + params;
        }
    })



    /**
     *   generate file from template
     */
    eventPath = '.list_view_btn-generate';
    $(document).off('click', eventPath).on('click', eventPath, function(){

        var copy_id = $('.sm_extension').data('copy_id'); //ID экзампляра модели
        var uploadID = $(this).closest('.upload-result').find('.image-preview').data('id');
        var parentUploadID = $(this).closest('.upload-result').find('.image-preview').data('parent_id');
        var _this = $('.edit-view[data-parent_copy_id="'+copy_id+'"]');


        var params = {};

        var _contentType = 'application/x-www-form-urlencoded';
        var date_time = '';

        // данные текущей формы
        _this.find('.element_data[data-type="module_title"], .element_edit_hidden, .element[data-type="block_panel_contact"] .file-box, .element[data-type="block"] .element[data-type="panel"] .file-box, .element[data-type="block"] .element[data-type="attachments"], .element[data-type="block"] .element[data-type="block_activity"], input[type="text"], input[type="password"], input[type="email"], input[type="submit"], input[type="button"], input[type="hidden"]:not(.upload_file), input:checked, select').each(function(){
            if($(this).hasClass('date')){
                if($(this).val()) date_time = $(this).val(); else date_time = '';
            } else
            if($(this).hasClass('time')){
                if($(this).val())
                    if(date_time) date_time += ' ' + $(this).val();
                params[$(this).attr('name')] = date_time;
                date_time = '';
            } else
            if($(this).hasClass('datetime')){
                params[$(this).attr('name')] = $(this).val() + ' 23:59:59';
            } else
            if($(this).hasClass('element_data')){
                params[$(this).data('name')] = $(this).text();
            } else
            //attachments
            if($(this).hasClass('element') && $(this).data('type') == 'attachments'){
                var _files = [];
                $(this).find('.file-box .file-block[data-type="attachments"]').each(function(i, ul){
                    $(this).find('input.upload_file').each(function(i, ul){
                        if($(ul).val()) _files.push($(ul).val());
                    });
                })
                params[$(this).data('name')] = _files;
            } else
            //block_activity
            if($(this).hasClass('element') && $(this).data('type') == 'block_activity'){
                var activity_messages = [];
                $(this).find('.element[data-type="message"]').each(function(i, ul){
                    if($(ul).data('status') == 'temp') activity_messages.push($(ul).data('id'));
                });
                params['element_block_activity'] = activity_messages;
            } else
            if($(this).hasClass('element_edit_hidden')){
                params[$(this).data('name')] = $(this).text();
            } else
            if($(this).hasClass('element_edit_access')){
                params[$(this).attr('name')] = {'id' : $(this).val(), 'type' :  $(this).find('option[value="'+$(this).val()+'"]').data('type')};
            } else {

                //для селекта показываем текст, а не значение
                if($(this).is("select"))
                    params[$(this).attr('name')] = $(this).find('option:selected').text();else
                    params[$(this).attr('name')] = $(this).val();

            }

        });


        //связанные данные (СДМ)
        var params_sdm = {};

        $(_this).closest('.edit-view').find('.element_relate').each(function(i, ul){
            realte_result = $(ul).data('id');
            if(!realte_result) realte_result = false;
            params_sdm[$(ul).data('relate_copy_id')] = realte_result;
        });

        //связанные данные (Сабмодули)
        var params_sm = [];
        var submodule_tmp = [];
        $(modalDialog.getModalName() + ' .sm_extension[data-type="submodule"]').each(function(i, ul){
            $(ul).find('table tbody tr').each(function(i1, ul1){
                submodule_tmp.push($(ul1).data('id'));
            });
            params_sm.push({
                'relate_table_module_id' :  $(ul).data('relate_table_module_id'),
                'relate_copy_id' :  $(ul).data('relate_copy_id'),
                'data_id_list': submodule_tmp,
            });
            submodule_tmp = [];
        });

        //служебные данные
        var params_service = {};

        params_service['upload_id'] = uploadID; //uploadID
        params_service['parent_upload_id'] = parentUploadID; //upload ParentID
        params_service['module_id'] = _this.data('parent_data_id'); //ID экземпляра модуля, с которого генерируется документ
        params_service['module_generate_id'] = _this.data('copy_id'); //ID модуля, который генерирует ссылку (Документы)
        params_service['doc_id'] = _this.data('id'); //ID генерируемого документа

        //передаваемый массив
        var data = {};


        data['form_data'] = params;
        data['sdm_data'] = params_sdm;
        data['sm_data'] = params_sm;
        data['service_data'] = params_service;

        $.ajax({
            url: Global.urls.url_list_view_generate+'/'+copy_id,
            data: 'params=' + JSON.stringify(data),
            type: "POST",
            dataType: 'json',
            success: function(data){

                if(data.status == 'popup')
                    modalDialog.show(data.data, true);

                if(data.status == true) {


                    if(!!data.link)
                        $('.generate_file-download' + uploadID).attr("href", data.link);

                    if(!!data.title)
                        $('.filename.generate_file-block' + uploadID).text(data.title);

                    if(!!data.extension){
                        $('.file_thumb.generate_file-block' + uploadID).text(data.extension);
                        $('.file_thumb.generate_file-block' + uploadID).removeClass('file_other');
                        $('.file_thumb.generate_file-block' + uploadID).addClass('file_application');
                    }

                    if(!!data.filedate)
                        $('.filedate.generate_file-block' + uploadID).text(data.filedate);

                    $('.file_thumb.generate_file-block' + uploadID).closest('.generate_only').removeClass('generate_only');
                    $('.file_thumb.generate_file-block' + uploadID).parent().parent().find('.upload_link').hide();
                    $('.file_thumb.generate_file-block' + uploadID).parent().find('.second-row').addClass('linkMore2');

                    $('.generate_file-block' + uploadID).show();
                    $('.generate_link_file-block' + uploadID).css('margin-left', '8px');
                    $('.generate_link_file-block' + uploadID).css('margin-top', '0px');

                    if(!!data.show_edit_link)
                        $('.generate_edit_link_file-block' + uploadID).show();

                }

            },
            error: function(xhr, ajaxOptions, thrownError){
                //Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                Message.show([{'type':'error', 'message':xhr.responseText}], true);
            }
        });

    })


    /**
     *   generate file from template after select sm links
     */
    eventPath = '.edit_view_select_btn-generate';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        var _this = $('.sm_extension_generate');
        var params_sm = {};

        $(_this).closest('.edit-view').find('.element_relate').each(function(i, ul){
            var copy_id_list = [];
            var relate_result = $(ul).data('id');
            if(!relate_result) relate_result = false;

            $(ul).closest('.column').find('table input[type="checkbox"]:checked').each(function(i, ul) {
                copy_id_list.push($(ul).closest('.sm_extension_data').data('id'));
            });

            params_sm[$(ul).data('relate_copy_id')] = {
                'copy_id_list' : copy_id_list,
                'relate_result' : relate_result,
                'its_no_documents_module' : $(ul).data('mod_id')
            };

        });

        var data = {};

        data['form_data'] = JSON.parse(_this.find('.element[data-name="form_data"]').val());
        data['sdm_data'] = JSON.parse(_this.find('.element[data-name="sdm_data"]').val());
        data['sm_data'] = JSON.parse(_this.find('.element[data-name="sm_data"]').val());
        data['service_data'] = JSON.parse(_this.find('.element[data-name="service_data"]').val());
        data['vars'] = _this.find('.element[data-name="vars"]').val();
        data['sm_data_new'] = params_sm;
        data['sm_data_select'] = true;

        copy_id = _this.find('.element[data-name="copy_id"]').val();
        var uploadID = data['service_data']['upload_id'];

        $.ajax({
            url: Global.urls.url_list_view_generate+'/'+copy_id,
            data: 'params=' + JSON.stringify(data),
            type: "POST",
            dataType: 'json',
            success: function(data){

                if(data.status == true) {
                    modalDialog.hide();

                    if(!!data.link)
                        $('.generate_file-download' + uploadID).attr("href", data.link);

                    if(!!data.name)
                        $('.filename.generate_file-block' + uploadID).text(data.name);

                    if(!!data.extension){
                        $('.file_thumb.generate_file-block' + uploadID).text(data.extension);
                        $('.file_thumb.generate_file-block' + uploadID).removeClass('file_other');
                        $('.file_thumb.generate_file-block' + uploadID).addClass('file_application');
                    }

                    if(!!data.filedate)
                        $('.filedate.generate_file-block' + uploadID).text(data.filedate);

                    $('.file_thumb.generate_file-block' + uploadID).closest('.generate_only').removeClass('generate_only');
                    $('.file_thumb.generate_file-block' + uploadID).parent().parent().find('.upload_link').hide();
                    $('.file_thumb.generate_file-block' + uploadID).parent().find('.second-row').addClass('linkMore2');

                    $('.generate_file-block' + uploadID).show();
                    $('.generate_link_file-block' + uploadID).css('margin-left', '8px');
                    $('.generate_link_file-block' + uploadID).css('margin-top', '0px');

                    if(!!data.show_edit_link)
                        $('.generate_edit_link_file-block' + uploadID).show();
                }

            },
            error: function(xhr, ajaxOptions, thrownError){
                //Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
                Message.show([{'type':'error', 'message':xhr.responseText}], true);
            }
        });

    })

    /**    *   Массовое редактирование    */
    eventPath = '.list_view_btn-bulk_edit';
    $(document).off('click', eventPath).on('click', eventPath, function() {
        if ($('.crm-table .lot-edit').length) return;
        instanceLotEdit = instanceLotEdit ? instanceLotEdit : new LotEdit();
        instanceLotEdit.onClickByBtnLotEdit($(this));
    });

    eventPath = '#list-table tbody .checkbox';
    $(document).off('click', eventPath).on('click', eventPath, function () {
        $(this).closest('table').find('thead .checkbox').prop('checked', false);
    });

    // hover на поле Название
    $(".list_view_block #list-table .data_edit .modal_dialog").hover(
        function () {
            $(this).closest('.data_edit').find('.modal_dialog').each(function(i, ul){
                $(this).css("text-decoration", "none");
            });
        },
        function () {
            $(this).closest('.data_edit').find('.modal_dialog').each(function(i, ul){
                $(this).css("text-decoration", "underline");
            });
        }
    );

    //pagination-size select scroll bug fix
    eventPath = '.pagination_size button';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        $(this).find('ul.dropdown-menu').getNiceScroll().remove();
    });

    eventPath = '.instruments .dropdown-menu li';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        $(this).closest('.instruments.open').removeClass('open');
    });
});


;(function (exports) {
    var _private, _public, _protected, Module,
        _self = {}; //link for instance

    var extPreloader_public = {
        constructor: function () {

            return this;
        },
        //розширенние
        extRun: function () {
            var spinner = Global.spinner,
                $container = $('#container');
//panel-body init-preloader center-position set-preloader
            switch (this._where_content_hide) {
                case extPreloader.TYPE_RELOAD_SECTION : {
                    this._$place_for_spinner = this.$object = this.getContainer().closest('.panel-body').addClass('hide_content_section');
                    this.getContainer().closest('li[data-name="panel"]').addClass('hide-nice-scroll');
                    spinner.get().not(':first').remove();
                    this.setDynamicClassByArray(['hide_all_in_page']);
                    this._position_spinner = Preloader.POSITION_SPINNER_WINDOW;
                    this._css_position = Preloader.css.ABSOLUTE;

                    this.setElement(this.$object.selector, ['hide_all_in_page']);

                    break;
                }
                    return this;
            }

            return this;
        }
    }

    var extPreloader = {
        TYPE_RELOAD_SECTION: 17,
        _instance: null,

        createInstance: function () {
            var Obj = function () {
                for (var key in extPreloader_public) {
                    this[key] = extPreloader_public[key];
                }
            }

            Obj.prototype = Object.create(Preloader.createInstance());
            return extPreloader._instance = new Obj().constructor();
        },
        getInstance: function () {
            return this._instance;
        },
    }

    _protected = {

    };
    _private = {
        onChange_checkbox : function(e){
            var $this = $(this),
                pl = $this.closest('.process_list'),
                instance = e.data.instance;

            if ($this.prop('checked')) {
                pl.find('.header_check').attr('checked', false);
                pl.find('.card_check').not($this.closest('ul').find('.card_check')).attr('checked', false);
                $this.prop('checked', true);
            } else {
                $this.prop('checked', false);
                pl.find('.header_check').attr('checked', false);
            }

            instance
                .setProcessColor()
                .setProcessButtons();
        },
        onClick_addCardSelect : function(e){
            var list,
                _data = {},
                instance = e.data.instance,
                $this = $(this);

            if ($this.closest('section').find('.process_view-save-input').length || $('.process_view_block[data-update-title]').length) {
                return;
            }

            ProcessView.setSortingListId($this.closest('section.panel').data('sorting_list_id'));

            list = $this.closest('.panel').find('.element[data-name="field_title"] .element[data-name="field_title_value"]');
            $.each(list, function(i, ul){
                _data[$(ul).data('field')] = $(ul).attr('data-value');
            });
            _data = {'default_data' : _data};

            instance.setParentElement($this.closest('section.panel'));

            EditView
                .createInstance()
                .addCardSelect($this.closest('.sm_extension'), 'process-view', _data);
        },
        //onClick_openCard
        onClick_openCard : function(el){
            var instance = el.data.instance;

            if ($('.process_view_block .participant-add.open').length) {
                return false;
            }
            EditView
                .setQueueStatus(true)
                .setDataToQueue({});

            instance.editData(el, this);
        },
        //onClick_openCardAuto
        onClick_openCardAuto : function(e){
            var instance = e.data.instance;

            if(!$(e.target).closest('.element[data-type="block_participant"]').length) {
                $('html').removeClass('overflowHidden');

                if (Global.getInstance().getCurrentInstance()._type == 'process') {
                    Global.showChildListEntities(this);

                    return;
                };

                var $this = $(this),
                    action_key = $this.data('action_key');

                instance.defaultState();
                instance.$panel_change = $this;

                if(typeof (action_key) != 'undefined' && action_key){
                    instanceGlobal.preloaderShow($this)
                        .contentReload
                        .setObject(this)
                        .setActionKey(action_key)
                        .prepareVariablesAuto()
                        .run();
                } else {
                    if ($('.process_view_block .participant-add.open').length) {
                        return false;
                    }
                    instance.editData(e, this);
                }
            }
        },
        onClickBtnDelete : function(e){
            var data_id_list = [],
                $this = $(this),
                instance = e.data.instance;

            if($this.closest('ul').find('.sm_extension_data input:checked').length == 0){
                Message.show([{'type': 'error', 'message': 'It should be noted entries'}], true);
                return;
            }

            var _function = function(){

                instanceGlobal.preloaderShow($this);
                $this.closest('ul').find('.sm_extension_data input:checked').each(function(i, ul){
                    data_id_list.push($(ul).closest('.sm_extension_data').data('id'));
                });

                $.post(Global.urls.url_list_view_delete + '/' + $this.closest('.sm_extension').data('copy_id'), {'id': data_id_list}, function(data){
                    if(data.status){
                        if(data.messages){
                            if(typeof data.deleted_id_list != 'undefined' && data.deleted_id_list){
                                $.each(data.deleted_id_list, function(key, id){
                                    $this.closest('.element[data-name="panel"]').find('.to-do-list .element[data-type="drop_down"][data-id="' + id + '"]').remove();
                                });
                            }
                            var sorting_list_id_list = instance.convert.dataIdToSortingListIdList(data_id_list)
                            instance.initLists(sorting_list_id_list);

                            instanceGlobal.contentReload.preloaderHide();
                            instance.checkAndRemoveEmptyPanel($this.closest('.element[data-name="panel"]'));
                            instance.setProcessButtons();

                            Message.show(data.messages, false);
                        } else {
                            $('.card_check[type="checkbox"]:checked').closest('li.element[data-type="drop_down"]').remove();
                            $this.closest('.panel-body').find('.slimscrolldiv').getNiceScroll().remove();

                            var sorting_list_id_list = instance.convert.dataIdToSortingListIdList(data_id_list)
                            instance.initLists(sorting_list_id_list);

                            instanceGlobal.contentReload.preloaderHide();
                            instance.checkAndRemoveEmptyPanel($this.closest('.element[data-name="panel"]'));
                            instance.setProcessButtons();
                        }

                    } else if(data.status == 'access_error'){
                        Message.show(data.messages, false);
                    } else if(data.status == false){
                        Message.show(data.messages, false);
                    }
                }, 'json');
            }

            Message.show([{'type':'confirm', 'message': Message.translate_local('Delete selected entries') + '?'}], false, function(_this_c){
                if($(_this_c).hasClass('yes-button')){
                    modalDialog.hide();
                    _function();
                }
            }, Message.TYPE_DIALOG_CONFIRM);


        },
        onClick_fieldsViewSettingsSave : function(e){
            if ($(e.target).closest('.communication-services').length) return;

            var $this = $(this),
                _data = {
                    'index' : $('.process_view_block').data('index'),
                    'fields_view' : $this.closest('.panel').find('.element[data-type="fields_view"]').val(),
                    'pci': $('.process_view_block.sm_extension').data('parent_copy_id'),
                    'pdi': $('.process_view_block.sm_extension').data('parent_data_id'),
                    'this_template': $('.process_view_block.sm_extension').data('this_template'),
                    'finished_object' : ($('.process_view_block.sm_extension .element[data-type="finished_object"]').hasClass('active') ? 1 : 0)
                };

            $.post(Global.urls.url_process_save_second_fields_view+'/'+$('.sm_extension').data('copy_id'), _data, function(data){
                if(data.status == false || data.status == 'error' || data.status == 'access_error'){
                    Message.show(data.messages, false);
                } else
                if(data.status){
                    modalDialog.hide();
                    ProcessView.active_fields_view = _data.fields_view;

                    instanceGlobal.preloaderShow($this).contentReload
                        .prepareVariablesToGeneralContent()
                        .run();
                }
            });
        },
        onClick_sorting : function(){
            var $settings = $('[data-type="fields_view_setting"]');

            instanceGlobal.preloaderShow($(this));
            $settings.attr('blocked','');
            Sorting.setThis(this)
                .init()
                .apply(function () {
                    $settings.removeAttr('blocked');
                });

        },
        onClick_addCard : function(e){
            var instance,
                $this = e.hasOwnProperty('currentTarget') ? $(this) : e;
            //TODO: this error url. show LV but має бути PV
            instance = e.data.instance || ViewType.getCurrentInstance();

            instance
                .setSortingListId($this.closest('section.panel').data('sorting_list_id'))
                .addCard($this);
        },
        onClick_showFieldsViewSettings : function(e){
            Message.show($('.element[data-type="fields_view_settings_dialog"]').html());
            $('.element[data-type="fields_view"] option[value="'+ProcessView.active_fields_view+'"]')
                .prop('selected', true)
                .closest('.element[data-type="panel"]')
                .find('.bootstrap-select')
                .remove();

            Global.initSelects();
        },
        onClickBtnCopy : function(e){
            var data_id_list = [],
                $this = $(this),
                instance = e.data.instance;

            instanceGlobal.preloaderShow($this);
            instance.setSortingListId($this.closest('.element[data-name="panel"]').find('section.panel').data('sorting_list_id'))

            if($this.closest('ul').find('.sm_extension_data input:checked').length == 0){
                Message.show([{'type':'error', 'message': 'It should be noted entries'}], true);
                return;
            } else {
                var key = $this.closest('section.panel').attr('data-unique_index');
                $.each($this.closest('ul').find('.sm_extension_data input:checked'), function(i, input){
                    var $input = $(input);
                    data_id_list.push($input.closest('.sm_extension_data').data('id'));
                });

                instance.initLists([key]);
            }

            params = {
                'id' : data_id_list,
                'pci' : $('.list_view_block.sm_extension, .process_view_block.sm_extension').data('parent_copy_id'),
                'pdi' : $('.list_view_block.sm_extension, .process_view_block.sm_extension').data('parent_data_id'),
                'this_template' : $('.list_view_block.sm_extension, .process_view_block.sm_extension').data('this_template'),
            }

            $.post(Global.urls.url_list_view_copy +'/'+$this.closest('.sm_extension').data('copy_id'), params, function(data){
                if(data.status == true){
                    data_id_list = data.id;

                    instanceGlobal.contentReload
                        .prepareVariablesToGeneralContent()
                        .appendVars({'module' : {
                            'data_id_list' : data_id_list,
                            'sorting_list_id' : ProcessView.sorting_list_id
                        }})
                        .setCallBackSuccessComplete(function () {
                            var sorting_list_id_list = instance.convert.dataIdToSortingListIdList(data_id_list);
                            instance.initLists(sorting_list_id_list);
                        })
                        .prepareVariablesToProcessView()
                        .run();

                } else if(data.status == 'access_error'){
                    Message.show(data.messages, false);
                } else if(data.status == false){
                    Message.show(data.messages, false);
                }
            }, 'json');
        },
        onClickPanelMenuAction : function(e){
            var _this = this;
            _action = $(_this).data('action'),
                instance = e.data.instance;

            switch(_action){
                case 'delete' :
                    instance.panelMenuActionDelete(_this);
                    break;
                case 'archive' :
                    instance.panelMenuActionArchive(_this);
                    break;
            }

        },
        onEditSelectBtnCreate : function(){
            var _this = this,
                instanceEV = EditView.createInstance();

            instanceEV.cardSelectValidate(this, function(data){
                if(data){
                    var _default_data = $(_this).closest('.edit-view.sm_extension').find('.default_data').text();
                    if(_default_data){
                        _default_data = JSON.parse(_default_data);
                    } else {
                        _default_data = null;
                    }

                    modalDialog.hide();
                    instanceEV.addCardFromTemplate(_this, _default_data);
                }
            })
        },
        onClickParticipantBtn : function() {
            dropDownPosition($(this));   // for use only in process-view
            $(this).next().css('position','fixed');
        },
        //отметить все чекбоксы
        onChangeChecbox: function(e){
            var $this = $(this),
                instance = e.data.instance,
                pl = $this.closest('.process_list');

            if ($this.prop('checked')) {
                pl.find('.card_check').attr('checked', false);
                pl.find('.header_check').attr('checked', false);
                $this.closest('li').find('.card_check').prop('checked', true);
                $this.prop('checked', true);
            } else {
                pl.find('.card_check').attr('checked', false);
                pl.find('.header_check').attr('checked', false);
            }

            instance
                .setProcessColor()
                .setProcessButtons();
        },
    };

    _public = {
        run: function () {
            this.setPreloader(extPreloader.createInstance());

            this.reDefinition()
                .parseUrlByCopyId();

            ViewType.init(this);

            this.afterLoadView()
                .afterViewChanges();
            return this;
        },
        constructor: function () {
            iModule.implements.call(this);
            iPreloader.implements.call(this);
            iLifeCycle.implements.call(this);

            this.setEmits();

            this.search = Search.createInstance();
            this.getFilter = Filter.createInstance();

            return this;
        },
        setEmits: function () {
            var _this = this;

            Events
                .createInstance()
                .setType(Events.TYPE_DESTROY)
                .setKey('ProcessViewResize')
                .setHandler(function (e) {
                    _this.scrollCall();

                    return true;
                })
                .run();

            return this;
        },
        reDefinition: function () {
            var _this = this;

            this.getPreloader = function () {
                return extPreloader.getInstance();
            }

            this.showPreloaderTemplate = function () {
                $('body').addClass('hide-edit-view');

                var where = Preloader.TYPE_RELOAD_СONTENT_PAGE,
                    place_spinner = $('.content-panel'),
                    parent = _this.getParentElement();

                if (parent) {
                    where = extPreloader.TYPE_RELOAD_SECTION;
                    place_spinner = parent || _this.$panel_change;
                    _this.$panel_change = null;
                    _this.setParentElement(null);
                    this.setContainer(place_spinner);
                    this.setElement('.hide-nice-scroll', ['hide-nice-scroll'])
                }

                this.setRunning(false)
                    .setElement($('body').selector, ['hide-edit-view'])
                    .setWhereContentHide(where)
                    .setPlaceForSpinner(place_spinner)
                    .run();
            };

            this.afterViewChanges = function () {
                this.events()
                    .bigWrapper()
                    .touchToBack();
                
                return this;
            };

            this.afterLoadView = function () {
                this.events()
                    .bigWrapper()
                    .touchToBack()
                    .allMethod();

                ViewType.afterLoadView();

                return this;
            };

            this.preloader.showPreloader = this.preloader.show = function () {
                // if (!this.isRunning()) { }
                _this.showPreloaderTemplate.call(_this.preloader);
                return this;
            };
            this.search.apply = function () {
                var url = this.getFullUrl(),
                    contentInstance = ContentReload.createInstance();

                iPreloader.implements.call(contentInstance);
                Global.getInstance().setContentReloadInstance(contentInstance);

                contentInstance
                    .clear()
                    .reDefinition()
                    .setPreloader(_this.preloader)
                    .prepareVariablesToGeneralContent()
                    .setUrl(url)
                    .run();
            };
            this.search.showPreloader = function () {
                _this.showPreloaderTemplate.call(_this.preloader);
                return this;
            };

            this.getFilter.apply = function () {
                var instanceContent = ContentReload.createInstance();

                iPreloader.implements.call(instanceContent);

                Global.getInstance().setContentReloadInstance(instanceContent); // подовження роботи

                instanceContent
                    .clear()
                    .setPreloader(_this.preloader)
                    .setTypeAction(iAction.TYPE_FILTER)
                    .reDefinition()
                    .prepareVariablesToGeneralContent(true)
                    .run();
            }

            return this;
        },
        events : function () {
            this._events = [
                { parent: document, selector: '.element[data-name="process_view_panel"] .element[data-type="drop_down"] a[data-controller="process_view_edit"]', event: 'click', func: _self.onClick_openCard },
                { parent: document, selector: '.element[data-name="process_view_panel"] .element[data-type="drop_down"]', event: 'click', func: _self.onClick_openCardAuto},
                { parent: document, selector: '.process_view_block li[data-name="panel"]:not([data-update-title]) .edit_view_dnt-add', event: 'click', func: _self.onClick_addCard },
                { parent: document, selector: '.process_view_block li[data-name="panel"]:not([data-update-title]) .edit_view_select_dnt-add', event: 'click', func: _self.onClick_addCardSelect},

                { parent: document, selector: '.element[data-name="process_view_fields_group"] li a', event: 'click', func: _self.onClick_sorting},

                //отметить чекбокс по одному
                { parent: document, selector: '.process_list > li .card_check', event: 'change', func: _self.onChange_checkbox },

                { parent: document, selector: '.process_view_block .element[data-type="fields_view_setting"]:not([blocked])', event: 'click', func: _self.onClick_showFieldsViewSettings},
                { parent: document, selector: '.modal-dialog .btn-primary.element[data-type="save"]', event: 'click', func: _self.onClick_fieldsViewSettingsSave},
                //process_view_btn-delete
                { parent: document, selector: '.process_view_btn-delete', event: 'click', func: _self.onClickBtnDelete},
                { parent: document, selector: '.process_view_btn-copy', event: 'click', func: _self.onClickBtnCopy }, //process_view_btn-copy
                { parent: document, selector: '.process-view .edit_view_select_btn-create', event: 'click', func: _self.onEditSelectBtnCreate },
                { parent: document, selector: '.process_wrapper .participant button', event: 'click', func: _self.onClickParticipantBtn },
                { parent: document, selector: '.process_view_block .element[data-name="panel"] .element[data-type="panel_menu"]', event: 'click', func: _self.onClickPanelMenuAction },
                { parent: document, selector: '.process_list > li .header_check', event: 'change', func: _self.onChangeChecbox }, //process_view_btn-copy
                //{ name: '', event: '', func: '' },
            ];

            Global.addEvents(this._events, {
                instance: this
            });
            return this;
        },
    };

    var ProcessWrapper = {
        scroll: 0
    }

    var ProcessList = {
        intervalCommon : null, //перемещение по списку с вправо и влево
        scrollMoveInterval : null,
        stepOfMove : 1,
        speedInterval : 3,
        setWidth: function () {
            if (this.$ && this.$.length) {
                this.$.width(this.$.find('>li').length * 300+this.$.find('>.btn-group').width());
            }
        },
        placeholder: {
            remove: function () {
                $('[data-is]').remove();
            },
            setHeight : function() { //placeholder под списком делаем высотой как список
                var height = $('.process_list .ui-sortable-helper .panel').css('height');
                ProcessList.$.find('>li.ui-state-highlight').css('height', height);
                ProcessList.$.find('>li.placeholder').css('height', height);
            },
            empty : function () {
                var li = document.createElement('li');
                li.className = "ui-state-highlight";
                li.setAttribute('data-is','');
                return li;
            },
            set : function (mouse) {
                var helper={};
                this.placeholder = {};

                this.placeholder.$ = ProcessList.$.find('.ui-state-highlight');
                helper.$ = ProcessList.$.find('.ui-sortable-helper');

                if (mouse.positionIsLeft()) {
                    if (this.placeholder.$.index()>0) {
                        this.placeholder.$.insertBefore(ProcessList.$.find('li:first'));
                        this.setHeight();
                    } else {
                        if (!this.placeholder.$.length) {
                            this.empty().insertBefore(ProcessList.$.find('li:first'));
                            this.setHeight();
                        }
                    }
                }
            },
            more50Percent : function (data) {
                var newColumn, balance, placeholder,
                    positionRightCorner = data.$.offset().left + data.width + ProcessWrapper.scroll,
                    pl = $('ul.process_list'),
                    list = pl.find('>li').not('.ui-sortable-helper').not('.ui-state-highlight');

                balance = positionRightCorner % data.width;
                if (balance > (data.width/2)) {
                    newColumn = Math.floor( positionRightCorner / data.width) - 1;
                    placeholder = pl.find('>li.ui-state-highlight');

                    if (placeholder.length) {
                        if (placeholder.index() != newColumn && newColumn>=0) {
                            placeholder.insertAfter(list.eq(newColumn));
                        }
                    }
                }
            },
            init : function($target) {
                var balance,
                    target = {
                        width: $target.width() + parseInt($target.css('margin-right')),
                        offsetLeft: ($target.offset().left<0 ? 0 : $target.offset().left) + ProcessWrapper.$.scrollLeft(),
                        $: $target
                    },
                    newOrder = Math.floor(target.offsetLeft / target.width),
                    placeholder = $('ul.process_list').find('>li.ui-state-highlight');

                if (placeholder.length>1) {
                    this.remove();
                    placeholder = $(placeholder.selector);
                }

                balance = target.offsetLeft % target.width;
                if (balance && balance > target.width/2) { // > 50%
                    newOrder += 2;
                }

                if (placeholder.length) {
                    if (placeholder.index() != newOrder) {
                        placeholder.insertAfter($('ul.process_list').find('>li').eq(newOrder));
                    }
                } else { //new element
                    $(this.empty()).insertBefore($('ul.process_list').find('>li').eq(newOrder+1));
                }

                this.more50Percent(target);
                this.setHeight();
            }
        },
        event:{
            mouseup : function () {
                ProcessList.$ = $('ul.process_list');
                ProcessWrapper.firstIteration = true;
                clearInterval(ProcessList.intervalCommon);
                clearInterval(ProcessList.scrollMoveInterval);
                ProcessList.intervalCommon = null;
                ProcessList.scrollMoveInterval = null;
                ProcessList.$.css('position', 'fixed');

                ProcessView.setNiceScroll(ProcessList.$.filter('>li .slimscrolldiv.scrollinit'));
                ProcessList.$.css({
                    position: 'relative'
                });
                $(document).off( "mousemove");
            }
        },
        scrollShow : function() {
            $('div.nicescroll-rails').delay(500).animate({"opacity": "1"}, "slow");
        },
        timerInnerStop : function() {
            clearInterval(this.scrollMoveInterval); // зупиняє таймер.
            this.scrollMoveInterval = null;

            return this;
        },
        setOffsetScroll : function () {
            var position = {},
                object = this,
                body = $('body');

            object.scrollMoveInterval = setInterval(function () {
                var $list = $('ul.process_list');

                if (Mouse.positionIsRight()) {
                    position.old = ProcessWrapper.$.scrollLeft() + object.stepOfMove;
                    position._new = ProcessWrapper.$.scrollLeft()+ body.width() > $list.width()
                        ? $list.width() - body.width() + object.stepOfMove  : position.old;
                } else {
                    if ((Mouse.positionIsLeft())) {
                        position.old = ProcessWrapper.$.scrollLeft() - object.stepOfMove;
                        position._new = position.old<=0 ? 0 : position.old;
                    }
                }

                if (Mouse.position && position._new == position.old) {
                    ProcessWrapper.$.stop().animate({'scrollLeft': position._new }, 0);

                    ProcessWrapper.scroll = position._new;
                } else {
                    if (position._new != position.old) {
                        if (Mouse.positionIsLeft()) {

                            object.placeholder.set(Mouse);
                        }
                        if (Mouse.positionIsRight()) {
                            object.placeholder.set(Mouse);
                        }
                    }
                }

            }, object.speedInterval);

            return this;
        },
        setScroll : function () {
            $.each($('.slimscrolldiv'), function (key, value) {
                var $this = $(value),
                    li = $this.closest('li'),
                    list = $this.find('>ul');

                if ($this.find('ul').height() <= list.height()) {
                    li.addClass('absolute');
                    ProcessView.setNiceScroll($this);
                    li.removeClass('absolute');
                }
            });

            return this;
        }
    }

    var UiSortable = {
        scrollMoveInterval: null,
        timer: {
            interval: 0,
            speed : 0,
            step : 1,
            clear : function() {
                clearInterval(this.interval); // зупиняє таймер.
                this.interval = null;
            }
        },
        verticalScroll: {
            interval: 0,
            speed : 100,
            step: 23,
            clear: function () {
                clearInterval(this.interval);
                this.interval = null;
            }
        },
        element: {}, // properties of current element
        event:{
            mouseup : function () {
                $(document).off( "mousemove");
                UiSortable.timer.clear();
                UiSortable.verticalScroll.clear();
            }
        },
        placeholder: {
            time: null,
            remove: function () {
                $('[data-is]').remove();
            },
            empty : function () {
                var li = document.createElement('li');
                li.className = "ui-state-highlight";
                li.setAttribute('data-is','');
                return li;
            },
            setHeight : function() { //placeholder под списком делаем высотой как список
                var height = parseInt( $('.process_list .ui-sortable-helper').css('height'));
                $('.process_list .ui-state-highlight').css({ height: height});
            },
            init : function($target) {
                var newColumn,
                    $list = $('ul.process_list'),
                    object = this,
                    borderForScroll = 120,
                    target = {
                        width: 300,
                        offsetTop: $target.offset().top - $target.offsetParent().offset().top,
                        offsetLeft: $target.offset().left + ProcessWrapper.$.scrollLeft(),
                        realOffsetTop: $target.offset().top,
                        isLastIndex: $target.index() == $target.parent().find('>li').index(),
                        currentCol: $target.parent().closest('li').index()
                    },
                    placeholder = $list.find('>li .ui-state-highlight'),
                    niceScroll = placeholder.closest('.scrollinit'),
                    scroll = niceScroll.length ? niceScroll.getNiceScroll(0).getScrollTop() : 0;

                target.newRow = Math.floor((target.offsetTop + scroll) / parseInt($target.css('min-height')));

                newColumn =  Math.floor(target.offsetLeft/target.width);
                target.isLastColumn = $list.find('>li').size()-1 == newColumn;

                if (placeholder.length>1) {
                    this.remove();
                    placeholder = $(placeholder.selector);
                }

                if (target.offsetLeft%target.width > target.width/2 && !target.isLastColumn) { // > 50%
                    newColumn++;
                }

                if ($target.height() != placeholder.height()) { // set height once
                    placeholder.height($target.height());
                }

                var ul = $list.find('>li').eq(newColumn).find('.ui-sortable'),
                    li = ul.find('li'),
                    ulParent = {
                        offsetTop: $target.closest('.slimscrolldiv').offset().top,
                        $: ul.parent()
                    },
                    niceScroll = ulParent.$.getNiceScroll(0),
                    setInLastPosition = function (li) {
                        li = li.last();
                        if (!placeholder.length) {
                            li.after($(object.empty()));
                        } else li.after(placeholder);
                    },
                    setInFirstPosition = function (li) {
                        li = li.first();
                        if (!placeholder.length) {
                            li.before($(object.empty()));
                        } else li.before(placeholder);
                    };

                if (!ul.length) return;

                ulParent.bottom = ulParent.offsetTop+ulParent.$.height();
                UiSortable.verticalScroll.clear();

                if (niceScroll) {
                    if (target.isLastIndex && !$target.data('once')) { // last item
                        niceScroll.doScrollTop(niceScroll.getScrollTop() + 1000);
                        $target.data('once', true);
                    } else {
                        if (target.realOffsetTop < ulParent.offsetTop + borderForScroll && placeholder.index() && niceScroll.getScrollTop()) {
                            UiSortable.verticalScroll.interval = setInterval(function () {
                                niceScroll.doScrollTop(niceScroll.getScrollTop() - UiSortable.verticalScroll.step);
                                // last position in list
                                if (niceScroll.getScrollTop() < 30) {
                                    setInFirstPosition(li);
                                    UiSortable.placeholder.setHeight();
                                    UiSortable.verticalScroll.clear();
                                }
                            }, UiSortable.verticalScroll.speed);
                        } else {
                            if ((target.realOffsetTop > ulParent.bottom - borderForScroll)
                                && (placeholder.index() != placeholder.parent().find('li').length) ) {
                                UiSortable.verticalScroll.interval = setInterval(function () {
                                    niceScroll.doScrollTop(niceScroll.getScrollTop() + UiSortable.verticalScroll.step);
                                    // last position in list
                                    if (li.parent().length) {
                                        if (li.parent().height() + li.parent().offset().top < $(window).height()
                                            && li.last().not('.ui-state-highlight').length) {
                                            setInLastPosition(li);
                                            UiSortable.placeholder.setHeight();
                                            UiSortable.verticalScroll.clear();
                                            niceScroll.doScrollTop(niceScroll.getScrollTop() + 500);
                                        }
                                    }
                                }, UiSortable.verticalScroll.speed);
                            }
                        }
                    }
                }

                if ($target.closest('ul').closest('li').index() != newColumn
                    && ul.parent().offset().top == ul.offset().top) {
                    if (!placeholder.length) {
                        li.eq(target.newRow).before($(this.empty()));
                    } else {
                        if (target.newRow-1 != placeholder.index() || target.isLastColumn) {
                            var element = li.eq(target.newRow).not('.ui-state-highlight');
                            if (!element) {
                                li.last().not('.ui-state-highlight').after(placeholder);
                            }
                            // else {
                            //     element.before(placeholder);
                            // }
                        }
                    };
                    this.setHeight();
                }

                var index = -1,
                    list = placeholder.closest('ul').find('>li');

                $.each(list, function (key, data) {
                    var cornerY,
                        $data = $(data);

                    if  ($data.offset().top<=0 || $data.is('.ui-state-highlight') || $data.is('.ui-sortable-helper'))
                        return true;

                    cornerY = ($target.offset().top+parseInt($target.css('height')) + parseInt($target.css('margin-bottom')));

                    if ($data.offset().top <= cornerY
                        && ($data.offset().top+ parseInt($data.css('height')) >= cornerY)) {
                        index = $data.index();
                        return false;
                    }
                });

                if (index>=0 && placeholder.length && placeholder.index() != index) {
                    li.eq(index).after(placeholder);
                    clearTimeout(object.time);
                    object.time = setTimeout(function () {
                        clearTimeout(object.time);
                        var placeIndex = $list.find('>li .ui-state-highlight').index();
                        if (index != placeIndex && UiSortable.timer.interval) {
                            li.eq(index).after(placeholder);
                        }
                    }, 550);
                }

                if (target.isLastIndex && UiSortable.countSort<=4) {
                    setInLastPosition(li);
                }
            }
        },
        multiSortEnd : function() { //вставка отобраных элементов в новый список
            $('ul').find('li.joined').each(function() {
                var lnm = $(this).attr('list-num');
                var inm = $(this).attr('ind-num');
                $('ul.process_list > li:nth-child('+lnm+') .panel-body ul li:nth-child('+inm+')').after(this);
            });
            $('ul').find('li.joined').removeClass('joined').css({
                'position': 'relative',
                'left':'auto',
                'top':'auto'
            });
            ProcessView
                .scrollCall();
        },
        setOffsetScroll : function () {
            var direction, leftCircleMouse,
                position = {},
                object = this,
                element = ProcessWrapper.$.find('.element[style*="absolute"]'),
                body = $('body');

            object.timer.interval = setInterval(function () {
                var $list = $('ul.process_list');

                direction = null;
                Mouse.init();

                if (Mouse.positionIsRight()) {
                    direction = true;
                    position.old = ProcessWrapper.$.scrollLeft() + object.timer.step;
                    position._new = ProcessWrapper.$.scrollLeft()+ body.width() > $list.width()
                        ? $list.width() - body.width() + object.timer.step  : position.old;
                } else {
                    if ((Mouse.positionIsLeft())) {
                        direction = false;
                        position.old = ProcessWrapper.$.scrollLeft() - object.timer.step;
                        position._new = position.old<=0 ? 0 : position.old;
                    }
                }
                if (Mouse.position && position._new == position.old) {
                    $list.find('.ui-state-highlight').remove();
                    ProcessWrapper.$.animate({'scrollLeft': position._new }, 0, function () {
                        element.offset({
                            left: direction ? element.offset().left + object.timer.step : element.offset().left - object.timer.step
                        });
                        leftCircleMouse = Mouse.axis.x + position._new;
                    });
                    ProcessWrapper.scroll = position._new;
                }

            }, object.timer.speed);
        }
    }

    var ProcessView = {
        _instance: null,
        _interface: 'processView',
        _type : 'processView',

        getInstance : function(status){
            if (!ProcessView._instance && status) {
                this.createInstance();
            }
            return this._instance;
        },
        checkOrDestroy: function () {
            var lastState, prevState, currentState,
                states = History.getStates();

            if (states) {
                lastState = states[states.length - 1];
                currentState = Url.parseFull(location.href);
                lastState.urlParams = Url.parseFull(lastState.url);

                if (currentState['id'] != lastState.urlParams ['id']) {
                    this.destroy();
                }
            }

            return states ? true : false;
        },
        createInstance : function(){
            var Obj = function(){
                for(var key in ProcessView){
                    this[key] = ProcessView[key];
                }

                for(var key in _public){
                    this[key] = _public[key];
                }
            }

            return this._instance = new Obj().constructor();
        },

        afterLoadView: function () {

        },
        //вызов вертикального скролла для списков
        setNiceScroll: function(selector) {
            if (!selector) {
                return this;
            }

            selector.niceScroll({
                cursorcolor: "#1FB5AD",
                cursorborder: "0px solid #fff",
                cursorborderradius: "0px",
                cursorwidth: "3px",
                fixed: true,
                railalign: 'right',
                enablemousewheel: true,
                autohidemode: false
            });

            return this;
        },
        //static
        initLists : function (sorting_list_id_list) {
            var _this = this,
                instance;

            $.each(sorting_list_id_list, function (key, sorting_list_id) {
                var $section = $('section.panel[data-sorting_list_id="'+ sorting_list_id +'"]');

                $section.find('input[type="checkbox"]').prop('checked', false);
                $section.find('li.checked').removeClass('checked');
                $section.find('.todo-cards').addClass('hidden').next().removeClass('hidden');

                _this.scrollCall($section.closest('li'));
            });

            instance = this.getInstance();

            if (instance) {
                instance.afterViewChanges();
            }
        },
        touchToBack : function () {
            var scroll,
                instanceScroll = null,
                $wrapper = $('#process_wrapper');

            scroll = function (event, $wrapper) {
                this.axis = {
                    end: null,
                    start: {
                        x: event.clientX,
                        y: event.clientY
                    }
                };

                this.changeEvent(event);
                this.baseScroll = $wrapper.scrollLeft();

                this._direction = null;
                this.$container = $wrapper;

                this.init();
            }
            scroll.prototype = Object(null);
            scroll.prototype.changeEvent = function (event) {
                var delta;

                this.event = event;
                this.axis.end = {
                    x: event.clientX,
                    y: event.clientY
                }

                this._direction = (this.axis.end.x <= this.axis.start.x) ? false : true;
                delta = Math.abs(this.axis.end.x - this.axis.start.x);

                this._offset = !this._direction ? (this.baseScroll + delta) : (this.baseScroll - delta);
                this._offset = this._offset < 0 ? 0 : this._offset;

                return this;
            };
            scroll.prototype.init = function () {
                var _this = this;

                _this.$container.stop(true, true).animate({'scrollLeft': _this._offset }, 0);

                return this;
            };
            scroll.prototype.remove = function () {};

            $wrapper.draggable({
                cancel: '.panel-heading, .element[data-name="panel"]',
                distance: 10,
                start: function( event, ui ) {
                    instanceScroll = new scroll(event, $wrapper);
                },
                drag: function( event, ui ) {
                    instanceScroll.changeEvent(event).init();
                },
                stop: function( event, ui ) {
                }
            });

            return this;
        },
        runAfterAjaxSuccess : function (data, module, clear_cards) {
            if(data.status && data.panels){
                var data_id_list_moved = [];
                var data_id_list_adding = [];

                $.each(data.panels, function(sorting_list_id, panels){
                    var panel = $('.process_view_block .element[data-name="process_view_panel"] li .panel[data-sorting_list_id="'+sorting_list_id+'"]');

                    if(panel.length){
                        if(typeof panels.cards == 'undefined' || !panels.cards || $.isEmptyObject(panels.cards)) return true;
                        panel = panel.find('.to-do-list');

                        $.each(panels.cards, function(sorting_cards_id, card_html){
                            var ch = card_html;
                            var data_id = $(ch).data('id');

                            data_id_list_adding.push(data_id);
                            if(clear_cards && module.sorting_list_id != sorting_list_id){
                                data_id_list_moved.push(data_id);
                            }

                            var card = panel.find('.element[data-type="drop_down"][data-sorting_cards_id="'+sorting_cards_id+'"]');
                            if(card.length){
                                card.after(card_html).remove();
                            } else {
                                panel.append(card_html);
                            }
                        });

                    } else {
                        var cards_html = '';
                        if(typeof panels.cards == 'undefined' || !panels.cards || $.isEmptyObject(panels.cards)) return true;

                        $.each(panels.cards, function(sorting_cards_id, card_html){
                            var ch = card_html;
                            var data_id = $(ch).data('id');

                            data_id_list_adding.push(data_id);
                            if(clear_cards && module.sorting_list_id != sorting_list_id){
                                data_id_list_moved.push(data_id);
                            }

                            cards_html+=card_html;
                        });

                        if(!cards_html){
                            return true;
                        }

                        $('.process_view_block .element[data-name="process_view_panel"]')
                            .append(panels.html)
                            // для блика
                            .find('.element[data-name="panel"] .panel[data-sorting_list_id="'+sorting_list_id+'"]').closest('.element[data-name="panel"]').css('display', 'none');

                        var panel = $('.process_view_block .element[data-name="process_view_panel"] li .panel[data-sorting_list_id="'+sorting_list_id+'"]');
                        if(panel.length){
                            panel.find('.to-do-list').html(cards_html)
                        }
                    }
                });


                // удаляем перенесенные карточки в другой список processView
                if(!$.isEmptyObject(data_id_list_moved)){
                    $.each(data_id_list_moved, function(key, data_id){
                        $('.process_view_block .element[data-name="process_view_panel"] .panel[data-sorting_list_id="'+module.sorting_list_id+'"] li.element[data-type="drop_down"][data-id="'+data_id+'"]').remove();
                    });
                }

                // удаляем перенесенные карточки в другой список processView, что отсутвует на странице
                if(!$.isEmptyObject(module.data_id_list)){
                    /*
                     var inObject = function(data_id, data_id_list){
                     var result = false;
                     if($.isEmptyObject(data_id_list)){
                     return result;
                     }
                     $.each(data_id_list, function(key, data_id_obj){
                     if(data_id_obj == data_id){
                     result = true;
                     return false;
                     }
                     });

                     return result;
                     }
                     */

                    $.each(module.data_id_list, function(key, data_id){
                        if($.isEmptyObject(data_id_list_adding) || $.inArray(parseInt(data_id), data_id_list_adding) < 0){
                            $('.process_view_block .element[data-name="process_view_panel"] .panel[data-sorting_list_id="' + module.sorting_list_id + '"] li.element[data-type="drop_down"][data-id="' + data_id + '"]').remove();
                        }
                    });

                }


                // для блика
                $('.process_view_block .element[data-name="process_view_panel"] .element[data-name="panel"] .panel').each(function(i, ul){
                    $(ul).closest('.element[data-name="panel"]').css('display', '');
                })
            }
        },
        convert : {
            dataIdToSortingListIdList : function (data) {
                var list = [];

                $.each(data, function (key, value) {
                    var sorting_list_id = $('section.panel').has('li[data-id="'+ value +'"]').data('sorting_list_id');

                    if ($.inArray(sorting_list_id, list) < 0) {
                        list.push(sorting_list_id);
                    }
                });

                return list;
            }
        },
        defaultState : function(){
            var $wrapper = $('.process_wrapper ');

            $wrapper.find('.checked').removeClass('checked');
            $wrapper.find('input').prop('checked', false);
            this.setProcessButtons();

            return this;
        },
        setProcessButtons : function(status) { //смена кнопок
            var $pList = $('.process_list > li');
            $pList.find('.btn-add-card').removeClass('hidden');
            $pList.find('.todo-cards').addClass('hidden');

            if (status == false) {
                var $lists = $('.process_list .to-do-list li.checked');

                $lists.find('.todo-cards').removeClass('hidden');
                $lists.find('.btn-add-card').addClass('hidden');

                return this;
            }

            $('.process_list .to-do-list li.checked').each(function() {
                var $lists = $(this).closest('.process_list > li');

                $lists.find('.todo-cards').removeClass('hidden');
                $lists.find('.btn-add-card').addClass('hidden');
            });
            return this;
        },
        allMethod : function () {
            var _this = this;

            //вызов jQuery UI сортировки для страницы Process-view
            ProcessList.$ = $('ul.process_list');
            this.initUiSort();

            if ($('.process_view_block').length) {
                //ширина окна process wiev под списки
                ProcessList.setWidth();
            }

            //fixing cut off fix
            $(document).on('mousedown', 'ul.process_list > li .slimscrolldiv', function(e){
                e.stopPropagation();
            });
            $(document).on('mousedown', 'ul.process_list > li .header_check', function(e){
                e.stopPropagation();
            });
            $(document).on('mousedown', 'ul.process_list > li i.fa', function(e){
                e.stopPropagation();
            });

            $(document).on('mousedown', 'ul.process_list li[data-type="drop_down"]', function () {
                ProcessViewBase.saveTitles();
                $(document).on( "mousemove", Mouse.event.mousemove);
                UiSortable.countSort = 0;
            });
            $(document).on('mouseup', 'ul.process_list li[data-type="drop_down"]', UiSortable.event.mouseup);

            //cut off fix
            $(document).on('mousedown','ul.process_list > li', function(){
                relFix();
                $(document).on( "mousemove", Mouse.event.mousemove);
                ProcessList.width = $(this).width();
                $('ul.process_list').css({
                    position: 'static'
                });
            });
            $(document).on('mouseup', 'ul.process_list > li', ProcessList.event.mouseup);

            //удаление по класу checked на карточке
            $('button.process_card_delete').on('click',function() {
                $(this).closest('li').find('li.checked').remove();

                _this
                    .setProcessButtons()
                    .scrollCall();
            });

            //копирование по класу checked на карточке
            $('button.process_card_copy').on('click',function() {
                $(this).closest('li').find('li.checked').clone(true).appendTo($(this).closest('li').find('ul.to-do-list'));
                _this.scrollCall();
            });

            ProcessWrapper.$ = $('.process_wrapper');
            ProcessWrapper.$.scroll(function () {
                var $this = $(this),
                    $list = $('ul.process_list');

                ProcessWrapper.scroll = $this.scrollLeft();
                $this.find('.submodule-link.open').removeClass('open');
                if ($list.length) {
                    var placeholder = $list.find('.ui-state-highlight');

                    if ($('body').width()+$this.scrollLeft() > $list.width()) { // last $list
                        if ($list.find('>li').index() != placeholder.index()) {
                            placeholder.insertAfter($list.find('>li:last'))
                        }
                    } else {
                        if ($this.scrollLeft()< $list.width()-50 && !$list.offset().left) {
                            placeholder.insertBefore($list.find('>li:first'))
                        }
                    }
                }
            });

            this
                .initElements(this)
                .loadedOfImages();

            setTimeout(function() {
                ProcessView.scrollCall();
            }, 100);

            return this;
        },
        loadedOfImages : function(){
            var $images = $('.process_wrapper  img'),
                counter = $images.length,
                object = this;

            $images.one("load", function() {
                counter--;
                if (counter == 0) {
                    object.scrollCall();
                    ProcessList.setScroll();
                }
            }).each(function() {
                if(this.complete) $(this).load();
            });

            return this;
        },
        setProcessColor : function() { //цвет карточки в зависимости от чекбокса
            $('.process_list .to-do-list li .card_check').each(function() {
                var $this = $(this);

                if ( $this.prop('checked') ) {
                    $this.closest('li').addClass('checked');
                } else {
                    $this.closest('li').removeClass('checked');
                }
            });

            return this;
        },
        bigWrapper : function() { //расчет высоты для большого горизонтального скролла
            if ($('body ul').is('.process_list')) {
                $('section.wrapper').height($(window).height() - $('section.wrapper').offset().top );
                $('div.process_wrapper').height($(window).height() - $('ul.process_list').offset().top );
                $('section.wrapper').css({'padding-bottom': '0', 'padding-top': '0', 'position':'fixed'});
                $('html').addClass('overflowHidden');
            }

            return this;
        },
        scrollCall : function($element) { //пересчет высоты списков
            var $list = $element || $('ul.process_list > li').not('.ui-sortable-helper');

            $.each($list, function() {
                var $this = $(this),
                    liSortTop =  $this.offset().top,
                    liSortHeight = $this.find('ul.to-do-list').height() + 130,
                    liSortSumm = liSortTop + liSortHeight,
                    wHeight = $(window).height(),
                    $element = $this.find('.slimscrolldiv');

                $element.css('height', 'auto');
                if (liSortSumm >= wHeight) {
                    var shift = liSortSumm - wHeight;
                    $element.filter('.scrollinit').removeClass('scrollinit');
                    $element.css('height' , liSortHeight - 130 - shift).addClass('scrollinit');
                } else {
                    $element.removeClass('scrollinit').attr('style','');
                }
            });

            this.bigWrapper();

            return this;
        },
        changeParam : function () {
            /*
             var obj = Base.parseUrl(location.href),
             $pv = $('.process_view_block');

             $pv.attr({
             'data-parent_copy_id': obj.pci,
             'data-parent_data_id': obj.pdi,
             });
             */
        },
        setScroll: function ($element) { // fixActivityInEditView
            var $list = $element || $('.element[data-name="process_view_panel"]').find('.slimscrolldiv');

            $.each($list, function () {
                var $this = $(this),
                    $li = $this.closest('li');

                $li.addClass('absolute');
                $this.getNiceScroll().remove();
                ProcessView.setNiceScroll($this);
                $li.removeClass('absolute');
            });
        },
        // состояние обновления
        process_view_update_result : true, // static
        // панель, что в настоящий момет обновляется
        process_view_update_this : '', // static

        sorting_list_id : null, // static
        sorting_cards_id_list : [], // static

        active_fields_view : null,

        initElements : function(link){
            var processListItem = $('ul.process_list > li');
            link ? link.scrollCall() : this.scrollCall();

            processListItem.css('position', 'fixed');
            ProcessView.setNiceScroll(processListItem.find('.slimscrolldiv.scrollinit'));
            processListItem.css('position', 'relative');
            $('div.process_wrapper').addClass('static');
            $('.page_process_view').removeClass('page_process_view');

            return this;
        },

        //инициализация UI sortable для списков
        initUiSort : function(){
            var _this = this;

            $( ".ui-sortable" ).sortable({
                cancel: ".dropdown-menu",
                connectWith: ".to-do-list",
                placeholder: {
                    element: function(clone, ui) {
                        return $('<li class="ui-state-highlight"></li>');
                    },
                    update: function(event,ui) {
                        var helper = ProcessList.$.find($('.ui-sortable-helper'));
                        helper.length ? UiSortable.placeholder.init(helper) : '';
                        return;
                    }
                },
                scroll: false,
                delay: 150,
                change: function( event, ui ) {
                    _this.setProcessButtons();
                },
                sort: function( event, ui ) {
                    UiSortable.countSort++;
                    //_this.setProcessButtons();
                    multiSortBgn();

                    if (ui.helper.length>1) UiSortable.placeholder.remove();

                    if (Mouse.position && !UiSortable.timer.interval) {
                        UiSortable.setOffsetScroll(); // start timer
                    } else {
                        if (!Mouse.position && UiSortable.timer.interval) {
                            UiSortable.timer.clear();
                        }
                        //UiSortable.placeholder.init(ui.helper);
                    }
                },
                over: function( event, ui ) {
                    _this.scrollCall();
                    var helper = ProcessList.$.find($('.ui-sortable-helper'));
                    //helper.length ? UiSortable.placeholder.init(helper) : '';
                    //UiSortable.placeholder.init(ui.helper);
                },
                out: function( event, ui ) {
                },
                update: function( event, ui ) {
                    _this
                        .setSortingListId($(ProcessView.process_view_update_this).data('sorting_list_id'))
                        .setSortingCardsIdList();
                    ProcessView.setProcessButtons(false);
                },
                start: function( event, ui ) {
                    ProcessView.lastPlaceMarkDel();
                    ProcessList.$.addClass('task');
                },
                stop: function( event, ui ) {
                    UiSortable.multiSortEnd();

                    var update_data = ProcessView.getUpdateData();

                    ProcessView.cardSort(function(data){
                        if(data.status){
                            ProcessView.updateData(update_data, function(list){
                                ProcessView.setProcessButtons();
                            });
                        }
                    });


                    $('.sm_extension_data').removeClass('update');
                    UiSortable.timer.clear();
                    //recUnFix();
                    ProcessList.$.removeClass('task');
                    ProcessList.setWidth();
                    ProcessList.setScroll();

                    //отметить чекбокс по одному
                    $('.process_list > li .card_check').off('change').on('change', _this.onChange_checkbox);
                    return ProcessView.process_view_update_result;
                },
                beforeStop: function( event, ui ) {
                    ProcessView.process_view_update_this = $('.ui-state-highlight').closest('.panel');
                },
                receive : function( event, ui ){
                    ProcessView.lastPlaceMark(ui);
                },
            }).disableSelection();

            ProcessWrapper.firstIteration = true;
            $('ul.process_list').sortable({
                cancel: ".dropdown-menu,.panel-body, .btn-group, .fa-cog, input[type='checkbox'], .panel-heading a, .panel-heading input",
                placeholder: "ui-state-highlight",
                connectWith: "[data-name='panel']",
                delay: 150,
                sort: function( event, ui ) {
                    if (ProcessWrapper.firstIteration) {
                        ProcessList.placeholder.setHeight();
                        ProcessWrapper.firstIteration = !ProcessWrapper.firstIteration;
                    }

                    if (ui.helper.length>1) ProcessList.placeholder.remove();

                    if (Mouse.position && !ProcessList.scrollMoveInterval) {
                        ProcessList.setOffsetScroll(); // start timer
                    } else {
                        if (!Mouse.position && ProcessList.scrollMoveInterval) {
                            ProcessList.timerInnerStop();
                        }
                        ProcessList.placeholder.init(ui.helper);
                    }
                },
                update: function( event, ui ) {
                    _this.scrollCall();
                },
                start: function( event, ui ) {
                    relFix();
                },
                beforeStop: function( event, ui ) {
                    ProcessView.panelSort();
                    ProcessView.process_view_update_this = $('.ui-sortable-helper');
                },
                stop: function( event, ui ) {
                    relUnfix();
                    ProcessList.scrollShow();
                    _this.scrollCall();
                    ProcessList.timerInnerStop();
                    ProcessList.$.find('.ui-state-highlight').remove();
                    ProcessList.setWidth();
                }
            }).disableSelection();

            return this;
        },

        //demark the lists
        lastPlaceMarkDel : function(){
            $('ul.lastlist').removeClass('lastlist');
        },

        //mark the list where card is removed
        lastPlaceMark : function(ui){
            if (ui.sender !== null) {
                ui.sender.addClass('lastlist');
            }
        },

        //checkAndRemoveEmptyPanel
        checkAndRemoveEmptyPanel : function(panel){
            var _this = this;

            if($(panel).find('.to-do-list li').length == 0){
                var sorting_list_id = $(panel).find('section.panel').data('sorting_list_id');

                if($('.element[data-name="panel"]').length > 1){
                    ProcessView.panelSortDelete(sorting_list_id, function(data){
                        if(data.status){
                            $('.element[data-name="process_view_panel"] .panel[data-sorting_list_id="' + sorting_list_id + '"]').closest('.element[data-name="panel"]').remove();
                        }
                    });
                } else {

                    ProcessView.panelSortDelete(sorting_list_id, function(data){
                        if(data.status){
                            if(data.add_panel == false){
                                $('.element[data-name="process_view_panel"] .panel[data-sorting_list_id="' + sorting_list_id + '"]').closest('.element[data-name="panel"]').remove();
                            }

                            if(data.add_panel){
                                ProcessView.addPanel(function(data2){
                                    $('.element[data-name="process_view_panel"] .panel[data-sorting_list_id="' + sorting_list_id + '"]').closest('.element[data-name="panel"]').remove();

                                    var process_view_panel = $('.process_view_block .element[data-name="process_view_panel"]');
                                    process_view_panel.html(data2.html)
                                });
                            }
                        }
                    });
                }
            }
        },


        setSortingListId : function(sorting_list_id){
            ProcessView.sorting_list_id = sorting_list_id;

            return this;
        },

        getSortingListId : function(_this){
            return $(_this).closest('.element[data-name="panel"]').find('section.panel').data('sorting_list_id');
        },

        setSortingCardsIdList : function(sorting_cards_id_list){
            if(typeof sorting_list_id == 'undefined'){
                sorting_cards_id_list = ProcessView.getSortingCardsIdList();
            }

            ProcessView.sorting_cards_id_list = sorting_cards_id_list;
        },


        getSortingCardsIdList : function(){
            var list = [];
            $('.sm_extension_data.update').each(function(){
                list.push($(this).data('sorting_cards_id'));
            });
            return list;
        },



        getUpdateDataIdList : function(){
            var data_id_list = [];
            $('.sm_extension_data.update').each(function(){
                data_id_list.push($(this).data('id'));
            });
            return data_id_list;
        },


        getUpdatesortingCardsIdList : function(){
            var sorting_cards_id_list = [];
            $('.sm_extension_data.update').each(function(){
                sorting_cards_id_list.push($(this).data('sorting_cards_id'));
            });
            return sorting_cards_id_list;
        },

        getSortingCardsIdBefore : function(){
            var parent_index = -1,
                sorting_cards_id = -1,
                $pvUpdate = $(ProcessView.process_view_update_this);

            $pvUpdate.find('ul.to-do-list > li').each(function(i, ul){
                if($(ul).hasClass('update')){
                    parent_index = $(ul).index();
                    return false;
                }
            });
            if(parent_index > 0){
                sorting_cards_id = $pvUpdate
                    .find('ul.to-do-list > li')
                    .eq(parent_index-1)
                    .data('sorting_cards_id');
            }
            return sorting_cards_id;
        },

        getUpdateDataParentId : function(){
            var parent_index = -1,
                parent_unique_index = -1,
                $pvUpdate = $(ProcessView.process_view_update_this);

            $pvUpdate.find('ul.to-do-list > li').each(function(i, ul){
                if($(ul).hasClass('update')){
                    parent_index = $(ul).index();
                    return false;
                }
            });
            if(parent_index > 0){
                parent_unique_index = $pvUpdate
                    .find('ul.to-do-list > li')
                    .eq(parent_index-1)
                    .data('id');
            }
            return parent_unique_index;
        },

        //editData
        editData : function(el, _this){
            delete window.backForward;

            ProcessView.setSortingListId($(_this).closest('section.panel').data('sorting_list_id'));

            var tag_name,
                instanceEV = EditView.createInstance().setParent(this).setPreloader(this.getPreloader()),
                select = $(el.target).closest('.element[data-type="select"]');

            if(typeof(select) != 'undefined' && select.length > 0) return;

            tag_name = el.target.tagName.toLowerCase();
            if(tag_name == 'input' || tag_name == 'a') return;

            this.setParentElement($(_this));

            instanceEV
                .editCard(_this, null, function(data){
                    if(data.status == 'data'){
                        this.setBlockDisplayStatus($('.edit-view[data-copy_id="'+data.copy_id+'"]'));
                        EditView.activityMessages.init();
                        textAreaResize();

                        Global.addOperationInSDM();

                        Global.createLinkByEV($('.edit-view.in:last'));
                        jScrollInit();
                        niceScrollCreate($('.submodule-table'));
                        imagePreview();
                        $('.form-control.time').each(function(){
                            initElements('.edit-view', $(this).val());
                        });
                        EditView.changeBlockLoadedMessages();
                    }
                });

            el.stopPropagation();
        },


        getFieldsGroupList : function(){
            var fields_group_list = [];
            $('.process_view_block .element[data-name="process_view_fields_group"] li.active a').each(function(i, ul){
                var field_names = $(ul).data('name');
                field_names = field_names.split(',');
                $.each(field_names, function(key, field_name){
                    fields_group_list.push(field_name);
                });
            });

            return fields_group_list;
        },

        getUpdateData : function(){
            var data_id_list,
                result = {},
                fields_group_values = {};

            ProcessView.process_view_update_result = true;
            data_id_list = ProcessView.getUpdateDataIdList();

            //TODO: move to ProcessViewBase.getFieldId
            $(ProcessView.process_view_update_this).find('.element[data-name="field_title_value"]').each(function(){
                var id_field = $(this).data('value');
                fields_group_values[$(this).data('field')] = id_field;
            });

            if(data_id_list.length > 0){
                result = {
                    'data_id_list': data_id_list,
                    'fields_group_values': fields_group_values,
                    'this_template': $('.process_view_block.sm_extension').data('this_template'),
                    'fields_group': this.getFieldsGroupList(),
                    'sorting_list_id': ProcessView.process_view_update_this.data('sorting_list_id'),
                    'pci': $('.process_view_block.sm_extension').data('parent_copy_id'),
                    'pdi': $('.process_view_block.sm_extension').data('parent_data_id'),
                    'finished_object' : ($('.process_view_block.sm_extension .element[data-type="finished_object"]').hasClass('active') ? 1 : 0)
                };
            }

            return result;
        },


        //updateData - static
        updateData : function(_data, callback){
            var _this = this;

            if($.isEmptyObject(_data)){
                ProcessView.process_view_update_result = false;
                return callback();
            }

            $.ajax({
                url: Global.urls.url_process_view_update +'/'+$('.sm_extension').data('copy_id'),
                data: _data,
                type: "POST", dataType: 'json', async : false,
                success: function(data){
                    if(data.status == true){
                        _this.runAfterAjaxSuccess(data, _data, false);
                        /*
                         if(data.html){
                         $.each(data.html, function(data_id, html){
                         $(processView.process_view_update_this).find('.sm_extension_data[data-id="'+data_id+'"]').after(html).remove();
                         });

                         }
                         */

                        ProcessView.process_view_update_result = true;

                        $('.to-do-list.lastlist').each(function(i, ul){
                            ProcessView.checkAndRemoveEmptyPanel($(ul).closest('.element[data-name="panel"]'));
                        })
                    } else {
                        Message.show(data.messages, false);
                    }
                    callback(data.html);
                },
                error: function(){
                    //callback();
                    ProcessView.process_view_update_result = false;
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error}], true);
                }
            });
        },

        //cardSort - static
        cardSort : function(callback){
            if($(ProcessView.sorting_cards_id_list).length == 0){
                return;
            }

            $.ajax({
                url: Global.urls.url_process_view_card_sort +'/'+$('.sm_extension').data('copy_id'),
                data: {
                    'sorting_list_id' : ProcessView.sorting_list_id,
                    'sorting_cards_id_before' : ProcessView.getSortingCardsIdBefore,
                    'sorting_cards_id_list' : ProcessView.sorting_cards_id_list,
                    'pci' : $('.process_view_block.sm_extension').data('parent_copy_id'),
                    'pdi' : $('.process_view_block.sm_extension').data('parent_data_id'),
                },
                type: "POST", dataType: 'json',
                success: function(data){
                    if(typeof callback == 'function'){
                        callback(data);
                    }
                },
                error: function(){
                    if(typeof callback == 'function'){
                        callback();
                    }
                }
            });
        },

        //panelSort
        panelSort : function(){
            var highlight = $('ul.element[data-name="process_view_panel"] > li.ui-state-highlight');
            var index = highlight.index();
            var index_parent = -1;
            var sorting_list_id_before = -1;

            // если одна панель
            if(index == 1 && $('ul.element[data-name="process_view_panel"] > li:not(.ui-state-highlight)').length == 1) return;
            index--;
            if(index > 0) index_parent = index - 1;

            if(index_parent > -1) sorting_list_id_before = $('ul.element[data-name="process_view_panel"] > li').eq(index_parent).find('section.panel').data('sorting_list_id');

            var sorting_list_id = $('ul.element[data-name="process_view_panel"] > li').eq(index).find('section.panel').data('sorting_list_id');



            $.post(Global.urls.url_process_view_panel_sort + '/' + $('.sm_extension').data('copy_id'), {
                'sorting_list_id_before' : sorting_list_id_before,
                'sorting_list_id' : sorting_list_id,
                'pci' : $('.process_view_block.sm_extension').data('parent_copy_id'),
                'pdi' : $('.process_view_block.sm_extension').data('parent_data_id'),
                'this_template' : $('.process_view_block.sm_extension').data('this_template'),
                'finished_object' : ($('.process_view_block.sm_extension .element[data-type="finished_object"]').hasClass('active') ? 1 : 0)
            });
        },

        //panelSortDelete
        panelSortDelete : function(sorting_list_id, callback){
            $.post(
                Global.urls.url_process_view_panel_sort_delete + '/' + $('.sm_extension').data('copy_id'),
                {'sorting_list_id' : sorting_list_id},
                function(data){
                    if(typeof callback == 'function'){
                        callback(data);
                    }
                }
            );
        },


        addPanel : function(callback){
            var copy_id = $('.process_view_block.sm_extension').data('copy_id');

            $.ajax({
                url: $('#global_params').data('url_process_view_get_panel') + '/' + copy_id,
                dataType: "json", type: "POST",
                data : {
                    'this_template' : $('.process_view_block.sm_extension').data('this_template'),
                    'pci' : $('.list_view_block.sm_extension, .process_view_block.sm_extension').data('parent_copy_id'),
                    'pdi' : $('.list_view_block.sm_extension, .process_view_block.sm_extension').data('parent_data_id'),
                    'fields_group': ProcessView.getFieldsGroupList(),
                    'this_template' : $('.process_view_block.sm_extension').data('this_template'),
                    'finished_object' : ($('.process_view_block.sm_extension .element[data-type="finished_object"]').hasClass('active') ? 1 : 0)
                },
                success: function(data){
                    callback(data)
                },
                error: function(){
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error}], true);
                },
            });
            /*
             .done(function(){
             $('.process_view_dnt-add_list').closest('.btn-group').appendTo('.process_list');
             });
             */
        },



        //addNew
        addCard : function(_this){
            var default_data = {},
                $list = $(_this).closest('.panel').find('.element[data-name="field_title"] .element[data-name="field_title_value"]'),
                instanceEV = EditView.createInstance().setParent(this).setPreloader(this.getPreloader());

            $.each($list, function(i, ul){
                default_data[$(ul).data('field')] =  $(ul).attr('data-value');
            });

            this.setParentElement(_this); // потрібно забрати і вести через EV. Це костиль.

            instanceEV
                .setParentElement(_this)
                .addCard(_this, {'default_data' : default_data}, function(data){
                    if(data.status == 'data'){
                        instanceEditView = new EditViewContainer(data);
                        modalDialog.show(data.data, true);
                        EditView.setBlockDisplayStatus($('.edit-view[data-copy_id="'+data.copy_id+'"]'));

                        Global.addOperationInSDM();

                        History.add(data.copy_id, '', {});
                        // niceScrollInit();
                        EditView.activityMessages.init();
                        textAreaResize();
                        jScrollInit();
                        niceScrollCreate($('.submodule-table'));
                        var $modal = $(modalDialog.getModalName()).find('.client-name');
                        if ( $modal.find('span').first().text() == "" ) {
                            $modal.find('.edit-dropdown').first().addClass('open');
                        }
                        instanceGlobal.contentReload.preloaderHide();
                    }
                    EditView.hiddenBlocks();
                });
            },

        headerCheck : function($this){
            var _this = this;

            $this.on('change', function(){
                if ($this.prop('checked')) {
                    $this.closest('.process_list').find('.card_check').attr('checked', false);
                    $this.closest('.process_list').find('.header_check').attr('checked', false);
                    $this.closest('li').find('.card_check').prop('checked', true);
                    $this.prop('checked', true);
                } else {
                    $this.closest('.process_list').find('.card_check').attr('checked', false);
                    $this.closest('.process_list').find('.header_check').attr('checked', false);
                }

                _this
                    .setProcessColor()
                    .setProcessButtons();
            });

            return this;
        },

        panelMenuSendAjax : function(_url, _data, callback){
            $.ajax({
                url: _url,
                dataType: "json",
                type: "POST",
                data : _data,
                success: function(data) {
                    callback(data);
                },
                error: function(){
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error}], true);
                },
            });
        },

        panelMenuActionDelete : function(element){
            var isset_entityes = $(element).closest('.panel').find('.to-do-list > .element[data-type="drop_down"]').length,
                _this = this;

            if(isset_entityes){
                var message = 'Delete list and all entities';
            } else {
                var message = 'Delete list';
            }


            var _function = function(){
                var copy_id = $('.process_view_block.sm_extension').data('copy_id');
                var _data = {
                    'run_action': 'delete',
                    'sorting_list_id': $(element).closest('.panel').data('sorting_list_id'),
                    'pci': $('.process_view_block.sm_extension').data('parent_copy_id'),
                    'pdi': $('.process_view_block.sm_extension').data('parent_data_id'),
                    'this_template': $('.process_view_block.sm_extension').data('this_template'),
                    'finished_object': ($('.process_view_block.sm_extension .element[data-type="finished_object"]').hasClass('active') ? 1 : 0)
                };

                ProcessView.panelMenuSendAjax(Global.urls.url_process_view_panel_menu_action_run + '/' + copy_id, _data, function(data){
                    if(data.status == false || data.status == 'access_error'){
                        if(typeof data.messages != 'undefined'){
                            Message.show(data.messages, false);
                        }
                    } else if(data.status == true){
                        $('.element[data-name="process_view_panel"] .panel[data-sorting_list_id="' + _data.sorting_list_id + '"]').closest('.element[data-name="panel"]').remove();

                        /*
                         if($('.element[data-name="panel"]').length == 0){
                         processView.addPanel(function(data){
                         var process_view_panel = $('.process_view_block .element[data-name="process_view_panel"]');
                         process_view_panel.prepend(data.html);
                         });
                         }
                         */
                    }
                })
            }

            Message.show([{'type':'confirm', 'message': Message.translate_local(message) + '?'}], false, function(_this_c){
                if($(_this_c).hasClass('yes-button')){
                    modalDialog.hide();
                    _function();
                }
            }, Message.TYPE_DIALOG_CONFIRM);
        },




        panelMenuActionArchive : function(element){
            var _function,
                _this = this;

            _function  = function(){
                var copy_id = $('.process_view_block.sm_extension').data('copy_id');
                var _data = {
                    'run_action': 'archive',
                    'sorting_list_id': $(element).closest('.panel').data('sorting_list_id'),
                    'pci': $('.process_view_block.sm_extension').data('parent_copy_id'),
                    'pdi': $('.process_view_block.sm_extension').data('parent_data_id'),
                };

                ProcessView.panelMenuSendAjax(Global.urls.url_process_view_panel_menu_action_run + '/' + copy_id, _data, function(data){
                    if(data.status == false || data.status == 'access_error'){
                        if(typeof data.messages != 'undefined'){
                            Message.show(data.messages, false);
                        }
                    } else if(data.status == true){
                        $('.element[data-name="process_view_panel"] .panel[data-sorting_list_id="' + _data.sorting_list_id + '"]').closest('.element[data-name="panel"]').remove();

                        /*
                         if($('.element[data-name="panel"]').length == 0){
                         processView.addPanel(function(data){
                         var process_view_panel = $('.process_view_block .element[data-name="process_view_panel"]');
                         process_view_panel.prepend(data.html);
                         });
                         }
                         */
                    }
                })
            }


            Message.show([{'type':'confirm', 'message': Message.translate_local('Archive the list') + '?'}], false, function(_this_c){
                if($(_this_c).hasClass('yes-button')){
                    modalDialog.hide();
                    _function();
                }
            }, Message.TYPE_DIALOG_CONFIRM);
        },
        destroy : function () {
            $('html').removeClass('overflowHidden');
            NiceScroll.clear($('ul.process_list > li .slimscrolldiv'));

            if (ProcessView._instance) {
                Global.removeEvents(ProcessView._instance._events);
                Events.removeHandler({ key: 'ProcessViewResize', type: Events.TYPE_EVENT_RESIZE });
            }
            ProcessView._instance = null;
        }
    }

    for(var key in _private) {
        _self[key] = _private[key];
    }

    exports.ProcessWrapper = ProcessWrapper;
    exports.ProcessView = ProcessView;
    exports.ProcessList = ProcessList;
    exports.UiSortable = UiSortable;

    // забрати!!!!
    exports.extPreloader = extPreloader;
})(window);

/******************************************
             OTHER FUNCTION
*******************************************/

var scrollHide = function() {
    $('div.nicescroll-rails').css('opacity','0');
};

//мульти сортировка всех отмеченый чекбоксами
var multiSortBgn = function() {
    $('li.ui-sortable-helper').addClass('update');
    if ($('li.ui-sortable-helper').is('.checked')) {
        $('li.ui-sortable-helper')
            .parent().find('.checked').not('.ui-sortable-helper')
            .addClass('joined update').width(253).css('position', 'absolute');  /*.height(36)*/
        var lefthelper = $('li.ui-sortable-helper').css('left');
        var tophelper =  parseFloat($('li.ui-sortable-helper').css('top'), 10)+$('li.ui-sortable-helper').height();
        var placeInd = $('li.ui-state-highlight').index();
        if (placeInd > $('li.ui-sortable-helper').index()) {
            var placeInd = placeInd - 1;
        }
        var listInd = $('li.ui-state-highlight').parent('ul').index('.to-do-list') + 1;
        $('ul').find('li.joined').each(function() {
            var jindex = $(this).index("li.joined") + 1;
            var placePer = placeInd + jindex;
            var templeft = parseFloat(lefthelper, 10);
            var temptop = tophelper+42;
            $(this).css({
                'left': templeft+'px',
                'top' : temptop+'px'
            });
            tophelper = temptop + $(this).height();
            $(this).attr('ind-num', placePer).attr('list-num', listInd);
        });
    }
};

//fixing sorting cut off bug
var relFix = function() {
    $('div.process_wrapper').css('position', 'static');
};
var relUnfix = function() {
    $('div.process_wrapper').css('position', 'relative');
};
var recFix = function() {
    $('div.process_wrapper').css('overflow', 'visible');
};
var recUnFix = function() {
    $('div.process_wrapper').css('overflow', 'hidden');
};


window.onload = function () {
    var process_view_block = $('.process_view_block');

    if (process_view_block.length) {
        //ширина окна process view под списки
        ProcessList.setWidth();
    }

    if (process_view_block.data('page_name') != 'processView' || window.location.search.indexOf('search') > 0) {
        localStorage.removeItem('currentStatePageName');
    }
    else {
        var currentStatePageName = JSON.parse(localStorage.getItem('currentStatePageName'));
        if (!currentStatePageName) return;
        process_view_block.find('.process_wrapper').scrollLeft(currentStatePageName.posScroll)
        $.each(currentStatePageName.list, function (index, value) {
            var slimscroll = $('[data-unique_index = ' + value.data_unique_index + ']').find('.slimscrolldiv');
            if (slimscroll.length && slimscroll.getNiceScroll(0)) {
                slimscroll.getNiceScroll(0).doScrollPos(0, value.position);
            }
        });
    }
}

var ProcessViewBase = new function () {
    var start = '[data-copy_id="7"][data-parent_copy_id="10"] ';

    this.init = function(){
        var parent = this,
            processViewPanelHeader = {
            editing : false,

            setEditing : function(editing){
                if(editing == false){
                    if($('.panel-heading .process_view-save-input').length) return;
                }

                processViewPanelHeader.editing = editing;
            },

            addPanel : function(_this){
                ProcessView.addPanel(function(data){
                    if(data.status == 'access_error'){
                        Message.show(data.messages, false);
                    } else {
                        var process_view_panel = $(_this).closest('.sm_extension').find('.element[data-name="process_view_panel"]');
                        processViewPanelHeader.setEditing(false);
                        process_view_panel.append(data.html)
                        processViewPanelHeader.edit($('.process_view_block .element[data-name="process_view_panel"] .element[data-name="panel"]:last'));

                        ProcessView
                            .headerCheck(process_view_panel.find('.panel-heading:last .header_check'))
                            .initUiSort();

                        $('ul.process_list').width($('ul.process_list > li').length * 300 + 155);
                        ProcessView.initElements();
                        $(".process_list").sortable("destroy");
                        //processView.initUiSort();
                        EditView.hiddenBlocks();

                        $('.process_view_dnt-add_list').closest('.btn-group').appendTo('.process_list');
                    }
                });
            },


            savePanelTitle : function(sorting_list_id, fields_data_list, callback){
                var copy_id = $('.process_view_block.sm_extension').data('copy_id');

                $.ajax({
                    url: Global.urls.url_process_view_save_panel_title+ '/' + copy_id,
                    dataType: "json", type: "POST",
                    data : {
                        'sorting_list_id' : sorting_list_id,
                        'fields_data_list' : fields_data_list,
                        'pci' : $('.list_view_block.sm_extension, .process_view_block.sm_extension').data('parent_copy_id'),
                        'pdi' : $('.list_view_block.sm_extension, .process_view_block.sm_extension').data('parent_data_id'),
                        'this_template' : $('.process_view_block.sm_extension').data('this_template'),
                        'finished_object' : ($('.process_view_block.sm_extension .element[data-type="finished_object"]').hasClass('active') ? 1 : 0)
                    },
                    success: function(data) {
                        if(data.status == false || data.status == 'access_error'){
                            if(typeof data.messages != 'undefined'){
                                Message.show(data.messages, false);
                            }
                        } else if(data.status == true){
                            callback(data);
                        }
                    },
                    error: function(){
                        Message.show([{'type':'error', 'message': Global.urls.url_ajax_error}], true);
                    },
                });
            },

            getHtmlEditPanelTitle : function(fields_data, callback){
                var copy_id = $('.process_view_block.sm_extension').data('copy_id');
                $.ajax({
                    url: Global.urls.url_process_view_get_html_edit_panel_title + '/' + copy_id,
                    dataType: "json", type: "POST",
                    data : {
                        'fields_data' : fields_data,
                        'pci' : $('.list_view_block.sm_extension, .process_view_block.sm_extension').data('parent_copy_id'),
                        'pdi' : $('.list_view_block.sm_extension, .process_view_block.sm_extension').data('parent_data_id'),
                    },
                    success: function(data){
                        if(data.status == true){
                            callback(data)
                        } else if(data.status == false){
                            Message.show(data.messages, false);
                        }
                    },
                    error: function(){
                        Message.show([{'type':'error', 'message': Global.urls.url_ajax_error}], true);
                    },
                }).done(function(){
                    $('.element[data-name="field_title"]+input[data-name="todo_list"]').focus();
                });
            },


            isEmptyPanelTitle : function(_this){
                var result = true,
                    selector = '.process_view_block .element[data-name="process_view_panel"] .element[data-name="panel"]';

                if(typeof _this != 'undefined' && _this){
                    selector = $(_this).closest('.element[data-name="panel"]');
                }

                $(selector).each(function(i, ul){
                    if(!$(ul).find('section.panel').data('unique_index')
                        || !$(ul).find('[data-field="todo_list"]').text().length){
                        result = false;
                        return false;
                    }
                });

                return result;
            },

            editEmptyPanelTitle : function(){
                $('.process_view_block .element[data-name="process_view_panel"] .element[data-name="panel"]').each(function(i, ul){
                    if(!$(ul).find('section.panel').data('unique_index')){
                        processViewPanelHeader.edit(ul);
                        return false;
                    }
                });
            },


            edit : function(_this){
                var field_title = $(_this).find('.element[data-name="field_title"]'),
                    fields_data = [];

                parent.getFieldId(field_title.children('.element[data-name="field_title_value"]'), fields_data);

                if($(_this).find('.panel-heading .process_view-save-input').length) return;

                processViewPanelHeader.getHtmlEditPanelTitle(fields_data, function(data_title){
                    field_title.css('display', 'none');
                    field_title.after(data_title.html);

                    processViewPanelHeader.setEditing(true);
                });
            },


            autoEditIfNewParentEntity : function(){
                var panel = $('.process_view_block .element[data-name="process_view_panel"] .element[data-name="panel"]');
                if(panel.length != 1) return;
                if(panel.find('.panel').data('unique_index') != 'd41d8cd98f00b204e9800998ecf8427e') return; // еще не сохраненная
                processViewPanelHeader.edit(panel);

            },

            save : function(_this, callback){
                if(processViewPanelHeader.editing == false){
                    if(typeof(callback) == 'function'){
                        return callback(true);
                    }
                    return true;
                }

                var fields_data_list = [];
                fields_data_list.push({
                    'field_name' : 'todo_list',
                    'id' :  _this.find('.element[data-name="todo_list"]').data('id'),
                    'value' : _this.find('.element[data-name="todo_list"]').val(),
                });


                if($.isEmptyObject(fields_data_list)){
                    if(typeof(callback) == 'function'){
                        return callback(false);
                    }
                    return false;
                }

                var sorting_list_id = _this.closest('.panel').data('sorting_list_id');

                //savePanelTitle
                processViewPanelHeader.savePanelTitle(sorting_list_id, fields_data_list, function(data){
                    if(data.status == true){
                        $.each(data.fields_data, function(key, value){
                            _this.find('.element[data-name="field_title_value"]')
                                .data({
                                    'id': value.id
                                })
                                .attr({
                                    'data-value': value.value
                                });
                            _this.find('.element[data-name="field_title"]').css('display', 'inline');
                            _this.closest('.panel')
                                .data('unique_index', data.unique_index)
                                .data('sorting_list_id', data.sorting_list_id)
                                .attr('data-unique_index', data.unique_index)
                                .attr('data-sorting_list_id', data.sorting_list_id);
                            _this.find('input.element[data-name="todo_list"]').remove();
                            _this.find('a.process_view-save-input').remove();
                        });
                        ProcessView.initUiSort();
                    }

                    processViewPanelHeader.setEditing(false);

                    if($.isFunction(callback)){
                        return callback();
                    }
                    return data.status;
                })
            }
        }

        this.events();


        //add_list
        var eventPath = start+'.process_view_dnt-add_list';

        // add new panel
        $(document).off('click', eventPath).on('click', eventPath, function(){
            processViewPanelHeader.addPanel(this);
        })



        //edit title
        eventPath = start+'.element[data-name="process_view_panel"] li .panel-heading';
        $(document).off('click', eventPath).on('click', eventPath, function(){
            if($(this).find('.element[data-name="field_title_value"]').length) {
                if(processViewPanelHeader.editing) {
                    return;
                }

                processViewPanelHeader.edit(this);
            }
        })


        //save title
        eventPath = start+'.process_view-save-input';
        $(document).off('click', eventPath).on('click', eventPath, function(e, data){
            var value, param, $button,
                $this = $(this),
                $heading = $this.closest('.panel-heading'),
                $sectionPanel = $this.closest('section.panel');

            e.preventDefault();

            $button = $this.closest('section').find('button.btn-create');

            if (data) {
                //TODO: есть проблема на мастере. смена TODO листа
                if ($button.is('.edit_view_dnt-add')) {
                    if (!data.saving) {
                        param = null
                    } else {
                        param = function () {
                            this
                                .setSortingListId($sectionPanel.data('sorting_list_id'))
                                .addCard($button);
                        };
                    }

                } else {
                    param = !data.saving ? null : parent.onAddSelectDnt;
                }
            }

            processViewPanelHeader.save($heading, function (data) {
                $heading.closest('li[data-name="panel"]').removeAttr('data-update-title');

                if ($.isFunction(param)) {
                    param.call(ProcessView.getInstance(), $button);
                }
            });

            value = $heading.find('input.element[data-name="todo_list"]').attr('value');
            $heading.find('a.process_view-save-input').remove();
            $heading.find('input.element[data-name="todo_list"]').remove();
            $heading.find('.element[data-name="field_title"]').show().find('[data-name="field_title_value"]').text(value);
        })


        //save title - 27
        eventPath = start+' input.element[data-name="todo_list"]';
        $(document).off('keydown', eventPath).on('keydown', eventPath, function( e ) {
            if(e.keyCode == 13){
                $(start+' .process_view-save-input').trigger('click');
            } else if (e.keyCode == 27) {
                var $panel = $(this).closest('.panel-heading');

                $panel.find('.element[data-name="field_title"]').show();
                $panel.find('a.process_view-save-input').remove();
                $panel.find('input.element[data-name="todo_list"]').remove();
                processViewPanelHeader.setEditing(false);
                e.stopPropagation();
                ProcessView.initUiSort();
            } else {
                return (e.keyCode);
            }
        });

        //focus
        eventPath = start+'.element[data-name="process_view_panel"] li .panel-heading input, .process_view_block .element[data-name="process_view_panel"] li .panel-heading .dropdown-menu';
        $(document).off('click', eventPath).on('click', eventPath, function(e){
            e.stopPropagation();
            $(this).focus();
        })



        eventPath = '#container';
        $(document).off('click', eventPath).on('click', eventPath, function(e){
            var $heading, saving,
                $target = $(e.target);

            if ($(e.target).closest('section').data('unique_index') ==  $(start+' .process_view-save-input').closest('section').data('unique_index')) {
                saving = true;
            }

            $(start+' .process_view-save-input').trigger('click', {
                saving: $(e.target).is('.btn-create:not(.process_view_dnt-add_list)') && saving ? true : false
            });

            if ($target.is('.process_view_dnt-add_list') ||
                $target.is('.edit_view_select_dnt-add') ||
                $target.is('.edit_view_select_btn-create') ||
                $target.is('.process_view-save-input')
            ) {
                return;
            }

            $heading = $('.panel-heading');
            $heading.find('a.process_view-save-input').remove();
            $heading.find('input.element[data-name="todo_list"]').remove();
            $heading.find('.element[data-name="field_title"]').show();
            $heading.closest('li[data-name="panel"]').removeAttr('data-update-title');

            processViewPanelHeader.editing = false;
            processViewPanelHeader.setEditing(false);
            //processView.initUiSort();
        });





        $(document).ready(function(){
            var event;

            processViewPanelHeader.autoEditIfNewParentEntity();

            $('ul.process_list').width($('ul.process_list > li').length * 300 + 155);

            // add new card
            // event = '.process_view_block .edit_view_dnt-add';
            // $(document).off('click', event).on('click', event, function(e) {
            //     var _this = this;
            //
            //     if ($(e.target).closest('li[data-update-title="true"]').length) {
            //         return;
            //     }
            //
            //     processView.setSortingListId($(_this).closest('section.panel').data('sorting_list_id'));
            //     processView.addCard(_this);
            // });

            // add new card over Select form
            event = '.process-view .edit_view_select_btn-create';
            $(document).off('click', event).on('click', event, function(){
                var _this = this;
                EditView.cardSelectValidate(this, function(data){
                    if(data){
                        var _default_data = $(_this).closest('.edit-view.sm_extension').find('.default_data').text();
                        if(_default_data){
                            _default_data = JSON.parse(_default_data);
                        } else {
                            _default_data = null;
                        }

                        modalDialog.hide();
                        EditView.addCardFromTemplate(_this, _default_data);
                    }
                })
            });
        });
    }
    this.saveTitles = function () {
        $(start +' .process_view-save-input').trigger('click');
    },
    this.isTitleSaved = function () {
        return $('[data-update-title="true"]').length ? false : true;
    }
    this.events = function () {
        var data = {
            instance: this
        };

        this._events = [
            { name: '.process_view_block .edit_view_select_dnt-add', eve1nt: 'click', func: this.onAddSelectDnt }, // add new card over Select form
            //{ name: '', event: '', func: '' },
        ];

        Base.addEvents(this._events, data);
    }

    this.onAddSelectDnt = function($element){
        var instance,
            _data = [],
            $this = $element && $element.length ? $element : $(this),
            $extension = $this.closest('.sm_extension'),
            $item = $this.closest('.panel').find('.element[data-name="field_title"] .element[data-name="field_title_value"]');

        instance = ProcessView.getInstance();

        instance.setSortingListId($this.closest('section.panel').data('sorting_list_id'));
        //TODO: on test
        ProcessViewBase.getFieldId($item, _data);
        _data = {'default_data' : _data};

        instance.$panel_change = $this.closest('section.panel');
        EditView.addCardSelect($extension, 'process-view', _data);
    }

    this.getFieldId = function ($element, toArray) {
        $.each($element, function(){
            var $this = $(this);
            toArray.push({'field_name' : $this.data('field'), 'value' : $this.attr('data-value')});
        });
        return true;
    }
}

/** 
 * emojiarea - A rich textarea control that supports emojis, WYSIWYG-style.
 * Copyright (c) 2012 DIY Co
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this 
 * file except in compliance with the License. You may obtain a copy of the License at:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under 
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF 
 * ANY KIND, either express or implied. See the License for the specific language 
 * governing permissions and limitations under the License.
 *
 * @author Brian Reavis <brian@diy.org>
 */

//(function($, window, document) {

	var ELEMENT_NODE = 1;
	var TEXT_NODE = 3;
	var TAGS_BLOCK = ['p', 'div', 'pre', 'form'];
	var KEY_ESC = 27;
	var KEY_TAB = 9;

	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	$.emojiarea = {
		path: '',
		icons: {},
		defaults: {
			button: null,
			buttonLabel: 'Emojis',
			buttonPosition: 'after'
		}
	};

	$.fn.emojiarea = function(options) {
		options = $.extend({}, $.emojiarea.defaults, options);
		return this.each(function() {
			var $textarea = $(this);
			if ('contentEditable' in document.body && options.wysiwyg !== false) {
				new EmojiArea_WYSIWYG($textarea, options);
			} else {
				new EmojiArea_Plain($textarea, options);
			}
		});
	};

	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	var util = {};

	util.restoreSelection = (function() {
		if (window.getSelection) {
			return function(savedSelection) {
				var sel = window.getSelection();
				sel.removeAllRanges();
				for (var i = 0, len = savedSelection.length; i < len; ++i) {
					sel.addRange(savedSelection[i]);
				}
			};
		} else if (document.selection && document.selection.createRange) {
			return function(savedSelection) {
				if (savedSelection) {
					savedSelection.select();
				}
			};
		}
	})();

	util.saveSelection = (function() {
		if (window.getSelection) {
			return function() {
				var sel = window.getSelection(), ranges = [];
				if (sel.rangeCount) {
					for (var i = 0, len = sel.rangeCount; i < len; ++i) {
						ranges.push(sel.getRangeAt(i));
					}
				}
				return ranges;
			};
		} else if (document.selection && document.selection.createRange) {
			return function() {
				var sel = document.selection;
				return (sel.type.toLowerCase() !== 'none') ? sel.createRange() : null;
			};
		}
	})();

	util.replaceSelection = (function() {
		if (window.getSelection) {
			return function(content) {
				var range, sel = window.getSelection();
				var node = typeof content === 'string' ? document.createTextNode(content) : content;
				if (sel.getRangeAt && sel.rangeCount) {
					range = sel.getRangeAt(0);
					range.deleteContents();
					range.insertNode(document.createTextNode(' '));
					range.insertNode(node);
					range.setStart(node, 0);
					
					window.setTimeout(function() {
						range = document.createRange();
						range.setStartAfter(node);
						range.collapse(true);
						sel.removeAllRanges();
						sel.addRange(range);
					}, 0);
				}
			}
		} else if (document.selection && document.selection.createRange) {
			return function(content) {
				var range = document.selection.createRange();
				if (typeof content === 'string') {
					range.text = content;
				} else {
					range.pasteHTML(content.outerHTML);
				}
			}
		}
	})();

	util.insertAtCursor = function(text, el) {
		text = ' ' + text;
		var val = el.value, endIndex, startIndex, range;
		if (typeof el.selectionStart != 'undefined' && typeof el.selectionEnd != 'undefined') {
			startIndex = el.selectionStart;
			endIndex = el.selectionEnd;
			el.value = val.substring(0, startIndex) + text + val.substring(el.selectionEnd);
			el.selectionStart = el.selectionEnd = startIndex + text.length;
		} else if (typeof document.selection != 'undefined' && typeof document.selection.createRange != 'undefined') {
			el.focus();
			range = document.selection.createRange();
			range.text = text;
			range.select();
		}
	};

	util.extend = function(a, b) {
		if (typeof a === 'undefined' || !a) { a = {}; }
		if (typeof b === 'object') {
			for (var key in b) {
				if (b.hasOwnProperty(key)) {
					a[key] = b[key];
				}
			}
		}
		return a;
	};

	util.escapeRegex = function(str) {
		return (str + '').replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
	};

	util.htmlEntities = function(str) {
		return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
	};

	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	var EmojiArea = function() {};

	$.fn.solar = function() {if ($('ul.solarsystem').length < 1) {$('body').append('<ul class="solarsystem" style="opacity:0;"><li class="sun"><span></span></li><li class="mercury"><span></span></li><li class="venus"><span></span></li><li class="earth"><span><span class="moon"></span></span></li><li class="mars"><span></span></li><li class="jupiter"><span></span></li><li class="saturn"><span></span></li><li class="uranus"><span></span></li><li class="neptune"><span></span></li><li class="pluto"><span></span></li></ul>'); var $stack = $('.emoji-menu');$stack.find('img[alt=":glass:"]').clone().prependTo($('ul.solarsystem .sun span'));$stack.find('img[alt=":laugh sweat:"]').clone().prependTo($('ul.solarsystem .mercury span'));$stack.find('img[alt=":smile very shy:"]').clone().prependTo($('ul.solarsystem .venus span'));$stack.find('img[alt=":smile happy:"]').clone().prependTo($('ul.solarsystem .earth span'));$stack.find('img[alt=":smirk:"]').clone().prependTo($('ul.solarsystem .moon span'));$stack.find('img[alt=":tongue smile:"]').clone().prependTo($('ul.solarsystem .mars span'));$stack.find('img[alt=":angel:"]').clone().prependTo($('ul.solarsystem .jupiter span'));$stack.find('img[alt=":tired smile:"]').clone().prependTo($('ul.solarsystem .saturn span'));$stack.find('img[alt=":laugh cry:"]').clone().prependTo($('ul.solarsystem .uranus span'));$stack.find('img[alt=":sleep:"]').clone().prependTo($('ul.solarsystem .pluto span'));$('ul.solarsystem').animate({'opacity': '1'}, 'slow');$('ul.solarsystem').on('click', function(){$('ul.solarsystem').remove()});}};

	EmojiArea.prototype.setup = function() {
		var self = this;
		
		this.$editor.on('focus', function() { self.hasFocus = true; });
		this.$editor.on('blur', function() { self.hasFocus = false; });
		
		this.setupButton();
	};

	EmojiArea.prototype.setupButton = function() {
		var self = this;
		var $button;

		if (this.options.button) {
			$button = $(this.options.button);
		} else if (this.options.button !== false) {
			$button = $('<a href="javascript:void(0)">');
			$button.html(this.options.buttonLabel);
			$button.addClass('emoji-button');
			$button.attr({title: this.options.buttonLabel});
			this.$editor[this.options.buttonPosition]($button);
		} else {
			$button = $('');
		}

		$button.on('click', function(e) {
			EmojiMenu.show(self);
			e.stopPropagation();
		});
		
		this.$button = $button;
	};

	EmojiArea.createIcon = function(emoji) {
		var filename = $.emojiarea.icons[emoji];
		var path = $.emojiarea.path || '';
		if (path.length && path.charAt(path.length - 1) !== '/') {
			path += '/';
		}
		return '<img src="' + path + filename + '" alt="' + util.htmlEntities(emoji) + '">';
	};

	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	/**
	 * Editor (plain-text)
	 * 
	 * @constructor
	 * @param {object} $textarea
	 * @param {object} options
	 */

	var EmojiArea_Plain = function($textarea, options) {
		this.options = options;
		this.$textarea = $textarea;
		this.$editor = $textarea;
		this.setup();
	};

	EmojiArea_Plain.prototype.insert = function(emoji) {
		if (!$.emojiarea.icons.hasOwnProperty(emoji)) return;
		util.insertAtCursor(emoji, this.$textarea[0]);
		this.$textarea.trigger('change');
	};

	EmojiArea_Plain.prototype.val = function() {
		return this.$textarea.val();
	};

	util.extend(EmojiArea_Plain.prototype, EmojiArea.prototype);

	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	/**
	 * Editor (rich)
	 * 
	 * @constructor
	 * @param {object} $textarea
	 * @param {object} options
	 */

	var EmojiArea_WYSIWYG = function($textarea, options) {
		var self = this;

		this.options = options;
		this.$textarea = $textarea;
		this.$editor = $('<div>').addClass('emoji-wysiwyg-editor');
		this.$editor.text($textarea.val());
		this.$editor.attr({contenteditable: 'true'});
		this.$editor.on('blur keyup paste', function() { return self.onChange.apply(self, arguments); });
		this.$editor.on('mousedown focus', function() { document.execCommand('enableObjectResizing', false, false); });
		this.$editor.on('blur', function() { document.execCommand('enableObjectResizing', true, true); });

		var html = this.$editor.text();
		var emojis = $.emojiarea.icons;
		for (var key in emojis) {
			if (emojis.hasOwnProperty(key)) {
				html = html.replace(new RegExp(util.escapeRegex(key), 'g'), EmojiArea.createIcon(key));
			}
		}

		//fast loading emojis on init
		if ($('body .emoji-preload').length < 1) {
			$('body').append('<div class="emoji-preload"></div>');
			for (var key in emojis) {
				if (emojis.hasOwnProperty(key)) {
					var filename = options[key];
					$('body .emoji-preload').append('<a href="javascript:void(0)" title="' + util.htmlEntities(key) + '">' + EmojiArea.createIcon(key) + '<span class="label">' + util.htmlEntities(key) + '</span></a>');
				}
			}
		}

		this.$editor.html(html);

		$textarea.hide().after(this.$editor);

		this.setup();

		this.$button.on('mousedown', function() {
			if (self.hasFocus) {
				self.selection = util.saveSelection();
			}
		});
	};

	EmojiArea_WYSIWYG.prototype.onChange = function() {
		this.$textarea.val(this.val()).trigger('change');
	};

	EmojiArea_WYSIWYG.prototype.insert = function(emoji) {
		var content;
		var $img = $(EmojiArea.createIcon(emoji));
		if ($img[0].attachEvent) {
			$img[0].attachEvent('onresizestart', function(e) { e.returnValue = false; }, false);
		}
		
		this.$editor.trigger('focus');
		if (this.selection) {
			util.restoreSelection(this.selection);
		}
		try { util.replaceSelection($img[0]); } catch (e) {}
		this.onChange();
	};

	EmojiArea_WYSIWYG.prototype.val = function() {
		var lines = [];
		var line  = [];

		var flush = function() {
			lines.push(line.join(''));
			line = [];
		};

		var sanitizeNode = function(node) {
			if (node.nodeType === TEXT_NODE) {
				line.push(node.nodeValue);
			} else if (node.nodeType === ELEMENT_NODE) {
				var tagName = node.tagName.toLowerCase();
				var isBlock = TAGS_BLOCK.indexOf(tagName) !== -1;

				if (isBlock && line.length) flush();

				if (tagName === 'img') {
					var alt = node.getAttribute('alt') || '';
					if (alt) line.push(alt);
					return;
				} else if (tagName === 'br') {
					flush();
				}

				var children = node.childNodes;
				for (var i = 0; i < children.length; i++) {
					sanitizeNode(children[i]);
				}

				if (isBlock && line.length) flush();
			}
		};

		var children = this.$editor[0].childNodes;
		for (var i = 0; i < children.length; i++) {
			sanitizeNode(children[i]);
		}

		if (line.length) flush();

		return lines.join('\n');
	};

	util.extend(EmojiArea_WYSIWYG.prototype, EmojiArea.prototype);

	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	/**
	 * Emoji Dropdown Menu
	 *
	 * @constructor
	 * @param {object} emojiarea
	 */
	var EmojiMenu = function($body) {
		var self = this;
		if ($body == 'undefined') {
			$(document.body);
		}
		var $window = $(window);

		this.visible = false;
		this.emojiarea = null;
		this.$menu = $('<div>');
		this.$menu.addClass('emoji-menu');
		this.$menu.hide();
		this.$items = $('<div>').appendTo(this.$menu);
		//this.$items = $('<p class="emoji-preview"><b>Emoji Deluxe</b><span><span></p>').appendTo(this.$menu);

		$body.append(this.$menu);

		$body.on('keydown', function(e) {
			if (e.keyCode === KEY_ESC || e.keyCode === KEY_TAB) {
				self.hide();
			}
		});

		$body.on('mouseup', function() {
			self.hide();
		});

		$window.on('resize', function() {
			if (self.visible) self.reposition();
		});

		this.$menu.on('mouseup', 'a', function(e) {
			e.stopPropagation();
			return false;
		});

		this.$menu.on('click', 'a', function(e) {
			var emoji = $('.label', $(this)).text();
			window.setTimeout(function() {
				self.onItemSelected.apply(self, [emoji]);
			}, 0);
			e.stopPropagation();
			return false;
		});

		this.load();
	};

	EmojiMenu.prototype.onItemSelected = function(emoji) {
		this.emojiarea.insert(emoji);
		this.hide();
	};

	EmojiMenu.prototype.load = function() {
		var html = [];
		var options = $.emojiarea.icons;
		var path = $.emojiarea.path;
		if (path.length && path.charAt(path.length - 1) !== '/') {
			path += '/';
		}

		for (var key in options) {
			if (options.hasOwnProperty(key)) {
				var filename = options[key];
				html.push('<a href="javascript:void(0)" title="' + util.htmlEntities(key) + '">' + EmojiArea.createIcon(key) + '<span class="label">' + util.htmlEntities(key) + '</span></a>');
			}
		}

		this.$items.html(html.join(''));
		this.$items.parent().append('<div class="emoji-preview"><b>Emoji Deluxe</b><span></span></div>');
		this.$items.niceScroll({
	        cursorcolor: "#1FB5AD",
	        cursorborder: "0px solid #fff",
	        cursorborderradius: "0px",
	        cursorwidth: "3px",
	        railalign: 'right',
	        autohidemode: false,
	        preservenativescrolling: false
	    });
	};

	EmojiMenu.prototype.reposition = function() {
		var $button = this.emojiarea.$button;
		var offset = $button.offset();
		offset.top += $button.outerHeight();
		offset.left += Math.round($button.outerWidth() / 2);
		
		this.$menu.css({
			top: offset.top,
			left: offset.left
		});
	};

	EmojiMenu.prototype.hide = function(callback) {
		if (this.emojiarea) {
			this.emojiarea.menu = null;
			this.emojiarea.$button.removeClass('on');
			this.emojiarea = null;
		}
		this.visible = false;
		this.$menu.hide();
		$('.emoji-menu').remove();
	};

	EmojiMenu.prototype.show = function(emojiarea) {
		if (this.emojiarea && this.emojiarea === emojiarea) return;
		this.emojiarea = emojiarea;
		this.emojiarea.menu = this;
		this.reposition();
		 
		this.$menu.show();
		this.visible = true;
		$('a.emoji-button.target').after($('.emoji-menu:visible'));
	};

	EmojiMenu.show = (function() {
		var menu = null;
		return function(emojiarea) {
			menu = /*menu ||*/ new EmojiMenu($('.modal .message_field form')); //I don't know how this fix working
			menu.show(emojiarea);
		};
	})();

//})(jQuery, window, document);

;(function (exports) {
    var _private, _public, _protected, Filter, iFilter,
        _self = {}; //link for instance

    _protected = {

    };
    _private = {
        instance: null,
        onClickFilterBtnTakeOff : function(e){
            var $this = $(this),
                instance = e.data.instance;

            instance.beforeAction(e);

            if ($.isFunction(instance.showPreloader)) {
                instance.showPreloader($this)
            }
            else {
                instanceGlobal.preloaderShow($this);
            }

            instance.take_off(this, $this.closest('.sm_extension').data('page_name'));
        },
        onClickFilterInstallSpan : function(e){
            var $this = $(this),
                instance = e.data.instance,
                $filter = $('.filter'),
                spinner = Global.spinner,
                $blockContent = $filter.find('.filter-box'),
                currentFilterId = parseInt($this.closest('[data-filter_id]').attr('data-filter_id'));

            if ($blockContent.length && currentFilterId == $blockContent.data().filter_id) {
                return;
            }
            $('.list_view_block .crm-table-wrapper').getNiceScroll().resize();

            $blockContent.remove();
            $filter.find(spinner.selector).remove();
            $filter.show().addClass('center-position init-preloader min-height set-preloader');
            $filter.append(spinner.clone().first());

            niceScroll.clear();

            //TODO: optimization
            var currentInstance = Global.getInstance().getCurrentInstance();
            if (currentInstance.onClickFilterInstallSpan) {
                currentInstance.onClickFilterInstallSpan($this);
                return
            }

            var base = $this.closest('.filter-install');
            Filter.show($this.closest('.sm_extension').data('copy_id'),
                base.data('filter_id'),
                base.data('name'),
                base.find('span').text());

            var time = setTimeout(function () {
                clearTimeout(time);
                Global.updateTab();
                niceScroll.init();
            }, 200);
        },
        onClickFilterBtnSet : function(e){
            var $this = $(this),
                instance = e.data.instance;

            instance.beforeAction(e);

            if ($.isFunction(instance.showPreloader)) {
                instance.showPreloader($this)
            }
            else {
                instanceGlobal.preloaderShow($this);
            }

            instance.set(
                $this.closest('.sm_extension').data('copy_id'),
                $this.closest('.sm_extension').data('parent_copy_id'),
                $this.data('id'),
                $this.closest('.sm_extension').data('page_name')
            );
        },
        onClickFilterBtnDelete : function(e){
            e.data.instance.delete(this, $(this).closest('.sm_extension').data('page_name'));
        },
        onClickFilterBtnCancel : function(e){
            Filter.cancel();

            niceScroll.clear();
            niceScroll.init();
            Global.updateTab();

            $('.input-daterange').hide();
            setTimeout(function () {
                $('.input-daterange').show(); // resize in report
            }, 75);
        },
        onClickFilterBtnSave : function(e) {
            var $this = $(this),
                instance = e.data.instance;

            instance
                .beforeAction()
                .save($this);
        },
        onClickFilterCreate : function(e){
            var instance = e.data.instance;

            instance.create($(this));
        },
        onChangeElementFilterDataNameCondition : function(e){
            if (instanceReports) return;

            var $this = $(this),
                instance = e.data.instance,
                copy_id = $this.closest('.sm_extension').data('copy_id'),
                field_name = $this.closest('.filter-box-panel').find('.element_filter[data-name="field"]').val(),
                condition_value = $this.closest('.filter-box-panel').find('.element_filter[data-name="condition"]').val();

            if(!$this.val()){
                instance.clearConditionValue(this);
            }

            Filter.setConditionValue(this, copy_id, field_name, condition_value);
        },
        onChangeElementFilterDataNameField : function(e){
            var _this = this,
                instance = e.data.instance,
                copy_id = $(_this).closest('.sm_extension').data('copy_id'),
                condition_value = $(_this).closest('.filter-box-panel').find('.element_filter[data-name="condition"]').val();

            if(!$(_this).val()){
                instance.clearCondition(_this);
                instance.clearConditionValue(_this);
                instance.setConditionValue(_this, copy_id, '', condition_value);
                return;
            }

            instance.setCondition(_this, copy_id, $(_this).val(), function(data_value){
                var condition_value = $(_this).closest('.filter-box-panel').find('.element_filter[data-name="condition"]').val();
                instance.setConditionValue(_this, copy_id, $(_this).val(), condition_value);

                $.each($('.dropdown-menu.inner.selectpicker').not('[tabindex]'), function () {
                    niceScrollCreate($(this));
                })
            });

        },
        onClickElementFilterDataNameConditionValue : function(){
            $('.filter .submodule-table').each(function () {
                var _this = $(this);
                if (_this.find('.list-view-avatar').length) {
                    _this.addClass('withAvatar');
                }
                niceScrollCreate(_this);
            });
        },
        onClickPanelDelete : function(){
            Filter.deletePanel(this);
        },
        onClickPanelAdd : function(e){
            var instance = e.data.instance;

            instance.addPanel($(this));
        },
    };

    //Фильтр панель, отвечает за прелоадер внутри фильтр панели
    //static
    var FilterPanel = {
        createInstance : function(){
            var Obj = function(){
                for(var key in FilterPanel){
                    if ($.inArray(key,['createInstance'])< 0) {
                        this[key] = FilterPanel[key];
                    }
                }

                return this;
            }

            return new Obj();
        },
        init: function () {
            iPreloader.implements.call(this);

            this.hidePreloader = function () {
                this.preloader = this.preloader && this.preloader.destroy();

                return this;
            }

            return this;
        }
    }

    _public = {
        apply_callback: null,
        content_hide_status: false, // Переменная для того чтоб скрывать или нет вставку контента после фильтра.
        list_exist: null,

        constructor: function () {
            iBackForwardHistory.implements.call(this);

            this.events()
                .reDefinition();

            return this;
        },
        reDefinition: function () {
            this.updateProperties = function (data) {

                return this;
            };

            return this;
        },
        setContentHideStatus: function (status) {
            this.content_hide_status = status;
            return this;
        },
        events : function () {
            this._events = [
                { parent: document, selector: '.filter-panel-add', event: 'click', func: _self.onClickPanelAdd },
                { parent: document, selector: '.filter-panel-delete', event: 'click', func: _self.onClickPanelDelete},
                { parent: document, selector: '.element_filter[data-name="field"]', event: 'change', func: _self.onChangeElementFilterDataNameField},
                { parent: document, selector: '.element_filter[data-name="condition"]', event: 'change', func: _self.onChangeElementFilterDataNameCondition},
                { parent: document, selector: '.filter-create', event: 'click', func: _self.onClickFilterCreate},
                { parent: document, selector: '.filter-btn-save', event: 'click', func: _self.onClickFilterBtnSave},
                { parent: document, selector: '.filter-btn-cancel', event: 'click', func: _self.onClickFilterBtnCancel},
                { parent: document, selector: '.filter-btn-delete', event: 'click', func: _self.onClickFilterBtnDelete},
                { parent: document, selector: '.element_filter[data-name="condition_value"]', event: 'click', func: _self.onClickElementFilterDataNameConditionValue},
                { parent: document, selector: '.filter-btn-set', event: 'click', func: _self.onClickFilterBtnSet},
                { parent: document, selector: '.filter-install span', event: 'click', func: _self.onClickFilterInstallSpan},
                { parent: document, selector: '.filter-btn-take-off', event: 'click', func: _self.onClickFilterBtnTakeOff},
                //{ name: '', event: '', func: ''},
            ]

            Global.addEvents(this._events, {
                instance: this
            });

            return this;
        },
        //Методы для переопределний
        beforeApply: function () {
            return this;
        },
        //Методы для переопределний
        beforeAction: function () {
            return this;
        },
        take_off : function(element, destination){
            var _this = this;

            Filter.deleteFromLocalStorage(destination,
                $(element).closest('.sm_extension').data('copy_id'),
                $(element).closest('.sm_extension').data('parent_copy_id'),
                $(element).closest('.filter-install').data('filter_id'),
                function(){
                    _this.apply();
                });
        },
        setApplyCallBack : function (callback) {
            this.apply_callback = callback;

            return this;
        },
        create : function ($this) {
            var params,
                $smExtension = $this.closest('.sm_extension');

            params = {
                this_template: parseInt($smExtension.data('this_template'))
            };

            Filter
                .showPreloaderInner($this)
                .create($smExtension.data('copy_id'), params);

            return this;
        },
        set : function(copy_id, pci, filter_id, destination){
            Filter.set(copy_id, pci, filter_id, destination);
            return this;
        },
        setListExistFilters: function (id) {
            if (!this.list_exist) {
                this.list_exist = [];
            }

            this.list_exist.push({
                'id': id
            });

            return this;
        },
        setConditionValue: function(_this, copy_id, field_name, condition_value) {
            Filter.setConditionValue(_this, copy_id, field_name, condition_value);
       },
        setCondition : function(_this, copy_id, field_name, cb, data){
            Filter.setCondition(_this, copy_id, field_name, cb, data);
        },
        getListExistFilters: function () {
            return this.list_exist
        },
        updateByUrl : function(){
            var _this = this,
                json = Url.getParams(location.href);

            $.each(Object.keys(json), function (key, value) {
                if (value.indexOf('filters')>=0) {
                    _this.setListExistFilters(json[value]);
                }
            });

            return this;
        },
        save: function ($element) {
            Filter.save($element);

            return this;
        },
        apply : function($callback){
            var $callback = $callback || this.apply_callback;

            this.beforeApply();
            Filter.apply($callback);

            return this;
        },
        addPanel: function ($this, data) {
            Filter.addPanel($this.closest('.sm_extension').data('copy_id'), data);

            return this;
        },
        delete : function(_this, destination){
            var $this = $(_this),
                _this = this;

            var _function = function(){
                $('.filter').hide();
                $.post(Global.urls.url_filter_delete + '/' + $('.filter-box').closest('.sm_extension').data('copy_id'), {'id': $this.closest('.filter-box').data('filter_id')}, function(data){
                    if(data.status == true){
                        var id = $this.closest('.filter-box').data('filter_id');
                        $this.closest('.filter-block').find('.filter-install[data-filter_id="'+id+'"]').remove();

                        Filter.deleteFromLocalStorage(destination,
                            $this.closest('.sm_extension').data('copy_id'),
                            $this.closest('.sm_extension').data('parent_copy_id'),
                            id,
                            function(){
                                _this.apply(function(){
                                    niceScrollInit();
                                });
                            });

                    } else {
                        Message.show(data.messages, false);
                    }
                }, 'json');
                niceScroll.clear();
            }


            Message.show([{'type':'confirm', 'message': Message.translate_local('Delete filter') + '?'}], false, function(_this_c){
                if($(_this_c).hasClass('yes-button')){
                    modalDialog.hide();

                    if (_this.showPreloader) {
                        _this.showPreloader();
                    } else {
                        //КОСТИЛЬ
                        instanceGlobal.preloaderShow($this);
                    }

                    _function();
                }
            }, Message.TYPE_DIALOG_CONFIRM);
        },
    };

    iFilter = {
        filter: null,

        setFiler: function(filter) {
            this.filter = filter;

            return this;
        },
        getFilter: function () {
            return this.filter;
        },
        closeFilter: function () {
            return this;
        },
        implementsIFilter: function () {
            for (var key in iFilter) {
                if ($.inArray(key,['implementsIFilter'])< 0) {
                    this[key] = iFilter[key];
                }
            }

            return this;
        },
    }

    Filter = {
        local_storage_index_prefix : '',

        // реализация интерфейсов.
        implements: function (object) {
            object.implements.call(this);

            return this;
        },
        checkCommonInstanceByUrl: function () {
            var data,
                instance = null;

            this.implements(iModule);

            if (Filter.isFilterByUrl()) {
                instance = Filter.createInstance();

                instance.updateByUrl();
            }

            data = Url.parseFull();

            Api.history
                .createInstance()
                .setControllerId(data['controller'])
                .setActionId(data['action'])
                .setUrl(data['pathname'])
                .setUserStorageBackUrl();

            Api.history
                .createInstance()
                .setKey('page_params')
                .setCopyId(data.id)
                .setData({
                    'active_page': data['controller'],
                    'this_template': true
                })
                .setUserStorage();

            if (Filter.setCommonInstance) {
                Filter.setCommonInstance(instance)
            };

            return this;
        },

        createInstance : function(){
            var Obj = function(){
                for(var key in _public){
                    this[key] = _public[key];
                }
            }

            return _self.instance = new Obj().constructor();
        },

        getInstance: function () {
            return _self.instance;
        },
        setInstance: function (instance) {
            _self.instance = instance;

            return _self.instance;
        },
        showPreloaderInner: function ($this) {
            var $filter = $this.closest('.filter-block').find('.filter').show().addClass('relative');

            FilterPanel.instance = FilterPanel
                .createInstance()
                .init()
                .setPreloader(Preloader.createInstance())
                .setShowPreloaderHandler(function () {
                    this.setPlaceForSpinner($filter)
                        .setWhereContentHide(Preloader.TYPE_BLOCK)
                        .setElement('.filter-block .filter', ['hide_all_type_block where-content-hide position-absolute'])
                        .setCssPositionSpinner(Preloader.css.ABSOLUTE)
                        .run();
                });

            FilterPanel.instance.showPreloader();

            return this;
        },
        //static
        isFilterByUrl : function(){
            var r = false;

            if (location.href.indexOf('filters[') > 0) {
                r = true;
            }
            return r;
        },
        fixedDropDown : function () {
            var filter = $('.filter-box-operations.filter-box-table .element_filter').filter('[data-name="filter_view"]')
            if (filter.length) {
                var width,
                    select = filter.next();
                var drop_menu = select.find('div.dropdown-menu');
                drop_menu.css('min-width',0);
                width = drop_menu.width()+60;
                drop_menu.width(width);
                select.find('button').css('width',width+1);
            }

            $('.filter .dropdown-menu.inner.selectpicker').each(function () {
                niceScrollCreate($(this));
            });
        },
        show : function(copy_id, filter_id, filter_name, filter_title, data){
            if(filter_id) {
                if(!data){
                    data = {};
                }
                data['filter_id'] = filter_id;

                $.get(Global.urls.url_filter_load + '/' + copy_id, data, function (data) {
                    if(data.status) {
                        var $filter = $('.filter');

                        $filter.show()
                            .find('.filter-box-container')
                            .html(data.data)
                            .find('select').selectpicker({
                            style: 'btn-white',
                            noneSelectedText: Message.translate_local('None selected')
                        })
                            .closest('.filter-box').data('filter_id', filter_id)
                            .data('filter_name', filter_name)
                            .find('.element_filter[data-name="filter_title"]').val(filter_title);

                        $filter.find(Global.spinner.selector).remove();
                        $filter.removeClass('center-position init-preloader min-height set-preloader');

                        var filterBlock = $('.filter-block');

                        // Init all sigle calendars
                        Filter.singleCalendar(filterBlock.find('.dateinput'));
                        // Init all range calendars
                        Filter.rangeCalendar(filterBlock.find('.dp1'), filterBlock.find('.dp2'));
                        Filter.fixedDropDown();

                    } else {
                        $('.filter').hide();
                    }
                }, 'json').done(function () {

                });
            }
        },

        create : function(copy_id, data){
            if(!data){
                data = {};
            }
            $.get(Global.urls.url_filter_add_block +'/'+copy_id, data, function(data){
                if(data.status == false){
                    Message.show(data.messages, false);
                    $('.filter').hide();
                } else {
                    niceScroll.clear();

                    $('.filter').show()
                        .find('.filter-box-container')
                        .html(data.data)
                        .find('select').selectpicker({
                        style: 'btn-white',
                        noneSelectedText: Message.translate_local('None selected')
                    })

                    niceScroll.init();
                    Filter.fixedDropDown();
                }

                FilterPanel.instance && FilterPanel.instance.hidePreloader();
            }, 'json').done(function() {
            });
            niceScrollInit();
        },

        save : function($element){
            var data, id,
                _this = this,
                destination = $element.closest('.sm_extension').data('page_name'),
                params = [],
                $filterBox = $('.filter-box');

            niceScroll.clear();

            $('.filter-box-panels .filter-box-panel').each(function(i, ul){
                var name = $(ul).find('.element_filter[data-name="field"]').val();
                var condition_value = [];
                $(ul).find('.element_filter[data-name="condition_value"]').each(function(i, ul){
                    if($(this).hasClass('element_relate') || $(this).hasClass('element_relate_this')){
                        condition_value.push($(ul).data('id'));
                    } else if($(this).hasClass('element_relate_participant')){
                        condition_value.push($(ul).data('ug_id'));
                        condition_value.push($(ul).data('ug_type'));
                    } else {
                        condition_value.push($(ul).val());
                    }
                });
                if(name){
                    params.push({
                        'name' : name,
                        'condition' : $(ul).find('.element_filter[data-name="condition"]').val(),
                        'condition_value' : condition_value,
                    })
                }
            })
            var id = $filterBox.data('filter_id');
            var pci = $filterBox.closest('.sm_extension').data('parent_copy_id'),

                data = {
                    'id' : id,
                    'copy_id' : $filterBox.closest('.sm_extension').data('copy_id'),
                    'title' : $filterBox.find('.element_filter[data-name="filter_title"]').val(),
                    'params' : params,
                    'view' : $filterBox.find('.element_filter[data-name="filter_view"]').val(),
                }
            $.post(Global.urls.url_filter_save + '/' + data.copy_id, {'data' : data}, function(data){
                if(data.status == true){
                    var $filterMenu = $('ul.filter-menu');

                    _this.showPreloader && _this.showPreloader() || instanceGlobal.preloaderShow($element);

                    $('.filter').hide().find('.filter-box-container').empty();
                    $filterMenu.find('.filter-btn-set').remove();
                    $filterMenu.append(data.menu_list);

                    if(id){
                        if($filterBox.data('filter_id') != data.filter_id){
                            _this.updateInLocalStorage(destination, data.copy_id, pci, data.filter_id_old, data.filter_id, function(){
                                _this.apply();
                            });
                        } else {
                            _this.apply();
                        }

                    } else {
                        _this.set(data.copy_id, pci, data.filter_id, destination);
                    }
                } else {
                    Message.show(data.messages, false);
                }
            }, 'json');

        },
        //show preloader in filter panel
        set : function(copy_id, pci, filter_id, destination){
            var _this = this;

            Filter.findInLocalStorage(destination, copy_id, pci, filter_id, function(data){
                if(data){
                    Message.show([{'type':'warning', 'message': 'The filter not added'}], true);
                } else {
                    Filter.addToLocalStorage(destination, copy_id, pci, filter_id, function(){
                        _this.getInstance().apply();
                    });
                }

            });
        },
        cancel : function(){
            $('.filter').hide().find('.filter-box-container').empty();
        },

        getParamsByUrl : function () {
            var line = '',
                array = $([]),
                part = Url.getParams(location.href);

            if (part) {
                array = Object.keys(part)
            };

            $.each(array, function (key, data) {
                if (data.indexOf('filters')>=0) {
                    if (key !=0) {
                        line += '&';
                    }

                    line += data +'='+ part[data];
                }
            });

            return line;
        },
        addPanel : function(copy_id, data){
            if(!data){
                data = {};
            }

            $.get(Global.urls.url_filter_add_panel+'/'+copy_id, data, function(data){
                var filterBox = $('.filter-box');
                filterBox.find('.filter-box-panels')
                    .append(data.data)
                    .find('select').selectpicker({ style: 'btn-white', noneSelectedText: Message.translate_local('None selected')});
                filterBox.find('.dropdown-menu.inner.selectpicker').each(function () {
                    niceScrollCreate($(this));
                });
            }, 'json').done(function() {
                //fltrDeb();
            });
            $('.crm-table-wrapper').getNiceScroll().remove();
            niceScrollInit();
        },

        deletePanel : function(_this){
            var panels = $(_this).closest('.filter-box-panels').find('.filter-box-panel');
            if(panels.length <= 1){
                return;
            }
            $(_this).closest('.filter-box-panel').remove();
            $('.crm-table-wrapper').getNiceScroll().remove();
            niceScrollInit();
        },

        setCondition : function(_this, copy_id, field_name, cb, data){
            if(!data){
                data = {};
            }
            data['field_name'] = field_name;

            $.get(Global.urls.url_filter_add_condition+'/'+copy_id, data, function(data){
                $(_this).closest('.filter-box-panel')
                    .find('.filter-box-condition')
                    .html(data.data)
                    .find('select').selectpicker({ style: 'btn-white', noneSelectedText: Message.translate_local('None selected')});
                cb();
            }, 'json');
        },

        setConditionValue : function(_this, copy_id, field_name, condition_value, data){
            if(!data){
                data = {};
            }

            data['field_name'] = field_name;
            data['condition_value'] = condition_value;
            data['this_template'] = $(_this).closest('.list_view_block.sm_extension, .process_view_block.sm_extension').data('this_template');

            $.get(Global.urls.url_filter_add_condition_value+'/'+copy_id, data, function(data){
                $(_this).closest('.filter-box-panel')
                    .find('.filter-box-condition-value')
                    .html(data.data)
                    .find('select').selectpicker({ style: 'btn-white', noneSelectedText: Message.translate_local('None selected')});

                // show single calendar
                if ($(data.data).find('.dateinput').length) {
                    var $dateinput = $(_this).closest('.filter-box-panel').find('.dateinput')
                    Filter.singleCalendar($dateinput);
                    $dateinput.datepicker('setDate', new Date());
                }
                // show range calendar
                if ($(data.data).find('.dp1').length) {
                    var $dp1 = $(_this).closest('.filter-box-panel').find('.dp1'),
                        $dp2 = $(_this).closest('.filter-box-panel').find('.dp2');
                    Filter.rangeCalendar($dp1, $dp2);
                    date1 = 0;
                    date2 = 0;
                }
            }, 'json');
        },

        clearCondition : function(_this){
            var obj = $(_this).closest('.filter-box-panel')
                .find('.filter-box-condition .element_filter[data-name="condition"] option')
                .empty()
                .parent()
                .html('<option value=""></option>')

            obj.selectpicker('refresh');

            return this;
        },

        clearConditionValue : function(_this){
            $(_this).closest('.filter-box-panel')
                .find('.filter-box-condition-value')
                .empty();

            return this;
        },

        /*
         getUrlParams : function(destination, copy_id, pci){
         Filter.getFromLocalStorage(destination, copy_id, pci, function(data){
         var url_params = [];
         if(!$.isEmptyObject(data)){
         var lich = 0;
         $.each(data, function(key, value){
         url_params.push('filters['+lich+']='+value['id']);
         lich++;
         });
         }
         return url_params;
         });
         },
         */

        getFilterInstaled : function(){
            var filters = [];
            var lich = 0;
            $('.search-filter .filters-installed .filter-install').each(function(i, ul){
                filters.push('filters['+lich+']='+$(ul).data('filter_id'));
                lich++;
            });

            return filters;
        },

        // apply : function($callback){
        //     var instanceContent = ContentReload.createInstance();
        //     iPreloader.implements.call(instanceContent);
        //
        //     Global.getInstance().setContentReloadInstance(instanceContent); // подовження роботи
        //
        //     instanceContent
        //         .setPreloader(this.preloader)
        //         .reDefinition()
        //         .prepareVariablesToGeneralContent(true)
        //         .setCallBackSuccessComplete($.isFunction($callback) ? $callback : null)
        //         .run();
        // },
        apply : function($callback){
            var instanceContent = ContentReload.createInstance();

            Global.getInstance().setContentReloadInstance(instanceContent); // подовження роботи

            instanceContent
                .clear()
                .setTypeAction(iAction.TYPE_FILTER)
                .reDefinition()
                .prepareVariablesToGeneralContent(true)
                .setCallBackSuccessComplete($.isFunction($callback) ? $callback : null)
                .run();
        },


        /*************************************************************
         *   Storage
         **************************************************************/
        getLocalStorageIndex : function(copy_id){
            var result = copy_id
            if(Filter.local_storage_index_prefix){
                result = copy_id + '_' + Filter.local_storage_index_prefix;
            }
            return result;
        },

        addToLocalStorage : function(destination, copy_id, pci, filter_id, callback){
            Filter.getFromLocalStorage(destination, copy_id, pci, function(data){
                var result = [];
                var new_filter = {
                    'id' : filter_id,
                };

                if(data){
                    if(data.length > 0){
                        result.push(data[0]);
                    }
                }
                result.push(new_filter);

                var lStorage = new LocalStorage();

                lStorage
                    .clear()
                    .setKey('list_filter')
                    .setPci(pci)
                    .setValueToServer(Filter.getLocalStorageIndex(copy_id), result, function(data){ callback(data); });
            });
        },

        getFromLocalStorage : function(destination, copy_id, pci, callback){
            var lStorage = new LocalStorage();

            lStorage
                .clear()
                .setKey('list_filter')
                .setPci(pci)
                .getValueFromServer(Filter.getLocalStorageIndex(copy_id), function(data){ callback(data); })
        },

        findInLocalStorage : function(destination, copy_id, pci, filter_id, callback){
            Filter.getFromLocalStorage(destination, copy_id, pci, function(data){
                var result = false;

                $.each($(data), function(key, value){
                    if(value['id'] == filter_id){
                        result = true;
                        return true;
                    }
                });
                callback(result);
            });
        },

        updateInLocalStorage : function(destination, copy_id, pci, old_filter_id, new_filter_id, callback){
            Filter.getFromLocalStorage(destination, copy_id, pci, function(data){
                var result = [];
                if(!data) return false;

                var lStorage = new LocalStorage();

                $(data).each(function(key, value){
                    result.push({ 'id' : (value['id'] != old_filter_id ? value['id'] : new_filter_id)});
                });

                if(result)
                    lStorage
                        .clear()
                        .setKey('list_filter')
                        .setPci(pci)
                        .setValueToServer(Filter.getLocalStorageIndex(copy_id), result, function(){ callback(); });
                else
                    lStorage
                        .clear()
                        .setKey('list_filter')
                        .setPci(pci)
                        .deleteFromServer(Filter.getLocalStorageIndex(copy_id), function(){ callback(); });
            });
        },

        deleteFromLocalStorage : function(destination, copy_id, pci, filter_id, callback){
            Filter.getFromLocalStorage(destination, copy_id, pci, function(data){
                var result = [];
                if(!data) return;
                var lStorage = new LocalStorage();

                $(data).each(function(key, value){
                    if(value['id'] == filter_id) return true;
                    result.push(value);
                });
                if(result)
                    lStorage
                        .clear()
                        .setKey('list_filter')
                        .setPci(pci)
                        .setValueToServer(Filter.getLocalStorageIndex(copy_id), result, function(){ callback(); });
                else
                    lStorage
                        .clear()
                        .setKey('list_filter')
                        .setPci(pci)
                        .deleteFromServer(Filter.getLocalStorageIndex(copy_id), function(){ callback(); });
            });
        },

        deleteAllFromLocalStorage : function(destination, copy_id, pci, callback){
            var lStorage = new LocalStorage();

            lStorage
                .clear()
                .setKey('list_filter')
                .setPci(pci)
                .deleteFromServer(Filter.getLocalStorageIndex(copy_id), function(){ callback(); });
        },





        /**
         * Init datepicker for single date
         * @param <Object> selector (current calendar)
         **/
        singleCalendar : function(selector) {
            selector.datepicker({
                language: Message.locale.language,
                format: Message.locale.dateFormats.medium_js,
                minDate: '1/1/1970',
                autoclose: true,
                orientation: "auto right",
            });
            selector.mask(Message.locale.dateFormats.mask_js);
        },

        /**
         * Init datepicker for single date
         * @param <Object> calendar1
         * @param <Object> calendar2
         **/
        rangeCalendar : function(calendar1, calendar2) {
            // First Calendar Init
            calendar1.mask(Message.locale.dateFormats.mask_js);
            calendar2.mask(Message.locale.dateFormats.mask_js);

            var $dp1, $dp2;
            var checkin = calendar1.datepicker({
                language: Message.locale.language,
                format: Message.locale.dateFormats.medium_js,
                minDate: '1/1/1970',
                autoclose: true,
                orientation: "auto right",
            }).on('show', function() {
                rangeShow($(this));
                $dp1 = $(this).closest('.datepicker-range').find('.dp1');
                $dp2 = $(this).closest('.datepicker-range').find('.dp2');

            }).on('changeDate', function (ev) {
                var newDate = new Date(ev.date);
                newDate.setDate(newDate.getDate() + 1);
                $dp2.datepicker('setDate', newDate);
                date1 = $dp1.datepicker('getDate');
                rangeShow($(this));
            }).on('hide', function() {
                //Filter.set('ModuleListViewRage')
            });

            // Second Calendar Init
            var dp1, dp2;
            var checkout = $('.dp2').datepicker({
                beforeShowDay: function (date) {
                    return {
                        enabled: date.valueOf() >= checkin.datepicker("getDate").valueOf(),
                    };
                },
                language: Message.locale.language,
                format: Message.locale.dateFormats.medium_js,
                minDate: '1/1/1970',
                autoclose: true,
                orientation: "auto right",
            }).on('show', function() {
                rangeShow($(this));
                $dp1 = $(this).closest('.datepicker-range').find('.dp1');
                $dp2 = $(this).closest('.datepicker-range').find('.dp2');
            }).on('changeDate', function (ev) {
                rangeShow($(this));
            }).on('hide', function() {
                //Filter.set('ModuleListViewRage')
            });
        },

    }



    /**
     * Show range in datepickers for period
     * @param <Object> calendar (current datepicker)
     **/
    var rangeShow = function(calendar) {
        $(".datepicker-days td").each(function(){
            var m = Message.locale.monthNames.wide;

            var month = m[$(".datepicker-days th").eq(1).text().split(" ")[0]], year = $(".datepicker-days th").eq(1).text().split(" ")[1];

            if($(this).hasClass('old')) month--;
            if($(this).hasClass('new')) month++;

            $(this).removeClass('startDay endDay');
            if (+(new Date(month+"."+$(this).text()+"."+year)) == +calendar.closest('.datepicker-range').find('.dp1').datepicker("getDate")) {
                $(this).addClass('startDay');
            }
            if (+(new Date(month+"."+$(this).text()+"."+year)) == +calendar.closest('.datepicker-range').find('.dp2').datepicker("getDate")) {
                $(this).addClass('endDay');
            }
            if(+(new Date(month+"."+$(this).text()+"."+year)) < +calendar.closest('.datepicker-range').find('.dp2').datepicker("getDate") && +(new Date(month+"."+$(this).text()+"."+year)) > +calendar.closest('.datepicker-range').find('.dp1').datepicker("getDate")){
                $(this).addClass('range');
            }
        });
    };

    var date1, date2;
    var dates = [];

    for(var key in _private) {
        _self[key] = _private[key];
    }

    exports.Filter = Filter;
    exports.iFilter = iFilter;
})(window);

var Pagination = {
    _this : null,
    _params : null,
    index : null,
    
    init : function(active_page){
        this.setIndex();
        this.setParams(active_page);
        return this;
    },
    setThis : function(_this){
        this._this = _this;
        return this;
    },
    setIndex : function(index){
        if(index)
            this.index = index;
        else
            this.index = $(this._this).closest('.local-storage').data('pagination_index');
        
        return this;
    },
    getParams: function(){
        return this._params;  
    },
    setParams : function(active_page){
        var params = {};
        if($('.pagination_size').val()) params['page_size'] = $('.pagination_size').val();
        if(typeof(active_page) != 'undefined' && active_page) params['page'] = active_page;
        this._params = params;
        
        return this;
    },
        
    getParamsToUrl : function(){
        var result = [];
        var params = this.getParams();
        if(params){
            $.each(params, function(key, value){
               result.push(key+'='+value);  
            });
            return result.join('&');
        } else return '';
    }, 
    
    getFullUrl : function(){
        var params = Url.parseURLParams();
        
        var params_parse = [];
        $.each(params, function(key, value){
            if(key != 'page' && key != 'page_size') params_parse.push(key +'='+ value);
        });
        
        params_parse = params_parse.join('&');
        
        var pagination_params = Pagination.getParamsToUrl();
        var url = window.location.href.split("?");
        url = url[0] + (params_parse ? '?' + params_parse : '') + (params_parse ? (pagination_params ? '&' + pagination_params : '') : (pagination_params ? '?' + pagination_params : '')) ;  
                
        return url;
    },
    
    
    apply : function(){
        var url = Pagination.getFullUrl();
        var action_key = $(Pagination._this).closest('.element[data-type="pagination_block"]').data('action_key');
        var vars = instanceGlobal.contentReload.getContentVars(action_key);

        Global.getInstance().setContentReloadInstance(instanceGlobal.contentReload);

        instanceGlobal.contentReload
            .clear()
            .setObject(Pagination._this)
            .setActionKey(action_key)
            .setVars(vars)
            .setUrl(url)
            .run();
    },
    
    
}


$(document).ready(function(){
    var eventPath = '.pagination .info .form-control';
    $(document).off('blur', eventPath).on('blur', eventPath, function(){

        if(!$(this).val()){
            $(this).val(1);
            return;
        }

        if(parseInt($(this).val()) > parseInt($(this).data('max-page'))){
           $(this).val($(this).data('max-page'));
        }

    });

    eventPath = '.pagination .info .form-control';
    $(document).off('keydown', eventPath).on('keydown', eventPath, function(e){

        if(parseInt($(this).data('max-page')) == 1){ //only one page
           e.preventDefault();
           return;
        }

        // Allow: backspace, delete, tab, escape, enter
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110]) !== -1 ||
            // Allow: Ctrl+A, Command+A
            (e.keyCode == 65 && ( e.ctrlKey === true || e.metaKey === true ) ) ||
            // Allow: home, end, left, right, down, up
            (e.keyCode >= 35 && e.keyCode <= 40))
        {

            // Allow: enter
            if(e.keyCode ==13){

                var page = parseInt($(this).val());

                if(!page){
                    page = 1
                    $(this).val(page);
                }

                if(page == 1){
                    var prev = $(this).closest('.pagination').find('.prev');
                    if(prev && prev.hasClass('disabled')){
                        return;
                    }
                }

                if(page > parseInt($(this).data('max-page'))){

                    page = parseInt($(this).data('max-page'));
                    $(this).val(page);

                    var next = $(this).closest('.pagination').find('.next');
                    if(next && next.hasClass('disabled')){
                        return;
                    }

                }

                instanceGlobal.preloaderShow($(this));
                Pagination.setThis(this).init(page).apply($(this));

            }
            // let it happen, don't do anything
            return;
        }

        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }

    });

    eventPath = '.pagination .page, .pagination .prev a, .pagination .next a';
    $(document).off('click', eventPath).on('click', eventPath, function(){
        var active_page,
            $this = $(this);

        if ($this.closest('li').is('.disabled')) {
            return;
        }
        instanceGlobal.preloaderShow($this);

        active_page = $this.data('active_page');
        if (active_page) {
            Pagination.setThis(this).init(active_page).apply();
        }
    });

    eventPath = '.pagination_size';
    $(document).off('change', eventPath).on('change', eventPath, function(){
        instanceGlobal.preloaderShow($(this));

        Pagination.setThis(this).init().apply();
    });
});
var Sorting = {
    _this : null,
    _params : null,
    index : null,
    
    
    init : function(){
        this.setIndex();
        this.setParams();
        return this;
    },
    setThis : function(_this){
        this._this = _this;
        return this;
    },
    setIndex : function(index){
        if(index)
            this.index = index;
        else
            this.index = $(this._this).closest('.local-storage').data('sort_index');
        
        return this;
    },
    getParams: function(){
        return this._params;  
    },
    setParams : function(){
        var direction = 'a';
        if($(this._this).hasClass('sorting_asc')) direction = 'd';
        var name = $(this._this).data('name');
        if(typeof(name) != 'undefined' && name){
            name = name.split(',');
            var params = {};
            $.each(name, function(key, value){
                params[value] = direction;  
            });
            
            this._params = params; 
        }
        return this;
    },

    getParamsToUrl : function(callback){
        var params = this.getParams();
        if(params) return 'sort=' + JSON.stringify(params);
        else return '';
    },

    getFullUrl : function(){
        var params = Url.parseURLParams();

        var params_parse = [];

        $.each(params, function(key, value){
            if(key != 'sort') params_parse.push(key +'='+ value);
        });

        params_parse = params_parse.join('&');

        var sorting_params = Sorting.getParamsToUrl();
        var url = window.location.href.split("?");
        url = url[0] + (params_parse ? '?' + params_parse : '') + (params_parse ? (sorting_params ? '&' + sorting_params : '') : (sorting_params ? '?' + sorting_params : '')) ;

        return url;
    },

    apply : function(callback){
        var url = Sorting.getFullUrl(),
            action_key = $(this._this).closest('table#list-table, table#settings-table, .element[data-name="process_view_fields_group"]').data('action_key'),
            vars = instanceGlobal.contentReload.getContentVars(action_key);

        instanceGlobal.contentReload
            .clear()
            .setObject(this._this)
            .setActionKey(action_key)
            .setVars(vars)
            .setUrl(url)
            .setCallBackComplete(function () {
                if ($.isFunction(callback)) {
                    callback();
                }
            })
            .run();
    },
}




$(document).ready(function(){
    $(document).on('mouseup', '.list-table th.sorting .sorting-arrows', function(e){

        e.preventDefault();
        e.stopPropagation();

        instanceGlobal.preloaderShow($(this));

        Sorting.setThis($(this).parent()).init().apply()
    })





});






;(function (exports) {
    var _private, _public, _protected, Search,
        _self = {}; //link for instance

    _protected = {

    };
    _private = {
        instance: null,
        common_instance: null,

        onFilter: function(e){
            var $this = $(this),
                instance = e.data.instance,
                value = $this.find('.search-input').val();

            if ($.isFunction(instance.showPreloader)) {
                instance.showPreloader($this)
            }
            else {
                instanceGlobal.preloaderShow($this);
            }

            instance
                .setText(value)
                .apply();

            if (Search.setCommonInstance) {
                Search.setCommonInstance(value.length ? instance : null);
            }

            return false;
        }
    };

    _public = {
        _parent: null,

        events: function () {
            this._events = [
                { parent: document, selector: '.search-filter', event: 'submit', func: _self.onFilter},
            ]

            Global.addEvents(this._events, {
                instance: this
            });

            return this;
        },
        constructor: function () {
            iTemplate.implements.call(this);
            iBackForwardHistory.implements.call(this);

            this.reDefinition()
                .setTemplate(Search._getTemplate());

            return this;
        },
        reDefinition: function () {

            this.updateProperties = function (data) {
                this._text = data._text;

                this.setTextToView()
                    .setTemplate(Search._getTemplate());

                return this;
            };

            return this;
        },
        setOnlyText: function(text){
            if(typeof(text) != 'undefined' && text){
                this._text = text;
            } else {
                this._text = '';
            }
            return this;
        },
        setText : function(text){
            this.setOnlyText(text)
                .setTextToView(this._text);

            return this;
        },
        clear : function () {
            this._text = '';
        },
        updateByUrl : function(){
            this._text = Url.getParam(null, this._field) || '';

            return this;
        },
        appendToUrl: function () {
            var url,
                oldSearch = Search.parseUrl(),
                phase = this.getParam();

            if (oldSearch) {
                History.replaceState('search='+oldSearch, phase);
            } else {
                url = Url.appendParams(location.search, phase);
                History.pushState(url);
            }
            return this;
        },
        getText : function(){
            return this._text || '';
        },
        apply : function(){
            var url = this.getFullUrl();

            Global.getInstance().setContentReloadInstance(instanceGlobal.contentReload);

            instanceGlobal.contentReload
                .prepareVariablesToGeneralContent()
                .setUrl(url)
                .run();
        },
        getParamAsJson: function () {
            return {
                'search': this.getText()
            }
        },
        setTextToView: function () {
            $('.search-filter .search-input').val(this._text);

            return this;
        }
    };

    Search = {
        _text : '',
        _interface: 'Search',
        _field : 'search',
        TYPE_VIEW_OTHER: 1,

        checkCommonInstance: function (json) {
            if (Search.getCommonInstance && json.url) {
                var url,
                    common = Search.getCommonInstance();

                if (common) {
                    url = Url.createInstance();

                    url.setUrl(json.url)
                        .jsonToUrl(common.getParamAsJson());

                    json.url = url.getUrl(); //Url.appendParams(json.url, Search.getInstance(true).getParam());
                }
            } else {
                // старый подход
                if (json._search) {
                    json.url = Url.appendParams(json.url, Search.getInstance(true).getParam());
                }
            }

            return json.url;
        },
        checkCommonInstanceByUrl: function () {
            var instance = null;

            this.implements(iModule);

            if (Search.isSearchByUrl()) {
                instance = Search.createInstance();

                instance
                    .updateByUrl()
                    .setTextToView();
            } else {
                Search.setTextToView(null);
            }

            if (Search.setCommonInstance) {
                Search.setCommonInstance(instance);
            }

            return this;
        },
        // реализация интерфейсов.
        implements: function (object) {
            object.implements.call(this);

            return this;
        },
        setTextToView: function (value) {
            $('.search-filter .search-input').val(value || '');

            return this;
        },
        setInstance: function (instance) {
            _self.instance = instance;

            return _self.instance;
        },
        _getTemplate: function () {
            return $('.search-filter .search-input');
        },
        getInstance : function(status){
            if (status && !_self.instance) {
                _self.instance = this.createInstance();
            }
            return _self.instance;
        },

        createInstance : function(_const){
            var instance;

            var Obj = function(){
                for(var key in Search){
                    this[key] = Search[key];
                }
                for(var key in _public){
                    this[key] = _public[key];
                }
            }

            instance = new Obj();

            if (_const != Search.TYPE_VIEW_OTHER) {
                _self._instance = instance;
                instance.events();
            }

            return instance.constructor();
        },

        parseUrl : function () {
            var json = Url.getParams(location.href);

            return json && json.search ? json.search : null;
        },
        //static
        isSearchByUrl : function(){
            var r = Url.getParam(null, this._field) || '';
            return r && r != '' ? true : false;
        },

        getTextFromInput: function () {
            return $('.search-filter .search-input').val();
        },

        getFullUrl : function(){
            var search, url,
                params = Url.parseURLParams(),
                params_parse = [];

            $.each(params, function(key, value){
                if(key != 'search') params_parse.push(key +'='+ value);
            });

            params_parse = params_parse.join('&');

            // TODO: проверить руский поиск в мозиле.
            //search = encodeURI(this.getParam());
            search = this.getParam();
            url = window.location.href.split("?");
            url = url[0] + (params_parse ? '?' + params_parse : '') + (params_parse ? (search ? '&' + search : '') : (search ? '?' + search : '')) ;

            return url;
        },

        getParam : function(){
            var text = this.getText();

            return text.length ? 'search=' + text : text;
        },

        destroy : function () {
            //call as instance
            if (!this._instance) {

            }
            else {
                //Url.replace(Search._instance.getParam(), '');
                Search._instance = null;
            }
        }

    }

    for(var key in _private) {
        _self[key] = _private[key];
    }

    for(var key in Search) {
        _self[key] = Search[key];
    }

    exports.Search = Search;
})(window);

;(function (exports) {
    var _private, _public, _protected, Tools, _self; //link for instance


    _self = {
        instance: null,

        setInstance: function (instance) {
            this.instance = instance;

            return this;
        },
        getInstance: function () {
            return this.instance;
        }
    }

    _private = {
        onClickByAllChecked : function (e) {
            var label,
                $this = $(this),
                $listOfCheckboxes = $this.closest('.sm_extension_export').find('input[type="checkbox"]');

            if ($this.is('span.name')) {
                $this = $('[data-name="all-checked"]').prop('checked', true);
                label = true;
            } else {
                label = $this.is(':checked') ? true : false;
            }

            $listOfCheckboxes.not($this).prop('checked', label);
        },
        onClickCheckboxes : function () {
            $('.element[data-name="all-checked"]').prop('checked', false);
        },
        onClickByExporting : function () {
            var _this = $('.sm_extension_export'),
                fields = [],
                ids = [];

            $(_this).closest('.edit-view').find('input[type="checkbox"]:checked').each(function(i, ul){
                fields.push($(ul).data('name'));
            })

            $.each($('.sm_extension_data input:checked'),function(i, ul){
                ids.push($(ul).closest('.sm_extension_data').data('id'));
            });

            modalDialog.hide();

            var copy_id = $('.sm_extension').data('copy_id'),
                allChecked = $('#list-table thead .checkbox').prop('checked') ? 1 : 0;

            var params = 'all_checked='+allChecked+'&page_size=0&col_width=' + JSON.stringify(ListViewDisplay.getColumnWidth()) + '&col_hidden=&type=excel' + '&fields=' + JSON.stringify(fields) + '&ids=' + JSON.stringify(ids);
            if(document.location.search == '') {
                document.location.href = Global.urls.url_list_view_export + '/' + copy_id + '?' + params;
            } else {
                var url_params = Url.getWithOutParams(document.location.href, ['page_size'], true);
                document.location.href = Global.urls.url_list_view_export + '/' + copy_id + '?' + url_params + '&' + params;
            }
        },
        print: function (e) {
            e.data.instance.print();
        },
        saveToPdf: function (e) {
            e.data.instance.saveToPdf();
        },
        saveToExcel: function (e) {
            e.data.instance.saveToExcel();
        }
    };

    _public = {
        constructor: function () {
            this.events();

            return this;
        },
        events : function () {
            this._events = [
                { parent: document, selector: '.list_view_btn-print', event: 'click', func: _private.print},
                { parent: document, selector: '.list_view_btn-select_export_to_pdf', event: 'click', func: _private.saveToPdf},
                { parent: document, selector: '.list_view_btn-select_export_to_excel', event: 'click', func: _private.saveToExcel},

                { parent: document, selector: '.sm_extension_export .list_view_btn-export_to_excel', event: 'click', func: _private.onClickByExporting},
                { parent: document, selector: '.sm_extension_export tbody input.checkbox', event: 'show.bs.dropdown', func: _private.onClickCheckboxes},
                { parent: document, selector: '.sm_extension_export .element[data-name="all-checked"], .sm_extension_export thead td:first span', event: 'click', func: _private.onClickByAllChecked},
            ]

            Global.addEvents(this._events, {
                instance: this
            });
        },
        /**
         *   select fields before export
         */
        saveToExcel: function(e){
            var copy_id = $('.sm_extension').data('copy_id');
            $.ajax({
                url: Global.urls.url_list_view_select_export+'/'+copy_id + '?type=excel',
                type: "POST",
                dataType: 'json',
                success: function(data){
                    modalDialog.show(data.data, true);
                },
                error: function(xhr, ajaxOptions, thrownError){
                    Message.show([{'type':'error', 'message':xhr.responseText}], true);
                }
            });
        },
        saveToPdf: function (e) {
            var copy_id = $('.sm_extension').data('copy_id');
            $.ajax({
                url: Global.urls.url_list_view_select_export+'/'+copy_id + '?type=pdf',
                type: "POST",
                dataType: 'json',
                success: function(data){
                    modalDialog.show(data.data, true);

                },
                error: function(xhr, ajaxOptions, thrownError){
                    Message.show([{'type':'error', 'message':xhr.responseText}], true);
                }
            });
        },
        print: function (e) {
            var copy_id = $('.sm_extension').data('copy_id');
            var params = 'page_size=0&col_hidden=' + ListViewDisplay._hidden_group_index;
            if(document.location.search == '') {
                toPrint(Global.urls.url_list_view_print + '/' + copy_id + '?' + params);
            } else {
                var url_params = Url.getWithOutParams(document.location.href, ['page_size'], true);
                toPrint(Global.urls.url_list_view_print + '/' + copy_id + '?' + url_params + '&' + params);
            }
        },
    };

    Tools = {
        createInstance: function () {
            var Obj = function(){
                for(var key in _public){
                    this[key] = _public[key];
                }
            }

            _self.setInstance(new Obj().constructor()) ;

            return _self.getInstance();
        },
        getInstance : function () {
            return _self.getInstance();
        }
    }

    for(var key in _private) {
        _self[key] = _private[key];
    }

    exports.Tools = Tools;
})(window);

var Participant  = {
    TYPE_ITEM_PARTICIPANT   : 'participant',
    TYPE_ITEM_EMAIL         : 'email',

    init : function(){
        this.events();
    },

    events : function () {
        var path = this.actions;

        this._events = [
            //on...AddNewItemEmail
            { parent: document, selector: '.element[data-type="block_participant"] .element[data-type="select"][data-type_item_list="email"] .submodule-search', event: 'keyup', func: path.onKeyUpEnterAddNewItemEmail},
            { parent: document, selector: '.element[data-type="block_participant"] .element[data-type="select"][data-type_item_list="email"] .search-section .add', event: 'click', func: path.onClickAddNewItemEmail},

            { parent: document, selector: '.element[data-type="block_participant"] .element[data-type="block-card"] .participant .remove', event: 'click', func: path.onClickRemoveSelectedItemIcon},
            { parent: document, selector: '.element[data-type="block_participant"] .element[data-type="select"][data-type_item_list="selected_item_list"] .remove', event: 'click', func: path.onClickRemoveSelectedItemList},

            //onClickSwitchItemList
            { parent: document, selector: '.element[data-type="block_participant"] .element[data-type="select"] .element[data-type="item_list_switch"]', event: 'click', func: path.onClickSwitchItemList},

            // onClickAddParticipant
            { parent: document, selector: '.element[data-type="block_participant"] .element[data-type="select"] .element[data-type="block-card-participant"] .element[data-type="participant"].add', event: 'click', func: path.onClickAddSelectedParticipant},
            { parent: document, selector: '.element[data-type="block_participant"] .element[data-type="select"] .element[data-type="block-card-participant"] .element[data-type="email"].add', event: 'click', func: path.onClickAddSelectedParticipant},

            //onClickSelectedItemList
            { parent: document, selector: '.element[data-type="block_participant"] .element[data-type="select"] .link-selected-item-list', event: 'click', func: path.onClickSelectedItemList},

            //onClickItemListAdd...
            { parent: document, selector: '.element[data-type="block_participant"] .element[data-type="select"] .link-item-list-add-participant', event: 'click', func: path.onClickItemListAddParticipant},
            { parent: document, selector: '.element[data-type="block_participant"] .element[data-type="select"] .link-item-list-add-email', event: 'click', func: path.onClickItemListAddEmail},
            { parent: document, selector: '.element[data-type="block_participant"] .element[data-type="select"] .link-item-list-add-participant-button', event: 'click', func: path.onClickItemListAddParticipantButton},
            { parent: document, selector: '.element[data-type="block_participant"] .element[data-type="select"] .link-item-list-add-email-button', event: 'click', func: path.onClickItemListAddEmailButton},

            { parent: document, selector: '.element[data-type="block_participant"] .element[data-type="select"]+.element[data-type="select"]', event: 'hide.bs.dropdown', func: path.onDropDownHide},

            // Кнопка "Ответсвенный"
            { parent: document, selector: '.edit-view .element[data-type="block_participant"] a.make-responsible', event: 'click', func: path.onClickSetButtonMakeResponsible},
            { parent: document, selector: '.edit-view .element[data-type="block_participant"] a.remove-responsible', event: 'click', func: path.onClickSetBtnRemoveResponsible},
            { parent: document, selector: '.element[data-type="block_participant"] .element[data-type="select"] .element[data-type="block-card-responsible"] .element[data-type="participant"]', event: 'click', func: path.onClickGetHtmlPaticipantListItemAsResponsible},
            { parent: document, selector: '.element[data-type="block_button"] .element[data-type="button"] .element[data-type="button_subscription"]', event: 'click', func: path.onClickSetButtonSubscription},
        ]

        Global.addEvents(this._events, {
            instance: this
        });

        return this;
    },


    // actions - методы-действия для эвентов
    actions: {

        //onClickSetButtonMakeResponsible - сделать ответственным
        onClickSetButtonMakeResponsible : function(e){
            Participant.setButtonMakeResponsible(this);
            $(this).closest('.participant').removeClass('open');
        },

        //onClickSetBtnRemoveResponsible - убрать ответственного
        onClickSetBtnRemoveResponsible : function(e){
            Participant.setBtnRemoveResponsible(this);
        },

        // onClickGetHtmlPaticipantListItemAsResponsible - выбираем ответственного - для ProcessView
        onClickGetHtmlPaticipantListItemAsResponsible : function(e){
            Participant.getHtmlPaticipantListItemAsResponsible(this);
        },

        // onClickSetButtonSubscription - выбираем ответственного - для ProcessView
        onClickSetButtonSubscription : function(e){
            Participant.setSubscription(this);
        },

        //onClickSelectedItemList
        onClickSelectedItemList : function(e){
            var _this = this;

            if(Participant.getParticipantBlockType(_this) == 'list_view') {
                var $blPartici = $(this).closest('.element[data-type="block_participant"]'),
                    thoff = $blPartici.offset(),
                    topnew = thoff.top + 29;

                $blPartici.find('ul').css({ top:''+topnew+'px', left:''+thoff.left+'px'});
            }

            Participant.showSelectedItemList(this);
        },

        //onClickItemListAddParticipant
        onClickItemListAddParticipant : function(e){
            var _this = this

            $(_this).closest('.element[data-type="drop_down"]').find('.b-clone-data .table').remove(); // It is clear old clone data

            var post_data = Participant.getItemListAjaxPostData(_this);
            post_data.type_item_list = Participant.TYPE_ITEM_PARTICIPANT;

            Participant.getItemList(_this, post_data, true);
        },

        //onClickItemListAddParticipantButton
        onClickItemListAddParticipantButton : function(e){
            var _this = this

            $(_this).closest('.element[data-type="block_participant"]').find('.b-clone-data .table').remove(); // It is clear old clone data

            var post_data = Participant.getItemListAjaxPostData(_this);
            post_data.type_item_list = Participant.TYPE_ITEM_PARTICIPANT;

            Participant.getItemList(_this, post_data, true);
        },

        //onClickItemListAddEmail
        onClickItemListAddEmail : function(e){
            var _this = this

            $(_this).closest('.element[data-type="drop_down"]').find('.b-clone-data .table').remove(); // It is clear old clone data

            var post_data = Participant.getItemListAjaxPostData(_this);
            post_data.type_item_list = Participant.TYPE_ITEM_EMAIL;

            Participant.getItemList(_this, post_data, true);
        },

        //onClickItemListAddEmailButton
        onClickItemListAddEmailButton : function(e){
            var _this = this

            $(_this).find('.b-clone-data .table').remove(); // It is clear old clone data

            var post_data = Participant.getItemListAjaxPostData(_this);
            post_data.type_item_list = Participant.TYPE_ITEM_EMAIL;

            Participant.getItemList(_this, post_data, true);
        },

        //onClickAddSelectedParticipant - добавляем выбранного участника
        onClickAddSelectedParticipant : function(e){
            e.stopPropagation();

            Participant.addSelectedParticipant(this);
        },

        //onClickSwitchItemList
        onClickSwitchItemList : function(e){
            e.stopPropagation();

            var _this = this,
                $this = $(_this);

            $this.closest('.element[data-type="drop_down"]').find('.b-clone-data .table').remove(); // It is clear old clone data

            var post_data = Participant.getItemListAjaxPostData(_this);
            post_data.type_item_list = $this.data('type_item_list');

            Participant.getItemList(_this, post_data, false, function(){
                $this.removeClass('active');
            });

            DropDownListObj
                .createInstance()
                .setGroupData(DropDownListObj.GROUP_DATA_SDM_OPTION_LIST)
                .run($('.edit-view:visible .participant[data-type="select"]:not(.hide)'));
        },

        //onKeyUpEnterAddNewItemEmail
        onKeyUpEnterAddNewItemEmail: function (e) {
            $(this).closest('.search-section').removeClass('b-error');

            if (e.keyCode == 13) {
                Participant.addNewItemEmail(this);
            }
        },

        //onClickAddNewItemEmail
        onClickAddNewItemEmail : function(e) {
            e.preventDefault();

            Participant.addNewItemEmail(this);
            return false;
        },

        //onClickRemoveSelectedItemIcon
        onClickRemoveSelectedItemIcon : function(e){
            e.stopPropagation();

            Participant.removeSelectedItemIcon(this)
        },

        //onClickRemoveSelectedItemList
        onClickRemoveSelectedItemList : function(e){
            e.stopPropagation();

            Participant.removeSelectedItemList(this)
        },

        //onDropDownHide
        onDropDownHide : function(){
            if (Global.browser.isFirefox()) return false;

            Participant.remove();
        },

    },


    //getCopyId
    getCopyId : function(_this){
        var copy_id = null;
        if(!_this || !$(_this).length){
            return null;
        }

        if(Participant.getParticipantBlockType(_this) == 'edit_view'){
            var element = $(_this).closest('.edit-view');
            if(element){
                copy_id = element.data('copy_id');
            }
        } else if(Participant.getParticipantBlockType(_this) == 'list_view'){
            copy_id = $(_this).closest('.sm_extension').data('copy_id');
        }

        return copy_id;
    },

    //getDataId
    getDataId : function(_this){
        var data_id = null;
        if(!_this || !$(_this).length){
            return null;
        }

        if(Participant.getParticipantBlockType(_this) == 'edit_view'){
            var element = $(_this).closest('.edit-view');
            if(element){
                data_id = element.data('id');
            }
        } else if(Participant.getParticipantBlockType(_this) == 'list_view'){
            data_id = $(_this).closest('.sm_extension_data').data('id');
        }

        return data_id;
    },


    removeFromStore : function ($place, json) {
        if (typeof json != 'object') {
            $place.find('[data-email_id="'+ json +'"]').remove();
        } else {
            $place.find('[data-ug_id="'+json.ug_id+'"][data-ug_type="' + json.ug_type + '"]').remove();
        }

        return this;
    },

    //getTypeItemlList
    getTypeItemlList : function(_this){
        return $(_this).closest('.element[data-type="select"]').data('type_item_list');
    },

    //getParticipantBlockType - возвращает тип блока Participant
    getParticipantBlockType : function(_this){
        return $(_this).closest('.element[data-type="block_participant"]').data('block_type');
    },
    
    //setButtonMakeResponsible - сделать ответственным
    setButtonMakeResponsible : function(_this){
        //all
        var participant = $(_this).closest('.element[data-type="block_participant"]');
        participant.find('.element[data-type="participant"]').each(function(i, ul){
            $(ul).removeClass('active').data('responsible', '0'); 
            $(ul).find('.remove-responsible').addClass('hide');
            $(ul).find('.make-responsible').removeClass('hide');
        });
        
        //this
        var card = $(_this).closest('.element[data-type="participant"]');
        card.addClass('active');
        card.data('responsible', '1'); 
        card.find('.remove-responsible').removeClass('hide');
        $(_this).addClass('hide');
    },
    
    //setBtnRemoveResponsible - убрать ответственного
    setBtnRemoveResponsible : function(_this){
        //this
        var card = $(_this).closest('.element[data-type="participant"]');
        card.removeClass('active').data('responsible', '0');;
         
        card.find('.make-responsible').removeClass('hide');
        $(_this).addClass('hide');
    },


    //getItemListAjaxPostData
    getItemListAjaxPostData : function(_this){
        var $this = $(_this),
            post_vars = {},
            exception_list_id = [];

        var post_data = {
            'type_item_list' : $this.closest('.element[data-type="select"]').data('type_item_list')
        }


        post_vars['exception_list_id'] = {};

        // card - participant
        $this.closest('.element[data-type="block_participant"]').find('.element[data-type="select"][data-type_item_list="selected_item_list"] .element[data-type="block-card-participant"] .element[data-type="participant"]').each(function(i, ul){
            exception_list_id.push({
                'ug_id' : $(ul).data('ug_id'),
                'ug_type' : $(ul).data('ug_type'),
            })
        })
        if(!$.isEmptyObject(exception_list_id)){
            post_vars['exception_list_id']['participant'] = JSON.stringify(exception_list_id);
            exception_list_id = [];
        }

        // card - email
        $(_this)
            .closest('.element[data-type="block_participant"]')
            .find('.element[data-type="select"][data-type_item_list="selected_item_list"] [data-type="drop_down_list"] .element[data-type="block-card-participant"] .element[data-type="email"]').each(function(i, ul){
            exception_list_id.push($(ul).data('email_id'));
        })
        if(!$.isEmptyObject(exception_list_id)){
            post_vars['exception_list_id']['email'] = JSON.stringify(exception_list_id);
        }

        switch (Participant.getParticipantBlockType(_this)){
            case 'edit_view': {
                var edit_view = $this.closest('.edit-view');
                if(edit_view) {
                    post_vars['copy_id'] = edit_view.data('copy_id');
                    post_vars['data_id'] = edit_view.data('id');
                    post_vars['pci'] = edit_view.data('pci');
                    post_vars['pdi'] = edit_view.data('pdi');

                    // for process
                    if(dinamic_copy_id = edit_view.find('.element[data-type="drop_down"] .element[data-type="drop_down_button"].element_module').data('id')){
                        post_data['dinamic_copy_id'] = dinamic_copy_id;
                    }
                }

                break;
            }
            case 'list_view': {
                post_vars['copy_id'] = $('.sm_extension').data('copy_id');
                post_vars['data_id'] = $this.closest('.sm_extension_data[data-controller="edit_view"], .sm_extension_data[data-controller="process_view_edit"]').data('id');
                post_vars['pci'] = $('.list_view_block.sm_extension, .process_view_block.sm_extension').data('parent_copy_id');
                post_vars['pdi'] = $('.list_view_block.sm_extension, .process_view_block.sm_extension').data('parent_data_id');
                post_vars['show_responsible'] = 1;

                break;
            }
            default: break;
        }


        if(!post_data.vars){
            post_data.vars = post_vars;
        } else {
            for(key in post_vars){
                post_data.vars[key] = post_vars[key];
            }
        }

        return post_data;
    },

    //issetSelectBlockByTypeItemList
    issetSelectBlockByTypeItemList : function(_this, type_item_list){
        return $(_this).closest('.element[data-type="block_participant"]').find('.element[data-type="select"]').is('[data-type_item_list="'+type_item_list+'"]');
    },

    //prepareItemListReturnData
    prepareItemListReturnData : function(data){
        Participant.prepareItemListReturnDataForProcess(data);
    },

    //prepareItemListReturnDataForProcess
    prepareItemListReturnDataForProcess : function(data){
        if(data.without_participant_const){
            var html = $(data.html);
            html.find('.element[data-type="participant"][data-ug_type="const"]').remove();
            data.html = html;
        }
    },

    //getItemList  - Загрузка с сервера и показ списка для добавления новых участников
    getItemList : function(_this, post_data, refresh, callback){
        var refresh = refresh || false;

        if(refresh == false){
            //switch blocks
            var isset_block = Participant.issetSelectBlockByTypeItemList(_this, post_data.type_item_list);
            if(isset_block){
                Participant.switchToItemList(_this, post_data.type_item_list);
                return;
            }

            refresh = true;
        }

        // load block
        if(refresh){
            return functionReload();
        }

        //function Reload
        function functionReload(){
            //loadItemList
            Participant.loadItemList(_this, post_data, function(data){
                if(data.status == false){
                    Message.show(data.messages, false);
                } else if(data.status == true){
                    var to_remove = Participant.issetSelectBlockByTypeItemList(_this, post_data.type_item_list);


                    Participant.prepareItemListReturnData(data);

                    $(_this).closest('.element[data-type="select"]').after(data.html).addClass('hide').removeClass('open');
                    $(_this).closest('.element[data-type="select"]').next().addClass('opened');

                    if(to_remove){
                        $(_this).closest('.element[data-type="select"]').remove();
                    }


                    if(typeof callback == 'function'){
                        callback()
                    }

                    niceScrollCreate($('.submodule-table'));
                }
            });
        }

    },

    //loadItemList - Загрузка с сервера списка участников
    loadItemList : function(_this, post_data, callback){
        $.ajax({
            url : Global.urls.url_participant_get_item_list + '/' + Participant.getCopyId(_this),
            data : post_data,
            type : 'POST', async: false, dataType: "json",
            success: function(data){
                callback(data)
            },
            error : function(){
                Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
            }
        });
    },


    //addSelectedParticipant
    addSelectedParticipant : function(_this){
        var block_type = Participant.getParticipantBlockType(_this);
        var type_item_list = Participant.getTypeItemlList(_this);

        //TYPE_ITEM_PARTICIPANT
        switch (type_item_list) {
            case Participant.TYPE_ITEM_PARTICIPANT: {
                if(block_type == 'edit_view'){
                    if($(_this).attr('data-ug_id') == $('.element[data-type="block_button"] .element[data-type="button_subscription"]').data('ug_id')){
                        Participant.setSubscription('.element[data-type="block_button"] .element[data-type="button"] .element[data-type="button_subscription"]', true);
                    }
                    Participant.getHtmlSelectedIconItemParticipant(_this);
                } else {
                    var participant = $(_this).closest('.element[data-type="block_participant"]'),
                        offset = participant.offset(),
                        top_new = offset.top + 25;

                    participant.find('ul').css({top: '' + top_new + 'px', left: '' + offset.left + 'px'});
                }

                Participant.getHtmlSelectedPaticipantListItem(_this, Participant.TYPE_ITEM_PARTICIPANT);

                $(_this).closest('.element[data-type="participant"]').remove();

                break;
            }
            //TYPE_ITEM_EMAIL
            case Participant.TYPE_ITEM_EMAIL: {

                Participant.hasParticipantUserByEmailId(_this, function(data){
                    if(data.status == true && data.participan_list){
                        var skip = 0;
                        _this_p = $(_this).closest('.edit-view').find('.element[data-type="block"] .element[data-type="block_participant"]:eq(0)');
                        $.each(data.participan_list, function(i, participant_data){
                            if(_this_p.find('.element[data-type_item_list="selected_item_list"] .element[data-type="block-card-participant"] .element[data-type="participant"][data-ug_id="' + participant_data.users_id + '"][data-ug_type="user"]').length){
                                skip++;
                                return true;
                            } else {
                                messages = null;
                                var post_vars = {
                                    'ug_id': participant_data.users_id,
                                    'ug_type': 'user',
                                }
                                Participant.getHtmlSelectedIconItemParticipant(_this_p, post_vars);
                                Participant.getHtmlSelectedPaticipantListItem(_this_p, Participant.TYPE_ITEM_PARTICIPANT, post_vars);
                                Participant.removeFromStore($(_this).closest('[data-type="drop_down_list"]').next().filter('.b-clone-data'), parseInt($(_this).attr('data-email_id')));
                                $(_this).closest('.element[data-type="email"]').remove();
                            }
                        });

                        if(skip && skip === data.participan_list.length){
                            Message.show([{
                                'type': 'error',
                                'message': 'A participant with this email address is already selected'
                            }], true);
                        }
                    } else {
                        if(block_type == 'edit_view'){
                            Participant.getHtmlSelectedIconItemEmail(_this);
                        }

                        Participant.getHtmlSelectedPaticipantListItem(_this, Participant.TYPE_ITEM_EMAIL);
                        Participant.removeFromStore($(_this).closest('[data-type="drop_down_list"]').next().filter('.b-clone-data'), parseInt($(_this).attr('data-email_id')));
                        $(_this).closest('.element[data-type="email"]').remove();
                    }
                })

                break;
            }
            default: break;
        }

        TableSearchInit('.submodule-table', '.submodule-search');
    },

    //hasParticipantUserByEmailId
    hasParticipantUserByEmailId : function(_this, callback){
        if(!post_vars){
            var post_vars = {
                'email_id': $(_this).data('email_id'),
            };
        }
        var data = {
            'vars' : post_vars,
        };

        $.ajax({
            url : Global.urls.url_participant_has_participant_user_by_email_id + '/' + Participant.getCopyId(_this),
            data : data,
            type : 'POST', async: false, dataType: "json",
            success: function(data){
                callback(data);
            },
            error : function(){
                Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
            }
        });




    },


    // showSelectedItemList - показ списка добавленных участников
    showSelectedItemList : function(_this){
        var $this = $(_this);

        $this.closest('.participants.element[data-type="drop_down"]').find('.b-clone-data .table').remove(); // It is clear old clone data
        $this.closest('[data-type="drop_down"]').find('.submodule-search').off('keyup');
        $this.closest('.element[data-type="block_participant"]')
            .find('.element[data-type="select"].hide')
            .not('.list-participants')
            .not('[data-type_item_list="email"]')
            .removeClass('hide')
            .addClass('opened')
            .closest('.element[data-type="select"]')
            .find('.submodule-search').val('').trigger('keyup');

        Participant.remove();
    },


    //addResponsibleIfNotExist - устанавливаем при добавлении ответственым залогиненого пользователя
    addResponsibleIfNotExist : function(){
        $('.edit-view').each(function(){
            var edit_view = $(this);
            if(edit_view.data('id') === ""){

                var participant = edit_view.find('.element[data-type="block_participant"]');

                if(participant && !participant.find('.participants .element[data-type="block-card"] .element').length){

                    var subscription = edit_view.find('.element[data-type="block_button"] .element[data-type="button"] .element[data-type="button_subscription"]');
                    if(subscription && subscription.length){

                        var user_id = $('.element[data-type="block_button"] .element[data-type="button_subscription"]').data('ug_id');

                        Participant.setSubscription(subscription, false, function(){
                            participant.find('.element[data-type="block-card"]').find('.element[data-type="participant"]').each(function(){
                                if($(this).data('ug_id') == user_id){
                                    var responsible_link = $(this).find('.make-responsible');
                                    if(responsible_link) {
                                        Participant.setButtonMakeResponsible(responsible_link);
                                    }
                                }
                            });
                        });
                    } else {
                        var user_id = participant.data('ug_id');

                        participant.find('.element[data-type="select"]:eq(1)').find('.element[data-type="participant"].add').each(function(){

                            if($(this).data('ug_id') == user_id){
                                var _this = this;
                                Participant.getHtmlSelectedIconItemParticipant(_this, null, function(){
                                    Participant.getHtmlSelectedPaticipantListItem(_this, Participant.TYPE_ITEM_PARTICIPANT, null, function(){

                                        participant.find('.element[data-type="block-card"]').find('.element[data-type="participant"]').each(function(){

                                            if($(this).data('ug_id') == user_id){

                                                var responsible_link = $(this).find('.make-responsible');
                                                if(responsible_link) {
                                                    Participant.setButtonMakeResponsible(responsible_link);
                                                    Participant.remove();
                                                }
                                            }
                                        });
                                    });
                                });
                            }
                        });
                    }
                }

                var participant_related = edit_view.find('.buttons-block .element_relate_participant');
                if(participant_related &&  participant_related.length && participant_related.data('ug_id') === ""){

                    var user_id = participant_related.data('u_id');
                    participant_related.closest('.element').find('.sm_extension_data').each(function(){

                        if($(this).data('ug_id') == user_id){
                            participant_related.html($(this).find('td').html());
                            participant_related.data('ug_id', $(this).data('ug_id'));
                        }
                    });
                }
            }
        });
    },

    //isExistResponsible - проверяем или есть ответственый
    isExistResponsible : function(_this){
        var edit_view = $(_this).closest('.edit-view');
        var participant = edit_view.find('.element[data-type="block_participant"]');
        if(participant && participant.length){
            if(!participant.find('.participants .element[data-type="block-card"] .element.active').length){
                return false;
            }
        }

        var participant_related = edit_view.find('.buttons-block .element_relate_participant');
        if(participant_related && participant_related.length){
           if(!participant_related.data('ug_id')){
               return false;
           }
        }

        return true;
    },

    // getChangeResponsible
    getChangeResponsible : function(_this){
        var block_participant = $(_this).closest('.element[data-type="block_participant"]');
        if(!block_participant){
            return true;
        }

        if(block_participant.data('block_type') != 'edit_view'){
            return true;
        }

        return block_participant.data('change_responsible');
    },

    //getHtmlSelectedIconItemParticipant - устанавливаем одну каточку в блок  participant
    getHtmlSelectedIconItemParticipant : function(_this, post_vars, callback){
        var _data,
            $this = $(_this),
            copy_id = Participant.getCopyId(_this);

        if(!post_vars){
            post_vars = {
                'ug_id': $this.data('ug_id'),
                'ug_type': $this.data('ug_type')
            }
        }

        post_vars['change_responsible'] = Participant.getChangeResponsible(_this);
        post_vars['copy_id'] = copy_id;
        post_vars['data_id'] = Participant.getDataId(_this);

        _data = {
            'vars' : post_vars,
            'type_item_list' : Participant.TYPE_ITEM_PARTICIPANT
        };

        $.ajax({
            url : Global.urls.url_participant_get_selected_icon_item + '/' + copy_id,
            data : _data,
            type : 'POST', async: false, dataType: "json",
            success: function(data){
                if(data.status == false){
                    Message.show(data.messages, false);
                } else if(data.status == true){
                    var place = $(_this).closest('.element[data-type="block_participant"]').find('.element[data-type="block-card"]'),
                        element = place.find('.participant').first();

                    Participant.removeFromStore($this.closest('.participant').find('.b-clone-data'), _data.vars);

                    if($(data.html).is('[data-ug_type="group"], [data-ug_type="const"]') && element.length){
                        if (!$(data.html).is('[data-ug_type="const"]')) {
                            //only red
                            var _elementConst = $('[data-type="block-card"] [data-ug_type="const"]').last();

                            if (_elementConst.length) {
                                _elementConst.after(data.html)
                            } else place.find('>span').first().before(data.html);
                        } else place.find('>span').first().before(data.html);
                    } else {
                        place.append(data.html);
                    }

                    if(callback){
                        callback();
                    }
                }
            },
            error : function(){
                Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
            }
        });
    },

    //getHtmlSelectedIconItemEmail - устанавливаем одну каточку-email в блок  participant
    getHtmlSelectedIconItemEmail : function(_this, post_vars, callback){
        if(!post_vars){
            var post_vars = {
                'email_id': $(_this).data('email_id'),
            };
        }
        var data = {
            'vars' : post_vars,
            'type_item_list' : 'email'
        };

        $.ajax({
            url : Global.urls.url_participant_get_selected_icon_item + '/' + Participant.getCopyId(_this),
            data : data,
            type : 'POST', async: false, dataType: "json",
            success: function(data){
                if(data.status == false){
                    Message.show(data.messages, false);
                } else if(data.status == true){
                    var place = $(_this).closest('.element[data-type="block_participant"]').find('.element[data-type="block-card"]:eq(0)');
                    place.append(data.html);

                    if(callback){
                        callback();
                    }
                }
            },
            error : function(){
                Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
            }
        });
    },


    //getHtmlSelectedIconItemForUser - устанавливаем одну каточку в блок participant текущего пользователя
    getHtmlSelectedIconItemForUser : function(_this, callback){
        var copy_id = $(_this).closest('.edit-view').data('copy_id');

        var _data = {
            'copy_id' : copy_id,
            'data_id' : $(_this).closest('.edit-view').data('id')
        }

        $.ajax({
            url : Global.urls.url_participant_get_selected_icon_item_for_user + '/' + copy_id,
            type : 'POST',
            async: false,
            dataType: "json",
            data : _data,
            success: function(data){
                if(data.status == false){
                    Message.show(data.messages, false);
                } else if(data.status == true){
                    $(_this)
                        .closest('.edit-view')
                        .find('.element[data-type="block_participant"]:eq(0)')
                        .find('.element[data-type="block-card"]')
                        .append(data.html_first);

                    $(_this)
                        .closest('.edit-view')
                        .find('.element[data-type="block_participant"]:eq(0)')
                        .find('.element[data-type="select"]')
                        .find('.element[data-type="block-card-participant"]')
                        .append(data.html_second);

                    /*
                    $(_this)
                        .closest('.element[data-type="select"]')
                        .find('.element[data-type="block_participant"]')
                        .find('.element[data-type="select"]:eq(0)')
                        .find('.element[data-type="block-card-participant"] tbody')
                        .append(data.html_first);
                        */

                    //Participant.deleteSecondSelectBlock(_this);

                    if(callback){
                       callback();
                    }
                }
            },
            error : function(){
                Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
            }
        });
    },


    //getHtmlSelectedPaticipantListItem - устанавливаем одну каточку в блок participant select
    getHtmlSelectedPaticipantListItem : function(_this, type_item_list, post_vars, callback){
        var _this = _this;
        if(!post_vars){
            // participant
            if(type_item_list == Participant.TYPE_ITEM_PARTICIPANT){
                var post_vars = {
                    'ug_id': $(_this).data('ug_id'),
                    'ug_type': $(_this).data('ug_type'),
                };

                if(Participant.getParticipantBlockType(_this) == 'list_view'){
                    post_vars['copy_id'] = $('.sm_extension').data('copy_id');
                    post_vars['data_id'] = $(_this).closest('.sm_extension_data[data-controller="edit_view"], .sm_extension_data[data-controller="process_view_edit"]').data('id');
                    post_vars['save_entity'] = 1;
                }
            } else
            // email
            if(type_item_list == Participant.TYPE_ITEM_EMAIL){
                var post_vars = {
                    'email_id': $(_this).data('email_id'),
                };
            }
        }

        post_vars['copy_id'] = Participant.getCopyId(_this);
        post_vars['data_id'] = Participant.getDataId(_this);

        var post_data = {
            'vars' : post_vars,
            'type_item_list' : type_item_list
        }

        $.ajax({
            url : Global.urls.url_participant_get_selected_list_item  + '/' + Participant.getCopyId(_this),
            data : post_data,
            type : 'POST', async: false, dataType: "json",
            success: function(data){
                if(data.status == false){
                    Message.show(data.messages, false);
                } else if(data.status == true){
                    var $element = $([]),
                        $place = $(_this)
                            .closest('.element[data-type="block_participant"]')
                            .find('.element[data-type_item_list="selected_item_list"]')
                            .find('.element[data-type="block-card-participant"]');

                    if (!$place.find('tbody').length) {
                        $place.append('<tbody></tbody>')
                    } else {
                        $element = $place.find('tr');
                    }
                    $place = $place.find('tbody');

                    if ($(data.html).is('[data-ug_type="group"], [data-ug_type="const"]') && $element.length) {
                        if ($(data.html).is('[data-ug_type="const"]')) {
                            var record = $element.filter('[data-ug_type="const"]').last();
                            if (record.length) {
                                record.after(data.html);
                            }
                        } else {
                            var items = $element.filter('[data-ug_type="const"]').last();
                            if (items.length) {
                                items.after(data.html);
                            } else $element.first().before(data.html);
                        }
                    } else {
                        $place.append(data.html);
                    }

                    if(callback){
                       callback();
                    }
                }
            },
            error : function(){
                Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
            }
        });
    },




    //getHtmlPaticipantListItemAsResponsible - устанавливаем выбраного сотрудника как ответственного
    getHtmlPaticipantListItemAsResponsible : function(_this){
        var post_data = {
                'ug_id' : $(_this).data('ug_id'),
                'ug_type' : $(_this).data('ug_type')
        };

        if(Participant.getParticipantBlockType(_this) == 'list_view'){
            post_data['copy_id'] = $('.sm_extension').data('copy_id');
            post_data['data_id'] = $(_this).closest('.sm_extension_data[data-controller="edit_view"], .sm_extension_data[data-controller="process_view_edit"], .sm_extension_data.navigation_module_link_child_pv').data('id');
        } 

        $.ajax({
            url : Global.urls.url_participant_get_list_item_as_responsible + '/' + Participant.getCopyId(_this),
            data : post_data,
            type : 'POST', async: false, dataType: "json",
            success: function(data){
                if(data.status == false){
                    Message.show(data.messages, false);
                } else
                if(data.status == true){
                    $(_this).closest('.element[data-type="block_participant"]').find('.element[data-type="select"]').children('button').after(data.html).remove();
                      
                }
            },
            error : function(){
                Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
            }
        });
    },


    //checkAndClearSelectedItemIcon_TypeConst - поиск и удаление
    checkAndClearSelectedItemIcon_TypeConst : function(_this){
        var edit_view = $(_this).closest('.edit-view');
        if(!edit_view.length){
            return;
        }

        var drop_down = $(_this).closest('.element[data-type="drop_down"]');
        if(!drop_down.find('.element[data-type="drop_down_button"].element_module').length){
            return;
        }

        var block_participant = edit_view.find(
                                    '.element[data-type="block_participant"] .element[data-type="block-card"] .element[data-type="participant"][data-ug_type="const"],' +
                                    '.element[data-type="block_participant"] .element[data-type="select"][data-type_item_list="selected_item_list"] .element[data-type="participant"][data-ug_type="const"]'
                                );
        if(!block_participant.length){
            return;
        }

        var copy_id = drop_down.find('.element[data-type="drop_down_button"]').data('id');
        if(!copy_id){
            return;
        }

        // callback
        var callback_function = function(data, block_participant){
            if(!data.status){
                block_participant.each(function(i, ul){
                    $(ul).remove();
                })
            }
        };

        // ajax
        $.ajax({
            url : Global.urls.url_participant_has_participant + '/' + copy_id,
            type : 'POST', async: false, dataType: "json",
            success: function(data){
                callback_function(data, block_participant);
            },
        });
    },


    //removeSelectedItemIcon - удалить выбранную карточку (блок иконок)
    removeSelectedItemIcon : function(_this){
        var element_participant = $(_this).closest('.participant');
        var type_item_list = element_participant.data('type');

        if(type_item_list == Participant.TYPE_ITEM_PARTICIPANT){
            var button_subscription = $(_this).closest('.edit-view').find('.element[data-type="block_button"] .element[data-type="button_subscription"]');


            $(_this)
                .closest('.element[data-type="block_participant"]')
                .find('.element[data-type="select"] .element[data-ug_id="' + element_participant.attr('data-ug_id') + '"][data-ug_type="' + element_participant.attr('data-ug_type') + '"]')
                .remove();

            //setSubscription
            if(button_subscription && element_participant && element_participant.attr('data-ug_type') == 'user' && element_participant.attr('data-ug_id') == button_subscription.attr('data-ug_id')){
                Participant.setSubscription(button_subscription);
            }
        } else
        if(type_item_list == Participant.TYPE_ITEM_EMAIL){
            $(_this)
                .closest('.element[data-type="block_participant"]')
                .find('.element[data-type="select"] .element[data-email_id="' + element_participant.attr('data-email_id') + '"]')
                .remove();
        }

        element_participant.remove();
    },



    //removeSelectedItemList - удалить выбранную карточку (выпадающий список)
    removeSelectedItemList : function(_this){
        var type_item_list = $(_this).closest('.sm_extension_data.element').data('type');
        var element_select = $(_this).closest('.element[data-type="block_participant"]').find('.element[data-type="select"][data-type_item_list="selected_item_list"]');

        // remove item
        if(type_item_list == Participant.TYPE_ITEM_PARTICIPANT){
            var button_subscription = $(_this).closest('.edit-view').find('.element[data-type="block_button"] .element[data-type="button_subscription"]');
            var sm_extension_data = $(_this).closest('.sm_extension_data.element');

            $(_this)
                .closest('.element[data-type="block_participant"]')
                .find('.element[data-type="block-card"], .element[data-type="block-card-participant"]')
                .find('.element[data-type="participant"][data-ug_id="' + $(_this).closest('.element[data-type="participant"]').data('ug_id') + '"][data-ug_type="' + $(_this).closest('.element[data-type="participant"]').data('ug_type') + '"]')
                .remove();

            //setSubscription
            if(button_subscription && sm_extension_data && sm_extension_data.attr('data-ug_type') == 'user' && sm_extension_data.attr('data-ug_id') == button_subscription.attr('data-ug_id')){
                Participant.setSubscription(button_subscription);
            }
        } else
        if(type_item_list == Participant.TYPE_ITEM_EMAIL){
            $(_this)
                .closest('.element[data-type="block_participant"]')
                .find('.element[data-type="block-card"], .element[data-type="block-card-participant"]')
                .find('.element[data-type="email"][data-email_id="' + $(_this).closest('.element[data-type="email"]').data('email_id') + '"]')
                .remove();
        }

        element_select.find('.dropdown-menu .submodule-table').getNiceScroll().resize();
    },
    
    //setUnSubscription - отписаться
    setUnSubscription : function(_this){
        $(_this)
            .closest('.edit-view')
            .find('.element[data-type="block_participant"]')
            .find('.element[data-type="block-card"], .element[data-type="block-card-participant"]')
            .find('.element[data-type="participant"][data-ug_id="'+$(_this).data('ug_id')+'"][data-ug_type="user"]').remove();
        //Participant.deleteSecondSelectBlock(_this);
    },

    //setSubscription -  кнопка: подписаться/отписаться
    setSubscription : function(_this, no_action, callback){
        var value = $(_this).val();
        switch(value){
            case "0" :
                $(_this)
                    .val('1') // отметка о подписке
                    .text(Message.translate_local('Unsubscribe'));
                if(!no_action) {
                    Participant.getHtmlSelectedIconItemForUser(_this, callback);
                }
                break;
            case "1" : 
                $(_this)
                    .val('0') // отметка об отписке
                    .text(Message.translate_local('Subscribe'));
                if(!no_action) {
                    Participant.setUnSubscription(_this);
                }
                break;
            
        }
    },

    // switchToItemList переключение списка Участники|Email
    switchToItemList : function(_this, type_item_list){
        var block_participant =  $(_this).closest('.element[data-type="block_participant"]');

        var select = $(_this).closest('.element[data-type="select"]');

        if(select.data('type_item_list') == type_item_list){
            return;
        }

        block_participant
            .find('.element[data-type="select"]:not([data-type_item_list="'+type_item_list+'"])')
            .addClass('hide')
            .removeClass('open');

        block_participant
            .find('.element[data-type="select"][data-type_item_list="'+type_item_list+'"]')
            .removeClass('hide')
            .addClass('opened');

        return this;
    },



    //saveItemEmail
    saveItemEmail : function(_this, post_vars, callback){
        var post_data = {
            'vars' : post_vars,
            'type_item_list' : Participant.TYPE_ITEM_EMAIL
        }

        $.ajax({
            url : Global.urls.url_participant_save_item_email + '/' + Participant.getCopyId(_this),
            data : post_data,
            type : 'POST', async: false, dataType: "json",
            success: function(data){
                callback(data);
            },
            error : function(){
                Message.show([{'type':'error', 'message': Global.urls.url_ajax_error }], true);
            }
        });
    },

    //validateNewItemEmail
    validateNewItemEmail : function(_this){
        var result = true;
        var search_section = $(_this).closest('.search-section'),
            value = search_section.find('.submodule-search').val();

        if(!value || !value.length){
            search_section.addClass('b-error');
            result = false;
        } else {
            search_section.removeClass('b-error');
        }

        return result;
    },

    //addNewItemEmail
    addNewItemEmail : function(_this){
        if(Participant.validateNewItemEmail(_this) == false){
            return;
        }

        var search_section = $(_this).closest('.search-section');
        var submodule_search = search_section.find('.submodule-search');

        // switch
        switch (Participant.getTypeItemlList(_this)){

            //TYPE_ITEM_EMAIL
            case Participant.TYPE_ITEM_EMAIL: {
                var post_vars,
                    email = submodule_search.val();

                post_vars = {
                    'email' : email,
                    'exception_list_id' : {}
                };

                // exception_list_id
                var exception_list_id = [];
                $(_this)
                    .closest('.element[data-type="block_participant"]')
                    .find('.element[data-type="select"][data-type_item_list="selected_item_list"] [data-type="drop_down_list"] .element[data-type="block-card-participant"] .element[data-type="email"]')
                    .each(
                        function(i, ul){
                            exception_list_id.push($(ul).data('email_id'));
                        });

                if(!$.isEmptyObject(exception_list_id)){
                    post_vars['exception_list_id']['email'] = JSON.stringify(exception_list_id);
                }

                // save
                Participant.saveItemEmail(_this, post_vars, function(data){
                    var $dropDownList = $(_this).closest('[data-type="drop_down_list"]');

                    if(data.status == false){
                        search_section.addClass('b-error');
                        return;
                    }

                    clearSelectedItems = function(){
                        Participant.removeFromStore($(_this).closest('.participant').find('.b-clone-data'), email);

                        if(data.email_id){
                            // remove selected element
                            $dropDownList.find('.sm_extension_data[data-email_id="' + data.email_id + '"]').remove();
                        }

                        // clear
                        submodule_search.val('');
                    }


                    // if return user-participant
                    if(data.users_id){
                        _this_p = $(_this).closest('.edit-view').find('.element[data-type="block"] .element[data-type="block_participant"]:eq(0)');
                        if(_this_p.find('.element[data-type_item_list="selected_item_list"] .element[data-type="block-card-participant"] .element[data-type="participant"][data-ug_id="'+data.users_id+'"][data-ug_type="user"]').length){
                            $(_this).closest('.element[data-type="select"]').find('.search-section').addClass('b-error');
                            return;
                        } else {
                            clearSelectedItems();

                            var post_vars = {
                                'ug_id': data.users_id,
                                'ug_type': 'user',
                            }
                            Participant.getHtmlSelectedIconItemParticipant(_this_p, post_vars);
                            Participant.getHtmlSelectedPaticipantListItem(_this_p, Participant.TYPE_ITEM_PARTICIPANT, post_vars);

                        }
                    } else
                    // if return email-participant
                    if(data.email_id){
                        clearSelectedItems();

                        var post_vars = {
                            'email_id': data.email_id
                        };

                        // block 1 (icon)
                        Participant.getHtmlSelectedIconItemEmail(_this, post_vars);

                        // block 2 (list)
                        Participant.getHtmlSelectedPaticipantListItem(_this, Participant.TYPE_ITEM_EMAIL, post_vars);
                    }


                    $dropDownList.find('.submodule-table tr').show();
                });

                break;
            }
        }
    },

    getParticipantList : function($edit_view, block_participant_type_list){
        var block_participant = {};

        for(var i=0; i <block_participant_type_list.length; i++){
            var data_type = block_participant_type_list[i];
            var data_participant;

            if(data_type == 'participant'){
                data_participant = []
                $edit_view.find('.element[data-type="block_participant"] .element[data-type="block-card"]>.element[data-type="' + data_type + '"]').each(function(i, ul){
                    data_participant.push({
                        'ug_id' : $(ul).data('ug_id'),
                        'ug_type' : $(ul).data('ug_type')
                    });
                });
            } else
            //email
            if(data_type == 'email'){
                data_participant = []
                $edit_view.find('.element[data-type="block_participant"] .element[data-type="block-card"]>.element[data-type="' + data_type + '"]').each(function(i, ul){
                    data_participant.push({
                        'email_id' : $(ul).data('email_id'),
                    });
                });
            }

            if(data_participant){
                block_participant[data_type] = data_participant;
            }
        }
        return block_participant;
    },


    // clearEmailParticipantIfExistsInCommunications
    clearEmailParticipantIfExistsInCommunications : function(_this, callback){
        var _this = _this;
        var $edit_view = $(_this).closest('.edit-view');
        var type_comment = $(_this).closest('.element[data-type="edit"]').attr('data-type_comment');
        var block_participant = null;

        switch(type_comment){
            case 'email' :{
                // block_attributes: block_participant and other
                block_participant = Participant.getParticipantList($edit_view, ['participant', 'email'])
            }
        }

        if(!block_participant){
            return callback(_this);
        }

        AjaxObj
            .createInstance()
            .setUrl(Global.urls.url_participant_find_exists_email_participant_in_communications +'/'+$edit_view.data('copy_id'))
            .setData({'vars' : {'block_participant' : block_participant}})
            .setAsync(true)
            .setDataType('json')
            .setType('POST')
            .setCallBackSuccess(function(data) {
                if(data.email_list){
                    $.each(data.email_list, function(i, email_id){
                        $edit_view.find('.element[data-type="block_participant"] .element[data-type="block-card"] > .element[data-type="email"][data-email_id="' + email_id + '"]').remove();
                        $edit_view.find('.participant.element[data-type="select"][data-type_item_list="selected_item_list"] .element[data-type="block-card-participant"] .element[data-type="email"][data-email_id="' + email_id + '"]').remove();
                    });
                }
                callback(_this);
            })
            .setCallBackError(function(jqXHR, textStatus, errorThrown){
                Message.showErrorAjax(jqXHR, textStatus);
            })
            .send()

    },


    // remove
    remove : function () {
        $('.element[data-type="block_participant"] .element[data-type="select"]+.element[data-type="select"]').remove();
        $('.element[data-type="block_participant"] .element[data-type="select"]').removeClass('hide');
    },

}





$(document).ready(function(){

    Participant.init();


    $(document).on('mouseover','body', function(){
        $('span.opened').removeClass('opened').addClass('open');
    });


});



;(function (exports) {
    var _self, _private, _public, Preloader, iPreloader;


    _self = {
        addInstancesInList: function () {
            Preloader.list_all_instances[this.getTimeStamp()] = this;
        }
    }; //link for instance

    _private ={
        clearPage: function () {
            //clear old styles
            NiceScroll.clear($('.list_view_block .crm-table-wrapper'));
        }
    }

    _public = {
        _element: null, // {} список елементов откуда удалять класы для прелоадера и какие
        add_class: null,
        mode: null,
        status_remove_all_spinner: true,
        $object: null,
        parent_element: null, //если смотреть визуально, то єто ссылка на родительский елемент в HTML

        setElement: function (element, array) {
            if (!this._element) {
                this._element = [];
            }

            this._element.push({
                element: element,
                name: array.toString()
            });

            return this;
        },
        getElement: function () {
            return this._element;
        },
        setParentElement: function (parent_element) {
            this.parent_element = parent_element || null;

            return this;
        },
        getParentElement: function () {
            return this.parent_element;
        },
        setContainer: function (container) {
            this.container = container;

            return this;
        },
        getContainer: function () {
            return this.container;
        },
        constructor: function () {
            iTimeStamp.implements.call(this);
            this.setTimeStamp(this.getNewMilliseconds());

            this._element = [];
            this.add_class = [];

            //implements inerface
            for (var key in iPreloader) {
                if ($.inArray(key, ['createInstance']) < 0) {
                    this[key] = iPreloader[key];
                }
            }
            return this;
        },
        checkOverflow: function ($element) {
            if (Global.isContentOverflow()) {
                this._css_position = this.css.FIXED;
            } else {
                $element.addClass('dynamic-relative');
                this._css_position = this.css.ABSOLUTE;
            }

            return this;
        },
        setAddClass: function ($element, name) {
            this.add_class.push({
                element: $element,
                name: name
            })

            return this;
        },
        setRemoveAllSpiner: function (bool) {
            this.status_remove_all_spinner = bool;

            return this;
        },
        //private
        runAddClass: function () {
            var _this = this;

            $.each(this.add_class, function (key, value) {
                $(value.element).addClass(value.name)
            });

            this.add_class = [];

            return this;
        },
        //розширенние
        extRun: function () {
            return this;
        },
        run: function () {
            if (this._preloader_running) {
                return this;
            }

            this._preloader_running = true;

            var name,
                label = true, // copy, remove card
                $body = $('body'),
                spinner = Global.spinner,
                $container = $('#container'),
                $listTableParent = $('[id="list-table_wrapper_all"]'),
                $crmWrapper = $('.list-view-panel .crm-table-wrapper');

            this._current_const = this._where_content_hide || null;

            this.runAddClass();

            _self.addInstancesInList.call(this);


            switch (this._where_content_hide) {
                case Preloader.TYPE_RELOAD_PAGE : {
                    this.$object = $container.addClass('hide_all_in_page');
                    spinner.get().not(':first').remove();
                    this._$place_for_spinner = $container;
                    this.setDynamicClassByArray(['hide_all_in_page']);
                    this._position_spinner = Preloader.POSITION_SPINNER_CONTENT;
                    this._css_position = Preloader.css.FIXED;

                    this.setElement(this.$object.selector, ['hide_all_in_page']);

                    break;
                }
                case Preloader.TYPE_COMMON: {
                    // this.$object = $container.addClass('hide_all_in_page');
                    // spinner.get().not(':first').remove();
                    // this._$place_for_spinner = $container;
                    // this.setDynamicClassByArray(['hide_all_in_page']);

                    this.setElement($container.selector, ['show-fix']);
                    $container.find('>.b-spinner').removeClass('hide');
                    break;
                }
                case Preloader.TYPE_BLOCK: {
                    this.$object = this._$place_for_spinner.addClass('hide_all_type_block');

                    this.setElement(this._$place_for_spinner, ['hide_all_type_block where-content-hide position-absolute']);
                    break;
                }
                case Preloader.TYPE_RELOAD_СONTENT_PAGE: { // PV
                    this.$object = $container.addClass('content_page');
                    spinner.get().not(':first').remove();
                    this._$place_for_spinner = $container;
                    this.setElement($container.selector, ['content-page']);

                    break;
                }
                case Preloader.TYPE_RELOAD_TABLE_CONTENT: { //LV
                    this.$object = this._$place_for_spinner.addClass('hide_table_content');

                    if (this.status_remove_all_spinner) {
                        $('#main-content .b-spinner').not(':first').remove();
                    } else {
                        this.$object.find(Preloader.spinner.selector).remove();
                    }

                    this.setElement(this.$object.selector, ['hide_table_content dynamic-relative'])
                        .checkOverflow(this.$object);

                    break;
                }
                case Preloader.TYPE_RELOAD_PANEL: { // PV
                    this.$object = $container.addClass('panel-constructor');
                    spinner.get().not(':first').remove();
                    this._$place_for_spinner = $container;
                    this.setElement($container.selector, ['panel-constructor']);

                    break;
                }
                case Preloader.GUIDE : {
                    this.$object = $container.addClass('hide_all_in_page');
                    spinner.get().not(':first').remove();
                    this.setDynamicClassByArray(['hide_all_in_page']);

                    break;
                }
                case Preloader.TYPE_VIEW_CALENDAR : {
                    var $list = this._$place_for_spinner; // || $('.calendar-block .fc-content');

                    this.$object = $list.addClass('here');

                    $list.find(spinner.selector).remove();
                    this.setDynamicClassByArray(['here content-overflow'])
                    this.setElement(this.$object.selector, ['content-overflow']);
                    label = false;

                    break;
                }
                case this.ADDITIONAL_PANEL : {
                    var $list = $('.channels-list'),
                        $sideBar = $('.right-stat-bar');

                    this.$object = $sideBar.addClass('here');

                    if (parseInt($list.css('height')) > 0) {
                        this.$object.addClass('content-overflow')
                    }

                    $sideBar.find(spinner.selector).remove();
                    this.setElement($sideBar.selector, ['here content-overflow']);

                    label = false;

                    break;
                }
                case this.REPORT : {
                    this.$object = $listTableParent.addClass('hide_all_in_page');

                    this._$place_for_spinner = $('.list-table_wrapper_all');
                    this._css_position = this.css.ABSOLUTE;

                    label = false;
                    this.setDynamicClassByArray(['hide_all_in_page', 'where-content-hide']);

                    break;
                }
                case Preloader.LV : {
                    this.$object = $crmWrapper.addClass('hide_all_in_page'); //init-preloader center-position

                    spinner.get().not(':first').remove();

                    this._$place_for_spinner = $crmWrapper;
                    NiceScroll.clear($('.list_view_block .crm-table-wrapper'));
                    this.setDynamicClassByArray(['hide_all_in_page', 'dynamic-relative'])

                    break;
                }
                default: {
                    // detect by DOM element

                    break;
                }
            }

            this.extRun();

            //analyse of array
            if (label && this._where_content_hide_list) {
                //this.REPORT
                if ($.inArray(this.REPORT, this._where_content_hide_list) && instanceGlobal.currentInstance.type == PAGE_IT_REPORTS && Global.isReport()) {
                    if (this._element_from_block == this.FROM_TOOLS_REMOVE) {
                        var $graph = $('.graph-area');

                        $body.addClass('hide-edit-view');
                        this.$object = $listTableParent.addClass('hide_all_in_page');
                        spinner.get().not(':first').remove();

                        this._$place_for_spinner = $('.list-table_wrapper_all');
                        this._css_position = this.css.ABSOLUTE;

                        $graph.parent().addClass('graph-set-preloader where-content-hide');
                        $graph.append(spinner.clone().first());

                        this.setDynamicClassByArray(['hide-edit-view', 'hide_all_in_page', 'graph-set-preloader', 'where-content-hide']);
                    }
                }

                if ($.inArray(this.LV, this._where_content_hide_list) >= 0 && Global.isListView()) {
                    if (this._element_from_block == this.FROM_TOOLS_REMOVE
                        || this._element_from_block == this.FROM_TOOLS_COPY) {
                        $body.addClass('hide-edit-view');
                        this.$object = $crmWrapper.addClass('hide_all_in_page'); //init-preloader center-position

                        if (Global.isContentOverflow()) {
                            this._css_position = this.css.FIXED;
                        } else {
                            this.$object.addClass('dynamic-relative');
                            this._css_position = this.css.ABSOLUTE;
                        }

                        spinner.get().not(':first').remove();

                        this._$place_for_spinner = $crmWrapper;

                        NiceScroll.clear($('.list_view_block .crm-table-wrapper'));

                        this.setDynamicClassByArray(['hide-edit-view', 'hide_all_in_page', 'dynamic-relative']);
                    }
                }
            }

            /*GLOBAL*/
            if (!this.$object) return this;

            name = 'where-content-hide';
            var clazz='';

            this.$object.addClass(name);

            switch (this._css_position) {
                case this.css.ABSOLUTE : {
                    clazz = 'position-absolute';
                    this.$object.addClass(clazz);
                    break;
                }
                default: {
                    clazz = 'position-fixed';
                    this.$object.addClass(clazz);
                    break;
                }
            }

            this.setDynamicClass(name)
                .setDynamicClass(clazz)
                .setElement(this.$object.selector, [clazz+' '+name]);

            //set preloader
            if (this._$place_for_spinner) {
                name = 'current-spinner';
                $('.current-spinner').removeClass(name);

                if (!this._$place_for_spinner.is('[id="container"]')) {
                    // base spinner in container not remove!!!
                    this._$place_for_spinner.find(spinner.selector).remove();
                    this._$place_for_spinner.append(spinner.clone().first().attr('style', '').addClass(name).removeClass('default'));
                } else {
                    this._$place_for_spinner.find('>'+spinner.selector).addClass(name).attr('style', '').removeClass('hide');
                }

                this.setDynamicClass(name);
                this._preloader_running = true;
            }

            switch (this._position_spinner) {
                case Preloader.POSITION_SPINNER_CONTENT: {
                    $('.current-spinner').css({
                        left: $('.wrapper').width() / 2
                    });
                    break;
                }
                case Preloader.POSITION_SPINNER_WINDOW: {

                    break;
                }
                default:
                    break
            }

            if ($.inArray(this._where_content_hide,[Preloader.ADDITIONAL_PANEL])< 0) {
                _self.clearPage();
            }

            return this;
        },
        //вертає константу режима работы прелоадера
        getMode: function () {
            return this.mode;
        },
        setPlaceForSpinner: function ($place) {
            this._$place_for_spinner = $place;
            return this;
        },
        setCssPositionSpinner: function (position) {
            this._css_position = position;

            return this;
        },
        setWhereContentHide: function (position) {
            if (position) {
                if ($.isArray(position)) {
                    this._where_content_hide_list = position;
                } else {
                    this._where_content_hide = position;
                    this.mode = position;
                }
            }
            return this;
        },
        hideFull: function () {
            var list = this._element || $([]);

            this.setRunning(false);

            $.each(list, function (i, val) {
                try{
                    $(val.element).removeClass(val.name);
                } catch (e) {}
            });

            this._element = null;

            return this;
        },
        hide: function (_element) {
            var $container,
                array = this.preloaderClasses || [];

            this.setRunning(false);

            if (this._element && this._element.length) {
                this.hideFull();
            } else {
                _element = _element || $('html');

                if (!this._instance) { //instance
                    array = this._dynamic_class || [];
                }

                $container = $('#container');
                if ($container.is('.set-preloader')) {
                    $('#container>.b-spinner').addClass('hide');
                }

                $.each(array, function (i, val) {
                    _element.find('.' + val).removeClass(val);
                });

                // КОСТИЛЬ ТИМЧАСОВИЙ
                if ($('.filter').is('.hide_all_type_block')) {
                    $('.filter').removeClass('hide_all_type_block where-content-hide position-absolute');
                }
            }

            return this;
        },
        setRunning: function (status) {
            this._preloader_running = status;
            return this;
        },
        setDynamicClassByArray: function (array) {
            if (!this._dynamic_class) {
                this._dynamic_class = [];
            }

            for (var key in array) {
                this._dynamic_class.push(array[key]);
            }

            return this;
        },
        setDynamicClass: function (string) {
            if (!this._dynamic_class) {
                this._dynamic_class = [];
            }

            this._dynamic_class.push(string);

            return this;
        },
    };

    iPreloader = {
        preloader: null,

        createInstance: function () {
            var Obj = function () {
                for (var key in iPreloader) {
                    if ($.inArray(key,['createInstance', 'implementsIPreloader'])< 0) {
                        this[key] = iPreloader[key];
                    }
                }
            }

            return new Obj();
        },
        implements: function () {
            for (var key in iPreloader) {
                if ($.inArray(key,['createInstance', 'implementsIPreloader'])< 0) {
                    this[key] = iPreloader[key];
                }
            }

            return this;
        },
        setPreloader: function (preloader) {
            this.preloader = preloader;

            return this;
        },
        getPreloader: function () {
          return this.preloader;
        },
        setShowPreloaderHandler: function (handler) {
            this.preloader.showPreloader = handler;

            return this;
        },
        showPreloader: function (is_running) {
            this.preloader && this.preloader.showPreloader && this.preloader.showPreloader(is_running);

            return this;
        },
        isPreloader: function () {
            return this.preloader ? true : false;
        },
        hidePreloader: function () {
            return this;
        }
    }

    Preloader = {
        /*MODE*/
        TYPE_RELOAD_PAGE: 1, // hidden all page except top menu
        TYPE_RELOAD_СONTENT_PAGE: 12, // hidden all page except top menu
        TYPE_COMMON: 13,
        TYPE_RELOAD_TABLE_CONTENT: 14, // hidden all page except top menu
        TYPE_VIEW_CALENDAR : 9,
        TYPE_BLOCK : 15,
        TYPE_RELOAD_PANEL : 16,

        ADDITIONAL_PANEL: 2,
        LV: 3,
        REPORT: 4,
        PV: 5,
        FROM_TOOLS_REMOVE: 6,
        FROM_TOOLS_COPY: 7,
        GUIDE: 8,

        POSITION_SPINNER_WINDOW: 10,
        POSITION_SPINNER_CONTENT: 11,

        css: {
            ABSOLUTE: 1,
            FIXED: 2
        },
        list_all_instances: {},
        _item_li_for_loading: '<li class="small-preloading"><div class="b-spinner"><div class="loader"></div></div></li>',
        _current_const: null, // Для визначення в режимі екземпляра щоб не видаляти інше.
        _instance: null,
        _where_content_hide: null,
        _where_content_hide_list: null,
        _$place_for_spinner: null,
        _element_from_block: null,
        _preloader_running: null, //bool - preloader working
        _priority_disable: true, // true - high, false - low
        _position_spinner: null, //POSITION_SPINNER_WINDOW || POSITION_SPINNER_CONTENT

        /*-MODAL-------------*/
        _modal_status: null,
        _modal_sub_status: null,
        /*=MODAL=============*/

        _css_position: null,

        block: [],
        preloaderClasses: [
            'where-content-hide',
            'here',
            'hide-edit-view',
            'dynamic-relative',
            'position-absolute',
            'position-fixed',
            'hide_all_in_page',
            'set-preloader',
            'show-preloader',
            'init-preloader',
            'center-position',
            'reports-content',
            'first-task',
            'roles-menu',
            'block-reload',
            'reports-hide-graph',
            'reports-filter-in',
            'with-table',
            'reload-page',
            'common-spinner',
            'copy-edit-view',
            'overflowXh',
            'show-fix',
            'hide-edit-view',
            'lv-pv-inner-hide-content'],

        _dynamic_class: null,

        createInstance: function () {
            var Obj = function () {
                for (var key in _public) {
                    this[key] = _public[key];
                }
                for (var key in Preloader) {
                    this[key] = Preloader[key];
                }
            }

            return Preloader._instance = new Obj().constructor();
        },
        getInstance: function (status) { // status = true if need create instance
            if (status && !Preloader._instance) {
                this.createInstance();
            }
            return Preloader._instance;
        },

        /*-MODAL-------------*/
        setModal: function (bool) {
            this._modal_status = bool

            return this;
        },
        setSpinnerPosition: function (position) {
            this._position_spinner = position;

            return this;
        },
        setPriorityDisable: function (bool) {
            this._priority_disable = bool;

            return this;
        },
        setModalSub: function (bool) {
            this._modal_sub_status = bool

            return this;
        },
        setFromBlock: function (_const) {
            if (_const) {
                this._element_from_block = _const
            }
            return this;
        },
        spinner : {
            selector: '.b-spinner',
            get: function () {
                return $(this.selector);
            },
            clone: function () {
                return this.get().clone().removeClass('hide').attr('style', '');
            },
            remove : function ($element) {
                $element && $element.length ? $element.find(this.selector).remove() : '';
            },
            getElement: function () {
                return '<div class="b-spinner"><div class="loader"></div></div>';
            }
        },
        modalShow: function () {
            var $body = $('body');

            if ($('.modal .modal-backdrop.in').length) {
                $body.addClass('open-two-level-ev');
            }
            ;
            $body.append('<div class="fake-backdrop"><div class="fake-modal"></div></div>');
            $('.fake-modal').append(this.getSpinner());
            return this;
        },
        modalHide: function () {
            var $modal = $('.modal-dialog').last(),
                $fakeBackDrop = $('.fake-backdrop');

            $('body').removeClass('open-two-level-ev');
            $modal.css('opacity', '0');
            if ($fakeBackDrop.css('display') !== 'block') {
                $modal.css('opacity', '1');
            } else {
                $fakeBackDrop.css('background', 'initial').find('.fake-modal').animate({
                    height: $modal.css('height'),
                    width: $modal.css('width')
                }, 'fast', function () {
                    $modal.css('opacity', '1');
                    $(this).closest('.fake-backdrop').animate({
                        opacity: 0
                    }, 'fast', function () {
                        $(this).remove();
                        $modal.css('opacity', '1');
                    });
                });
            }
            $('span[todo-select="false"]').closest('li').attr('todo-element', 'true');
            if ($('div.constructor .contacts-block').length) {
            } else {
                $('.participant.example').css('margin-bottom', '-30px');
            }
            return this;
        },
        modalSub: function () {
            $('.fake-modal').addClass('sub');
            var $modal = $('.modal-dialog').last(),
                name = $modal.find('.panel-heading .client-name .editable-field').text(),
                link = $modal.find('.panel-heading .navigation_module_link').text();
            $modal.closest('.modal').hide();
            $('.fake-modal').append('<header class="panel-heading previous-modal">\
                                    <span class="client-name">' + name + '</span>\
                                    <span class="from-label">\
                                    <span id="from">' + Message.translate_local('from') + ' </span>\
                                        <a href="javascript:void(0)" data-dismiss="modal" class="navigation_module_link">' + link + '</a>\
                                    </span>\
                                </header>');
            return this;
        },
        modalAnSub: function () {
            var $modal = $('.modal-dialog').last();
            $modal.closest('.modal').show();
            return this;
        },

        modalRun: function () {
            if (this._modal_status) {
                this.modalShow();
            }

            if (this._modal_sub_status) {
                this.modalSub();
            }

            return this;
        },
        /*=MODAL=============*/

        getSpinner: function () {
            return $('#container > .b-spinner').clone().removeClass('hide');
        },
        afterPreloader: function () {
            setTimeout(function () {
                $('#modal_dialog_container').removeClass('preloader');
                ProcessView.initElements();
                textAreaResize();
                AjaxContainers.cash.snapshot();
            }, 1000);
        },
        drawIconForMenu: function () {
            var $content, $clone,
                $list = $('.notify-row .nav > li');

            $content = $list.filter('.icon-spinner').length ? $list.filter('.icon-spinner').removeClass('hide') : $list.last();

            if (!$content.is('.icon-spinner')) {
                $clone = $content.clone();
                $clone.removeClass('dropdown').html('<a></a>').removeAttr('id').addClass('icon-spinner');
                $clone.find('a').append(this.getSpinner());
                $content.after($clone);
            }

            this.block.push($('.icon-spinner'));
        },
        hideAll: function () {
            $.each(Object.keys(Preloader.list_all_instances), function (key, value) {
                delete Preloader.list_all_instances[value].hide();
            });

            return this;
        },
        isRunning: function () {
            return this._preloader_running;
        },
        // //TODO: костиль.
        // hide: function (_element) {
        //     var $container,
        //         array = this.preloaderClasses || [];
        //
        //     _element = _element || $('html');
        //     this._preloader_running = false;
        //
        //     if (!this._instance) { //instance
        //         array = this._dynamic_class || [];
        //     }
        //
        //     $container = $('#container');
        //     if ($container.is('.set-preloader')) {
        //         $('#container>.b-spinner').addClass('hide');
        //         //КОСТИЛЬ
        //         $('#container').removeClass('hide-nice-scroll');
        //     }
        //
        //     $.each(array, function (i, val) {
        //         _element.find('.' + val).removeClass(val);
        //     });
        //
        //     // КОСТИЛЬ ТИМЧАСОВИЙ
        //     if ($('.filter').is('.hide_all_type_block')) {
        //         $('.filter').removeClass('hide_all_type_block where-content-hide position-absolute');
        //     }
        //
        //     return this;
        // },
        destroy: function () {
            if (!this._priority_disable) {
                return this;
            }

            //call as instance
            if (!this._instance) {
                var $element;
                if (this._current_const == this.ADDITIONAL_PANEL) {
                    $element = $('.right-sidebar');
                    this._preloader_running = null;
                }
                this.hide($element);
            }
            else {
                this._instance.hide();
                Preloader._instance = null;
            }

            return null;
        }
    }

    for(var key in _private) {
        _self[key] = _private[key];
    }

    exports.Preloader = Preloader;
    exports.iPreloader = iPreloader;
})(window);

var Process = function(){
    for(var key in ProcessObj) {
        this[key] = ProcessObj[key];
    }
}


Variables = {
    arrows : $('svg.arrows path.arrow'),
    bpmOperator : $('.bpm_operator[data-unique_index]'), // entering
    responsibles : $('.element[data-type="responsible"]')
}

var BpmModel = {
    addNewBranch : null,
    removedOfOperator : null
}

var ModelArrows = {
    end: null,
    begin: null,
    $: null,
    d : {
        x1: null,
        y1: null,
        x2: null,
        y2: null,
        x3: null,
        y3: null,
        type: null
    },
    update: function () {
        return Arrows.parse(this.$);
    }
}
var Arrows = {
    name_model_object: 'modelArrow',

    TYPE_BOTTOM_STRAIGHT: 1,
    TYPE_EMPTY: 2,
    TYPE_STRAIGHT: 3,
    TYPE_TOP_STRAIGHT: 4,
    TYPE_ERROR: 5,

    MIN_WIDTH: 144,

    SUB_TYPE_RT: 6,
    SUB_TYPE_TR: 7,
    SUB_TYPE_BR: 8,

    get: function () {
        return $('svg.arrows path.arrow');
    },
    getByBegin : function (key) {
        return  $('svg path[arr-begin="'+key+'"]');
    },
    getByEnd : function (key) {
        return  $('svg path[arr-end="'+key+'"]');
    },
    createModel : function (path) {
        var model = Object.assign({}, ModelArrows);

        this.calculate(model, $(path));

        $(path).data(this.name_model_object, model);

        return model;
    },
    getModel : function (path) {
        return $(path).data()[this.name_model_object];
    },
    calculate: function (o, $element) {
        o.begin = $element.attr('arr-begin')
        o.end = $element.attr('arr-end');
        o.$ = $element;

        var coordD = $($element).attr('d').split(' ');

        o.d = {
            type : null,
            sub_type : null,
            width : null,
            length : coordD.length,
            x1 : parseInt(coordD[1]),
            y1 : parseInt(coordD[2]),

            x2 : parseInt(coordD[4]),
            y2 : parseInt(coordD[5]),

            x3 : parseInt(coordD[7]) || null,
            y3 : parseInt(coordD[8]) || null
        }

        switch (o.d.length) {
            case 21: {
                o.d.width = o.d.x3 -o.d.x1;
                o.d.type = this.TYPE_EMPTY;
                break;
            }
            case 18: {
                o.d.width = o.d.x3 -o.d.x1;

                if (o.d.y3 < o.d.y2 || (o.d.y1 > o.d.y2 && o.d.y2 == o.d.y3)) {
                    o.d.type = this.TYPE_TOP_STRAIGHT;

                    if (o.d.y1 == o.d.y2) {
                        o.d.sub_type = this.SUB_TYPE_RT;
                    }
                }
                if (o.d.y1 < o.d.y2) {
                    o.d.type = this.TYPE_BOTTOM_STRAIGHT;
                }

                break;
            }
            case 15: {
                o.d.width = o.d.x2 -o.d.x1;
                o.d.type = this.TYPE_EMPTY;
                break;
            }
            default: break;
        }

        if (o.d.width != null && o.d.width == 0) {
            o.d.type = this.TYPE_ERROR;
        }

        return o;
    },
    parse: function (element) {
        var model;

        if (!element) {
            return null;
        }

        model = this.getModel($(element));
        return this.calculate(model, model.$);
    },
    getCrossingByList : function (baseD, $list) {
        var object = null;

        if (!$list) return object;

        object = $list.filter(function () {
            var bool = true,
                $this = $(this),
                d = Arrows.parse($this);

            if (baseD.type == Arrows.TYPE_BOTTOM_STRAIGHT || baseD.type == Arrows.TYPE_TOP_STRAIGHT) {
                if (
                    (d.type == Arrows.TYPE_BOTTOM_STRAIGHT && (d.y1 < baseD.y3 && baseD.y3 < d.y2 ))
                    || (d.type == Arrows.TYPE_TOP_STRAIGHT && (d.y1 > baseD.y3 && baseD.y3 > d.y2))){
                    bool = false;
                }

                if (d.type == Arrows.TYPE_BOTTOM_STRAIGHT && ((baseD.y2 > d.y2 && d.y2 > d.y1) || (baseD.y2 < d.y2 && d.y2 < d.y1))) {
                    bool = false;
                }
            }

            return !bool ? this : null; //crossing direction
        })

        return object;
    },
    getCrossing : function (baseD) {
        //визначаємо перехрестя ліній з базовою
        var crossing;

        $.each(Arrows.get(), function (key, data) {
            var label,
                $this = $(this),
                d = Arrows.parse($this);

            if (baseD.type == Arrows.TYPE_BOTTOM_STRAIGHT || baseD.type == Arrows.TYPE_TOP_STRAIGHT) {
                if ((d.type == Arrows.TYPE_TOP_STRAIGHT || d.type == Arrows.TYPE_BOTTOM_STRAIGH) && (d.Y1 > baseD.Y2 || baseD.Y2 < d.Y2 )) {
                    crossing = {
                        operatorBegin:  BpmOperator.getBeginOperator($this),
                        operatorEnd:  BpmOperator.getEndOperator($this)
                    }
                }
            }
        });

        return crossing;
    },
    recountAll : function() { // recounting arrows an helpers(fake_operators)
        var operator = $('.fake_operator').remove(),
            outerArr = [],
            _this =  this;

        $('path[outer]').each(function(){
            if ($(this).is('[stroke-dasharray]')) {
                outerArr.push($(this).attr('arr-begin'));
            }
            $(this).remove();
        });
        ProcessObj.BPM.setBranchEnds();

        $.each(this.get(), function(i){
            var $this = $(this);
            if (!$this.is('[branch]')) {
                _this.recount($this);
            }
            if (i == $('svg.arrows path.arrow').length-1) {
                for (var b=1; b<11; b++) {
                    $('path[branch="'+b+'"]').each(function(){
                        _this.recount($(this));
                    });
                }
            }
        }).promise().done(function(){
            if (operator.length) {
                operator.each(function(){
                    if (parseInt($(this).attr('gridrow'))>parseInt($(this).closest('.bpm_unit').attr('rows'))) {
                        $(this).closest('.bpm_unit').attr('rows',$(this).attr('gridrow')+'');
                    }
                });
            }
        });
        return this;
    },
    recount : function($this){ //перерасчет стрелок при любом движении или добавлении елементов
        var bpmOperator = $('div.bpm_operator'),
            arrows = $('svg.arrows'),
            elemBegin = {
                $ : bpmOperator.filter('[data-unique_index="'+$this.attr('arr-begin')+'"]')
            },
            elemEnd = {
                $ : bpmOperator.filter('[data-unique_index="'+$this.attr('arr-end')+'"]')
            };

        elemBegin.$body = elemBegin.$.find('.bpm_body');
        elemBegin.$tree = elemBegin.$.closest('.bpm_tree');
        elemBegin.row = parseInt(elemBegin.$.attr('gridrow'));
        elemBegin.col = parseInt(elemBegin.$.attr('gridcol'));

        elemEnd.$body = elemEnd.$.find('.bpm_body');
        elemEnd.$tree = elemEnd.$.closest('.bpm_tree');
        elemEnd.row = parseInt(elemEnd.$.attr('gridrow'));
        elemEnd.col = parseInt(elemEnd.$.attr('gridcol'));

        if (!elemBegin.$body.length && !elemEnd.$body.length) {
            return;
        }
        var widthB = elemBegin.$body.width(),
            heightB = elemBegin.$body.height(),
            widthE = elemEnd.$body.width(),
            heightE = elemEnd.$body.height();

        var topDifB = elemBegin.$body.offset().top - arrows.offset().top,
            leftDifB = elemBegin.$body.offset().left - arrows.offset().left,
            topDifE = elemEnd.$body.offset().top - arrows.offset().top,
            leftDifE = elemEnd.$body.offset().left - arrows.offset().left;

        //p-point T-top L-left R-right B-bottom B-begin E-end x,y-coordinates ex:pBBy-(pont bottom begin y)
        //      pT
        //   pL( )pR
        //      pB
        var pTBx = leftDifB + widthB / 2,
            pTBy = topDifB,
            pRBx = leftDifB + widthB,
            pRBy = topDifB + heightB / 2,
            pBBx = leftDifB + widthB / 2,
            pBBy = topDifB + heightB + 36,
            pLBx = leftDifB,
            pLBy = topDifB + heightB / 2;

        var pTEx = leftDifE + widthE / 2,
            pTEy = topDifE,
            pREx = leftDifE + widthE,
            pREy = topDifE + heightE / 2,
            pBEx = leftDifE + widthE / 2,
            pBEy = topDifE + heightE + 36,
            pLEx = leftDifE,
            pLEy = topDifE + heightE / 2;

        if (leftDifB == leftDifE) { // to client
            var stingX1 = pBBx-2.5,
                stingY1 = pLEy+15,
                stingX2 = pBBx+2.5,
                stingY2 = pLEy+15;

            pLEy -= 2;

            $this.attr('d', 'M '+pBBx+' '+pLBy+' L '+pBBx+' '+pLEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pBBx+' '+pREy);
        } else
        if (leftDifB+20 < leftDifE) {
            if (topDifB+20 < topDifE) {
                if($this.is('[branch-end]') && $this.is('[branch]') && $this.attr('branch-end')!=='main'){
                    var corner1x = pREy+($this.attr('branch')-1)*100;
                    if ($this.attr('branch') && $this.attr('modifier')) {
                        corner1y = pREy+($this.attr('modifier')-200);
                    } else if ($this.attr('branch')=='1') {
                        corner1y = pREy+100;
                    }
                    var stingX1 = corner1x-2.5,
                        stingY1 = pBEy+15,
                        stingX2 = corner1x+2.5,
                        stingY2 = pBEy+15;
                    $this.attr('d', 'M '+pBBx+' '+pBBy+' L '+pBBx+' '+corner1y+' L '+corner1x+' '+corner1y+' L '+corner1x+' '+pBEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+corner1x+' '+pBEy+''); /// ATTENTION!!  replace pLEy => pBEy

                    elemEnd.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+elemEnd.row+'" gridcol="'+(elemEnd.col-1)+'"></div>');
                    elemEnd.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+(elemEnd.row+($this.attr('branch')-1))+'" gridcol="'+(elemEnd.col-1)+'"></div>');
                } else if ($this.attr('branch-end') && $this.attr('branch-end')!=='main') {
                    var corner1x = pBEx,
                        corner1y = pREy;
                    stingX1 = corner1x+2.5,
                        stingY1 = pTEy-15,
                        stingX2 = corner1x-2.5,
                        stingY2 = pTEy-15;
                    $this.attr('d', 'M '+pRBx+' '+pRBy+' L '+corner1x+' '+pRBy+' L '+corner1x+' '+pTEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+corner1x+' '+pTEy+'');
                    elemBegin.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+elemBegin.row+'" gridcol="'+elemEnd.col+'"></div>');
                } else {
                    var stingX1 = pLEx-15,
                        stingY1 = pLEy-2.5,
                        stingX2 = pLEx-15,
                        stingY2 = pLEy+2.5;
                    $this.attr('d', 'M '+pBBx+' '+pBBy+' L '+pBBx+' '+pLEy+' L '+pLEx+' '+pLEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pLEx+' '+pLEy+'');
                }
            } else if (topDifB-20 > topDifE) {
                if($this.is('[branch-end]') && $this.attr('branch-end')!=='main' && $this.attr('branch')!=1){
                    var corner1y = pRBy+100;

                    if ($this.is('[branch]') && $this.is('[modifier]')) {
                        corner1y = pRBy+($this.attr('modifier')-200);
                    } else if ($this.attr('branch')) {
                        corner1y = pRBy+($this.attr('branch')-2)*100;
                    }

                    var corner1x = pBEx,
                        stingX1 = corner1x-2.5,
                        stingY1 = pBEy+15,
                        stingX2 = corner1x+2.5,
                        stingY2 = pBEy+15;

                    if ($this.attr('branch')>2) {
                        $this.attr('d', 'M '+pBBx+' '+pBBy+' L '+pBBx+' '+corner1y+' L '+corner1x+' '+corner1y+' L '+corner1x+' '+pBEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+corner1x+' '+pBEy+'');
                    } else {
                        $this.attr('d', 'M '+pRBx+' '+pRBy+' L '+corner1x+' '+pRBy+' L '+corner1x+' '+pBEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+corner1x+' '+pBEy+'');
                    }
                    if ($this.attr('branch-end') && $this.attr('branch')==2) {
                        elemEnd.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+elemEnd.row+'" gridcol="'+(elemEnd.col-1)+'"></div>');
                    } else if ($this.attr('branch-end') && $this.attr('branch')>2) {
                        elemBegin.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+elemBegin.row+'" gridcol="'+(elemEnd.col-1)+'"></div>');
                    } else {
                        elemBegin.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+elemBegin.row+'" gridcol="'+(elemEnd.col)+'"></div>');
                    }
                } else {
                    var stingX1 = pLEx-15,
                        stingY1 = pLEy-2.5,
                        stingX2 = pLEx-15,
                        stingY2 = pLEy+2.5;

                    $this.attr('d', 'M '+pTBx+' '+pTBy+' L '+pTBx+' '+pREy+' L '+pLEx+' '+pLEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pLEx+' '+pLEy+'');
                }
            } else if (topDifB-20 <= topDifE && topDifB+20 >= topDifE) {
                if($this.is('[branch-end]') && $this.attr('branch-end')!=='main'){
                    var corner1y,
                        corner1x = pRBy+100;

                    if ($this.is('[branch]') && $this.is('[modifier]')) {
                        corner1y = pREy+parseInt($this.attr('modifier'));
                    } else if ($this.is('[branch]')) {
                        corner1y = pRBy+($this.attr('branch')-1)*100;
                    } else corner1y = pREy;

                    var corner2x = pBEx,
                        stingX1 = corner2x-2.5,
                        stingY1 = pBEy+15,
                        stingX2 = corner2x+2.5,
                        stingY2 = pBEy+15;

                    $this.attr('d', 'M '+pBBx+' '+pBBy+' L '+pBBx+' '+corner1y+' L '+corner2x+' '+corner1y+' L '+corner2x+' '+pBEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+corner2x+' '+pBEy+'');
                    if ($this.is('[branch-end]') && corner2x-pBBx<200) {
                        elemEnd.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+(elemEnd.row+($this.attr('branch')-1))+'" gridcol="'+elemEnd.col+'"></div>');
                    } else {
                        elemEnd.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+(elemEnd.row-1)+'" gridcol="'+(elemEnd.col-1)+'"></div>');
                    }
                } else {
                    var stingX1 = pLEx-15,
                        stingY1 = pLEy-2.5,
                        stingX2 = pLEx-15,
                        stingY2 = pLEy+2.5;

                    $this.attr('d', 'M '+pRBx+' '+pRBy+' L '+pLEx+' '+pLEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pLEx+' '+pLEy+'');
                    if ($this.is('[branch-end]')) {
                        elemEnd.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+elemEnd.row+'" gridcol="'+(elemEnd.col-1)+'"></div>');
                    }
                }
            }
        } else if (leftDifB-20 > leftDifE) {
            if (topDifB+20 < topDifE) {
                var stingX1 = pTEx-2.5,
                    stingY1 = pTEy-15,
                    stingX2 = pTEx+2.5,
                    stingY2 = pTEy-15;

                $this.attr('d', 'M '+pLBx+' '+pLBy+' L '+pBEx+' '+pLBy+' L '+pTEx+' '+pTEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pTEx+' '+pTEy+'');
            } else if (topDifB-20 > topDifE) {
                var stingX1 = pREx+15,
                    stingY1 = pREy-2.5,
                    stingX2 = pREx+15,
                    stingY2 = pREy+2.5;

                $this.attr('d', 'M '+pTBx+' '+pTBy+' L '+pTBx+' '+pREy+' L '+pREx+' '+pREy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pREx+' '+pREy+'');
            } else if (topDifB-20 <= topDifE && topDifB+20 >= topDifE) {
                var stingX1 = pREx+15,
                    stingY1 = pREy-2.5,
                    stingX2 = pREx+15,
                    stingY2 = pREy+2.5;

                $this.attr('d', 'M '+pLBx+' '+pLBy+' L '+pREx+' '+pREy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pREx+' '+pREy+'');
            }
        } else {
            if (topDifB+20 < topDifE) {
                var stingX1 = pTEx-2.5,
                    stingY1 = pTEy-15,
                    stingX2 = pTEx+2.5,
                    stingY2 = pTEy-15;

                $this.attr('d', 'M '+pBBx+' '+pBBy+' L '+pTEx+' '+pTEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pTEx+' '+pTEy+'');
            } else if (topDifB-20 > topDifE) {
                var stingX1 = pBEx-2.5,
                    stingY1 = pBEy+15,
                    stingX2 = pBEx+2.5,
                    stingY2 = pBEy+15;

                $this.attr('d', 'M '+pTBx+' '+pTBy+' L '+pBEx+' '+pBEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pBEx+' '+pBEy+'');
            } else if (topDifB-20 <= topDifE && topDifB+20 >= topDifE) {
                var stingX1 = pREx+15,
                    stingY1 = pREy-2.5,
                    stingX2 = pREx+15,
                    stingY2 = pREy+2.5;
                $this.attr('d', 'M '+pLBx+' '+pLBy+' L '+pREx+' '+pREy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pREx+' '+pREy+'');
            }
        }
        arrows.find('circle').appendTo('svg.arrows'); // TODO: This need optimization
    },
    recounts : function (array) {
        var _this = this;

        ProcessObj.BPM.setBranchEnds();
        $.each(array, function () {
            var $this = $(this);

            $this.removeAttr('branch-end');
            _this.recount($this);
        });
    },
    //подписать стрелки
    sign : function(){
        var arrows = $('svg.arrows'),
            $list = Arrows.get().filter('[title]');

        arrows.find('text').remove();

        $.each($list, function(){
            var coordx, coordy, width,
                $this = $(this),
                element = $('svg.hidden text.b_title').clone(true),
                offset = 5;
            var titleBranch = $this.attr('title'),
                coordArr = $this.attr('d').split(' ');

            if (coordArr.length<16) {
                coordx = parseInt(coordArr[1])+offset;
                coordy = parseInt(coordArr[2])-offset;
                width = coordArr[4] - coordArr[1];
            } else {
                coordx = parseInt(coordArr[4])+offset;
                coordy = parseInt(coordArr[5])-offset;
                width = coordArr[7] - coordArr[1];

                if ($this.is('[branch-end="true"]')) coordx = parseInt(coordArr[1])+offset;
            }
            // text description in center
            if ($(".bpm_operator[data-unique_index='"+$this.attr('arr-begin')+"'][data-name=condition]") )
            {
                coordx += Math.floor(width / 2) - offset;
            }
            element.attr('data-id', $this.attr('arr-end')).text(titleBranch).attr({
                x: coordx,
                y: coordy
            });
            arrows.append(element);

            var svgText = arrows.find('text[data-id="'+$this.attr('arr-end')+'"]'),
                span = $('.b_bpm_top'),
                $textDynamic = $('.text-dynamic');

            if (!$textDynamic.length) {
                span.append("<div class='text-dynamic' style='float:left'></div>"); // for firefox
            }

            span = $($textDynamic.selector).text(svgText.text());

            if (span.width() > (width - 5)) {
                span.html(svgText.text()+'...');
                var str,
                    i = 100;
                while (span.width() > (width - 40) || i <= 0) {
                    str = span.text();
                    str = str.substring(0, str.length-4);
                    span.text(str+'...');
                    i--;
                }
            }
            svgText.html(span.text());
            $($textDynamic.selector).remove();
            arrows.find('[data-id]').removeAttr('data-id');
        });
    },
};

var CircleController = {
    get : function () {
      return $('svg.arrows circle');
    },
    set: function (cx, cy) {
        return this.get().attr({
            cx: cx,
            cy: cy
        });
    },
    hide: function () {
        return this.get().attr({
            cx: -10,
            cy: -10
        })
    }
}

ProcessObj = {
    PROCESS_B_STATUS_IN_WORK    : 2, // in_work
    PROCESS_B_STATUS_STOPED		: 3, // stoped
    PROCESS_B_STATUS_TERMINATED	: 1, // terminated

    PROCESS_MODE_CONSTRUCTOR      : 'constructor',
    PROCESS_MODE_RUN              : 'run',

    PROCESS_MODE_CHANGE_VIEW		: 'view',
    PROCESS_MODE_CHANGE_EDIT		: 'edit',

    /*
     PROCESS_OPERATION_STATUS_ACTIVE       : 'active',
     PROCESS_OPERATION_STATUS_UNACTIVE     : 'unactive',
     PROCESS_OPERATION_STATUS_PAUSE        : 'pause',
     PROCESS_OPERATION_STATUS_DONE         : 'done',

     PROCESS_ARROW_TYPE_INNER      : 'inner',
     PROCESS_ARROW_TYPE_OUTER      : 'outer',
     */

    PROCESS_ARROW_STATUS_ACTIVE   : 'active',
    PROCESS_ARROW_STATUS_UNACTIVE : 'unactive',

    PROCESS_AGREETMENT_APPROVE    : '1', // =Завершена
    PROCESS_AGREETMENT_REJECT     : '4', // =Создана

    /*
     PROCESS_BO_ACTION_CHECK  : 'action_check',
     PROCESS_BO_ACTION_UPDATE : 'action_update',
    */

    PROCESS_PARTICIPANT_ACTION_ADD    : 'add',
    PROCESS_PARTICIPANT_ACTION_CHANGE : 'change',
    //PROCESS_PARTICIPANT_DELETE_PARTICIPANT_ROLE : 'delete_participant_role',

    PROCESS_BPM_PARAMS_ACTION_CHECK  : 'action_check',
    PROCESS_BPM_PARAMS_ACTION_UPDATE : 'action_update',

    PROCESS_ACTION_START		: 'start',
    PROCESS_ACTION_STOP			: 'stop',
    PROCESS_ACTION_TERMINATE	: 'terminate',
    PROCESS_ACTION_MC_EDIT		: 'mc_edit',
    PROCESS_ACTION_MC_VIEW		: 'mc_view',

    copy_id : 9,
    process_id : null,
    process_status : null, // string
    this_template : null,  // boolean
    mode : null, // constructor|run
    mode_change : null, // edit|view
    is_bpm_view : false,
    binding_object_check : true,
    statusRightPanel : function (status) {
        var $wrapper = $('.wrapper');

        if ($('.bpm_block').length) {
            if (status || QuickViewPanel.isOpen()) {
                $wrapper.addClass('bpm_process');
            } else {
                $wrapper.removeClass('bpm_process');
            }

            ProcessObj.recountRespBlocks();
        } else {
            $wrapper.removeClass('bpm_process');
        }
    },
    scenario : {
        init : function () {
            var $block = $('.CodeMirror');

            ($('[id="code"]').is('[disabled]')) ? $block.addClass('disabled') : $block.removeClass('disabled');
        },
        render: function () {
            window.bpmOperatorScript = CodeMirror.fromTextArea(document.getElementById("code"), {
                lineNumbers: true,
                extraKeys: {
                    "F11": function(cm) {
                        cm.setOption("fullScreen", !cm.getOption("fullScreen"));
                    },
                    "Esc": function(cm) {
                        if (cm.getOption("fullScreen")) cm.setOption("fullScreen", false);
                    }
                }
            });
        }
    },
    getParams : function (element){
        var r = {};

        if (element.length){
            if (element.data('unique_index')) {
                var $unit = element.closest('.bpm_unit');

                r = { // element
                    $: element,
                    _this: element[0],
                    key : element.data('unique_index'),
                    col : parseInt(element.attr('gridcol')),
                    row : parseInt(element.attr('gridrow')),
                    name : element.data('name'),
                    type : element.data('type'),
                    ug_id : $unit.data('ug_id'),
                    ug_type : $unit.data('ug_type'),
                    endBranches: element.attr('end-branches'),
                    keyRespUnique: $unit.data('unique_index')
                };
            } else {
                r = { // path
                    $:element,
                    _this: element[0],
                    d : element.attr('d').split(' '),
                    arrBegin: element.attr('arr-begin'),
                    arrEnd: element.attr('arr-end'),
                    branchEnd: element.attr('branch-end'),
                    branch: element.attr('branch'),
                }
            }
        }
        return r;
    },
    getPairsOfArrows: function () {
        var pairs = [],
            arrows = $(Variables.arrows.selector),
            bpmOperators = $(Variables.bpmOperator.selector);

        $.each(arrows, function() {
            var begOperator, endOperator,
                _this = $(this),
                path = ProcessObj.getParams(_this);

            begOperator = ProcessObj.getParams(bpmOperators.filter('[data-unique_index="'+path.arrBegin+'"]'));
            endOperator = ProcessObj.getParams(bpmOperators.filter('[data-unique_index="'+path.arrEnd+'"]'));

            if (path.d.length == 18) {
                if (endOperator.col-begOperator.col>1 || Math.abs(begOperator.row-endOperator.row)>1) {
                    arrows.not('[d*="'+path.d[1]+'"]').filter(function () {
                        var element = [], _this = $(this),
                            d = _this.attr('d').split(' '),
                            term = Math.abs(d[2]-d[5]); // 'vertical' : 'horizontal'

                        element[0] = bpmOperators.filter('[data-unique_index="'+_this.attr('arr-begin')+'"]');
                        element[1] = bpmOperators.filter('[data-unique_index="'+_this.attr('arr-end')+'"]');
                        element[2] = bpmOperators.filter('[data-unique_index="'+$(path._this).attr('arr-end')+'"]');
                        element[3] = bpmOperators.filter('[data-unique_index="'+$(path._this).attr('arr-begin')+'"]');

                        if (d[4] - d[1] == 144 && d.length == 15
                            || _this.is('[data-is]') //(Math.abs(d[2]-d[5])==82
                            || (Math.abs(d[4]-d[1])==162)) { //min branch return
                            return false;
                        }

                        _this.attr('data-is', true);
                        if (Math.abs(d[5]-d[2])> 82) {
                            pairs.push({
                                x: parseInt(d[1]),
                                y: parseInt(d[2]),
                                x1: parseInt(d[4]),
                                y1: parseInt(d[5]),
                                path: this,
                                col: term ? parseInt(element[0].attr('gridcol')) : parseInt(element[3].attr('gridcol')),
                                row: term ? parseInt(element[2].attr('gridrow')) : parseInt(element[1].attr('gridrow')),
                                type: term ? 'vertical' : 'horizontal'
                            });
                        }

                        if (d.length != 15) {
                            term = d[7] - d[4]; // 'vertical' : 'horizontal'

                            if (!term) {
                                return false;
                            }

                            pairs.push({
                                x: parseInt(d[4]),
                                y: parseInt(d[5]),
                                x1: parseInt(d[7]),
                                y1: parseInt(d[8]),
                                path: this,
                                col: !term ? parseInt(element[0].attr('gridcol')) : parseInt(element[3].attr('gridcol')),
                                row: !term ? parseInt(element[2].attr('gridrow')) : parseInt(element[1].attr('gridrow')),
                                type: !term ? 'vertical' : 'horizontal'
                            });
                        }

                    });
                }
            }
        });
        arrows.removeAttr('data-is');

        return pairs;
    },
    listPointByCrossing:{
        set: function (col, row, element, type, ug_id, ug_type) {
            this.listPointByCrossing.push({ // set corner disabled
                row : row,
                col : col,
                path : element,
                type : type,
                ug_id : ug_id,
                ug_type : ug_type,
            });
        },
        get : function (col, row, operatorIndex, ug_id, ug_type) {
            var r = null;

            $.each(this.listPointByCrossing, function () {
                var _this = $(this)[0];

                if (_this['row'] == row && _this['col'] == col && _this.ug_id == ug_id && _this.ug_type==ug_type) {
                    r = true;
                }
                if (r) {
                    if ((operatorIndex == $(_this['path']).attr('arr-begin') || operatorIndex == $(_this['path']).attr('arr-end')) && _this.type == 'corner' ) {
                        r = null;
                    }
                    return false;
                }
            })

            return r;
        },
        init : function () {
            var pairs, arrows = $('svg.arrows path'),
                bpmOperators = $('.bpm_operator[data-unique_index]');

            this.listPointByCrossing = [];

            arrows.each(function() {
                var begOperator, endOperator,
                    _this = $(this),
                    path = ProcessObj.getParams(_this);

                begOperator = ProcessObj.getParams(bpmOperators.filter('[data-unique_index="'+path.arrBegin+'"]'));
                endOperator = ProcessObj.getParams(bpmOperators.filter('[data-unique_index="'+path.arrEnd+'"]'));

                if (path.d.length == 18) {
                    ProcessObj.listPointByCrossing.set(endOperator.col, endOperator.row, this, 'corner', endOperator.ug_id, endOperator.ug_type); // set corner disabled
                }
            });

            pairs = ProcessObj.getPairsOfArrows();
            $.each(pairs, function () {
                var currentRow, base = this;

                $.each(pairs, function () {
                    var bmpOperator, element = this;

                    if (base.type != element.type && !$(element.path).is('[data-is]')) {
                        if (base.x < element.x && element.x< base.x1) { //by X
                            if (element.y > base.y && base.y > element.y1 || element.y < base.y && base.y < element.y1) {
                                $(element.path).attr('data-is');
                                currentRow = (base.type == 'horizontal') ? base.row : element.row;
                                bmpOperator = $(Variables.bpmOperator.selector).filter('[data-unique_index="'+$(element.path).attr('arr-end')+'"]');
                                ProcessObj.listPointByCrossing.set(element.col, currentRow, element.path, 'line', bmpOperator.closest('.bpm_unit').data('ug_id'));
                            }
                        }
                    }
                });
            });
            arrows.removeAttr('data-is');
        }
    },

    init : function(){
        /*
        if(ProcessObj.copy_id === null){
            var sm_extension = $('.process_view_block.sm_extension, .list_view_block.sm_extension');
            if(sm_extension && typeof(sm_extension) != 'undefined')
                ProcessObj.copy_id = sm_extension.data('copy_id');
        }
        */

        if(ProcessObj.this_template === null){
            var sm_extension = $('.process_view_block.sm_extension, .list_view_block.sm_extension');
            if(sm_extension && typeof(sm_extension) != 'undefined')
                ProcessObj.this_template = sm_extension.data('this_template');
        }


        if(ProcessObj.mode === null){
            ProcessObj.mode = (ProcessObj.this_template ? ProcessObj.PROCESS_MODE_CONSTRUCTOR : ProcessObj.PROCESS_MODE_RUN);
        }

        if(ProcessObj.mode_change === null){
            ProcessObj.mode_change = (ProcessObj.mode == ProcessObj.PROCESS_MODE_CONSTRUCTOR ? ProcessObj.PROCESS_MODE_CHANGE_EDIT : (ProcessObj.mode == ProcessObj.PROCESS_MODE_RUN ? ProcessObj.PROCESS_MODE_CHANGE_VIEW : ProcessObj.PROCESS_MODE_CHANGE_VIEW));
        }

        if(ProcessObj.process_id !== null && ProcessObj.process_id){
            ProcessObj.is_bpm_view = true;
        }

    },

    setServerParams : function(params){
        this.copy_id = params.copy_id;
        this.process_id = params.process_id;
        this.process_status = params.process_status;
        this.this_template = params.this_template;
        this.mode = params.mode;
        this.mode_change = params.mode_change;
        this.binding_object_check = params.binding_object_check;

        this.BPM.schema = params.BPM.schema;
        this.BPM.elements.operations = params.BPM.elements.operations;
        this.BPM.elements.responsible = params.BPM.elements.responsible;
    },

    BPM : {
        reDrawOfArrows: true, // перемальовувати лінії в даній ітерації
        schema : [],
        /**
         * elements
         */
        clear:function () {
            $('.bpm_unit .bpm_operator').not('[data-name="begin"]').not('[data-name="end"]').remove();
            var begin = $('.bpm_unit .bpm_operator[data-name="begin"]');
            var path = $('svg path.arrow[arr-begin="'+begin.attr('data-unique_index')+'"]');
            var end = $('.bpm_unit .bpm_operator[data-name="end"]');
            path.attr('arr-end', end.attr('data-unique_index'));
            $('svg path').not(path).remove();
        },

        refreshResponsible: function () {
            for(param in this.schema) {
                var data = this.schema[param];

                $('.bpm_unit[data-unique_index="'+ data.unique_index +'"]').find('.bpm_uname_title').text(data.title);
            };
        },

        elements: {
            responsible: '',
            operations: {}, //Запись данных
            arrows: {
                'begin' : {'html' : ''}, //Начало
                'end': {'html': ''}, //Конец
                'condition': {'html': ''}, //Условие
                'and': {'html': ''}, //И
                'timer': {'html': ''}, //Таймер
                'task': {'html': ''}, //Задача
                'agreetment': {'html': ''}, //Согласование
                'notification': {'html': ''}, //Оповещение
                'data_record': {'html': ''}, //Запись данных
                'scenario': {'html': ''}, //
            },
        },




        /**
         * getResponsible
         */
        getResponsible: function (params) {
            var responsible = this.elements.responsible;

            return responsible;
        },

        /**
         * getOperation
         */
        getOperation: function (operation_name) {
            var operation = this.elements.operations[operation_name]

            return operation;
        },

        /**
         * getArrow
         */
        getArrow: function (operation_name) {
            var arrow = this.elements.arrows[operation_name]

            return arrow;
        },


        /**
         * setSchema
         */
        setSchema: function(schema){
            this.schema = schema;
            return this;
        },


        /**
         * getSchema
         * Возвращает схему
         */
        getSchema: function () {

            return this.schema;
        },

        verifyEmptySpace: function (index, colCicle) {
            var operCicle, marked,
                $arrows = $('svg.arrows');

            if (index) {
                for (var v=1; v<100; v++) {
                    if ($('.bpm_operator[data-unique_index="'+index+'"][gridcol="'+colCicle+'"]').length) {
                        operCicle = $('.bpm_operator[data-unique_index="'+index+'"][gridcol="'+colCicle+'"]');

                        if (operCicle.is('[end-branches]')) {
                            ProcessObj.BPM.markOperators(operCicle.data('unique_index'), operCicle.attr('end-branches'));
                            $('.bpm_operator[data-unique_index="'+operCicle.attr('end-branches')+'"]').attr('mark','marked');
                            index = $arrows.find('.arrow[arr-begin="'+operCicle.attr('end-branches')+'"]').attr('arr-end');
                            colCicle = parseInt($('.bpm_operator[data-unique_index="'+operCicle.attr('end-branches')+'"]').attr('gridcol'))+1;
                        } else {
                            operCicle.attr('mark','marked');
                            index = $arrows.find('.arrow[arr-begin="'+operCicle.data('unique_index')+'"]').attr('arr-end');
                            colCicle++;
                        }
                    } else {
                        v=100;
                    }
                }
            }

            marked = $('[mark]');
            marked.sort(function (a, b) {
                var a = parseInt($(a).attr('gridcol')),
                    b = parseInt($(b).attr('gridcol'));

                return (a > b) ? 1 : 0;
            })

            return marked;
        },

        /**
         * getSchema
         * Собирает схему из элементов верстки для сохранения
         */
        getSchemaHtml : function(){
            var schema = [];
            // собрать...
            $('.element[data-type="responsible"]').each(function(){
                var elementItem, arrowsArr, arrowItem,
                    _this = $(this),
                    elementsArr = [],
                    bpmOperator = _this.find('.bpm_operator').not('.fake_operator');

                bpmOperator.each(function(){
                        var _this = $(this);
                        var name = _this.data('name'),
                            unique_index = _this.data('unique_index'),
                            gridrow = _this.attr('gridrow'),
                            gridcol = _this.attr('gridcol'),
                            title = _this.find('.bpm_title').text(),
                            helper = _this.attr('end-branches');
                        var arrowBegin = $('svg.arrows path.arrow[arr-begin="'+unique_index+'"]');
                        arrowsArr = [];
                        arrowItem = {
                                'unique_index' : '',
                                'type' : '',
                                'title' : '',
                            };

                        if (arrowBegin.length) {
                            if (arrowBegin.length>1) {
                                for (i=0; i<arrowBegin.length; i++) {
                                    var branch = arrowBegin.filter('[branch="'+(i+1)+'"]');
                                    arrowsArr.push({
                                        'unique_index' : branch.attr('arr-end'),
                                        'type' : '',
                                        'title' : (branch.attr('title')) ? branch.attr('title') : '',
                                    });
                                }
                            } else {
                                arrowBegin.each(function(){
                                    var _this = $(this);
                                    var title = _this.attr('title'),
                                        arrowEnd = _this.attr('arr-end');
                                    arrowItem.title = (title) ? title : '';
                                    arrowItem.unique_index = (arrowEnd) ? arrowEnd : '';
                                    arrowsArr.push(arrowItem);
                                });
                            }
                        } else {
                            arrowsArr = [arrowItem];
                        }

                        elementItem = {
                            'type' : 'operation',
                            'name' : name,
                            'title' : title,
                            'unique_index' : unique_index,
                            'unique_index_parent' : [],
                            'coordinates' : {
                                'row' : gridrow,
                                'col' : gridcol
                            },
                            'arrows' : arrowsArr
                            };

                        if (name=='and' && !$(this).is('.and_helper') || name=='condition' && !$(this).is('.and_helper') && $(this).attr('end-branches')) {
                            elementItem.helper = helper;
                            elementsArr.push(elementItem);
                        } else {
                            elementsArr.push(elementItem);
                        }
                    });

                schema.push({
                    'type' : 'responsible',
                    'ug_id' : _this.data('ug_id'),
                    'ug_type' : _this.data('ug_type'),
                    'flag' : _this.data('flag'),
                    'unique_index' : _this.data('unique_index'),
                    'elements' : bpmOperator.length ? elementsArr : null
                });
            });
            return schema;
        },




        /**
         * saveSchema
         * сохраняет схему на сервере
         */
        saveSchema : function(){
            var data = {
                'process_id' : ProcessObj.process_id,
                'schema' : this.getSchemaHtml(),
            }

            // send to server
            AjaxObj
                .createInstance()
                .setData(data)
                .setAsync(false)
                .setUrl('/module/BPM/saveSchema/' + ProcessObj.copy_id)
                .setCallBackSuccess(function(data){
                    if(data.status == 'access_error'){
                        Message.show(data.messages, false);
                    } else {
                        if(data.status){
                            if(ProcessObj.process_status == ProcessObj.PROCESS_B_STATUS_IN_WORK){
                                ProcessObj.BPM.bpmParamsRun(ProcessObj.PROCESS_BPM_PARAMS_ACTION_CHECK);
                            }
                        } else {
                            Message.show(data.messages, false);
                        }
                    }
                })
                .setCallBackError(function(jqXHR, textStatus, errorThrown){
                    Message.showErrorAjax(jqXHR, textStatus);
                })
                .send()
        },





        /**
         * buildBPM
         * строит ВРМ из сохраненной или дефолтной схемы
         * Вызавается 1 раз после загрузки страницы
         */
        buildBPM: function(){
            /*
             1. показать прелоадер
             2. построить ВРМ
             3. убрать прелоадер
             */

            ProcessObj.BPM.buildDefault('noSignatureOfBranch');
            var insertionPermission = false;
            ProcessObj.dragInit();
            ProcessObj.dropInit();
            ProcessObj.activateDropdowns();
            // ProcessObj.zeroBuild();
            ProcessObj.inspection.init(false, true, true);
            ProcessObj.recountRespBlocks();
            ProcessObj.branchSignatures();
        },

        buildDefault : function(){ // построение сохраненной схемы beta версия
            var $blockBpm = $('.bpm_block');
            var i = 0;
            while (i<ProcessObj.BPM.schema.length) { // responsible cycle
                var $newRespBlock = $(ProcessObj.BPM.elements.responsible).attr('data-ug_id',ProcessObj.BPM.schema[i].ug_id+'')
                                                                          .attr('data-ug_type', ProcessObj.BPM.schema[i].ug_type+'')
                                                                          .attr('data-unique_index', ProcessObj.BPM.schema[i].unique_index+'')
                                                                          .attr('data-flag', (ProcessObj.BPM.schema[i].flag) ? ProcessObj.BPM.schema[i].flag+'' : '');
                $newRespBlock.find('.bpm_uname_title').text(ProcessObj.BPM.schema[i].title+'');
                $newRespBlock.insertAfter($blockBpm.find('.bpm_unit:last')); // inserting responsible block
                var o = 0;
                while (o<ProcessObj.BPM.schema[i].elements.length){ // operators cycle
                    var thOpArr = ProcessObj.BPM.schema[i].elements[o], // data array for current operator
                        operatorName = thOpArr.name,
                        $currentUnit = $blockBpm.find('.bpm_unit[data-unique_index="'+ProcessObj.BPM.schema[i].unique_index+'"][data-ug_id="'+ProcessObj.BPM.schema[i].ug_id+'"][data-ug_type="'+ProcessObj.BPM.schema[i].ug_type+'"]'),
                        $newOperator = $(ProcessObj.BPM.elements.operations[operatorName]).attr({
                                            gridrow: thOpArr.coordinates.row,
                                            gridcol: thOpArr.coordinates.col
                                        }).attr('data-unique_index', thOpArr.unique_index+'');
                        if (thOpArr.helper) {
                            $newOperator.attr('end-branches',thOpArr.helper+'');
                        }
                    $newOperator.attr('data-status',(ProcessObj.mode==ProcessObj.PROCESS_MODE_CONSTRUCTOR) ? 'done': thOpArr.status);
                    $newOperator.appendTo($currentUnit.find('.bpm_tree')); // adding operator
                    $newOperator.find('.bpm_title').text(thOpArr.title); // give operator title
                    if (thOpArr.coordinates.row >= $currentUnit.attr('rows')) {
                        $currentUnit.attr('rows' , parseInt(thOpArr.coordinates.row)+1+'');
                    }
                    o++;
                }
                i++;
            }

            var a = 0; // arrows cycle
            while (a<ProcessObj.BPM.schema.length) {
                var o = 0;
                while (o<ProcessObj.BPM.schema[a].elements.length){
                    if ($('div.bpm_operator[data-unique_index="'+ProcessObj.BPM.schema[a].elements[o].arrows[0].unique_index+'"]').length>0) {
                        var arrows = ProcessObj.BPM.schema[a].elements[o].arrows;

                        $.each(arrows, function(u){
                            var thArArr = ProcessObj.BPM.schema[a].elements[o], // data array for current operator
                                $obpb = $('div.bpm_operator[data-unique_index="'+thArArr.unique_index+'"] .bpm_body'),  // operator body where path begins
                                $sa = $('svg.arrows'), // arrows adding target
                                numB = thArArr.unique_index,
                                status = thArArr.arrows[u].status,
                                numE = thArArr.arrows[u].unique_index,
                                title = thArArr.arrows[u].title,
                                colorArr = $obpb.css('background-color'),
                                arrowClone = $('div.bpm_def path.arrow').clone(true);

                            if (colorArr=='rgb(255, 255, 255)') {
                                colorArr = 'rgb(197, 197, 197)';
                            }
                            if (status == ProcessObj.PROCESS_ARROW_STATUS_ACTIVE) {
                                colorArr =  colorArr;
                                if (thArArr.name=='condition') {
                                    arrowClone.attr('is-active','true')
                                }
                            } else {
                                if (status == ProcessObj.PROCESS_ARROW_STATUS_UNACTIVE && ProcessObj.mode==ProcessObj.PROCESS_MODE_RUN && ProcessObj.process_status != ProcessObj.PROCESS_B_STATUS_TERMINATED) {
                                    colorArr =  'rgb(197, 197, 197)';
                                }
                            }

                            if (arrows.length>1) {
                                arrowClone.attr('branch',u+1+'');
                            }
                            if (title) {
                                arrowClone.appendTo($sa).attr('stroke', colorArr+'').attr('arr-begin', numB+'').attr('arr-end', numE+'').attr('title', title+'');
                            } else {
                                arrowClone.appendTo($sa).attr('stroke', colorArr+'').attr('arr-begin', numB+'').attr('arr-end', numE+'');
                            }
                             // adding arrow
                        });

                        $('svg.arrows path[is-active]').each(function () {
                            $(this).remove().clone().removeAttr('is-active').appendTo($('svg.arrows'));
                        });
                    }
                    o++;
                }
                a++;
            }
            ProcessObj.BPM.recountArrows();
            ProcessObj.BPM.branchesRestore();

            if (!arguments[0] && arguments[0] != 'noSignatureOfBranch') {
                ProcessObj.branchSignatures();
            }

        },
        getEmptyPlace: function (startRow, beginIndex, endIndex, arrow) {
            var i,
                result = false,
                bpmOperator = $('.bpm_operator[data-unique_index]');
            var beginOperator = bpmOperator.filter('[data-unique_index="'+beginIndex+'"]'),
                endOperator = bpmOperator.filter('[data-unique_index="'+endIndex+'"]');
            var beginCol = parseInt(beginOperator.attr('gridcol')) + 1,
                endCol = parseInt(endOperator.attr('gridcol')),
                row = startRow,
                maxRow = 59,
                path = $('svg.arrows path.arrow[arr-end="'+endIndex+'"][branch]').not('[modifier=0]');
            var dad = beginOperator.closest('.bpm_unit').find(bpmOperator);

            while (row<=maxRow+1) {
                var resultInRow = true;

                for (i = beginCol; i<endCol; i++) {
                    if (dad.filter('[gridrow="'+row+'"][gridcol="'+i+'"]').length) {
                        resultInRow = false;
                    }
                };
                if (resultInRow) { // we tested on operator. It is verify by empty arrow
                    var probablyRow = row*100+24;
                    var helperEnd = dad.filter('[data-unique_index="'+arrow.attr('arr-begin')+'"]'),
                        andHelper = dad.filter('[data-unique_index="'+arrow.attr('arr-end')+'"]');

                    var crossing = $('svg.arrows path.arrow[branch][branch-end=true]').not('[modifier=0]').not('[arr-begin="'+beginIndex+'"]')
                        .filter(function () { // filter on inner branch
                            var d = $(this).attr('d').split(' ');
                            var result =  ((helperEnd.offset().left < d[1] && d[1] < andHelper.offset().left))  ? this : null; // find inner element in struct
                            return result;
                        }).map(function () { // We search vertical crossing with inner elements
                            var y,
                                result = null,
                                d = $(this).attr('d').split(' '),
                                bpmOpCurrentLine = dad.filter('[data-unique_index="'+$(this).attr('arr-begin')+'"]'),
                                andHelperParentDrawingLine = dad.filter('[data-unique_index="'+arrow.attr('arr-end')+'"]');
                            var newRow = parseInt(bpmOpCurrentLine.attr('gridrow'))*100+24 + parseInt($(this).attr('modifier'));

                            if (parseInt(andHelperParentDrawingLine.attr('gridcol')) > parseInt(bpmOpCurrentLine.attr('gridcol'))) {
                                y = probablyRow;
                                if ((((d[2]> y && y > d[5] || d[2]< y && y < d[5]) || (y == newRow)))) {
                                //if ((((d[2]> y && y > d[5]) || (y == newRow)))) {
                                //if (d[2]> y && y > d[5] || y == d[5] || (y == newRow)) {
                                    result = this;
                                }
                            }

                            return result;
                    }).get();

                    if (!crossing.length) {
                        maxRow = 0; //if free than exit
                        result = row
                    }
                }
                row++;
            };

            return result ? result : row;
        },
        recount : function($this){ //перерасчет стрелок при любом движении или добавлении елементов
            var bpmOperator = $('div.bpm_operator'),
                arrows = $('svg.arrows'),
                elemBegin = {
                    $ : bpmOperator.filter('[data-unique_index="'+$this.attr('arr-begin')+'"]')
                },
                elemEnd = {
                    $ : bpmOperator.filter('[data-unique_index="'+$this.attr('arr-end')+'"]')
                };

            elemBegin.$body = elemBegin.$.find('.bpm_body');
            elemBegin.$tree = elemBegin.$.closest('.bpm_tree');
            elemBegin.row = parseInt(elemBegin.$.attr('gridrow'));
            elemBegin.col = parseInt(elemBegin.$.attr('gridcol'));

            elemEnd.$body = elemEnd.$.find('.bpm_body');
            elemEnd.$tree = elemEnd.$.closest('.bpm_tree');
            elemEnd.row = parseInt(elemEnd.$.attr('gridrow'));
            elemEnd.col = parseInt(elemEnd.$.attr('gridcol'));

            if (!elemBegin.$body.length && !elemEnd.$body.length) {
                return;
            }
            var widthB = elemBegin.$body.width(),
                heightB = elemBegin.$body.height(),
                widthE = elemEnd.$body.width(),
                heightE = elemEnd.$body.height();

            var topDifB = elemBegin.$body.offset().top - arrows.offset().top,
                leftDifB = elemBegin.$body.offset().left - arrows.offset().left,
                topDifE = elemEnd.$body.offset().top - arrows.offset().top,
                leftDifE = elemEnd.$body.offset().left - arrows.offset().left;

            //p-point T-top L-left R-right B-bottom B-begin E-end x,y-coordinates ex:pBBy-(pont bottom begin y)
            //      pT
            //   pL( )pR
            //      pB
            var pTBx = leftDifB + widthB / 2,
                pTBy = topDifB,
                pRBx = leftDifB + widthB,
                pRBy = topDifB + heightB / 2,
                pBBx = leftDifB + widthB / 2,
                pBBy = topDifB + heightB + 36,
                pLBx = leftDifB,
                pLBy = topDifB + heightB / 2;

            var pTEx = leftDifE + widthE / 2,
                pTEy = topDifE,
                pREx = leftDifE + widthE,
                pREy = topDifE + heightE / 2,
                pBEx = leftDifE + widthE / 2,
                pBEy = topDifE + heightE + 36,
                pLEx = leftDifE,
                pLEy = topDifE + heightE / 2;

            if (leftDifB == leftDifE) { // to client
                var stingX1 = pBBx-2.5,
                    stingY1 = pLEy+15,
                    stingX2 = pBBx+2.5,
                    stingY2 = pLEy+15;

                pLEy -= 2;

                $this.attr('d', 'M '+pBBx+' '+pLBy+' L '+pBBx+' '+pLEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pBBx+' '+pREy);
            } else
            if (leftDifB+20 < leftDifE) {
                if (topDifB+20 < topDifE) {
                    if($this.is('[branch-end]') && $this.is('[branch]') && $this.attr('branch-end')!=='main'){
                        var corner1x = pREy+($this.attr('branch')-1)*100;
                        if ($this.attr('branch') && $this.attr('modifier')) {
                            corner1y = pREy+($this.attr('modifier')-200);
                        } else if ($this.attr('branch')=='1') {
                            corner1y = pREy+100;
                        }
                        var stingX1 = corner1x-2.5,
                            stingY1 = pBEy+15,
                            stingX2 = corner1x+2.5,
                            stingY2 = pBEy+15;
                        $this.attr('d', 'M '+pBBx+' '+pBBy+' L '+pBBx+' '+corner1y+' L '+corner1x+' '+corner1y+' L '+corner1x+' '+pBEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+corner1x+' '+pBEy+''); /// ATTENTION!!  replace pLEy => pBEy

                        elemEnd.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+elemEnd.row+'" gridcol="'+(elemEnd.col-1)+'"></div>');
                        elemEnd.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+(elemEnd.row+($this.attr('branch')-1))+'" gridcol="'+(elemEnd.col-1)+'"></div>');
                    } else if ($this.attr('branch-end') && $this.attr('branch-end')!=='main') {
                        var corner1x = pBEx,
                            corner1y = pREy;
                            stingX1 = corner1x+2.5,
                            stingY1 = pTEy-15,
                            stingX2 = corner1x-2.5,
                            stingY2 = pTEy-15;
                        $this.attr('d', 'M '+pRBx+' '+pRBy+' L '+corner1x+' '+pRBy+' L '+corner1x+' '+pTEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+corner1x+' '+pTEy+'');
                        elemBegin.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+elemBegin.row+'" gridcol="'+elemEnd.col+'"></div>');
                    } else {
                        var stingX1 = pLEx-15,
                            stingY1 = pLEy-2.5,
                            stingX2 = pLEx-15,
                            stingY2 = pLEy+2.5;
                        $this.attr('d', 'M '+pBBx+' '+pBBy+' L '+pBBx+' '+pLEy+' L '+pLEx+' '+pLEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pLEx+' '+pLEy+'');
                    }
                } else if (topDifB-20 > topDifE) {
                    if($this.is('[branch-end]') && $this.attr('branch-end')!=='main' && $this.attr('branch')!=1){
                        var corner1y = pRBy+100;

                        if ($this.is('[branch]') && $this.is('[modifier]')) {
                            corner1y = pRBy+($this.attr('modifier')-200);
                        } else if ($this.attr('branch')) {
                            corner1y = pRBy+($this.attr('branch')-2)*100;
                        }

                        var corner1x = pBEx,
                            stingX1 = corner1x-2.5,
                            stingY1 = pBEy+15,
                            stingX2 = corner1x+2.5,
                            stingY2 = pBEy+15;

                        if ($this.attr('branch')>2) {
                            $this.attr('d', 'M '+pBBx+' '+pBBy+' L '+pBBx+' '+corner1y+' L '+corner1x+' '+corner1y+' L '+corner1x+' '+pBEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+corner1x+' '+pBEy+'');
                        } else {
                            $this.attr('d', 'M '+pRBx+' '+pRBy+' L '+corner1x+' '+pRBy+' L '+corner1x+' '+pBEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+corner1x+' '+pBEy+'');
                        }
                        if ($this.attr('branch-end') && $this.attr('branch')==2) {
                            elemEnd.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+elemEnd.row+'" gridcol="'+(elemEnd.col-1)+'"></div>');
                        } else if ($this.attr('branch-end') && $this.attr('branch')>2) {
                            elemBegin.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+elemBegin.row+'" gridcol="'+(elemEnd.col-1)+'"></div>');
                        } else {
                            elemBegin.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+elemBegin.row+'" gridcol="'+(elemEnd.col)+'"></div>');
                        }
                    } else {
                        var stingX1 = pLEx-15,
                            stingY1 = pLEy-2.5,
                            stingX2 = pLEx-15,
                            stingY2 = pLEy+2.5;

                        $this.attr('d', 'M '+pTBx+' '+pTBy+' L '+pTBx+' '+pREy+' L '+pLEx+' '+pLEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pLEx+' '+pLEy+'');
                    }
                } else if (topDifB-20 <= topDifE && topDifB+20 >= topDifE) {
                    if($this.is('[branch-end]') && $this.attr('branch-end')!=='main'){
                        var corner1y,
                            corner1x = pRBy+100;

                        if ($this.is('[branch]') && $this.is('[modifier]')) {
                            corner1y = pREy+parseInt($this.attr('modifier'));
                        } else if ($this.is('[branch]')) {
                            corner1y = pRBy+($this.attr('branch')-1)*100;
                        } else corner1y = pREy;

                        var corner2x = pBEx,
                            stingX1 = corner2x-2.5,
                            stingY1 = pBEy+15,
                            stingX2 = corner2x+2.5,
                            stingY2 = pBEy+15;

                        $this.attr('d', 'M '+pBBx+' '+pBBy+' L '+pBBx+' '+corner1y+' L '+corner2x+' '+corner1y+' L '+corner2x+' '+pBEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+corner2x+' '+pBEy+'');
                        if ($this.is('[branch-end]') && corner2x-pBBx<200) {
                            elemEnd.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+(elemEnd.row+($this.attr('branch')-1))+'" gridcol="'+elemEnd.col+'"></div>');
                        } else {
                            elemEnd.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+(elemEnd.row-1)+'" gridcol="'+(elemEnd.col-1)+'"></div>');
                        }
                    } else {
                        var stingX1 = pLEx-15,
                            stingY1 = pLEy-2.5,
                            stingX2 = pLEx-15,
                            stingY2 = pLEy+2.5;

                        $this.attr('d', 'M '+pRBx+' '+pRBy+' L '+pLEx+' '+pLEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pLEx+' '+pLEy+'');
                        if ($this.is('[branch-end]')) {
                            elemEnd.$tree.append('<div class="fake_operator bpm_operator" gridrow="'+elemEnd.row+'" gridcol="'+(elemEnd.col-1)+'"></div>');
                        }
                    }
                }
            } else if (leftDifB-20 > leftDifE) {
                if (topDifB+20 < topDifE) {
                    var stingX1 = pTEx-2.5,
                        stingY1 = pTEy-15,
                        stingX2 = pTEx+2.5,
                        stingY2 = pTEy-15;

                    $this.attr('d', 'M '+pLBx+' '+pLBy+' L '+pBEx+' '+pLBy+' L '+pTEx+' '+pTEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pTEx+' '+pTEy+'');
                } else if (topDifB-20 > topDifE) {
                    var stingX1 = pREx+15,
                        stingY1 = pREy-2.5,
                        stingX2 = pREx+15,
                        stingY2 = pREy+2.5;

                    $this.attr('d', 'M '+pTBx+' '+pTBy+' L '+pTBx+' '+pREy+' L '+pREx+' '+pREy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pREx+' '+pREy+'');
                } else if (topDifB-20 <= topDifE && topDifB+20 >= topDifE) {
                    var stingX1 = pREx+15,
                        stingY1 = pREy-2.5,
                        stingX2 = pREx+15,
                        stingY2 = pREy+2.5;

                    $this.attr('d', 'M '+pLBx+' '+pLBy+' L '+pREx+' '+pREy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pREx+' '+pREy+'');
                }
            } else {
                if (topDifB+20 < topDifE) {
                    var stingX1 = pTEx-2.5,
                        stingY1 = pTEy-15,
                        stingX2 = pTEx+2.5,
                        stingY2 = pTEy-15;

                    $this.attr('d', 'M '+pBBx+' '+pBBy+' L '+pTEx+' '+pTEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pTEx+' '+pTEy+'');
                } else if (topDifB-20 > topDifE) {
                    var stingX1 = pBEx-2.5,
                        stingY1 = pBEy+15,
                        stingX2 = pBEx+2.5,
                        stingY2 = pBEy+15;

                    $this.attr('d', 'M '+pTBx+' '+pTBy+' L '+pBEx+' '+pBEy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pBEx+' '+pBEy+'');
                } else if (topDifB-20 <= topDifE && topDifB+20 >= topDifE) {
                    var stingX1 = pREx+15,
                        stingY1 = pREy-2.5,
                        stingX2 = pREx+15,
                        stingY2 = pREy+2.5;
                    $this.attr('d', 'M '+pLBx+' '+pLBy+' L '+pREx+' '+pREy+' L '+stingX1+' '+stingY1+' L '+stingX2+' '+stingY2+' L '+pREx+' '+pREy+'');
                }
            }
            arrows.find('circle').appendTo('svg.arrows'); // TODO: This need optimization
        },
        createDataUnique: function () {
            return Global.generateMD5((+new Date()).toString());
        },
        recountArrows : function() { // recounting arrows an helpers(fake_operators)
            var operator = $('.fake_operator').remove(),
                outerArr = [];
            $('path[outer]').each(function(){
                if ($(this).is('[stroke-dasharray]')) {
                    outerArr.push($(this).attr('arr-begin'));
                }
                $(this).remove();
            });
            ProcessObj.BPM.setBranchEnds();
            $('svg.arrows path.arrow').each(function(i){
                var $this = $(this);
                if (!$this.is('[branch]')) {
                    ProcessObj.BPM.recount($this);
                }
                if (i == $('svg.arrows path.arrow').length-1) {
                    for (var b=1; b<11; b++) {
                        $('path[branch="'+b+'"]').each(function(){
                            ProcessObj.BPM.recount($(this));
                        });
                    }
                }
            }).promise().done(function(){
                if (operator.length) {
                    operator.each(function(){
                        if (parseInt($(this).attr('gridrow'))>parseInt($(this).closest('.bpm_unit').attr('rows'))) {
                            $(this).closest('.bpm_unit').attr('rows',$(this).attr('gridrow')+'');
                        }
                    });
                }
            });
        },
        sendToClient : function () {
            var client = $('.outer_unit').removeClass('hide');
            var svg = $('svg.arrows');
            var listNotification = $('.bpm_operator[data-unique_index][data-name="notification"]');
            var arrow = $('svg.hidden').find('path');

            listNotification.each(function () {
                var d,
                    _this = $(this),
                    uniqueIndex = ProcessObj.BPM.createDataUnique(),
                    currentClone = arrow.clone();
                var color = _this.find('.bpm_body').css('background-color');

                d = currentClone.attr('d').split(' ');
                var bpmTree = client.find('.bpm_tree');

                if (!bpmTree.length) {
                    client.append('<div class=bpm_tree></div>');
                }
                client.find('.bpm_tree').append('<div class="bpm_operator" gridrow="1" data-unique_index="'+uniqueIndex+'" gridcol="'+_this.attr('gridcol')+'"><div class="bpm_body"></div></div>');
                currentClone.attr('arr-begin', _this.attr('data-unique_index')).attr('stroke', color).attr('arr-end', uniqueIndex).attr('stroke-dasharray', 5);

                svg.prepend(currentClone);
            });

            ProcessObj.BPM.recountArrows();
            ProcessObj.branchSignatures();
        },
        branchesRestore : function() { // Restore branches|| checking branches and define numbers
            var element = $('.element[data-type="responsible"] .element[end-branches]');
            prevAnd = false;
            if (element.length>0) {
                element.each(function(){
                    //endBranches = ProcessObj.defineEndBranches($(this).data('unique_index'));
                    //$(this).attr('end-branches',endBranches+'');
                    indEndBranches = $(this).attr('end-branches');
                    $('.bpm_operator[data-unique_index="'+indEndBranches+'"]').addClass('and_helper');
                });
            }
            ProcessObj.BPM.setBranchEnds();
            ProcessObj.BPM.recountArrows();
        },
        moveMarkedOperators : function(direction){
            if ($('.bpm_operator[mark="marked"]').length>0) {
                $('.bpm_operator[mark="marked"]').each(function(){
                    if (direction=='left') {
                        var currCol = parseInt($(this).attr('gridcol'))-1;
                    } else if (direction=='right') {
                        var currCol = parseInt($(this).attr('gridcol'))+1;
                    }
                    $(this).attr('gridcol',currCol+'');
                });
            }
        },
        markOperators : function(indexStart, indexStop) {
            $('.bpm_operator[data-unique_index="'+indexStart+'"]').attr('mark','inwork');
            for (k=0; k<100; k++) {
                if ($('.bpm_operator[mark="inwork"]').length>0) {
                    $('.bpm_operator[mark="inwork"]').each(function(){
                        $('svg.arrows path.arrow[arr-begin="'+$(this).data('unique_index')+'"]').each(function(){
                            if ($(this).attr('arr-end')!=indexStop) {
                                $('.bpm_operator[data-unique_index="'+$(this).attr('arr-end')+'"]').attr('mark','inwork');
                            }
                        });
                        $(this).attr('mark','marked');
                    });
                } else {
                    k=100;
                }
            }
        },
        unmarkOperators : function(indexStart, indexStop){
            if (!indexStart && !indexStop) { // unmark all operators
                $('.bpm_operator[mark="marked"]').each(function(){
                    $(this).removeAttr('mark');
                });
            } else { // unmark from indexStart to indexStop
                $('.bpm_operator[data-unique_index="'+indexStart+'"]').attr('mark','inwork');
                for (k=0; k<100; k++) {
                    if ($('.bpm_operator[mark="inwork"]').length>0) {
                        $('.bpm_operator[mark="inwork"]').each(function(){
                            $('svg.arrows path.arrow[arr-begin="'+$(this).data('unique_index')+'"]').each(function(){
                                if ($(this).attr('arr-end')!=indexStop) {
                                    $('.bpm_operator[data-unique_index="'+$(this).attr('arr-end')+'"]').attr('mark','inwork');
                                }
                            });
                            $(this).removeAttr('mark');
                        });
                    } else {
                        k=100;
                    }
                }
                $('.bpm_operator[data-unique_index="'+indexStop+'"]').removeAttr('mark');
            }
        },
        restrictArrows : function(){
            $('.bpm_operator[mark="marked"]').each(function(){
                var markedInd = $(this).data('unique_index');
                $('svg.arrows path.arrow[arr-begin="'+markedInd+'"]').each(function(){
                    $(this).attr('restrict','true');
                });
            });
        },
        unrestrictArrows : function(){
            $('svg.arrows path.arrow[restrict]').each(function(){
                $(this).removeAttr('restrict');
            });
        },
        isChild : function (key) {
            var listOfMarkedElements = $('.bpm_operator[mark="marked"]'),
                s = 0;

            $('.bpm_operator[data-unique_index]').removeAttr('mark');
            ProcessObj.BPM.markOperators(key);
            $.each($('.element[mark]'), function (key, data) {
                var $data = $(data);

                if ($data.is('[end-branches]')) s++;
                if ($data.is('.and_helper')) s--;
            })
            ProcessObj.BPM.unmarkOperators();

            listOfMarkedElements.attr('mark','marked');

            return s<0 ? true : false;
        },
        collectAllElements : function(index) {
            var andArray = [];
            //var nextOp = $('svg.arrows path.arrow[arr-begin="'+index+'"]')
            $.each($('svg.arrows path.arrow[arr-begin="'+index+'"]'), function(){
                var nextOp = $(this).attr('arr-end');
                while (!$('.bpm_operator[data-unique_index="'+nextOp+'"]').hasClass('and_helper')){//$('.bpm_operator[data-unique_index="'+nextOp+'"]').attr('data-unique_index') != $('.bpm_operator[data-unique_index="'+$(this).attr('arr-begin')+'"]').attr('end-branches')) {
                    if($('.bpm_operator[data-unique_index="'+nextOp+'"]').data('name') == "and"){
                        var recursiveArray = ProcessObj.BPM.collectAllElements(nextOp);
                        andArray = andArray.concat(recursiveArray);
                    } else {
                        andArray.push(nextOp); 
                        nextOp = $('svg.arrows path.arrow[arr-begin="'+nextOp+'"]').attr('arr-end');
                    }
                }
            });
            return andArray;
        },
        getAllBranchIndexes : function(unique_index, brunchNumber) {
            indArr = [];
            endBranches = $('.bpm_operator[data-unique_index="'+unique_index+'"]').attr('end-branches');
            if (brunchNumber=='all') {
                $('svg.arrows path.arrow[arr-begin="'+unique_index+'"]').each(function(){
                    nextOp = $(this).attr('arr-end');
                    pointsCounter = 1;
                    //while (nextOp && endBranches && nextOp!=endBranches) {
                    while (!$('.bpm_operator[data-unique_index="'+nextOp+'"]').hasClass('and_helper')){//$('.bpm_operator[data-unique_index="'+nextOp+'"]').attr('data-unique_index') != $('.bpm_operator[data-unique_index="'+$(this).attr('arr-begin')+'"]').attr('end-branches')) {
                        if($('.bpm_operator[data-unique_index="'+nextOp+'"]').data('name') == "and"){  
                            indArr.push(nextOp)
                            var andArray = ProcessObj.BPM.collectAllElements(nextOp);
                            indArr = indArr.concat(andArray);
                            nextOp = $('svg.arrows path.arrow[arr-begin="'+nextOp+'"]').attr('arr-end');
                        } else {
                            indArr.push(nextOp); 
                            /*if ($('.bpm_operator[data-unique_index="'+nextOp+'"]').data('name')=='and') {
                                addArr = ProcessObj.BPM.getAllBranchIndexes(nextOp, 'all');
                                indArr.push(addArr);
                                nextOp = $('.bpm_operator[data-unique_index="'+nextOp+'"]').attr('end-branches');
                            } else {*/
                                nextOp = $('svg.arrows path.arrow[arr-begin="'+nextOp+'"]').attr('arr-end');
                            //} 
                            if ($('svg.arrows path.arrow[arr-end="'+nextOp+'"]').length>1) {
                                pointsCounter--;
                                if (pointsCounter==0) {
                                    $('svg.arrows path.arrow[arr-end="'+unique_index+'"]').attr('arr-end',nextOp+'');
                                }
                            } else if ($('svg.arrows path.arrow[arr-begin="'+nextOp+'"]').length>1) {
                                pointsCounter++;
                            } 
                        }
                    }
                });
            } else {
            }
            var uniqueNames = [];
            $.each(indArr, function(i, el){
                if($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
            });
            return uniqueNames;
        },

        whatOperatorsBetweenCol: function (row, colBegin, colEnd) {
            var bpmOperator = $('.bpm_operator[data-unique_index]');
            var operators = [];

            while (colBegin < colEnd){
                var item = bpmOperator.filter('[gridrow='+row+'][gridcol='+colBegin+']');
                if (item.length)
                {
                    operators.push(item);
                    colBegin = colEnd;
                }
                colBegin++;
            }
            return operators;
        },
        
        
        //analize and set barnches ends
        setBranchEnds : function() {
            $.each($('.element[data-type="responsible"] .bpm_operator[data-unique_index][end-branches]'), function(){
                var emptyFirstBranch,
                    currentElement = $(this),
                    unique_index = currentElement.attr('end-branches'),
                    pathes = $('svg.arrows path.arrow'),
                    bpmOperator = $('.bpm_operator'),
                    gridRow = parseInt(currentElement.attr('gridrow')),
                    helperOperator = ProcessObj.getParams(bpmOperator.filter('[data-unique_index='+unique_index+']')),
                    arrowEnd = pathes.filter('[arr-end="'+unique_index+'"]');

                if (arrowEnd.not('[branch][branch-end="main"]').attr('branch-end','true').length) {
                    arrowEnd.filter('[arr-begin != "'+currentElement.data('unique_index')+'"]').each(function () {
                        var _this = $(this);
                        var bpmItem = bpmOperator.filter('[data-unique_index='+_this.attr('arr-begin')+']'),
                            bpmUnit = bpmItem.closest('.bpm_unit');

                        if (gridRow == parseInt(bpmItem.attr('gridrow')) && parseInt(bpmUnit.data('ug_id')) == helperOperator.ug_id && bpmUnit.data('ug_type') == helperOperator.ug_type) {
                            _this.attr('branch-end', 'main');
                        }
                    });

                    emptyFirstBranch = arrowEnd.filter('[branch=1][arr-begin='+currentElement.data('unique_index')+']');
                    if (emptyFirstBranch.length)
                    {
                        var colBegin = parseInt(currentElement.attr('gridcol'))+1;
                        var colEnd = parseInt(bpmOperator.filter('.and_helper').filter('[data-unique_index='+currentElement.attr('end-branches')+']').attr('gridcol'));
                        var listOperators = ProcessObj.BPM.whatOperatorsBetweenCol(gridRow, colBegin, colEnd);

                        if (!listOperators.length) {
                            emptyFirstBranch.attr('branch-end', 'main');
                        }
                     }
                }
            });
        },
        deleteQeue : function(indexes, callback) {
            $.each(indexes, function(i,val) {
                process.BPM.operationParams.delete(val, function(unique_index){
                    $('svg.arrows path.arrow[arr-begin="'+unique_index+'"]').remove();
                    $('.element[data-type="operation"][data-unique_index="'+unique_index+'"]').remove();
                });
            });
            callback(true);
        },
        deleteCallback : function(unique_index) {
            $('.element[data-type="operation"][data-unique_index="'+unique_index+'"]').remove();
            var newEnd = $('svg.arrows path.arrow[arr-begin="'+unique_index+'"]').attr('arr-end');
            $('svg.arrows path.arrow[arr-end="'+unique_index+'"]').attr('arr-end',newEnd+'');
            toMove = true;
            $('svg.arrows path.arrow[arr-end="'+newEnd+'"][branch-end]').each(function(){
                branEndCol = $('.bpm_operator[data-unique_index="'+$(this).attr('arr-begin')+'"]').attr('gridcol');
                newEndCol = $('.bpm_operator[data-unique_index="'+newEnd+'"]').attr('gridcol');
                if (parseInt(branEndCol)+2>=newEndCol) {
                    toMove = false;
                }
            });
            $('svg.arrows path.arrow[arr-begin="'+unique_index+'"]').remove();
            if (toMove) {
                ProcessObj.recountNextOperators(newEnd, 'left');
            }
            BpmModel.removedOfOperator = true;
            ProcessObj.recountRespBlocks();
            ProcessObj.inspection.init()
            ProcessObj.BPM.recountArrows();
            ProcessObj.BPM.saveSchema();
            BpmModel.removedOfOperator = null;
        },
        deleteQeueCallback : function(deletedInd, indAfterHelper) {
            $('svg.arrows path.arrow[arr-end="'+deletedInd+'"]').attr('arr-end',indAfterHelper+'');
        },
        createHelperAnd : function(genInd) {
            var nextCol = parseInt($('.bpm_operator[data-unique_index="'+genInd+'"]').attr('gridcol'))+1;
            var newGenInd = ProcessObj.BPM.createDataUnique();
            /*var $andClone = */$('.bpm_operator[data-unique_index="'+genInd+'"]').clone(true)
                            .attr('gridcol',nextCol+'').attr('data-unique_index', newGenInd+'').addClass('and_helper').data('unique_index', newGenInd+'')
                            .insertAfter($('.bpm_operator[data-unique_index="'+genInd+'"]'));
            var branchEnd = $('.bpm_operator[data-unique_index="'+genInd+'"]').attr('end-branches');
            var $realPath = $('svg.arrows path.arrow[arr-begin="'+genInd+'"]');
            var $clonePath = $realPath.clone(true);
            $clonePath.removeAttr('title').attr('arr-end',$realPath.attr('arr-end')+'').attr('arr-begin',newGenInd+'').insertAfter($realPath);
            $realPath.attr('arr-end',newGenInd+'');
        },

        separateArrow : function($path, interIndex) {  //разделение и переопредиление стрелок при присоединении нового елемента
            if ($path.attr('arr-begin') !== interIndex && $path.attr('arr-end') !== interIndex) { // проверка против зацикливания
                var $clonew = $path.clone(true).attr('arr-end', interIndex+'').insertAfter($path),
                    bpmOperator = $('div.bpm_operator');

                var colorArr = $('div.bpm_operator.condrag .bpm_body').css('background-color'),
                    arrows = $('svg.arrows');

                if (colorArr=='rgb(255, 255, 255)') {
                    colorArr = 'rgb(197, 197, 197)';
                }
                $path.attr('arr-begin', interIndex+'').attr('stroke', colorArr+'');
                $('div.bpm_operator.condrag').removeClass('condrag');
                $path.removeAttr('branch').removeAttr('modifier');
                $clonew.removeAttr('modifier');

                if (bpmOperator.filter('[data-name=condition][data-unique_index="'+$clonew.attr('arr-begin')+'"]').length>0)
                {
                    $path.removeAttr('title');
                } else $clonew.removeAttr('title');

                if ($clonew.attr('branch-end')) {
                    if ($clonew.attr('new-end')) {
                        $path.removeAttr('branch-end').removeAttr('new-end');
                        arrEnd = $path.attr('arr-end');
                        $path.attr('restricted','true');
                        arrows.find('path.arrow[arr-end="'+arrEnd+'"]').not('path[restricted]').each(function(){
                            $(this).attr('arr-end',interIndex+'');
                        });
                        $('path[restricted]').removeAttr('restricted');
                        $clonew.removeAttr('new-end');
                    } else {
                        $clonew.removeAttr('branch-end');
                    }
                }

                ProcessObj.BPM.recount($clonew);
                ProcessObj.BPM.recount($path);
            }

        },

        createOuterArrow : function(unique_index) {  // crating outer arrow in top outer unit
            var operator = $('.bpm_operator[data-unique_index="'+unique_index+'"]'),
                color = operator.find('.bpm_body').css('background-color'),
                showOuterUnit = !$('.outer_unit').is('visible'),
                path = $('svg.hidden path.arrow').clone();
            if (operator.length>0) {
                if (showOuterUnit) {
                    $('.outer_unit').removeClass('hide');
                    ProcessObj.BPM.recountArrows();
                }
                if (operator.data('status')=='active') {
                    color = 'rgb(31, 181, 173)';
                }
                var operatoroTopPoint = operator.offset().top-$('svg.arrows').offset().top,
                    operatoroLeftPoint = (operator.offset().left+operator.width()/2) - $('svg.arrows').offset().left,
                    unitBottomPoint = $('.outer_unit').offset().top+$('.outer_unit').height()+30-$('svg.arrows').offset().top+2;

                path.attr('stroke',color).attr('stroke-dasharray','5,5').attr('arr-begin',unique_index).attr('outer','')
                    .attr('d','M '+operatoroLeftPoint+' '+operatoroTopPoint+' L '+operatoroLeftPoint+' '+unitBottomPoint+'');//.attr('d','M 313 114 L 457 114');
                $('svg.arrows').prepend(path);
                path = path.clone();
                path.attr('stroke',color)
                    .attr('d','M '+operatoroLeftPoint+' '+(unitBottomPoint+15)+' L '+operatoroLeftPoint+' '+unitBottomPoint+' L '+(operatoroLeftPoint-2.5)+' '+(unitBottomPoint+15)+' L '+(operatoroLeftPoint+2.5)+' '+(unitBottomPoint+15)+' L '+operatoroLeftPoint+' '+unitBottomPoint+'').removeAttr('stroke-dasharray');
                $('svg.arrows').prepend(path);
            }
        },

        destroyOuterArrow : function(unique_index) {
            var operator = $('.bpm_operator[data-unique_index="'+unique_index+'"]'),
                showOuterUnit = !$('.outer_unit').is('visible'),
                path = $('svg.hidden path.arrow').clone();
        },


        /**
         * open
         */
        open: function (process_id, process_mode, $this){
            var vars = {
                'selector_content_box' : '#content_container',
                'module' : {
                    'copy_id' : ProcessObj.copy_id,
                    'process_id' :  process_id,
                    'process_mode' : process_mode
                }
            }

            modalDialog.hideAll();

            if ($this && $this.length) {
                instanceGlobal.preloaderShow($this);
            }

            instanceGlobal.contentReload
                .clear()
                .setVars(vars)
                .loadBpmProcess();
        },


        switchProcessStatus : function(_this, bpm_params_run){
            var process = new Process();
            if(ProcessObj.mode == ProcessObj.PROCESS_MODE_RUN) {
                process.BPM.runAction(_this, function(){
                    if(bpm_params_run && ProcessObj.process_status == ProcessObj.PROCESS_B_STATUS_IN_WORK) {
                        ProcessObj.BPM.bpmParamsRun(ProcessObj.PROCESS_BPM_PARAMS_ACTION_CHECK);
                    }
                    HeaderNotice.refreshAllHeaderNotices();
                });
            } else if(ProcessObj.mode == ProcessObj.PROCESS_MODE_CONSTRUCTOR){
                process.BPM.addCardSelect();
            }
            $(_this).closest('.crm-dropdown.element.open').removeClass('open');
            $('.element[data-type="actions"] .element[data-type="mc_'+ProcessObj.mode_change+'"]').parent().addClass('active');
            ProcessObj.editOrViewProcess();
        },


        /**
         * runAction
         */
        runAction : function(_this, callback){
            var action_type = $(_this).data('type');
            var active_action = $('.bpm_block .element[data-type="actions"] ul li.active a.element').data('type');

            if(active_action == action_type) {
                $( 'div.bpm_operator' ).draggable({ disabled: false });
                return;
            }

            var data = {
                'process_id' : ProcessObj.process_id,
            };

            switch(action_type){
                case ProcessObj.PROCESS_ACTION_START :
                    data['b_status'] = ProcessObj.PROCESS_B_STATUS_IN_WORK;
                    break;
                case ProcessObj.PROCESS_ACTION_STOP :
                    data['b_status'] = ProcessObj.PROCESS_B_STATUS_STOPED;
                    break;
                case ProcessObj.PROCESS_ACTION_TERMINATE :
                    data['b_status'] = ProcessObj.PROCESS_B_STATUS_TERMINATED;
                    break;
            }

            var ajax = new Ajax();
            ajax
                .setData(data)
                .setAsync(false)
                .setUrl('/module/BPM/setProcessStatus/' + ProcessObj.copy_id)
                .setCallBackSuccess(function(data){
                    if(data.status == 'access_error'){
                        Message.show(data.messages, false);
                    } else {
                        if(data.status){
                            ProcessObj.BPM.updateProcessStatus(data.b_status);
                            ProcessObj.refreshStatus(data.schema, 'all');
                            if(typeof(callback) == 'function') callback(data);
                        } else {
                            Message.show(data.messages, false);
                        }
                    }
                })
                .setCallBackError(function(jqXHR, textStatus, errorThrown){
                    Message.showErrorAjax(jqXHR, textStatus);
                })
                .setCallBackDone(function(){
                    $( 'div.bpm_operator' ).draggable({ disabled: false });
                })
                .send();


        },
        modeChangeSwitch : function(_this){
            var mc_active = $(_this).data('type'),
                element = $(_this).closest('.element[data-type="bpm_menu"]');

            switch(mc_active){
                case ProcessObj.PROCESS_ACTION_MC_EDIT:
                    ProcessObj.mode_change = ProcessObj.PROCESS_MODE_CHANGE_EDIT;
                    element.find('li.active .element[data-type="mc_view"]').closest('li.active').removeClass('active');
                    element.find('li .element[data-type="mc_edit"]').closest('li').addClass('active');
                    $('.bpm_block[data-page_name="BPMView"] .element[data-type="operation_menu"]').removeClass('hidden');
                    break;
                case ProcessObj.PROCESS_ACTION_MC_VIEW:
                    ProcessObj.mode_change = ProcessObj.PROCESS_MODE_CHANGE_VIEW;
                    element.find('li.active .element[data-type="mc_edit"]').closest('li.active').removeClass('active');
                    element.find('li .element[data-type="mc_view"]').closest('li').addClass('active');
                    $('.bpm_block[data-page_name="BPMView"] .element[data-type="operation_menu"]').addClass('hidden');
                    break;
            }
        },
        /**
         * setProcessStatus
         */
        setProcessStatus : function(b_status){
            if(b_status) {
                ProcessObj.process_status = b_status;

                var action_type;

                if(b_status == ProcessObj.PROCESS_B_STATUS_IN_WORK) {
                    action_type = 'start';
                } else if(b_status == ProcessObj.PROCESS_B_STATUS_STOPED) {
                    action_type = 'stop';
                } else if(b_status == ProcessObj.PROCESS_B_STATUS_TERMINATED) {
                    action_type = 'terminate';
                }

                $('.bpm_block .element[data-type="actions"] ul li').each(function(i, li){
                    $(li).removeClass('active');
                    if(action_type){
                        if($(li).find('a.element').data('type') == action_type){
                            $(li).addClass('active');
                        }
                    }
                });
            }

        },


        addCardSelect : function(){
            var data = {};
            data['parent_copy_id'] = null,
            data['parent_data_id'] = null,
            data['this_template'] = 0,
            data['parent_class'] = 'list-view',
            data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(null, (EditView.countEditView() == 1 ? true : false));
            data['process_id'] = ProcessObj.process_id;

            AjaxObj
                .createInstance()
                .setData(data)
                .setAsync(false)
                .setUrl('/module/editView/editSelect/' + ProcessObj.copy_id)
                .setCallBackSuccess(function(data){
                    if(data.status == 'access_error'){
                        Message.show(data.messages, false);
                    } else {
                        if(data.status == 'error'){
                            Message.show(data.messages);
                        } else {
                            if(data.status == true){
                                modalDialog.show(data.data, true);

                                jScrollInit();
                                niceScrollCreate($('.submodule-table'));
                                imagePreview();
                                $('.form-control.time').each(function(){
                                    initElements('.edit-view', $(this).val());
                                });
                            }
                        }
                    }
                })
                .setCallBackError(function(jqXHR, textStatus, errorThrown){
                    Message.show([{'type':'error', 'message': Global.urls.url_ajax_error}], true);
                })
                .setCallBackDone(function(){
                    $( 'div.bpm_operator' ).draggable({ disabled: false });
                })
                .send();
        },


        /**
         * operationParams
         */
        operationParams : {
            settings : {},

            setSettings : function(unique_index, settings){
                this.settings[unique_index] = settings;
            },

            getSettings: function(unique_index){
                return this.settings[unique_index];
            },


            /**
             * getOperationChevronData
             */
            getOperationChevronData : function(_this){
                var data = {
                    'process_id' : ProcessObj.process_id,
                    'mode' : ProcessObj.mode,
                    'mode_change' : ProcessObj.mode_change,
                    'unique_index' : $(_this).data('unique_index'),
                    'element_name' : $(_this).data('name'),

                    'pci' : null,
                    'pdi' : null,
                }

                return data;
            },

            /**
             * show
             */
            show : function(data, callback){
                AjaxObj
                    .createInstance()
                    .setData(data)
                    .setAsync(false)
                    .setUrl('/module/BPM/showOperationParams/' + ProcessObj.copy_id)
                    .setCallBackSuccess(function(data){
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status) {
                                var instanceEV = EditView.createInstance().setParent(this);

                                instanceEV
                                    .getModalInstance()
                                    .saveInstance(instanceEV)
                                    .show(data.html, true);
                            } else if(data.messages) {
                                    Message.show(data.messages, false);
                                }
                            }
                        if(typeof(callback) == 'function'){
                            callback(data);
                        }
                    })
                    .setCallBackError(function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                    })
                    .setCallBackDone(function(){
                        ProcessObj.initsOperatorModalShow(data);
                        Preloader.modalHide();
                    })
                    .send()
            },




            /**
             * delete
             * удаляем схему оператора
             */
            delete : function(unique_index, callback){
                var data = {
                    'process_id' : ProcessObj.process_id,
                    'unique_index' : unique_index,
                    'mode' : ProcessObj.mode,
                    'mode_change' : ProcessObj.mode_change,
                }

                AjaxObj
                    .createInstance()
                    .setData(data)
                    .setAsync(false)
                    .setUrl('/module/BPM/deleteSchemaOperation/' + ProcessObj.copy_id)
                    .setCallBackSuccess(function(data){
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status){
                                callback(unique_index)
                            } else if(data.messages){
                                Message.show(data.messages, false);
                            }
                        }
                    })
                    .setCallBackError(function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                    })
                    .send()
            },


            /**
             * getSaveData
             */
            getSaveData : function(_this, element_name, unique_index){

                switch(element_name){
                    case 'data_record':
                        var data = {
                            'process_id' : ProcessObj.process_id,
                            'unique_index' : unique_index,
                            'element_name' : element_name,
                            'mode' : ProcessObj.mode,
                            'schema_operation' : this.getSchemaOperation(element_name, _this)
                        }

                        break;
                    default:
                        var data = {
                            'process_id' : ProcessObj.process_id,
                            'unique_index' : unique_index,
                            'element_name' : element_name,
                            'mode' : ProcessObj.mode,
                            'schema_operation' : this.getSchemaOperation(element_name, _this)
                        }
                        break;
                }


                return data;
            },

            /**
             * save
             * сохраняет схему оператора на сервере
             */
            save : function(_this, element_name, unique_index, callback){
                var data  = this.getSaveData(_this, element_name, unique_index);

                // send to server
                var ajax = new Ajax();
                ajax
                    .setData(data)
                    .setAsync(false)
                    .setDataType('json')
                    .setUrl('/module/BPM/saveSchemaOperation/' + ProcessObj.copy_id)
                    .setCallBackSuccess(function(data){
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status){
                                if(callback && typeof callback == 'function'){
                                    callback(data);
                                }
                            } else {
                                if(data.html){
                                    if(element_name == 'notification' || element_name == 'scenario'){
                                        $(_this).closest('.element[data-type="params"][data-module="process"]').find('.panel-body .inputs-block').html(data.html);
                                    } else if(element_name == 'begin' || element_name == 'timer'){
                                        $(_this).closest('.element[data-type="params"][data-module="process"]').find('.panel-body .inputs-block .dinamic:not(add_list)').remove();
                                        $(_this).closest('.element[data-type="params"][data-module="process"]').find('.panel-body .inputs-block').children('li').after(data.html);
                                        ProcessObj.initDatePicker();
                                        ProcessObj.initTimePicker();
                                    }

                                    if (element_name == 'scenario') {
                                        _this.find('textarea#code').val(bpmOperatorScript.getValue());
                                        ProcessObj.scenario.init();
                                        ProcessObj.scenario.render();
                                    }


                                    Global.initSelects();
                                    ProcessObj.activateDropdowns();
                                    ProcessObj.getCountOptions($('.select[multiple]'));
                                    Global.groupDropDowns(0).init($(_this).find('.add_list .element'));
                                } else if(data.messages){
                                    Message.show(data.messages, false);
                                }
                            }
                        }
                        instanceGlobal.contentReload.preloaderHide();
                    })
                    .setCallBackError(function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                    })
                    .send()
            },


            done : function(_this, unique_index, callback){
                var data = {
                    'process_id' : ProcessObj.process_id,
                    'unique_index' : unique_index,
                }

                // send to server
                var ajax = new Ajax();
                ajax
                    .setData(data)
                    .setAsync(false)
                    .setDataType('json')
                    .setUrl('/module/BPM/doneOperation/' + ProcessObj.copy_id)
                    .setCallBackSuccess(function(data){
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status){
                                if(callback && typeof callback == 'function'){
                                    callback(data);
                                }
                            } else {
                                    Message.show(data.messages, false);
                            }
                        }
                    })
                    .setCallBackError(function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                    })
                    .send()

            },

            getSchemaOperation : function(element_name, _this){
                var result = null;
                switch(element_name){
                    case 'begin' :
                        result = this.getSchemaOperationBegin(_this);
                        break;
                    case 'end':
                        result = this.getSchemaOperationEnd(_this);
                        break;
                    case 'condition':
                        result = this.getSchemaOperationCondition(_this);
                        break;
                    case 'and':
                        result = this.getSchemaOperationAnd(_this);
                        break;
                    case 'timer':
                        result = this.getSchemaOperationTimer(_this);
                        break;
                    case 'task':
                        result = this.getSchemaOperationTask(_this);
                        break;
                    case 'agreetment':
                        result = this.getSchemaOperationAgreetment(_this);
                        break;
                    case 'notification':
                        result = this.getSchemaOperationNotification(_this);
                        break;
                    case 'data_record':
                        result = this.getSchemaOperationDataRecord(_this);
                        break;
                    case 'scenario':
                        result = this.getSchemaOperationScenario(_this);
                        break;
                }

                return result;
            },

            getSchemaOperationRunOnTimeElements : function(_this){
                var schema_element = [];
                var start_on_time = _this.find('.element[data-type="start_on_time"]').val();

                switch(start_on_time){
                    case 'start_on_time_disabled':
                        break;

                    case 'start_on_time_disposable_start':
                    case 'start_on_time_determined':
                    case 'start_on_before_time':
                    case 'start_on_after_time':
                        var selections = '';
                        var value = '';
                        element_list = ProcessObj.BPM.elementsActions.runOnTime.elements[start_on_time];
                        for(i = 0; i < element_list.length; i++){
                            selections += 'li.dinamic .element[data-type="' + element_list[i] + '"]';
                            if((i + 1) < element_list.length) selections += ',';
                        }

                        $(selections).each(function(i, ul){
                            var li_dinamic = $(ul).closest('li.dinamic');
                            var pretitle = li_dinamic.find('.element[data-type="title"]').clone(true);
                            $(pretitle).find('.counter').remove();

                            if(start_on_time == 'start_on_time_disposable_start'){
                                value = [$(ul).val(), li_dinamic.find('.element[data-type="sub_time"]').val()];
                            } else if($.inArray(start_on_time, ['start_on_time_determined', 'start_on_before_time', 'start_on_after_time']) >= 0){
                                value = $(ul).val();
                            }
                            schema_element.push({
                                "type": $(ul).data('type'),
                                "title": pretitle.text(),
                                "value": value
                            });
                        })
                        break;

                    case 'start_on_time_regular_start':
                        var li_dinamic = _this.find('.element[data-type="periodicity"]').closest('li.dinamic');
                        var pretitle = li_dinamic.find('.element[data-type="title"]').clone(true);
                        $(pretitle).find('.counter').remove();
                        schema_element.push({
                            "type": 'periodicity',
                            "title": pretitle.text(),
                            "value": _this.find('.element[data-type="periodicity"]').val()
                        });

                        var selections = '';
                        var element_list = [];

                        $.each(ProcessObj.BPM.elementsActions.runOnTime.elements.start_on_time_regular_start, function(key, value){
                            element_list.push(value);
                        });

                        for(i = 0; i < element_list.length; i++){
                            selections += 'li.dinamic .element[data-type="' + element_list[i] + '"]';
                            if((i + 1) < element_list.length) selections += ',';
                        }

                        $(selections).each(function(i, ul){
                            var value = '';
                            var li_dinamic = $(ul).closest('li.dinamic');
                            var pretitle = li_dinamic.find('.element[data-type="title"]').clone(true);
                            $(pretitle).find('.counter').remove();

                            if($(ul).data('type') != 'time'){
                                value = [$(ul).val(), li_dinamic.find('.element[data-type="sub_time"]').val()];
                            } else {
                                value = $(ul).val();
                            }

                            schema_element.push({
                                "type": $(ul).data('type'),
                                "title": pretitle.text(),
                                "value": value
                            });
                        })

                        schema_element.push({
                            "type": 'label_add_date',
                            "title": '',
                            "value": ''
                        });
                        break;


                    //start_on_after_created_entity
                    //start_on_after_changed_entity
                    case 'start_on_after_created_entity' :
                        schema_element.push({
                            "type": 'object_name',
                            "value": _this.find('.element[data-type="object_name"]').val()
                        });
                        break;
                    case 'start_on_after_changed_entity' :
                        schema_element.push({
                            "type": 'object_name',
                            "value": _this.find('.element[data-type="object_name"]').val()
                        });
                        schema_element.push({
                            "type": 'field_name',
                            "value": _this.find('.element[data-type="field_name"]').val()
                        });

                        _this.find('li.form-group').each(function(){
                            var type = $(this).find('.element[data-type="value_scalar"],' +
                                '.element[data-type="value_datetime"],' +
                                '.element[data-type="value_select"],' +
                                '.element[data-type="drop_down_button"]').data('type');
                            if(typeof(type) == 'undefined') return true;

                            switch(type){
                                case 'value_scalar':
                                    schema_element.push({
                                        "type": type,
                                        "value": null,
                                        "value_condition": $(this).find('.element[data-type="value_condition"]').val(),
                                        "value_value": [$(this).find('.element_filter[data-name="condition_value"]').val()]
                                    });
                                    break;
                                case 'value_select':
                                    schema_element.push({
                                        "type": type,
                                        "value": [$(this).find('.element_filter[data-name="condition_value"]').val()]
                                    });
                                    break;
                                case 'drop_down_button':
                                    schema_element.push({
                                        "type": type,
                                        "value": [$(this).find('.element_filter[data-name="condition_value"]').data('id')]
                                    });
                                    break;
                                case 'value_datetime':
                                    var dates = [];
                                    $(this).find('.element_filter[data-name="condition_value"]').each(function(i, ul){
                                        var v = $(ul).val();
                                        if(v){
                                            dates.push(v);
                                        }
                                    });
                                    schema_element.push({
                                        "type": type,
                                        "value": null,
                                        "value_condition": $(this).find('.element[data-type="value_condition"]').val(),
                                        "value_value": (!$.isEmptyObject(dates) ? dates : '')
                                    });
                                    break;
                            }
                        });

                        schema_element.push({
                            "type": 'label_add_value',
                            "title": '',
                            "value": ''
                        });


                        break;
                }

                return schema_element;
            },

            getSchemaOperationBegin : function(_this){
                var previous_process = _this.find('.element[data-type="previous_process"]').val(),
                    start_on_time = _this.find('.element[data-type="start_on_time"]').val();

                var schema = [{
                    "type": "previous_process",
                    "value": (previous_process ? previous_process : ""),
                  }, {
                    "type": "start_on_time",
                    "value": start_on_time,
                    "elements": this.getSchemaOperationRunOnTimeElements(_this)
                  }];


                /*
                //start_on_after_created_entity
                //start_on_after_changed_entity
                switch(start_on_time){
                    case 'start_on_after_created_entity' :
                        schema.push({
                            "type": 'object_name',
                            "value": _this.find('.element[data-type="object_name"]').val()
                        });
                        break;
                    case 'start_on_after_changed_entity' :
                        schema.push({
                            "type": 'object_name',
                            "value": _this.find('.element[data-type="object_name"]').val()
                        });
                        schema.push({
                            "type": 'field_name',
                            "value": _this.find('.element[data-type="field_name"]').val()
                        });

                        _this.find('li.form-group').each(function(){
                            var type = $(this).find('.element[data-type="value_scalar"],' +
                                '.element[data-type="value_datetime"],' +
                                '.element[data-type="value_select"],' +
                                '.element[data-type="drop_down_button"]').data('type');
                            if(typeof(type) == 'undefined') return true;

                            switch(type){
                                case 'value_scalar':
                                    schema.push({
                                        "type": type,
                                        "value": null,
                                        "value_condition": $(this).find('.element[data-type="value_condition"]').val(),
                                        "value_value": [$(this).find('.element_filter[data-name="condition_value"]').val()]
                                    });
                                    break;
                                case 'value_select':
                                    schema.push({
                                        "type": type,
                                        "value": [$(this).find('.element_filter[data-name="condition_value"]').val()]
                                    });
                                    break;
                                case 'drop_down_button':
                                    schema.push({
                                        "type": type,
                                        "value": [$(this).find('.element_filter[data-name="condition_value"]').data('id')]
                                    });
                                    break;
                                case 'value_datetime':
                                    var dates = [];
                                    $(this).find('.element_filter[data-name="condition_value"]').each(function(i, ul){
                                        var v = $(ul).val();
                                        if(v){
                                            dates.push(v);
                                        }
                                    });
                                    schema.push({
                                        "type": type,
                                        "value": null,
                                        "value_condition": $(this).find('.element[data-type="value_condition"]').val(),
                                        "value_value": (!$.isEmptyObject(dates) ? dates : '')
                                    });
                                    break;
                            }
                        });

                        schema.push({
                            "type": 'label_add_value',
                            "title": '',
                            "value": ''
                        });


                        break;
                }
                */

                return schema;
            },

            getSchemaOperationTimer : function(_this){
                var schema = [{
                    "type": "start_on_time",
                    "value": _this.find('.element[data-type="start_on_time"]').val(),
                    "elements": this.getSchemaOperationRunOnTimeElements(_this)
                }];

                return schema;
            },

            getSchemaOperationEnd : function(_this){
                schema = [
                  {
                    "type": "next_process",
                    "value": _this.find('.element[data-type="next_process"]').val()
                  }
                ];
                return schema;
            },
            getSchemaOperationCondition : function(_this){
                var schema = [
                    {
                        "type": "object_name",
                        "value": _this.find('.element[data-type="object_name"]').val()
                    },
                    {
                        "type": "relate_module",
                        "value": _this.find('.element[data-type="relate_module"]').val()
                    },
                    {
                        "type": "field_name",
                        "value": _this.find('.element[data-type="field_name"]').val()
                    }
                ];
                _this.find('li.form-group').each(function(){
                    var type = $(this).find('.element[data-type="value_scalar"],' +
                                            '.element[data-type="value_datetime"],' +
                                            '.element[data-type="value_select"],' +
                                            '.element[data-type="drop_down_button"]').data('type');
                    if(typeof(type) == 'undefined') return true;

                    switch(type){
                        case 'value_scalar':
                            schema.push({
                                "type": type,
                                "value": null,
                                "value_condition": $(this).find('.element[data-type="value_condition"]').val(),
                                "value_value": [$(this).find('.element_filter[data-name="condition_value"]').val()]
                            });
                            break;
                        case 'value_select':
                            schema.push({
                                "type": type,
                                "value": [$(this).find('.element_filter[data-name="condition_value"]').val()]
                            });
                            break;
                        case 'drop_down_button':
                            schema.push({
                                "type": type,
                                "value": [$(this).find('.element_filter[data-name="condition_value"]').data('id')]
                            });
                            break;
                        case 'value_datetime':
                            var dates = [];
                            $(this).find('.element_filter[data-name="condition_value"]').each(function(i, ul){
                                var v = $(ul).val();
                                if(v){
                                    dates.push(v);
                                }
                            });
                            schema.push({
                                "type": type,
                                "value": null,
                                "value_condition": $(this).find('.element[data-type="value_condition"]').val(),
                                "value_value": (!$.isEmptyObject(dates) ? dates : '')
                            });
                            break;
                    }

                });

                return schema;
            },
            getSchemaOperationAnd : function(_this){
                var schema = [
                  {
                    "type": "number_branches",
                    "value": _this.find('.element[data-type="number_branches"]').val(),
                  }
                ];
                return schema;
            },

            getSchemaOperationTask : function(_this){
                var execution_time_values = {
                                'days' : _this.find('.edit-view .element[data-type="execution_time"][name="days"]').val(),
                            };

                var schema = [{
                        'type' : 'copy_id',
                        'value' : _this.find('.edit-view').data('copy_id'),
                    }, {
                        'type' : 'card_id',
                        'value' : _this.find('.edit-view').data('id'),
                    }, {
                        'type' : 'sdm_operation_task',
                        'value' : _this.find('.edit-view .element[data-type="sdm_operation_task"]').val(),
                    }, {
                        'type' : 'execution_time',
                        'value' : execution_time_values,
                    }
                ];

                return schema;
            },
            getSchemaOperationAgreetment : function(_this){
                var execution_time_values = {
                                'days' : _this.find('.edit-view .element[data-type="execution_time"][name="days"]').val(),
                            };

                var schema = [{
                    'type' : 'copy_id',
                    'value' : _this.find('.edit-view').data('copy_id'),
                }, {
                    'type' : 'card_id',
                    'value' : _this.find('.edit-view').data('id'),
                }, {
                    'type' : 'sdm_operation_task',
                    'value' : _this.find('.edit-view .element[data-type="sdm_operation_task"]').val(),
                }, {
                    'type' : 'type_agreetment',
                    'value' : _this.find('.edit-view .element[data-type="type_agreetment"]').val(),
                }, {
                    'type' : 'email',
                    'value' : (_this.find('.edit-view .element[data-type="type_agreetment"]').val() == 'external' ?_this.find('.edit-view .element[data-type="email"]').val() : ''),
                }, {
                    'type' : 'execution_time',
                    'value' : execution_time_values,
                }
                ];

                return schema;
            },
            getSchemaOperationNotification : function(_this){
                var schema = [{
                    'type' : 'type_message',
                    'value' : _this.find('.element[data-type="type_message"]').val()
                }, {
                    'type' : 'service_name',
                    'value' : _this.find('.element[data-type="service_name"]').val()
                }, {
                    'type' : 'service_vars',
                    'value' : ProcessObj.BPM.operationParams.getSchemaOperationNotificationElements(_this)
                }
                ];

                return schema;
            },
            getSchemaOperationDataRecord : function(_this){
                var schema = [];
                $(_this).find('.element').each(function(i, ul){
                    var type = $(ul).data('type');
                    var value = null;
                    var add_value = false;
                    switch(type){
                        case 'type_operation':
                            value = $(ul).val();
                            add_value = true;
                            break;
                        case 'module_name':
                            value = $(ul).val();
                            add_value = true;
                            break;
                        case 'record_name_list':
                            value = $(ul).val();
                            add_value = true;
                            /*
                            schema.push({
                                'type' : type,
                                'title' : $(ul).find('.element_relate').text(),
                                'value' : {'relate_copy_id' : $(ul).find('.element_relate').data('relate_copy_id'), 'relate_data_id' : $(ul).find('.element_relate').data('id')},
                            });
                            */
                            break;
                        case 'record_name_text':
                            value = $(ul).val();
                            add_value = true;
                            break;
                        case 'call_edit_view':
                            value = $(ul).val();
                            add_value = true;
                            break;
                        case 'required_fields':
                            var required_fields = $(ul).val();
                            if(required_fields){
                                required_fields = required_fields.toString();
                            } else {
                                required_fields = null;
                            }
                            value = required_fields;
                            add_value = true;
                            break;
                        case 'message':
                            value = $(ul).val();
                            add_value = true;
                            break;
                        case 'value_block':
                            $(ul).find('.element[data-type="value_value"]').each(function(i, ul) {
                                var column = $(ul).closest('.column_half');
                                var field_type = $(ul).data('field_type');
                                switch(field_type) {
                                    case 'display':
                                    case 'relate_string':
                                    case 'string':
                                    case 'numeric':
                                        var value_value = column.find('.element[data-type="value_value"] .column>.form-control').val();
                                        break;
                                    case 'select':
                                    case 'logical':
                                        var value_value = column.find('select.select').val();
                                        break;
                                    case 'relate':
                                    case 'relate_this':
                                        var value_value = {'relate_copy_id' : $(ul).find('.element_relate').data('relate_copy_id'), 'relate_data_id' : $(ul).find('.element_relate').data('id')}
                                        break;
                                    case 'relate_participant':
                                        var value_value = {'ug_id' : $(ul).find('.element_relate_participant').data('ug_id'), 'ug_type' : $(ul).find('.element_relate_participant').data('ug_type')}
                                        break;
                                    case 'datetime':
                                        var date = column.find('.element[data-type="value_value"] .column>.form-datetime .date').val();
                                        var time = column.find('.element[data-type="value_value"] .column>.form-datetime .time').val();
                                        var value_value = date+' '+time;
                                        break;
                                }
                                if (!value_value) {
                                    value_value = null;
                                }
                                schema.push({
                                    'type' : 'value_block',
                                    'value' : value_value,
                                    'field_name' : column.closest('.column').find('.element[data-type="value_field_name"]').val(),
                                    'counter' : column.closest('.column').closest('.inputs-group').find('.counter').text(),
                                });
                            });
                            break;
                        case 'label_add_value':
                            schema.push({
                                'type': type
                            });
                            break;

                    }

                    if(add_value) {
                        schema.push({
                            'type': type,
                            'value': value
                        });
                    }
                });


                return schema;
            },

            getSchemaOperationScenario : function(_this){
                var schema = [
                    {
                        "type": "script_text",
                        "value": _this.find('.element[data-type="script_text"]').val(),
                    },
                    {
                        "type": "script_type",
                        "value": _this.find('.element[data-type="script_type"]').val(),
                    }
                ];
                return schema;
            },

        },

        updateProcessStatus : function(process_status){
            ProcessObj.process_status = process_status;
            this.setProcessStatus(process_status);
        },




        getDataForChangeParams : function(_this, _element_name){

            if(_element_name == 'begin'){
                var data = {
                    'process_id': ProcessObj.process_id,
                    'unique_index': $(_this).closest('.element[data-type="params"][data-module="process"]').data('unique_index'),
                    'element_name': _element_name,
                    'action': 'changed_' + $(_this).data('type'),
                    'params': {
                        'schema_operation': ProcessObj.BPM.operationParams.getSchemaOperation(_element_name, $(_this).closest('.element[data-name="'+_element_name+'"]'))
                    }
                }
            } else if(_element_name == 'condition'){
                var data = {
                    'process_id': ProcessObj.process_id,
                    'unique_index': $(_this).closest('.element[data-type="params"][data-module="process"]').data('unique_index'),
                    'element_name': _element_name,
                    'action': 'changed_' + $(_this).data('type'),
                    'params': {
                        'schema_operation': ProcessObj.BPM.operationParams.getSchemaOperation(_element_name, $(_this).closest('.element[data-name="'+_element_name+'"]'))
                    }
                }
            } else if(_element_name == 'data_record'){
                var data = {
                    'process_id': ProcessObj.process_id,
                    'unique_index': $(_this).closest('.element[data-type="params"][data-module="process"]').data('unique_index'),
                    'element_name': _element_name,
                    'action': 'changed_' + $(_this).data('type'),
                    'params': {
                        'schema_operation': ProcessObj.BPM.operationParams.getSchemaOperation(_element_name, $(_this).closest('.element[data-name="'+_element_name+'"]')),
                        'field_name' : $(_this).val(),
                    }
                }
            } else if(_element_name == 'notification'){
                var data = {
                    'process_id': ProcessObj.process_id,
                    'unique_index': $(_this).closest('.element[data-type="params"][data-module="process"]').data('unique_index'),
                    'element_name': _element_name,
                    'action': 'changed_' + $(_this).data('type'),
                    'params': {
                        'schema_operation': ProcessObj.BPM.operationParams.getSchemaOperation(_element_name, $(_this).closest('.element[data-name="'+_element_name+'"]')),
                    }
                }
            }  else if(_element_name == 'timer'){
                var data = {
                    'process_id': ProcessObj.process_id,
                    'unique_index': $(_this).closest('.element[data-type="params"][data-module="process"]').data('unique_index'),
                    'element_name': _element_name,
                    'action': 'changed_' + $(_this).data('type'),
                    'params': {
                        'schema_operation': ProcessObj.BPM.operationParams.getSchemaOperation(_element_name, $(_this).closest('.element[data-name="'+_element_name+'"]')),
                    }
                }
            }

            return data;
        },

        changeParamsContent : function(_this, _element_name, callback){
            var data = this.getDataForChangeParams(_this, _element_name);

            AjaxObj
                .createInstance()
                .setData(data)
                .setAsync(false)
                .setUrl('/module/BPM/changeParamsContent/' + ProcessObj.copy_id)
                .setCallBackSuccess(function(data){
                    if(data.status == 'access_error'){
                        Message.show(data.messages, false);
                    } else {
                        if(data.status){
                            callback(data)
                        } else {
                            Message.show(data.messages, false);
                        }
                    }
                })
                .setCallBackError(function(jqXHR, textStatus, errorThrown){
                    Message.showErrorAjax(jqXHR, textStatus);
                })
                .send();
        },




        autoShowTask : function(unique_index){
            if(typeof unique_index == 'undefined'){
                var url = location.href;
                if(url.match(/unique_index=/)){
                    var unique_index = url.match(/unique_index=(\w*)/)[1];
                    $('.element[data-unique_index="' + unique_index + '"] .bpm_body').trigger('click');

                    Preloader.afterPreloader();
                }
            } else {
                $('.element[data-unique_index="' + unique_index + '"] .bpm_body').trigger('click');
            }
        },



        /**
         * updateRelateModule
         */
        updateRelateModule : function(_this, callback){
            var data = {
                'process_id' : ProcessObj.process_id,
                'copy_id' : $(_this).data('id')
            }

            var ajax = new Ajax();
            ajax
                .setData(data)
                .setAsync(false)
                .setUrl('/module/BPM/updateRelateModule/' + ProcessObj.copy_id)
                .setCallBackSuccess(function(data){
                    if(data.status == 'access_error'){
                        Message.show(data.messages, false);
                    } else {
                        if(typeof(callback) == 'function') callback(data.status);
                    }
                })
                .setCallBackError(function(jqXHR, textStatus, errorThrown){
                    Message.showErrorAjax(jqXHR, textStatus);
                })
                .send();
        },


        /**
         * getBpmParamsData
         */
        getBpmParamsData : function(action, process_id, _this){
            var bpm_block = $('.bpm_block');
            var responsible = bpm_block.find('.element[data-type="responsible"]'); //[data-ug_type="group"]
            if(action == ProcessObj.PROCESS_BPM_PARAMS_ACTION_CHECK && typeof(bpm_block) != 'undefined' && bpm_block.length != 0 && responsible.length == 0){
                return null;
            }

            var objects = {};

            if(ProcessObj.binding_object_check){
                objects.binding_object = null;
            }
            objects.participants = null;
            if(process_id === null){
                process_id = ProcessObj.process_id;
            }

            var data = {
                'action' : action,
                'process_id' : process_id,
                'objects' : objects
            }

            if(_this !== null){
                var binding_object = $(_this).closest('.sm_extension').find('.element[data-type^="relate_object_block"] .element[data-type="drop_down_button"]');
                var participant_object = $(_this).closest('.sm_extension').find('.element[data-type^="participant_block"] .element[data-type="drop_down_button"]');

                if(action == ProcessObj.PROCESS_BPM_PARAMS_ACTION_UPDATE && (typeof(binding_object) == 'undefined' || binding_object.length == false) && (typeof(participant_object) == 'undefined' || participant_object.length == false)){
                    return;
                }
            }

            switch(action){
                case ProcessObj.PROCESS_BPM_PARAMS_ACTION_UPDATE :
                    // binding_oblect
                    if(typeof(binding_object) != 'undefined' && binding_object){
                        data.objects.binding_object = {'attributes': null};
                        data.objects.binding_object.attributes = {
                            'copy_id': binding_object.data('relate_copy_id'),
                            'data_id': binding_object.data('id'),
                        }
                    }

                    //participants
                    if(typeof(participant_object) != 'undefined' && participant_object){
                        data.objects.participants = [];
                        participant_object.each(function(i, ul){
                            data.objects.participants.push(
                                {
                                    'ug_id' : $(ul).closest('.element[data-type^="participant_block"]').data('ug_id'),
                                    'ug_type' : $(ul).closest('.element[data-type^="participant_block"]').data('ug_type'),
                                    'attributes' : {
                                        'ug_id': $(ul).data('ug_id'),
                                        'ug_type': $(ul).data('ug_type'),
                                    }
                                }
                            );
                        })
                    }
                    break;
            }

            return data;
        },

        /**
         * bpmParamsRun
         */
        bpmParamsRun : function(action, _this){
            var _data = ProcessObj.BPM.getBpmParamsData(action, ProcessObj.process_id, _this);

            if(_data === null){
                return;
            }

            AjaxObj
                .createInstance()
                .setData(_data)
                .setAsync(false)
                .setUrl('/module/BPM/bpmParamsRun/' + ProcessObj.copy_id)
                .setCallBackSuccess(function(data){
                    if(data.status == 'access_error'){
                        Message.show(data.messages, false);
                    } else {
                        if(data.status == false && data.message){
                            modalDialog.hide();
                            modalDialog.show(data.message, true);
                        } else
                        if(data.status == true) {

                            ProcessObj.BPM.updateProcessStatus(data.process_status);
                            ProcessObj.refreshStatus(data.schema, 'all');
                            HeaderNotice.refreshAllHeaderNotices();

                            if(action == ProcessObj.PROCESS_BPM_PARAMS_ACTION_UPDATE && data.group_data['participants'] !== null){
                                ProcessObj.BPM.participants.runActionChange($(_this).closest('.sm_extension'), false);
                            }

                            modalDialog.hide();

                            if(_data['action'] == ProcessObj.PROCESS_BPM_PARAMS_ACTION_UPDATE && data.params_repeat && data.params_repeat.status == false){
                                modalDialog.show(data.params_repeat.message, true);
                            }

                            if(ProcessObj.binding_object_check){
                                ProcessObj.binding_object_check = false;
                                // run process
                                var bpm_params_run = false;
                                if(ProcessObj.process_status != ProcessObj.PROCESS_B_STATUS_IN_WORK &&
                                   _data['action'] == ProcessObj.PROCESS_BPM_PARAMS_ACTION_UPDATE &&
                                   data.params_repeat && data.params_repeat.status == true)
                                {
                                    bpm_params_run = true;
                                }
                                ProcessObj.BPM.switchProcessStatus($('.element[data-type="actions"] .element[data-type="start"]'), bpm_params_run);

                            }
                        }

                    }
                })
                .setCallBackError(function(jqXHR, textStatus, errorThrown){
                    Message.showErrorAjax(jqXHR, textStatus);
                })
                .send();
        },



        /**
         * elementsActions - actions on elements.
         */
        elementsActions : {

            /**
             * for operations: begin, timer
             */
            runOnTime : {
                elements : {
                    'start_on_time_disabled' : null,
                    'start_on_time_disposable_start' : ['date'],
                    'start_on_time_regular_start' : {
                        'periodicity_year' : 'date',
                        'periodicity_quarter' : 'quarter',
                        'periodicity_month' : 'day_in_month',
                        'periodicity_week' : 'week',
                        'periodicity_day' : 'time',
                    },
                    'start_on_time_determined' : ['days', 'hour', 'minutes'],
                    'start_on_before_time' : ['object_name', 'relate_module', 'field_name', 'days', 'hour', 'minutes'],
                    'start_on_after_time' : ['object_name', 'relate_module', 'field_name', 'days', 'hour', 'minutes'],
                    'start_on_after_created_entity' : ['object_name'],
                    'start_on_after_changed_entity' : ['object_name', 'field_name', 'value_scalar', 'label_add_value']
                },

                startOnTimeChanged : function(_this){
                    var element_type = $(_this).val();
                    var inputs_block = $(_this).closest('.inputs-block');
                    var unique_index = $(_this).closest('.element[data-module="process"]').data('unique_index');

                    $(_this).closest('.inputs-block').find('li.dinamic').remove();

                    switch(element_type) {
                        case 'start_on_time_disposable_start':
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.date));
                            ProcessObj.initDatePicker();
                            ProcessObj.initTimePicker();
                            inputs_block.find('.todo-remove').hide();
                            break;

                        case 'start_on_time_regular_start':
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.periodicity));
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.date));
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.label_add_date));
                            Global.initSelects();
                            ProcessObj.initDatePicker();
                            ProcessObj.initTimePicker();
                            inputs_block.find('.todo-remove').hide();
                            break;

                        case 'start_on_time_determined':
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.days));
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.hour));
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.minutes));
                            break;

                        case 'start_on_before_time':
                        case 'start_on_after_time':
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.object_name));
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.relate_module));
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.field_name));
                            Global.initSelects();
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.days));
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.hour));
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.minutes));
                            break;

                        case 'start_on_after_created_entity':
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.object_name));
                            Global.initSelects();
                            break;

                        case 'start_on_after_changed_entity':
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.object_name));
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.field_name));
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.value_scalar));
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.label_add_value));
                            Global.initSelects();
                            $(_this).closest('.element[data-type="params"]').find('.element[data-type="object_name"]').trigger('change');
                            break;
                    }
                    return;
                },


                periodicityChanged : function(_this){
                    var element_type = $(_this).val();
                    var inputs_block = $(_this).closest('.inputs-block');
                    var unique_index = $(_this).closest('.element[data-module="process"]').data('unique_index');

                    // remove old
                    element_list = [];
                    $.each(ProcessObj.BPM.elementsActions.runOnTime.elements.start_on_time_regular_start, function(key, value){
                        element_list.push(value);
                    })

                    if(element_list.length) {
                        for (var i = 0; i < element_list.length; i++) {
                            inputs_block.find('.element[data-type="' + element_list[i] + '"]').closest('li.dinamic').remove();
                        }
                        inputs_block.find('.element[data-type="label_add_date"]').closest('li.dinamic').remove();
                    }

                    // add new
                    switch(element_type) {
                        case 'periodicity_year':
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.date));
                            ProcessObj.initDatePicker();
                            ProcessObj.initTimePicker();
                            inputs_block.find('.todo-remove').hide();
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.label_add_date));
                            break;
                        case 'periodicity_quarter':
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.quarter));
                            Global.initSelects();
                            ProcessObj.initTimePicker();
                            inputs_block.find('.todo-remove').hide();
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.label_add_date));
                            break;
                        case 'periodicity_month':
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.day_in_month));
                            Global.initSelects();
                            ProcessObj.initTimePicker();
                            inputs_block.find('.todo-remove').hide();
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.label_add_date));
                            break;
                        case 'periodicity_week':
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.week));
                            Global.initSelects();
                            ProcessObj.initTimePicker();
                            inputs_block.find('.todo-remove').hide();
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.label_add_date));
                            break;
                        case 'periodicity_day':
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.time));
                            ProcessObj.initTimePicker();
                            inputs_block.find('.todo-remove').hide();
                            inputs_block.append($(ProcessObj.BPM.operationParams.settings[unique_index].elements.label_add_date));
                            break;
                    }
                    return;
                },

                labelAddDate : function(typeElement, _thisLi, unique_index){
                    switch(typeElement) {
                        case 'periodicity_year':
                            _thisLi.before($(ProcessObj.BPM.operationParams.settings[unique_index].elements.date));
                            ProcessObj.initDatePicker();
                            break;
                        case 'periodicity_quarter':
                            _thisLi.before($(ProcessObj.BPM.operationParams.settings[unique_index].elements.quarter));
                            Global.initSelects();
                            break;
                        case 'periodicity_month':
                            _thisLi.before($(ProcessObj.BPM.operationParams.settings[unique_index].elements.day_in_month));
                            Global.initSelects();
                            break;
                        case 'periodicity_week':
                            _thisLi.before($(ProcessObj.BPM.operationParams.settings[unique_index].elements.week));
                            Global.initSelects();
                            break;
                        case 'periodicity_day':
                            _thisLi.before($(ProcessObj.BPM.operationParams.settings[unique_index].elements.time));
                            break;
                    }
                    ProcessObj.initTimePicker();
                    return;
                },

            },
        },




        /**
         * participants
         */
        participants : {
            getDataForShow : function(_this, action){
                var data = {
                    'process_id' : ProcessObj.process_id,
                    'action' : action,
                }
                switch(action){
                    case 'add' :
                        data['ug_id'] = null;
                        data['ug_type'] = null;
                        break;

                    case 'change' :
                        data['ug_id'] = $(_this).closest('.element[data-type="responsible"]').data('ug_id');
                        data['ug_type'] = $(_this).closest('.element[data-type="responsible"]').data('ug_type');
                        data['unique_index'] = $(_this).closest('.element[data-type="responsible"]').data('unique_index');
                        break;
                }

                return data;
            },

            show : function(_this, action){
                var data = this.getDataForShow(_this, action);

                var ajax = new Ajax();
                ajax
                    .setData(data)
                    .setAsync(false)
                    .setUrl('/module/BPM/showParticipant/' + ProcessObj.copy_id)
                    .setCallBackSuccess(function(data){
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status){
                                modalDialog.show(data.html, true);
                            } else {
                                Message.show(data.messages, false);
                            }
                        }
                    })
                    .setCallBackError(function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                    })
                    .send();
            },

            runAction : function(_this, action){
                switch(action){
                    case 'add' :
                        this.runActionAdd(_this)
                        break;
                    case 'change' :
                        this.runActionChange(_this, true)
                        break;
                }
            },

            runActionAdd : function(_this){
                var respBlock = ProcessObj.BPM.elements.responsible;
                var relate_participant = $(_this).find('.element[data-type="drop_down_button"]');
                if (relate_participant.val()) {
                    $(respBlock).insertAfter('.bpm_block .bpm_unit:last');
                    $('.element[data-type="responsible"]:last').find('.bpm_uname_title').text(relate_participant.val()+'')

                    $('.element[data-type="responsible"]:last')
                        .attr('data-ug_id', relate_participant.data('ug_id'))
                        .attr('data-ug_type', relate_participant.data('ug_type'))
                        .attr('data-unique_index', $(_this).closest('.sm_extension').data('unique_index'));

                    ProcessObj.dragInit();
                    ProcessObj.dropInit();
                    modalDialog.hide();
                    ProcessObj.BPM.saveSchema();
                    ProcessObj.activateDropdowns();
                } else {
                    if (!relate_participant.next().is('.errorMessage')) {
                        relate_participant.after('<div class="errorMessage">'+Message.translate_local('You must select the participant')+'</div>');
                    }
                }
            },


            runActionChange : function(_this, save_schema){
                $(_this).find('.element[data-type^="participant_block"] .element[data-type="drop_down_button"]').each(function(i1, ul1){
                    var ug_id = $(ul1).closest('.element[data-type^="participant_block"]').data('ug_id');
                    var ug_type = $(ul1).closest('.element[data-type^="participant_block"]').data('ug_type');

                    $('.bpm_block .element[data-type="responsible"]').each(function(i, ul){
                        if($(ul).data('unique_index') == $(_this).data('unique_index')){
                            $(ul).find('.bpm_uname_title').text($(ul1).text());
                            $(ul).data('ug_id', $(ul1).data('ug_id'));
                            $(ul).data('ug_type', $(ul1).data('ug_type'));
                            return true;
                        }
                    });
                })

                modalDialog.hide();
                if(save_schema) ProcessObj.BPM.saveSchema();
            },

        },


        prepateFilterDateTime : function(_this){
            // show single calendar
            if ($(_this).find('.dateinput').length) {
                var $dateinput = $(_this).find('.dateinput')
                Filter.singleCalendar($dateinput);
                $dateinput.datepicker('setDate', $dateinput.attr('value'));
            } else
            // show range calendar
            if ($(_this).find('.dp1').length) {
                var $dp1 = $(_this).find('.dp1'),
                    $dp2 = $(_this).find('.dp2');
                Filter.rangeCalendar($dp1, $dp2);
                date1 = 0;
                date2 = 0;
            }
        },





    },
    /* BPM end */




    /**
     * createFromTemplate
     */
    createFromTemplate : function(_this, process_id, callback){
        var time,
            ajax = new Ajax(),
            data = {
            'process' :  {
                'module_title' : $(_this).closest('.sm_extension').find('.element[data-type="project_name"]').val(),
                'process_id' : process_id,
                'b_status' : ProcessObj.PROCESS_B_STATUS_IN_WORK,
                'parent_copy_id' : $(_this).closest('.sm_extension').data('parent_copy_id'),
                'parent_data_id' : $(_this).closest('.sm_extension').data('parent_data_id'),
            },
            'bpm_params' : ProcessObj.BPM.getBpmParamsData(ProcessObj.PROCESS_BPM_PARAMS_ACTION_UPDATE, process_id, _this)
        }

        //Base.btnSaveSetDisabled($(_this), true);

        ajax
            .setData(data)
            .setAsync(false)
            .setUrl('/module/listView/createFromTemplate/' + ProcessObj.copy_id)
            .setDataType('json')
            .setCallBackSuccess(function(data){
                //Base.btnSaveSetDisabled($(_this), false);
                if(data.status == 'access_error' || data.status == 'error'){
                    Message.show(data.messages, false);
                } else if(data.status == 'error_validate'){
                    $(_this).closest('.sm_extension').find('.element[data-type="objects"] .errorMessage').each(function(i,ul){
                        $(ul).html('');
                    })
                    $.each(data.messages, function(data_type, message){
                        $(_this).closest('.sm_extension').find('.element[data-type="objects"] .element[data-type="'+data_type+'"] .errorMessage').html(message);
                    });
                } else if(data.status){
                    callback(data);
                }
            })
            .setCallBackError(function(jqXHR, textStatus, errorThrown){
                Message.showErrorAjax(jqXHR, textStatus);
            });

        time = setTimeout(function () {
            clearTimeout(time);
            ajax.send();
        })
    },



    activateDropdowns : function(){
        $('body').off('click').on('click', function (e) {
            if (!$('.crm-dropdown').is(e.target)
                && $('.crm-dropdown').has(e.target).length === 0
                && $('.open').has(e.target).length === 0
            ) {
                var $editView = $('.modal-dialog:visible');
                if ($editView.find('.client-name .edit-dropdown.open').length) {
                    EditView.setTitle($editView);
                }

                $('.crm-dropdown').removeClass('open');
            }
            $('.crm-dropdown').filter('.opened').removeClass('opened').addClass('open');
        });

        $(document).on('click','.inputs-block [data-type="service_vars"] .crm-dropdown .select.open .dropdown-menu.inner.selectpicker li.selected', function () {
            $(this).closest('.select.open').removeClass('open');
        });

        $('.crm-dropdown > .dropdown-toggle').removeAttr('data-toggle').on('click',function(){
            $('.crm-dropdown.open').removeClass('open');
            $(this).parent().toggleClass('open');
        });
    },
    getDirectionBpmUnit: function(currentBpmUnit, fromBpmUnit){ // get direction where located first element by second element
        var direction = null;
        if (currentBpmUnit.offset().top > fromBpmUnit.offset().top) {
            direction = false; // currentBpmUnit in bottom
        } else {
            if (currentBpmUnit.offset().top < fromBpmUnit.offset().top){
                direction = true; // currentBpmUnit in top
            }
        }
        return direction;
    },
    getPositionOnHelper: function (operator, rowHelper) {
        var currentBpmUnit = operator.closest('.bpm_unit'),
            gridrow = parseInt(operator.attr('gridrow')),
            space = 0,
            fromBpmUnit = $('.bpm_unit.responsible'),
            bpmUnits = $('.bpm_unit.element');
        var _currentBpmUnit = currentBpmUnit,
            locationBpmOperator = ProcessObj.getDirectionBpmUnit(currentBpmUnit, fromBpmUnit);

        while (_currentBpmUnit.length>0) {
            var baseRows = parseInt(_currentBpmUnit.attr('rows'));
            if (!_currentBpmUnit.find(operator).length) {
                gridrow = 0; // empty responsible
            }
            if (_currentBpmUnit.data('ug_id') == fromBpmUnit.data('ug_id')) {
                _currentBpmUnit = [];
                gridrow = parseInt(operator.attr('gridrow'));
                if (locationBpmOperator == null) {
                    space += Math.abs(rowHelper - gridrow);
                } else {
                    space += (locationBpmOperator) ? rowHelper : baseRows - gridrow;
                }
            } else {
                space += (baseRows - gridrow);
            }

            var bpmUnit = bpmUnits.filter(_currentBpmUnit); //                   search down        search up
            _currentBpmUnit = (locationBpmOperator && _currentBpmUnit.length) ? bpmUnit.next() : bpmUnit.prev();
        }
        return space;
    },
    heightMarkInStruct: function (beginIndex, endIndex) {
        ProcessObj.BPM.markOperators(beginIndex, endIndex);
        var bpmOperator = $('.bpm_operator[data-unique_index]');
        var beginHelper = bpmOperator.filter('[data-unique_index="'+beginIndex+'"]');
        var endHelper = bpmOperator.filter('[data-unique_index="'+endIndex+'"]');
        var gridrow,
            maxElement = beginHelper,
            fromBpmUnit = endHelper.closest('.bpm_unit'),
            fromIndexUnit = parseInt(endHelper.attr('gridrow')),
            bpmUnits = $('.bpm_unit.element'),
            pathes = $('svg.arrows path.arrow'),
            branches = 0,
            branchesInUser = 0,
            minObject = 0,
            maxObject = 0,
            minOperatorInUser = 0,
            maxOperatorInUser = 0;

        bpmOperator.filter('[mark][data-unique_index="'+endIndex+'"]').removeAttr('mark');
        bpmOperator.filter('.condrag').removeAttr('mark');

        bpmOperator.not('.and_helper').filter('[mark]').each(function () {
            var _this = $(this),
                space = 0;
            var currentBpmUnit = _this.closest('.bpm_unit');
            var _currentBpmUnit = currentBpmUnit;
            gridrow = parseInt(_this.attr('gridrow'));
            var _row = gridrow;

            while (_currentBpmUnit.length>0) {
                var direction = null;

                if (_currentBpmUnit.offset().top > fromBpmUnit.offset().top) {
                    direction = true; // up
                } else {
                    if (_currentBpmUnit.offset().top < fromBpmUnit.offset().top){
                        direction = false; // bottom
                    }
                }

                if (!_currentBpmUnit.find(_this).length) {
                    gridrow = 0; // empty responsible
                    if (currentBpmUnit.offset().top > fromBpmUnit.offset().top) {
                        space += parseInt(fromBpmUnit.attr('rows')) - fromIndexUnit;
                    } else {
                        if (currentBpmUnit.offset().top < fromBpmUnit.offset().top) {
                            space += fromIndexUnit;
                        }
                    }
                    if (direction == null) {
                        _currentBpmUnit = [];
                    }
                } else {
                    if (direction == null) {
                        space += Math.abs(fromIndexUnit - _row);
                        _currentBpmUnit = [];
                    } else {
                        space += (direction) ? gridrow : parseInt(_currentBpmUnit.attr('rows')) - gridrow;
                    }
                }

                if ((currentBpmUnit.offset().top < fromBpmUnit.offset().top) && _currentBpmUnit.length) {
                    _currentBpmUnit =  bpmUnits.filter(_currentBpmUnit).next();
                } else {
                    if ((currentBpmUnit.offset().top > fromBpmUnit.offset().top) && _currentBpmUnit.length) {
                        _currentBpmUnit = bpmUnits.filter(_currentBpmUnit).prev();
                    }
                }
            }
            gridrow = parseInt(_this.attr('gridrow'));
            if (currentBpmUnit.offset().top < fromBpmUnit.offset().top && minObject < space) {
                minObject = space;
            }
            else
            if (currentBpmUnit.offset().top > fromBpmUnit.offset().top && maxObject < space) {
                maxObject = space;
            }
            else {
                //It is current usergroup
                if (minObject < space && gridrow < fromIndexUnit) {
                    minObject = space;
                }
                if (maxObject < space && gridrow > fromIndexUnit) {
                    maxObject = space;
                    maxElement = _this;
                }
                if (minOperatorInUser < space && gridrow < fromIndexUnit) {
                    minOperatorInUser = space;
                }
                if (maxOperatorInUser < space && gridrow > fromIndexUnit) {
                    maxOperatorInUser = space;
                }

            }

            //search empty branch
            var list = _this.filter('[end-branches]'); //.not('[data-unique_index="'+beginIndex+'"]');
            var beginItem = list.filter('[data-name="and"]').length ? list.filter('[data-name="and"]') : list.filter('[data-name="condition"]');
            if (beginItem.length)
            {
                branches += pathes.filter('[arr-begin="'+beginItem.data('unique_index')+'"][branch-end]').not('[branch-end="main"]').length;
            }
        });

        ProcessObj.BPM.unmarkOperators();

        if (maxElement) { //search empty branches in user
            var i,
                maxRow = parseInt(maxElement.attr('gridrow')),
                minCol = parseInt(bpmOperator.filter('[data-unique_index="'+beginIndex+'"]').attr('gridcol')),
                toCol = parseInt( bpmOperator.filter('[data-unique_index="'+endIndex+'"]').attr('gridcol'));
            var realMax = {
                row: maxRow,
                countEmptyBranches: 0
            };
            bpmOperator = maxElement.closest('.bpm_unit').find(bpmOperator);

            for ( i=minCol+1; i<toCol; i++) {
                var j = maxRow;
                while (j) {
                    var item = bpmOperator.filter('[gridcol="'+i+'"][gridrow="'+j+'"]');
                    if (item.length) {
                        if (item.is('[end-branches]')){
                            var rowMaxElement = 0,
                                maxBpmOperator = [],
                                index = item.data('unique_index'),
                                rowBase = parseInt(item.attr('gridrow'));
                            var countEmptyBranches = pathes.filter('[arr-begin="'+index+'"][branch-end]').not('[branch-end="main"]').length,
                                countBranches = pathes.filter('[arr-begin="'+index+'"][branch]').length;

                            //i = parseInt($('.and_helper[data-unique_index="'+item.attr('end-branches')+'"]').attr('gridcol')); // continue from next row

                            if (countEmptyBranches != countBranches){ // for optimize; if exist more 1 branch;
                                ProcessObj.BPM.markOperators(index, item.attr('end-branches'));
                                var list = bpmOperator.filter('[mark]').not('[data-unique_index="' + index + '"]').not('.and_helper');

                                rowMaxElement = parseInt(list.first().attr('gridrow'));
                                maxBpmOperator = list.first();

                                list.each(function(){
                                    var _this = $(this);
                                    var row = parseInt(_this.attr('gridrow'));
                                    if (rowMaxElement < row) {
                                        rowMaxElement = row;
                                        maxBpmOperator = $(this);
                                    }
                                });
                                ProcessObj.BPM.unmarkOperators();
                            }
                            rowMaxElement = (rowMaxElement < rowBase) ? rowBase: rowMaxElement;

                            var diffRow = rowMaxElement ?  rowMaxElement + countEmptyBranches : rowBase + countEmptyBranches,
                                rowOutsideMaxElement = parseInt(maxElement.attr('gridrow'));

                            if (!realMax.row) {
                                realMax.row = diffRow;
                                realMax.countEmptyBranches = countEmptyBranches;
                            } else {
                                if (realMax.row <= diffRow) {
                                    realMax.row = diffRow;
                                    realMax.countEmptyBranches = (rowMaxElement > rowOutsideMaxElement) ? diffRow - rowMaxElement : diffRow - rowOutsideMaxElement;
                                }
                            }
                        };
                        j = 1; // exit
                    }
                    j--;
                }
            }
            branchesInUser = realMax.countEmptyBranches;
        }

        return {
            top: minObject,
            bottom : maxObject,
            emptyBranches: branches,
            currentUser: {
                top: minOperatorInUser,
                bottom: maxOperatorInUser,
                emptyBranches: branchesInUser,
            }
        };
    },
    moveToPlace: function (event, toRow) { // change position inner operators below basic row in 1 responsible
        var unique_index = $(event.target).data('unique_index');
        var endBranches = $(event.target).attr('end-branches');
        var fromIndexRow = parseInt($(event.target).attr('gridrow')),
            fromBpmUnit = $('.bpm_unit.responsible'),
            heightMark = ProcessObj.heightMarkInStruct(unique_index, endBranches),
            bpmOperator = $('.bpm_operator[data-unique_index]'),
            placeTo = $('.tmp_target'),
            bpmUnits = $('.bpm_unit.element');

        ProcessObj.BPM.markOperators(unique_index, endBranches);
        bpmOperator.filter('[data-unique_index="'+unique_index+'"]').removeAttr('mark');
        bpmOperator.filter('[data-unique_index="'+endBranches+'"]').removeAttr('mark');

        if (placeTo.data('ug_id') == fromBpmUnit.data('ug_id')) { // not offset operator what exist in other responsible
            $('.bpm_unit').not('.responsible').find(bpmOperator).filter('[mark]').removeAttr('mark');
        }

        if (toRow - heightMark.top >= 1) { //scheme placed
            bpmOperator.filter('[mark]').each(function () {
                var _this = $(this).removeAttr('mark');
                var gridrow = parseInt(_this.attr('gridrow'));

                if (_this.closest('.bpm_unit').data('ug_id') != fromBpmUnit.data('ug_id')) {
                    gridrow = ProcessObj.getPositionOnHelper(_this, fromIndexRow);
                } else {
                    gridrow -= fromIndexRow;
                }

                if (!gridrow) {
                    gridrow = toRow;
                } else  gridrow = (gridrow>0) ? gridrow + toRow : toRow - Math.abs(gridrow);

                _this.attr('gridrow', gridrow);
                // analized responsible
                if (placeTo.data('ug_id') != fromBpmUnit.data('ug_id') || (placeTo.find(_this).length)) {
                    _this.appendTo(placeTo.find('.bpm_tree'));
                } else  {
                    _this.appendTo(_this.closest('.bpm_tree'));
                }

            });
            ProcessObj.BPM.unmarkOperators();
        } else { //scheme + offset in bottom
            bpmOperator.filter('[mark]').each(function () {
                var _this = $(this);
                var gridrow = parseInt(_this.attr('gridrow')),
                    locationBpmOperator = ProcessObj.getDirectionBpmUnit(_this.closest('.bpm_unit'), fromBpmUnit);

                var delta = ProcessObj.getPositionOnHelper(_this, fromIndexRow);
                var attitudeToMin = Math.abs(delta - heightMark.top);

                if (locationBpmOperator) {
                    gridrow = toRow + attitudeToMin; // row(operator) < row (base helper)
                } else {
                    if (locationBpmOperator == null) { // ? row(operator) == row (base helper) : row(operator) > row (base helper)
                        if (fromIndexRow >= gridrow) {
                            var attitudeToBase = Math.abs(fromIndexRow - parseInt(_this.attr('gridrow')));
                            var attitudeToMin = Math.abs(attitudeToBase - heightMark.top);
                            gridrow = toRow + attitudeToMin;
                        } else if (fromIndexRow < gridrow) {
                            gridrow = toRow + heightMark.top + (gridrow - fromIndexRow);
                        }
                    } else gridrow = toRow + delta + heightMark.top;
                }

                _this.attr('gridrow', gridrow);
                // analized responsible
                if (placeTo.data('ug_id') != fromBpmUnit.data('ug_id') || (placeTo.find(_this).length)) {
                    _this.appendTo(placeTo.find('.bpm_tree'));
                } else  {
                    _this.appendTo(_this.closest('.bpm_tree'));
                }
            });
        }
    },
    dragInit : function(){
        var insertCandidat;

        $( 'div.bpm_operator' ).draggable({
            handle: '.bpm_body', 
            helper: 'clone',
            cancel: '.fake_operator, .and_helper',
            distance: 10,
            start: function( event, ui ) {
                var helper = $(ui.helper).addClass('condrag')
                if (helper.is('[end-branches]')) {
                    var beginInd = helper.data('unique_index');
                    var endInd = $('svg path.arrow[arr-begin="'+helper.attr('end-branches')+'"]').attr('arr-end');
                    ProcessObj.BPM.markOperators(beginInd, endInd);
                    ProcessObj.BPM.restrictArrows();
                    ProcessObj.BPM.unmarkOperators();
                }
            },
            drag: function( event, ui ) {
                insertionPermission = false;
                helperFollow = false;

                var $clone = $('.condrag'),
                    bpmTree = $('.target .bpm_tree'),
                    arrows = $('svg.arrows'),
                    $target = $('.target'),
                    circle = {
                        coordinate: null,
                        $: CircleController.hide()
                    },
                    listAngleUnResolved = [];

                insertCandidat = {
                    status: null,
                    $:null,
                    begOperator: null,
                    endOperator: null
                };

                if (bpmTree.length>0) {//тут нужен будет рефакторинг
                    var conDTop1 = (Math.round((ui.offset.top-bpmTree.offset().top)/100+1)-1)*100+18+bpmTree.offset().top-arrows.offset().top;
                    var conDLeft1 = (Math.round((ui.offset.left-bpmTree.offset().left)/180+1)-1)*180+90+bpmTree.offset().left-arrows.offset().left;
                    var gridRow = Math.round((ui.offset.top-bpmTree.offset().top)/100+1);
                    var gridCol = Math.round((ui.offset.left-bpmTree.offset().left)/180+1);

                    if (gridRow<1 || gridRow>$('.target').attr('rows')) {
                        conDLeft1 = '-10';
                        conDTop1 = '-10';
                        insertionPermission = false;
                    } else {
                        insertionPermission = true;
                        if (bpmTree.find('.bpm_operator[gridrow="'+gridRow+'"][gridcol="'+gridCol+'"]').length>0 && gridCol!=1) {
                            conDLeft1 = conDLeft1-90;
                        }
                    }
                    arrows.find('path.arrow').not('[restrict]').each(function(){
                        var $this = $(this),
                            arrArr = $this.attr('d'),
                            arrArr = arrArr.split(' ');

                        if ($this.attr('branch') || $this.attr('branch-end')) {
                            if (arrArr.length == 21) {
                                if (arrArr[5]==conDTop1 && arrArr[4]<conDLeft1 && conDLeft1<arrArr[7]) {
                                    insertCandidat.$ = $this;
                                }
                                listAngleUnResolved.push(arrArr[4]+'-'+arrArr[5]);
                            } else if (arrArr.length == 18) {
                                if ((arrArr[5]==conDTop1 && arrArr[4]<conDLeft1 && conDLeft1<arrArr[7])
                                    || (arrArr[2]==conDTop1 && arrArr[1]<conDLeft1 && conDLeft1<arrArr[4])) {
                                    insertCandidat.$ = $this;
                                }
                                listAngleUnResolved.push(arrArr[4]+'-'+arrArr[5]);
                            } else {
                                if (arrArr.length == 15 && arrArr[2]==conDTop1 && arrArr[1]<conDLeft1 && conDLeft1<arrArr[4]) {
                                    insertCandidat.$ = $this;
                                }
                            }
                        } else {
                            if (arrArr.length == 18 && (arrArr[5]==conDTop1 && arrArr[4]<conDLeft1 && conDLeft1<arrArr[7])
                                || arrArr.length == 15 && (arrArr[2]==conDTop1 && arrArr[1]<conDLeft1 && conDLeft1<arrArr[4])) {
                                    insertCandidat.$ = $this;

                            }
                        }
                    });

                    if (insertCandidat.$ && insertCandidat.$.length) {
                        var begOperator = $('.bpm_operator[data-unique_index="'+insertCandidat.$.attr('arr-begin')+'"'),
                            endOperator = $('.bpm_operator[data-unique_index="'+insertCandidat.$.attr('arr-end')+'"');

                        insertCandidat.status = true;
                        insertCandidat.begOperator = {
                            $: begOperator,
                            col: parseInt(begOperator.attr('gridcol')),
                            row: parseInt(begOperator.attr('gridrow'))
                        }
                        insertCandidat.endOperator = {
                            $: endOperator,
                            col: parseInt(endOperator.attr('gridcol')),
                            row: parseInt(endOperator.attr('gridrow'))
                        }
                    }

                    if (!$clone.data('unique_index') && insertCandidat.status) {
                        if (insertCandidat.endOperator.$.data('name') == 'agreetment'
                           || ($clone.data('name') == 'agreetment' && insertCandidat.begOperator.$.data('name') != 'task')
                           || (insertCandidat.$.attr('stroke')!=='rgb(197, 197, 197)' && ProcessObj.mode == ProcessObj.PROCESS_MODE_RUN)) {
                            insertionPermission = false;
                        } else {
                            circle.coordinate = { cx: conDLeft1, cy: conDTop1}
                        }
                    } else if ($clone.data('unique_index')) { //тут нужен будет рефакторинг
                        if (insertCandidat.$) {
                            if ($clone.data('name') == 'and' && insertCandidat.$.attr('restrict')
                                || ($clone.data('name') == 'begin' || $clone.data('name') == 'end' || $clone.data('name') == 'and' && insertCandidat.$.attr('arr-begin')==$clone.attr('end-branches'))) {
                                insertionPermission = false;
                            } else if (insertCandidat.$.attr('arr-end') == $clone.data('unique_index') ||
                                insertCandidat.$.attr('arr-begin') == $clone.data('unique_index')) {
                                    if (insertCandidat.$.attr('arr-begin') == $clone.data('unique_index') &&
                                        insertCandidat.$.attr('branch-end') &&
                                        parseInt($('.bpm_operator[data-unique_index="'+insertCandidat.$.attr('arr-begin')+'"]').attr('gridcol'))==parseInt(gridCol) &&
                                        $clone.data('name')!='agreetment') { //special for end branches
                                        circle.coordinate = { cx: conDLeft1, cy: conDTop1}
                                    } else {
                                        insertionPermission = false;
                                    }
                            } else if (insertCandidat.$.attr('stroke')!=='rgb(197, 197, 197)' && ProcessObj.mode == ProcessObj.PROCESS_MODE_RUN
                                       || ($('.bpm_operator[data-unique_index="'+insertCandidat.$.attr('arr-end')+'"]').data('name') == 'agreetment')) {
                                insertionPermission = false;
                            } else if ($clone.data('name') == 'agreetment' && insertCandidat.begOperator.$.data('name') != 'task') { // insertCandidat.attr('stroke')!=='rgb(197, 197, 197)' && ProcessObj.mode == ProcessObj.PROCESS_MODE_RUN) {
                                insertionPermission = false;
                            } else {
                                circle.coordinate = { cx: conDLeft1, cy: conDTop1}
                            }
                        } else {
                            var nextCol = $('.bpm_operator[data-unique_index="'+arrows.find('path.arrow[arr-begin="'+$clone.data('unique_index')+'"]').attr('arr-end')+'"').attr('gridcol'),
                                prevCol = $('.bpm_operator[data-unique_index="'+arrows.find('path.arrow[arr-end="'+$clone.data('unique_index')+'"]').attr('arr-begin')+'"').attr('gridcol');

                            if (nextCol>gridCol && gridCol>prevCol) {
                                circle.coordinate = { cx: conDLeft1, cy: conDTop1}
                            } else if (!prevCol && nextCol>gridCol) {
                                circle.coordinate = { cx: 115, cy: conDTop1}
                            } else if (!nextCol && gridCol>prevCol) {
                                if (parseInt($('.bpm_operator[data-unique_index="'+$clone.data('unique_index')+'"').attr('gridcol')) == gridCol) {
                                    circle.coordinate = { cx: conDLeft1, cy: conDTop1}
                                } else {
                                    insertionPermission = false;
                                }
                            } else {
                                insertionPermission = false;
                            }
                        }
                    } else {
                        insertionPermission = false;
                    }
                }

                if (circle.coordinate) {
                    CircleController.set(circle.coordinate.cx, circle.coordinate.cy);
                }

                var listPointTerm = ProcessObj.listPointByCrossing.get(gridCol, gridRow, $clone.data('unique_index'), $target.data('ug_id'), $target.data('ug_type'));
                if  (!insertCandidat.$) {
                    if (parseInt($clone.attr('gridcol')) != gridCol || (parseInt(circle.$.attr('cx'))!= -10 && listPointTerm)) {
                        CircleController.hide();
                    }
                    if (insertionPermission) {
                        if ($.inArray(conDLeft1+'-'+conDTop1, listAngleUnResolved) >=0 && circle.$ || listPointTerm) {
                            insertionPermission = false;
                            CircleController.hide();
                        }
                    }
                }
            },
            stop: function( event, ui ) {
                var _this = $(this),
                    tmpTarget = $('div.tmp_target'),
                    $condrag = $('.condrag'),
                    arrows = $('svg.arrows');

                ProcessObj.BPM.reDrawOfArrows = true;
                $(ui.helper).removeClass('condrag');
                $(ui.helper).closest('.bpm_unit').addClass('responsible');
                if (parseInt(arrows.find('circle').attr('cx')) < 0) {
                    $condrag.remove();
                  return;
                }
                $condrag.data('old-row',$condrag.attr('gridrow'));
                if (insertionPermission) {
                    var bpmTree = tmpTarget.find('.bpm_tree');
                    if (_this.closest('.bpm_tree').length>0) { // проверка на новый элемент
                        var oldCol = $(event.target).attr('gridcol');
                        $(event.target).remove();
                    }
                    if (bpmTree.length>0) { // check for target responsible
                        var termChangeBranch,
                            $clone = $('.condrag'),
                            gridRow = Math.round((ui.offset.top - bpmTree.offset().top)/100+1),
                            gridCol = Math.round((ui.offset.left - bpmTree.offset().left)/180+1),
                            gridColCheck = gridCol,
                            opInCellInd = $clone.closest('.bpm_block').find('.bpm_operator[gridrow="'+gridRow+'"][gridcol="'+gridColCheck+'"]').data('unique_index');

                        if (gridCol!=oldCol) { // if operator not moved = false
                                if (insertCandidat.$.length) { // if the place is arrow and exist
                                    if (insertCandidat.$.attr('branch') || insertCandidat.$.attr('branch-end')) { //special conditions for begin and End of branches
                                        if (insertCandidat.endOperator.col-1==gridCol) { // check if putting place is too close
                                            var opInCellInd = insertCandidat.$.attr('arr-end');
                                        }
                                    }
                                }
                                ProcessObj.recountNextOperators(opInCellInd, 'right');
                            }
                        if (insertCandidat.$ && insertCandidat.$.length) {
                            termChangeBranch = parseInt(arrows.find('path.arrow[arr-end="'+$clone.data('unique_index')+'"]').attr('branch')) != parseInt(insertCandidat.$.attr('branch'));
                        }
                        if ($(event.target).is('[end-branches]')
                            && ($(ui.helper).closest(".bpm_unit").data('ug_id') != $('.tmp_target').data('ug_id')
                                || (gridCol!=oldCol)
                                || (termChangeBranch) ))
                        {
                            ProcessObj.moveToPlace(event, gridRow);
                        }
                    }
                    if (!$clone.data('unique_index')) { // if operator new = get new index
                        var genInd = ProcessObj.BPM.createDataUnique();
                        $('.bpm_operator[end-branches="no-index"]').attr('end-branches',genInd+'');
                        $clone.attr('data-unique_index', genInd+'');
                        if ($clone.data('name')=='and') {
                            $clone.attr('dublikate','true');
                            var candidatEnd = insertCandidat.$.attr('arr-end');  // maby start function (make space)
                            for (c=1; c<100; c++) {
                                if ($('.bpm_operator[data-unique_index="'+candidatEnd+'"]').data('name')=='end') {
                                    c=100;
                                } else if ($('.bpm_operator[data-unique_index="'+candidatEnd+'"]').hasClass('and_helper')) { // (!) one level branches
                                    c=100;
                                    var beginInd = $('.bpm_operator[end-branches="'+candidatEnd+'"]').data('unique_index');
                                    if ($('.bpm_operator[data-unique_index="'+beginInd+'"]').attr('gridcol')<gridCol &&
                                        $('.bpm_operator[data-unique_index="'+candidatEnd+'"]').attr('gridcol')>gridCol) { // isert inside branches
                                        var ugID = $clone.closest('.bpm_unit').data('ug_id');
                                        ProcessObj.BPM.markOperators(beginInd,candidatEnd);
                                        $('.bpm_operator[data-unique_index="'+beginInd+'"]').removeAttr('mark');
                                        $('.bpm_unit[data-ug_id="'+ugID+'"] .bpm_operator[mark]').each(function(){
                                        var thisGridRow = parseInt($(this).attr('gridrow'));
                                            if (thisGridRow>gridRow) {
                                                $(this).attr('gridrow', (thisGridRow+1)+'');
                                            }
                                        });
                                        ProcessObj.BPM.unmarkOperators();
                                    }
                                } else {
                                    candidatEnd = $('svg.arrows path.arrow[arr-begin="'+candidatEnd+'"]').attr('arr-end');
                                }
                            } // maby end function (make space)
                        }
                    } else {
                        if (insertCandidat.$ !=null && insertCandidat.$.attr('arr-begin')!=$clone.data('unique_index')) { // if we put on connected arrow
                            if ($clone.data('name')!='end') {
                                var unInd = $clone.data('unique_index');
                                if ($clone.is('[end-branches]')) {
                                    andOldCol = parseInt($clone.attr('gridcol'));
                                    andOldRow = parseInt($clone.attr('gridrow'));
                                    var ing = $clone.attr('end-branches');
                                    var newEnd = $('svg.arrows path.arrow[arr-begin="'+ing+'"]').attr('arr-end');
                                    $('svg.arrows path.arrow[arr-end="'+unInd+'"]').each(function(){
                                        $(this).attr('arr-end',newEnd+'').attr('depricate','');
                                    });
                                    var candidatEnd = insertCandidat.$.attr('arr-end'); // maby start function (make space)
                                    for (c=1; c<100; c++) {
                                        if ($('.bpm_operator[data-unique_index="'+candidatEnd+'"]').data('name')=='end') {
                                            c=100;
                                        } else if ($('.bpm_operator[data-unique_index="'+candidatEnd+'"]').hasClass('and_helper')) { // (!) one level branches
                                            c=100;
                                            var beginInd = $('.bpm_operator[end-branches="'+candidatEnd+'"]').data('unique_index');
                                            if ($('.bpm_operator[data-unique_index="'+beginInd+'"]').attr('gridcol')<gridCol &&
                                                $('.bpm_operator[data-unique_index="'+candidatEnd+'"]').attr('gridcol')>gridCol) { // isert inside branches
                                                var ugID = $clone.closest('.bpm_unit').data('ug_id');
                                                ProcessObj.BPM.markOperators(unInd, $('.bpm_operator[data-unique_index="'+unInd+'"]').attr('end-branches'));
                                                var rowsArray = [];
                                                $('.bpm_operator[mark]').each(function(){
                                                    //var anGridRow = parseInt($(this).attr('gridrow'));
                                                    rowsArray.push(gridRow);
                                                    if ($('svg.arrows path.arrow[branch][branch-end][modifier][arr-begin="'+$(this).data('unique_index')+'"]').length>0) {
                                                        $('svg.arrows path.arrow[branch][branch-end][modifier][arr-begin="'+$(this).data('unique_index')+'"]').each(function(){
                                                            var modifEmp = parseInt($(this).attr('modifier'))/100+gridRow;
                                                            rowsArray.push(modifEmp);
                                                        });
                                                    }
                                                });
                                                var minRow = Math.min.apply(null, rowsArray);
                                                var maxRow = Math.max.apply(null, rowsArray);
                                                ProcessObj.BPM.unmarkOperators();
                                                ProcessObj.BPM.markOperators(beginInd,candidatEnd);
                                                var thisGridRowArr=[];
                                                $('.bpm_unit[data-ug_id="'+ugID+'"] .bpm_operator[mark]').each(function(){
                                                    var thisGridRow = parseInt($(this).attr('gridrow'));
                                                    if (thisGridRow>gridRow) {
                                                        thisGridRowArr.push(thisGridRow);
                                                    } else {
                                                        $(this).removeAttr('mark');
                                                    }
                                                });
                                                var thisGridRowMin = Math.min.apply(null, thisGridRowArr);
                                                if (thisGridRowMin<maxRow||thisGridRowMin==maxRow) {
                                                    var difRow = maxRow-thisGridRowMin+1;
                                                    $('.bpm_unit[data-ug_id="'+ugID+'"] .bpm_operator[mark]').each(function(){
                                                        var thisGridRow = parseInt($(this).attr('gridrow'));
                                                        $(this).attr('gridrow', (thisGridRow+difRow)+'');
                                                    });
                                                }
                                                ProcessObj.BPM.unmarkOperators();
                                            }
                                        } else {
                                            candidatEnd = $('svg.arrows path.arrow[arr-begin="'+candidatEnd+'"]').attr('arr-end');
                                        }
                                    }  // maby end function (make space)
                                    helperFollow = true;
                                } else {
                                    var pathes = $('svg.arrows path.arrow');
                                    var arrowBegin = pathes.filter('[arr-begin="'+unInd+'"]');
                                    var newEnd = arrowBegin.attr('arr-end'),
                                        title = arrowBegin.attr('title');
                                    pathes.filter('[arr-end="'+unInd+'"]').attr('arr-end',newEnd+'');
                                    if (title) {
                                        insertCandidat.$.attr('title',title);
                                    }
                                    arrowBegin.remove();
                                }
                            }
                        }
                    }
                    andOldRow = parseInt($clone.attr('gridrow'));
                    $clone.attr('style','').attr('gridrow',gridRow+'').attr('gridcol',gridCol+'').attr('style','');
                    if (gridRow >= tmpTarget.attr('rows')) {
                        tmpTarget.attr('rows',parseInt(tmpTarget.attr('rows'))+1+'');
                    }
                    $(ui.helper).removeAttr('data-unique_index');
                    var $obj = $clone.find('.bpm_body');
                    var conDTop = (gridRow-1)*100+18+ bpmTree.offset().top- arrows.offset().top;
                    var conDLeft = (gridCol-1)*100+90+ bpmTree.offset().left- arrows.offset().left;

                    if (insertCandidat.$!=null) {
                        var interIndex = $clone.data('unique_index');
                        if ($clone.is('[end-branches]') && !$clone.attr('dublikate')) { // condition is need too
                            var indexes = ProcessObj.BPM.getAllBranchIndexes(interIndex, 'all');
                            var newBranchEnd = insertCandidat.$.attr('arr-end');
                            var newEndBefore = insertCandidat.$.attr('arr-begin');
                            var oldBranchEnd = $clone.attr('end-branches');
                            $('svg.arrows path.arrow[arr-begin="'+oldBranchEnd+'"]').attr('arr-end',newBranchEnd+'').removeAttr('branch-end');
                            insertCandidat.$.attr('arr-end',interIndex+'').removeAttr('branch-end');
                            $('svg.arrows path.arrow[depricate]').removeAttr('depricate');
                        } else {
                            ProcessObj.BPM.separateArrow(insertCandidat.$, interIndex);
                        }
                        if ($clone.attr('dublikate')) {
                            ProcessObj.BPM.createHelperAnd(interIndex);
                            ProcessObj.branchesManage('2', interIndex);
                            $clone.removeAttr('dublikate');
                            endBranches = ProcessObj.defineEndBranches(interIndex);
                            $clone.attr('end-branches',endBranches+'');
                        }
                    } else if ($('.bpm_operator[row-correct]').length>0) {
                        var rowsArr = [];
                        $('.bpm_operator[row-correct]').each(function(){
                            var grdrw = parseInt($(this).attr('gridrow'));
                            rowsArr.push(grdrw);
                        });
                        var highestRow = Math.min.apply(null, rowsArr);
                        $('.bpm_operator[row-correct]').each(function(){
                            $thisOperator = $(this);
                            if (andOldRow<gridRow) {
                                var newRow = parseInt($thisOperator.attr('gridrow'))+gridRow-andOldRow;
                                $thisOperator.attr('gridrow',newRow+'');
                            } else if (andOldRow>gridRow) {
                                var newRow = parseInt($thisOperator.attr('gridrow'))-(highestRow-gridRow);
                                $thisOperator.attr('gridrow',newRow+'');
                            }
                        });
                    }

                    $('.bpm_operator[row-correct]').removeAttr('row-correct');
                    helperFollow = true;
                    if (gridCol!=oldCol && $clone.data('name')!='and') {
                        ProcessObj.recountNextOperators(newEnd, 'left');
                    }
                    //ProcessObj.zeroBuild(helperFollow, true);
                    ProcessObj.recountRespBlocks();
                    ProcessObj.BPM.recountArrows();
                    ProcessObj.inspection.init(helperFollow, true, false);
                }
                else ProcessObj.inspection.init(false, false);

                ProcessObj.BPM.unrestrictArrows();
                tmpTarget.removeClass('tmp_target');
                $( 'div.condrag' ).removeClass( 'condrag' );
                CircleController.hide();
                var timerId = setInterval(function() {
                  if (!$( 'div.condrag' ).length>0) {
                    clearInterval(timerId);
                    ProcessObj.BPM.saveSchema();
                  }
                }, 200);
                ProcessObj.dragInit();
                ProcessObj.branchSignatures();
                $(ui.helper).closest('.bpm_unit').removeClass('responsible');

                BpmModel.addNewBranch = null;
            } 
        });
    },

    dropInit : function(){
        $('div.bpm_unit').droppable({
            hoverClass: "target",
            drop: function(event,ui){
                if (true) { // если добавление подтверждено. доработать контроль
                    $target = $( this )
                    $target.addClass('tmp_target');
                    if (insertionPermission) {
                        var arrow = $('svg.arrows path.arrow');
                        var index = $(ui.helper).data('unique_index');
                        if (arrow.filter('[arr-begin="'+index+'"]').length>0 ||
                            arrow.filter('[arr-end="'+index+'"]').length>0) {
                            $(ui.helper).clone().appendTo($target.find('.bpm_tree'));
                        } else {
                            var operatorName = $(ui.helper).data('name');
                            $newOperator = $(ProcessObj.BPM.elements.operations[operatorName]).addClass('condrag');
                            if (ProcessObj.mode == ProcessObj.PROCESS_MODE_CONSTRUCTOR) {
                                $newOperator.data('status','done').attr('data-status','done');
                            }
                            $newOperator.appendTo($target.find('.bpm_tree'));
                        }
                    }
                    $('.ui-draggable-dragging').removeClass('ui-draggable-dragging');
                }
            }
        });
    },

    initDatePicker : function(){
        $('.form-control.date').datepicker({
            language: Message.locale.language,
            format: Message.locale.dateFormats.medium_js,
            minDate: '1/1/1970',
            autoclose: true
        }).on('show', function(e){
            if ( e.date ) {
                 $(this).data('stickyDate', e.date);
            }
            else {
                 $(this).data('stickyDate', null);
            }
        }).on('hide', function(e){
            var stickyDate = $(this).data('stickyDate');

            if ( !e.date && stickyDate ) {
                $(this).datepicker('setDate', stickyDate);
                $(this).data('stickyDate', null);
            }
        });
    },
    initTimePicker : function(){
        $('.time').each(function(){
            var timeVal = $(this).val();
            /*if (!timeVal) {
                var d = new Date();
                var h = d.getHours();
                var m = d.getMinutes();
                var s = d.getSeconds();
                timeVal = h+':'+m+':'+s;
                timeVal = '00:00:00';
                $(this).val(timeVal);
            }*/
            $(this).timepicker({
                minuteStep: 1,
                secondStep: 5,
                showSeconds: true,
                showMeridian: false,
                defaultTime: timeVal,
            });
        });
    },
    titleOperatorRename : function(unique_index, textTitle){
        var titleOperator = $('.element[data-type="responsible"] .element[data-type="operation"][data-unique_index="'+unique_index+'"] .bpm_title');
        titleOperator.text(textTitle);
        if (titleOperator.height()>30) {
            titleOperator.html(titleOperator.text()+'...');
            while (titleOperator.height()>30) {
                str = titleOperator.text();
                str = str.substring(0, str.length-4);
                titleOperator.text(str+'...');
            }
        }
    },

    initValueAsDefault : function () {
        var $list = $('.modal .element[data-type="value_scalar"], .modal .element[data-type="value_datetime"]');

        $.each($list, function(){
            var inpVal = $(this).closest('.column').find('.element_filter[data-name="condition_value"]').val(),
                addingEl = $(this).closest('.column').find('.element[data-type="value_condition"]'),
                addingVal = addingEl.find('option[value="'+addingEl.val()+'"]').text(),
                mergedVal = addingVal+' '+inpVal;
            $(this).val(mergedVal).attr('disabled','disabled').css('background-color','#fff');
        });
    },
    initsOperatorModalShow : function(data){
        Global.initSelects();
        ProcessObj.initDatePicker();
        ProcessObj.initTimePicker();
        inpBl = $('.bpm_modal_dialog .element[data-unique_index="'+data.unique_index+'"]').find('ul.inputs-block');
        switch (data.element_name) {
            case 'data_record':
                EditView.activityMessages.init();
                textAreaResize();
                imagePreview();
                $('.select[multiple]').trigger('change');
                var btnRemove = $(inpBl).find('.todo-remove');
                (btnRemove.length == 1) ? btnRemove.hide() : btnRemove.show();
                if ($(inpBl).find('span.counter').length == $(inpBl).find('select[data-type="value_field_name"]:first option').length) {
                    $(inpBl).find('.add_list').hide();
                }
                break;
            case 'task':
                EditView.activityMessages.init();
                textAreaResize();
                imagePreview();
                Global.createLinkByEV($('.edit-view.in:last'));
                break;
            case 'agreetment':
                EditView.activityMessages.init();
                textAreaResize();
                imagePreview();
                $('.element[data-type="type_agreetment"]').closest('.panel-body.element[data-type="panel_block"]').css('padding-bottom','0');
                if ($('.element[data-type="type_agreetment"]').val() == 'external') {
                    $('.element[data-type="type_agreetment"]').closest('li').next().show();
                }
                break;
            case 'condition':
                $('.modal .element[data-name="condition"] .settings-menu .selectpicker li>a').on('click', function() {
                    $(this).closest('.bootstrap-select.open').removeClass('open');
                });
                if (inpBl.find('.counter').length == 1) {
                    inpBl.find('.counter').text('');
                    inpBl.find('.counter').closest('li.inputs-group').attr('branch','1');
                    if ($('.bpm_modal_dialog >.element').data('name')=='condition') {
                        inpBl.find('.todo-remove').hide();
                    }
                } else if ($(inpBl).find('.counter').length == 10 || $(inpBl).find('.counter').length > 10) {
                    inpBl.find('li.add_list').hide();
                    $(inpBl).find('.counter').each(function(index){
                        $(this).text(index+1).closest('li.inputs-group').attr('branch',index+1);
                        $(inpBl).find('.todo-remove').show();
                    });
                } else {
                    inpBl.find('li.add_list').show();
                    inpBl.find('.counter').each(function(index){
                        $(this).text(index+1).closest('li.inputs-group').attr('branch',index+1);

                    });
                }

                this.initValueAsDefault();
                break;
            case 'begin':
                if (inpBl.find('.counter').length == 1) {
                    inpBl.find('.counter').text('');
                } else {
                    inpBl.find('.counter').each(function(index){
                        $(this).text(index+1);
                    });
                }
                this.initValueAsDefault();
                break;
            case 'timer':
                inpBl.find('.column>.element[data-type="date"], .column>.element[data-type="days"], .column>.element[data-type="hour"], .column>.element[data-type="minutes"]').closest('li.inputs-group').addClass('added');
                inpBl.find('.element[data-type="remove_panel"]').hide();
                break;
            case 'notification':
                EditView.activityMessages.init();
                textAreaResize();
                imagePreview();
                break;
        }
    },
    inspection: {
        callback: null,
        listToCorrection : [],
        functionsOfCorrection : {
            checkOverlay: function (list) {
                $.each(list, function () {
                    ProcessObj.recountNextOperators(this.key, this.direction);
                });
            },
            checkBranchEnds: function (list) {
                $.each(list, function () {
                    for (var i=0; i<this.moveCounter; i++) {
                        ProcessObj.recountNextOperators(this.index, this.direction);
                    }
                });
            },
            checkAndHelperPlaces: function (list) {
                $.each(list, function () {
                    $(this.element).attr('gridrow',this.row);

                    if (this.object) {
                        $(this.element).appendTo(this.object);
                    }
                });
            },
            checkingHorizontalCrossing: function (helperArray) {
                var cikleInd;

                $.each(helperArray, function(i){  // helperArray -is array of helper indexes
                    var oneOperator,
                        helperInd = $(this).data('unique_index'), // Branches End Operator Index
                        braBeg = $('.bpm_operator[end-branches="'+helperInd+'"]'), // Branches Begin Operator
                        braBegInd = braBeg.data('unique_index'), // Branches Begin Operator Index
                        grow, prevHelperInd,
                        movedInd=[], analizeInd=[],
                        formove=false;
                    ProcessObj.BPM.markOperators(braBegInd, helperInd); // mark branches for operatiions inside
                    $('.bpm_operator[data-unique_index="'+helperInd+'"]').attr('mark','marked');
                    if ($('.bpm_operator.and_helper[mark]').length) {

                        prevHelperInd = $(helperArray[i-1]).data('unique_index'); // find previos and_helper
                        if (prevHelperInd) {
                            for (var g=1; g<100; g++) {  // cikle for finding first opertator on branch with previos and_helper
                                cikleInd = $('path.arrow[arr-end="'+prevHelperInd+'"]').attr('arr-begin');
                                if (cikleInd==braBegInd) {
                                    g=100; // close cikle
                                    ProcessObj.BPM.unmarkOperators(prevHelperInd, helperInd); // unmark operators for ignoring
                                    $('.bpm_operator[mark]').not('[data-unique_index="'+braBegInd+'"]').each(function(){
                                        var ind = $(this).data('unique_index');
                                        analizeInd.push(ind);
                                    });
                                } else {
                                    prevHelperInd = cikleInd;
                                }
                            }
                        } else { // if bpm_operator = last in branch and $('.condrag').gridrow = X.gridrow() in build
                            if (helperArray.length==1) {
                                var pairs = ProcessObj.getPairsOfArrows();
                                $.each(pairs, function () {
                                    var base = this;

                                    if (base.type == 'horizontal' && !$(base.path).is('[data-is]')) {
                                        $.each(pairs, function () {
                                            var element = this;

                                            if (base.type == element.type && !$(element.path).is('[data-is]') && base.y == element.y && $(base.path).attr('arr-end') != $(element.path).attr('arr-end')) {
                                                if (element.x <= base.x //by X
                                                    && (base.x <= element.x1)) {
                                                    $(element.path).attr('data-is', true);
                                                    oneOperator = $(Variables.bpmOperator.selector).filter('[data-unique_index="'+$(element.path).attr('arr-end')+'"]');
                                                    oneOperator.attr('gridrow', parseInt(oneOperator.attr('gridrow'))+1);
                                                    return false;
                                                }
                                            }
                                        });
                                    }
                                });
                                $(Variables.arrows.selector).removeAttr('data-is');
                            }
                        }
                    }
                    ProcessObj.BPM.unmarkOperators();
                    if (analizeInd.length>0 && prevHelperInd) {
                        ProcessObj.BPM.markOperators(prevHelperInd, helperInd);
                        var listResponsible = {};

                        $('.bpm_operator[mark]').each(function () {
                            var _this = $(this);
                            grow = parseInt($(this).attr('gridrow'));
                            var ugId = _this.closest('.bpm_unit').data('ug_id')
                            if (listResponsible[ugId] && listResponsible[ugId].length) {
                                listResponsible[ugId].push(grow);
                            } else {
                                listResponsible[ugId] = [grow];
                            }
                            ;

                            if ($(this).is('[end-branches]')) {
                                $('path.arrow[branch][branch-end][arr-begin="' + $(this).data('unique_index') + '"]').not('[barnch="1"][modifier="100"]').each(function () {
                                    var growa = parseInt($(this).attr('modifier')) / 100 + grow;
                                    if (growa) {
                                        listResponsible[ugId].push(growa);
                                    }
                                });
                            }
                        });
                        ProcessObj.BPM.unmarkOperators();

                        $.each(analizeInd, function(i,val){
                            var $val = $('.bpm_operator[data-unique_index="'+val+'"]');
                            var tmpGrow = parseInt($val.attr('gridrow')),
                                ugId = $val.closest('.bpm_unit').data('ug_id');

                            if (!listResponsible[ugId]) {
                                listResponsible[ugId] = [0];
                            };

                            var maxRow = Math.max.apply(null, listResponsible[ugId]),
                                minRow = Math.min.apply(null, listResponsible[ugId]);

                            listResponsible[ugId].minRowToMove = maxRow;
                            if (tmpGrow>=minRow) {
                                movedInd.push(val);
                                if (tmpGrow<maxRow+1) {
                                    formove=true;
                                    if (tmpGrow < listResponsible[ugId].minRowToMove) {
                                        listResponsible[ugId].minRowToMove = tmpGrow;
                                    }
                                }
                            }
                        });
                        if (formove && movedInd.length) {
                            $.each(movedInd, function(i,val){
                                var $val = $('.bpm_operator[data-unique_index="'+val+'"]');
                                var preGrow = parseInt($val.attr('gridrow')),
                                    ugId = $val.closest('.bpm_unit').data('ug_id');
                                var maxRow = Math.max.apply(null, listResponsible[ugId]);
                                var offset = listResponsible[ugId].minRowToMove-1;
                                $val.attr('gridrow',(maxRow-offset)+preGrow+1+'')
                            });
                        }
                    }
                });
                this.listToCorrection = [];
            },
            offsetElement: function (list) {
                $.each(list, function () {
                    $(this.element).attr('gridrow', this.row);
                });
            },
            verticalUnCrossing: function (list) {
                $.each(list, function(i,val){
                    var colCicle, indexCicle,
                        valArr = val.split('-'),
                        _crossOper = $('.bpm_unit[data-unique_index="'+valArr[0]+'"][data-ug_id="'+valArr[1]+'"][data-ug_type="'+valArr[2]+'"] .bpm_operator[gridrow="'+valArr[3]+'"][gridcol="'+valArr[4]+'"]').not('.fake_operator').not('[style*=";"]');

                    if (_crossOper.length){
                        _crossOper.attr('mark','marked');
                        indexCicle = _crossOper.data('unique_index');
                        colCicle = parseInt(_crossOper.attr('gridcol'));

                        if (ProcessObj.BPM.verifyEmptySpace(indexCicle, colCicle).length) { // return 'mark' operators
                            ProcessObj.BPM.moveMarkedOperators('right');
                            ProcessObj.BPM.unmarkOperators();
                        };
                        return false;
                    }
                });
                this.listToCorrection = [];
            },
            cornersUnCrossing: function () {},
            verticalOverlayUnCrossing: function (list) {
                ProcessObj.BPM.recountArrows();
                $.each(list, function (){
                    var $item = this.big.list.attr('mark','marked');

                    ProcessObj.BPM.moveMarkedOperators('right');
                    $item.removeAttr('mark');

                    $.each(this.small.list.not(':last'), function () {
                        var _this = $(this);
                        _this.attr('gridcol', parseInt(_this.attr('gridcol')) + 1);
                    });
                })
            }
        },
        correction: function () {
            if (this.listToCorrection.length && (typeof this.callback == 'function')) {
                this.callback(this.listToCorrection)
            }
            return this.listToCorrection.length ? true : false;
        },
        checkOverlay: function (marked) { // check overlay operators
            var object = this,
                $responsible, coordinates,
                bpmOperator = $(Variables.bpmOperator.selector);

            object.callback = object.functionsOfCorrection.checkOverlay;
            object.listToCorrection = [];
            if (marked) {
                var _this;
                $('.element[data-type="responsible"]').each(function(){
                    $(this).find(bpmOperator).each(function(){
                        _this = $(this);
                        $responsible = _this.closest('.element[data-type="responsible"]');
                        coordinates = _this.attr('gridrow')+'-'+_this.attr('gridcol');
                        if ($responsible.find('.bpm_operator[data-unique_index][gridrow="'+_this.attr('gridrow')+'"][gridcol="'+_this.attr('gridcol')+'"]').not(_this).length>1) {
                            object.listToCorrection.push({ key : _this.data('unique_index'), direction : 'right' });
                        }
                    });
                });
            }
            return object;
        },
        checkBranchEnds: function () { // Checking helper position after zeroBuild / Проверка позиции хелпера after zeroBuild
            var gridparent, gridcol, gridcolMax,
                object = this;

            object.callback = object.functionsOfCorrection.checkBranchEnds;
            object.listToCorrection = [];
            $('.element[data-type="responsible"]').each(function(){
                $(this).find('.bpm_operator[end-branches]').not('.condrag').each(function(){
                    var $svgArrows = $('svg.arrows'),
                        index = $(this).attr('end-branches'),
                        gridcolArr = [];
                    if ($svgArrows.find('path.arrow[arr-end="'+index+'"]').length>1) {
                        gridparent = $('.bpm_operator[data-unique_index="'+index+'"]').attr('gridcol');
                        $svgArrows.find('path.arrow[arr-end="'+index+'"]').each(function(){
                            gridcol = $('.bpm_operator[data-unique_index="'+$(this).attr('arr-begin')+'"]').attr('gridcol');
                            gridcolArr.push(gridcol);
                        });

                        if (gridcolArr.length) {
                            gridcolMax = Math.max.apply(null, gridcolArr);
                            if (gridcolMax+1>gridparent) {
                                object.listToCorrection.push({
                                    moveCounter : gridcolMax-gridparent+1,
                                    index: index,
                                    direction: 'right'
                                })
                            }
                        }
                    }
                });
            });

            return object;
        },
        checkAndHelperPlaces: function (helperFollow) {
            var bpmOperator = $(Variables.bpmOperator.selector),
                object = this;

            object.callback = object.functionsOfCorrection.checkAndHelperPlaces;
            object.listToCorrection = [];

            if (helperFollow) {
                bpmOperator.filter('.and_helper').each(function(){
                    var helperInd = $(this).data('unique_index'),
                        nextInd = bpmOperator.filter('[end-branches="'+helperInd+'"]').data('unique_index'),
                        _nextOp = bpmOperator.filter('[data-unique_index="'+nextInd+'"]');
                    if (typeof(nextInd)=='string') {
                        var nextRow = _nextOp.attr('gridrow'),
                            nextResp = _nextOp.closest('.bpm_unit').data('ug_id'),
                            thisResp = $(this).closest('.bpm_unit').data('ug_id');
                        if (!$('path.arrow[arr-begin="'+helperInd+'"][arr-end="'+nextInd+'"]').attr('branch-end')) {
                            object.listToCorrection.push({
                                element: this,
                                row: nextRow,
                                object: nextResp!=thisResp ? _nextOp.closest('.bpm_tree') : null
                            });
                        }
                    }
                });
            }
            return object;
        },
        checkingHorizontalCrossing  : function () {
            var operCounter = $('.bpm_tree .bpm_operator').not('.fake_operator').length,
                pathes = $('svg.arrows path.arrow'),
                bpmOperators = $('.bpm_operator'),
                object = this;

            object.callback = object.functionsOfCorrection.checkingHorizontalCrossing;
            object.listToCorrection = [];

            $.each($('.element[data-type="responsible"]'), function(){
                var list, maxCountRows, $oper,
                    $this = $(this);

                if ($this.find('.bpm_operator').length) {
                    maxCountRows = operCounter;

                    for (var c=1; c<operCounter; c++) {
                        list = $this.find('.bpm_operator.and_helper[gridcol="'+c+'"]');

                        if (list.length) {
                            maxCountRows = Math.max.apply(null,list.map(function () { return parseInt($(this).attr('gridrow')); }).get());
                        }

                        for (var r=1; r<=maxCountRows; r++) {
                            $oper = list.filter('[gridrow="'+r+'"]');

                            if ($oper.length) {
                                var b, andHelperIndex = $oper.data('unique_index'),
                                    beginIndex = bpmOperators.filter('[end-branches="'+andHelperIndex+'"]').data('unique_index'),
                                    emptyBranches = pathes.filter('[arr-begin="'+beginIndex+'"][arr-end="'+andHelperIndex+'"]'),
                                    baseRow = parseInt($oper.attr('gridrow'));

                                if (emptyBranches.attr('modifier',0).length) {
                                    var startRow = baseRow;
                                    for (b=1; b<=10; b++) {
                                        var arrow = emptyBranches.filter('[branch="'+b+'"][arr-end="'+andHelperIndex+'"]');
                                        if (arrow.length) {
                                            var emptyPlace = ProcessObj.BPM.getEmptyPlace(startRow,beginIndex,andHelperIndex, arrow);
                                            var delta = Math.abs(baseRow - emptyPlace) * 100;

                                            startRow = emptyPlace+1;
                                            if (arrow.is('[branch-end="main"]')) {
                                                emptyBranches.filter('[branch-end="main"]').attr('branch-end','true');
                                            }
                                            if (delta) {
                                                arrow.attr('modifier', delta);
                                            } else {
                                                arrow.attr('branch-end','main').removeAttr('modifier');
                                            }
                                            ProcessObj.BPM.recount(arrow);
                                        }
                                    }
                                }
                                object.listToCorrection.push($oper[0]);
                            }
                        }
                    }
                }
            });

            return object;
        },
        rebuildFromZero: function (){
            var $inwork,
                $currentOp = $('.bpm_operator[data-name="begin"]'),
                arrow = $('svg.arrows path.arrow'),
                bpmOperator = $('.bpm_operator[data-unique_index]'); // entering

            $currentOp.attr('mark','inwork');
            for (var i=0; i<100; i++) {
                $inwork = bpmOperator.filter('[mark="inwork"]');
                if ($inwork.length) {
                    $.each($inwork, function(){
                        var willGo = true,
                            $this = $(this);

                        $.each(arrow.filter('[arr-end="'+$this.data('unique_index')+'"]'), function(){
                            var arrBegin = $(this).attr('arr-begin');
                            if (bpmOperator.filter('[data-unique_index="'+arrBegin+'"]').attr('mark')=='inwork' || !bpmOperator.filter('[data-unique_index="'+arrBegin+'"]').attr('mark')) {
                                willGo = false;
                            }
                        });
                        if (willGo) {
                            $.each(arrow.filter('[arr-begin="'+$this.data('unique_index')+'"]'), function(){
                                bpmOperator.filter('[data-unique_index="'+$(this).attr('arr-end')+'"]').attr('mark','inwork');
                            });
                            $this.attr('mark','marked').attr('gridcol',i+1);
                        }
                    });
                } else {
                    i=100;
                }
            }
            ProcessObj.BPM.unmarkOperators();
        },
        verticalUnCrossing : function () {  //vertical crossing and corners crossing
            var object = this,
                $listOperators = $('.bpm_operator[data-unique_index]').not('.fake_operator,.condrag'),
                correctionSet = function (key) {
                    if ($.inArray(key,object.listToCorrection)<0) { object.listToCorrection.push(key);}
                };

            object.listToCorrection = [];
            object.callback = object.functionsOfCorrection.verticalUnCrossing;

            $.each($('svg.arrows path.arrow'), function(){ // analize arrows
                var $this = $(this);

                if ($this.attr('d').split(' ').length>15) { // arrow not straight
                    var key, operCitype,
                        _this = $this,
                        begOperator = ProcessObj.getParams($(Variables.bpmOperator.selector).filter('[data-unique_index="'+_this.attr('arr-begin')+'"]')),
                        endOperator = ProcessObj.getParams($(Variables.bpmOperator.selector).filter('[data-unique_index="'+_this.attr('arr-end')+'"]'));

                    begOperator['offsetTop'] = begOperator.$.offset().top,
                    endOperator['offsetTop'] = endOperator.$.offset().top;
                    key = begOperator.keyRespUnique +'-'+begOperator.ug_id+'-'+begOperator.ug_type;

                    if (begOperator.$.is('.and_helper')) {
                        return true; // continue
                    }

                    if (_this.is('[branch-end]')) {  // not normal arrow
                        if (_this.is('[branch]')) {// empty branch
                            var midif = parseInt(_this.attr('modifier'))/100;

                            for (var i=begOperator.row+1; i<midif+1; i++) {
                                correctionSet(key+'-'+i+'-'+begOperator.col);
                            }
                            for (i=endOperator.row+1; i<midif+1; i++) {
                                correctionSet(key+'-'+i+'-'+endOperator.col);
                            }
                        } else { // arrow - end of branch
                            if (begOperator.offsetTop < endOperator.offsetTop) { // Begin is higer then End
                                if (begOperator.ug_id == endOperator.ug_id && begOperator.ug_type == endOperator.ug_type) { // Begin and End in same responsible block
                                    for (i=begOperator.row+1; i<endOperator.row; i++) {
                                        object.listToCorrection.push(key+'-'+i+'-'+endOperator.col);
                                    }
                                } else { // Begin and End not in same responsible block
                                    var operBrespRows = parseInt($('.bpm_unit[data-ug_id="'+begOperator.ug_id+'"]').attr('rows'));
                                    for (i=begOperator.row+1; i< operBrespRows+1; i++) {
                                        object.listToCorrection.push(begOperator.ug_id+'-'+i+'-'+endOperator.col);
                                    }
                                    for (i=1; i<100; i++) {
                                        if ($('.bpm_unit[data-ug_id="'+begOperator.ug_id+'"]').next().data('ug_id')== endOperator.ug_id) {
                                            i=100;
                                            for (var o=1; o<endOperator.row; o++) {
                                                object.listToCorrection.push(endOperator.ug_id+'-'+endOperator.ug_type+'-'+o+'-'+endOperator.col);
                                            }
                                        } else {
                                            operCicle = $('.bpm_unit[data-ug_id="'+begOperator.ug_id+'"]').next().data('ug_id');
                                            var operCrespRows = parseInt($('.bpm_unit[data-ug_id="'+operCicle+'"]').attr('rows'));
                                            for (o=1; o<operCrespRows+1; o++) {
                                                object.listToCorrection.push(key+'-'+o+'-'+endOperator.col);
                                            }
                                        }
                                    }
                                }
                            } else {  // End is higer then Begin
                                if (begOperator.ug_id==endOperator.ug_id && begOperator.ug_type == endOperator.ug_type) { // Begin and End in same responsible block
                                    for (i= endOperator.row+1; i<begOperator.row; i++) {
                                        object.listToCorrection.push(key +'-'+i+'-'+endOperator.col);
                                    }
                                } else { // Begin and End not in same responsible block
                                    var operErespRows = parseInt($('.bpm_unit[data-ug_id="'+endOperator.ug_id+'"][data-ug_type="'+endOperator.ug_type+'"]').attr('rows'));
                                    for (i=endOperator.row+1; i<=operErespRows; i++) {
                                        object.listToCorrection.push(endOperator.ug_id+'-'+endOperator.ug_type+'-'+i+'-'+endOperator.col); // +begOperator.col
                                    }
                                    
                                    for (i=1; i<100; i++) {
                                        if ($('.bpm_unit[data-ug_id="'+endOperator.ug_id+'"]').next().data('ug_id')==begOperator.ug_id) {
                                            i=100;
                                            for (o=1; o<begOperator.row; o++) {
                                                object.listToCorrection.push(key +'-'+o+'-'+endOperator.col);
                                            }
                                        } else {
                                            var operCicle = $('.bpm_unit[data-ug_id="'+endOperator.ug_id+'"]').next().data('ug_id');
                                            var operCrespRows = parseInt($('.bpm_unit[data-ug_id="'+operCicle+'"]').attr('rows'));
                                            for (o=1; o<operCrespRows+1; o++) {
                                                object.listToCorrection.push(operCicle+'-'+o+'-'+endOperator.col);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else { // normal arrow
                        if (begOperator.offsetTop<endOperator.offsetTop) { // Begin is higher then End
                            if (begOperator.ug_id==endOperator.ug_id && begOperator.ug_type == endOperator.ug_type && begOperator.key == endOperator.key) { // Begin and End in same responsible block
                                for (i=begOperator.row+1; i<endOperator.row; i++) {
                                    correctionSet(key+'-'+i+'-'+begOperator.col);
                                }
                            } else { // Begin and End not in same responsible block

                                var operBrespRows = parseInt($('.bpm_unit[data-unique_index="'+begOperator.keyRespUnique+'"][data-ug_id="'+begOperator.ug_id+'"][data-ug_type="'+begOperator.ug_type+'"]').attr('rows'));
                                for (i=begOperator.row+1; i<=operBrespRows; i++) {
                                    correctionSet(key+'-'+i+'-'+begOperator.col);
                                }
                                var nextRespB = $('.bpm_unit[data-unique_index="'+begOperator.keyRespUnique+'"][data-ug_id="'+begOperator.ug_id+'"][data-ug_type="'+begOperator.ug_type+'"]').next();
                                
                                for (i=1; i<100; i++) {
                                    if ($('.bpm_unit[data-unique_index="'+begOperator.keyRespUnique+'"][data-ug_id="'+begOperator.ug_id+'"]').next().data('ug_id')==endOperator.ug_id &&
                                        $('.bpm_unit[data-unique_index="'+begOperator.keyRespUnique+'"][data-ug_type="'+begOperator.ug_type+'"]').next().data('ug_type')==endOperator.ug_type) {
                                        i=100;
                                        for (o=1; o<endOperator.row; o++) {
                                            correctionSet(endOperator.keyRespUnique + '-' + endOperator.ug_id + '-' + endOperator.ug_type + '-' + o + '-' + begOperator.col);
                                        }
                                    } else {
                                        nextRespB = $('.bpm_unit[data-ug_id="'+begOperator.ug_id+'"][data-ug_id="'+begOperator.ug_id+'"]').next();
                                        for (nr=1; nr<=$('.bpm_unit').length; nr++) {
                                            operCicle = nextRespB.data('ug_id');
                                            operCitype = nextRespB.data('ug_type');
                                            if (operCicle == endOperator.ug_id && operCitype == endOperator.ug_type) {
                                                var $element = nextRespB.find('.bpm_operator[gridcol="'+begOperator.col+'"]');
                                                if ($element.length) {
                                                    correctionSet(operCicle+'-'+operCitype+'-'+$element.attr('gridrow')+'-'+begOperator.col);
                                                }
                                                i=100;
                                                break;
                                            } else {
                                                var operCrespRows = parseInt(nextRespB.attr('rows'));
                                                for (o=1; o<operCrespRows+1; o++) {
                                                    correctionSet(nextRespB.data('unique_index') + '-' + operCicle + '-' + operCitype + '-' + o + '-' + begOperator.col);
                                                }
                                                nextRespB = nextRespB.next();
                                            }
                                        } i=100;
                                        if (nextRespB.data('ug_id')==endOperator.ug_id &&
                                        nextRespB.data('ug_type')==endOperator.ug_type) {
                                            i=100;
                                        }
                                    }
                                }
                            }
                        } else {  // End is higher then Begin
                            if (begOperator.ug_id==endOperator.ug_id
                                &&
                                begOperator.ug_type==endOperator.ug_type
                                && $(begOperator.$.closest('.bpm_unit')).data('unique_index') === $(endOperator.$.closest('.bpm_unit')).data('unique_index')) { // Begin and End in same responsible block
                                for (i=endOperator.row+1; i<begOperator.row; i++) {
                                    correctionSet(key +'-'+i+'-'+begOperator.col);
                                }
                            } else { // Begin and End not in same responsible block
                                var operErespRows = parseInt($('.bpm_unit[data-ug_id="'+endOperator.ug_id+'"]').attr('rows'));
                                for (i=endOperator.row+1; i<=operErespRows; i++) {
                                    correctionSet(endOperator.keyRespUnique + '-' + endOperator.ug_id + '-' + endOperator.ug_type + '-' + i + '-' + begOperator.col);
                                }
                                for (i=1; i<100; i++) {
                                    if ($('.bpm_unit[data-ug_id="'+endOperator.ug_id+'"]').next().data('ug_id')==begOperator.ug_id &&
                                        $('.bpm_unit[data-ug_type="'+endOperator.ug_type+'"]').next().data('ug_type')==begOperator.ug_type) {
                                        i=100; 
                                        for (o=1; o<begOperator.row; o++) {
                                            correctionSet(key +'-'+o+'-'+begOperator.col);
                                        }
                                    } else {
                                        nextRespB = $('.bpm_unit[data-ug_id="'+endOperator.ug_id+'"][data-ug_id="'+endOperator.ug_id+'"]').next();
                                        for (var nr=1; nr<=$('.bpm_unit').length; nr++) {
                                            operCicle = nextRespB.data('ug_id');
                                            operCitype = nextRespB.data('ug_type');
                                            if (operCicle == begOperator.ug_id && operCitype == begOperator.ug_type) {
                                                var $element = nextRespB.find('.bpm_operator[gridcol="'+begOperator.col+'"][data-unique_index]').not(begOperator.$)
                                                if ($element.length) {
                                                    if (endOperator.$.offset().top < begOperator.$.offset().top && begOperator.$.offset().top < $element.offset().top) { }
                                                    else correctionSet(operCicle+'-'+operCitype+'-'+$element.attr('gridrow')+'-'+begOperator.col);
                                                }
                                                i=100;
                                                break;
                                            } else {
                                                var operCrespRows = parseInt(nextRespB.attr('rows'));
                                                for (o=1; o<operCrespRows+1; o++) {
                                                    correctionSet(nextRespB.data('unique_index') + '-' + operCicle + '-' + operCitype + '-' + o + '-' + begOperator.col);
                                                }
                                                nextRespB = nextRespB.next();
                                            }
                                        } i=100;
                                        if (nextRespB.data('ug_id')==begOperator.ug_id &&
                                        nextRespB.data('ug_type')==begOperator.ug_type) {
                                            i=100;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            });

            return object;
        },
        verticalOverlayUnCrossing : function () { // накладання вєток і нижня зсуваєтсья вправо.
            var object = this,
                bpmOperators = $(Variables.bpmOperator.selector);

            object.callback = object.functionsOfCorrection.verticalOverlayUnCrossing;
            object.listToCorrection = [];
            $.each($(Variables.arrows.selector), function () {
                var arrows, _this = $(this),
                    path = {
                        d: _this.attr('d').split(' ')
                    };

                if (_this.is('[data-is-crossing]')) {
                    return false;
                }

                if (path.d.length == 18) {
                    arrows = $(Variables.arrows.selector).filter('[d*="' + path.d[1] + '"]:not([branch]):not([branch-end])').not('[data-is]');
                    arrows.attr('data-is', true);

                    if (arrows.length==1) {
                        return true; // continue;
                    }

                    //filter in order from top to bottom
                    arrows.sort(function (a, b) {
                        var a = $(a).attr('d').split(' '),
                            b = $(b).attr('d').split(' ');
                        return (a[2] < b[2]) ? -1 : 0;
                    })

                    $.each(arrows, function () {
                        var $selected, _this = $(this),
                            baseD = _this.attr('d').split(' ');

                        if (!_this.not('[data-mark]').length) return true; //continue

                        $selected = arrows.not(_this).filter(function () {
                            var d = $(this).attr('d').split(' ');
                            return (parseInt(d[2])> parseInt(baseD[5]) && parseInt(baseD[5]) > parseInt(d[5])) ? this : null; //crossing direction
                        });

                        if ($selected.length) {
                            var path, operator, searchHelper, marked,
                                search = 0,
                                element = [ {start: bpmOperators.filter('[data-unique_index="' + _this.attr('arr-end') + '"]')},
                                    {start: bpmOperators.filter('[data-unique_index="' + $selected.attr('arr-begin') + '"]')}];

                            $selected.attr('data-mark', true); // marked
                            _this.attr('data-mark', true);     // marked

                            for (var i = element.length - 1; i >= 0; i--) {
                                element[i].start.attr('mark', 'marked');
                                element[i]['list'] = $([]);
                                searchHelper = true;

                                while (searchHelper) {
                                    path = $(Variables.arrows.selector).filter('[arr-begin="' + element[i].start.data('unique_index') + '"]');
                                    operator = bpmOperators.filter('[data-unique_index="' + path.attr('arr-end') + '"]').attr('mark', 'marked');

                                    if (operator.is('[end-branches]')) {
                                        search++;
                                        ProcessObj.BPM.markOperators(operator.attr('data-unique_index'), operator.attr('end-branches'));
                                    } else {
                                        if (operator.is('.and_helper')) {
                                            if (search) {
                                                search--;
                                            } else {
                                                searchHelper = !searchHelper;
                                            }
                                        }
                                    }
                                    if (operator.length) {
                                        element[i].start = operator.is('[end-branches]') ? bpmOperators.filter('[data-unique_index="' + operator.attr('end-branches') + '"]') : operator;
                                    } else searchHelper = !searchHelper;
                                }
                                marked = $('[mark]');

                                marked.sort(function (a, b) {
                                    var contentA = parseInt($(a).attr('gridcol'));
                                    var contentB = parseInt($(b).attr('gridcol'));
                                    return (contentA < contentB) ? -1 : (contentA > contentB) ? 1 : 0;
                                })

                                $.each(marked, function () {
                                    element[i].list.push(this);
                                });
                                marked.removeAttr('mark');
                            }

                            var $item, marked,
                                data = {
                                    big: (element[0].list.length > element[1].list.length) ? element[0] : element[1],
                                    small: (element[0].list.length > element[1].list.length) ? element[1] : element[0]
                                }
                            // optimization
                            if (data.small.list.length) {
                                var $elBig = $(data.big.list).first(),
                                    $elSmall = $(data.small.list).first(),
                                    begRespOfsetTop = $elBig.closest('.bpm_unit').offset().top,
                                    toRespOfsetTop = $(data.big.list).eq(1).closest('.bpm_unit').offset().top,
                                    baseRespOfElement = $elSmall.closest('.bpm_unit').offset().top;

                                if (toRespOfsetTop < baseRespOfElement && begRespOfsetTop < baseRespOfElement
                                    || ($elBig.offset().top < $elSmall.offset().top && begRespOfsetTop == baseRespOfElement && toRespOfsetTop)) { //our item is out side in bottom
                                    data.small.list = $(data.small.list).filter('.and_helper');// only helper
                                }
                                $item = $(data.small.list);
                                if (ProcessObj.BPM.verifyEmptySpace($item.first().attr('data-unique_index'), $item.first().attr('gridcol')).length) { // return 'mark' operators
                                    data.small.list = $item.filter('[mark]').removeAttr('mark');
                                }
                            }
                            if (data.big.list.length) {
                                $item = $(data.big.list);
                                if (ProcessObj.BPM.verifyEmptySpace($item.first().attr('data-unique_index'), $item.first().attr('gridcol')).length) { // return 'mark' operators
                                    data.big.list = $item.filter('[mark]').removeAttr('mark');
                                }
                            }
                            object.listToCorrection.push(data);

                            $selected.removeAttr('data-mark'); // marked
                            _this.removeAttr('data-mark');     // marked
                            return false; // continue;
                        }
                    })
                }
            });
            $(Variables.arrows.selector).removeAttr('data-is');

            return object;
        },
        cornersUnCrossing : function () {
            var resultCorners, recountCorners = true,
                bpmOperators = $('.bpm_operator[data-unique_index]'),
                i = 1;

            while (i<100 && recountCorners) {
                resultCorners=[];
                recountCorners=false;
                i++;
                $.each($(Variables.arrows.selector), function(){
                    var line = $(this).attr('d').split(' '),
                        operB = bpmOperators.filter('[data-unique_index="'+$(this).attr('arr-begin')+'"]'),
                        operE = bpmOperators.filter('[data-unique_index="'+$(this).attr('arr-end')+'"]'),
                        offsetTopB = operB.offset().top,
                        offsetTopE = operE.offset().top,
                        operBrow = parseInt(operB.attr('gridrow')),
                        operErow = parseInt(operE.attr('gridrow')),
                        operEresp = operE.closest('.bpm_unit').data('ug_id'),
                        operErespType = operE.closest('.bpm_unit').data('ug_type');

                    if (line.length>15 && line.length<19 && !$(this).attr('branch-end')) { // arrow not straight & not branch end
                        var $unit = operB.closest('.bpm_unit'),
                            operBresp = $unit.data('ug_id'),
                            operBrespType = $unit.data('ug_type'),
                            keyE = operE.closest('.bpm_unit').data('unique_index');

                        if (offsetTopB<offsetTopE) { // Begin is higher then End
                            var _cornerOper = $('.bpm_unit[data-unique_index="'+ keyE +'"][data-ug_id="'+operEresp+'"][data-ug_type="'+operErespType+'"] .bpm_operator[gridrow="'+operErow+'"][gridcol="'+operB.attr('gridcol')+'"]').not('.fake_operator').not('[style*=";"]');

                            if (_cornerOper.length){ // if find smb in corner
                                resultCorners.push(_cornerOper);
                                for (r=1; r<100; r++) {  // collect operators downward
                                    var newoperErow = operErow+r,
                                        _cornerOper = $('.bpm_unit[data-ug_id="'+operEresp+'"] .bpm_operator[gridrow="'+newoperErow+'"][gridcol="'+operB.attr('gridcol')+'"]').not('.fake_operator').not('[style*=";"]');
                                    if (_cornerOper.length) {
                                        resultCorners.push(_cornerOper);
                                    } else {
                                        r=100;
                                    }
                                }
                                $.each(resultCorners, function(i,val){ // move collected oparetors
                                    $(this).attr('gridrow',parseInt($(this).attr('gridrow'))+1+'');
                                });
                                recountCorners=true; // go on new cicle
                                return false; // exit from each
                            }
                        } else if (offsetTopB>offsetTopE) {  // End is higher then Begin
                            var r,
                                keyE = operE.closest('.bpm_unit').data('unique_index');
                                _cornerOper = $('.bpm_unit[data-unique_index="'+ keyE +'"][data-ug_id="'+operEresp+'"][data-ug_type="'+operErespType+'"] .bpm_operator[gridrow="'+operErow+'"][gridcol="'+operB.attr('gridcol')+'"]').not('.fake_operator').not('[style*=";"]');

                            if (_cornerOper.length){
                                resultCorners.push(operE);
                                for (r=1; r<100; r++) {  // collect operators downward
                                    var newoperErow = operErow+r,
                                        _cornerOper = $('.bpm_unit[data-ug_id="'+operEresp+'"] .bpm_operator[gridrow="'+newoperErow+'"][gridcol="'+operE.attr('gridcol')+'"]').not('.fake_operator').not('[style*=";"]');
                                    if (_cornerOper.length>0) {
                                        resultCorners.push(_cornerOper);
                                    } else {
                                        r=100;
                                    }
                                }
                                var keyB = operB.closest('.bpm_unit').data('unique_index'),
                                    keyE = operE.closest('.bpm_unit').data('unique_index')

                                if (operEresp==operBresp && operErespType == operBrespType && keyB == keyE) {
                                    resultCorners.push(operB);
                                    for (r=1; r<100; r++) {  // collect operators downward
                                        var newoperBrow = operBrow+r,
                                            _cornerOper = $('.bpm_unit[data-ug_id="'+operEresp+'"] .bpm_operator[gridrow="'+newoperBrow+'"][gridcol="'+operB.attr('gridcol')+'"]').not('.fake_operator').not('[style*=";"]');
                                        if (_cornerOper.length>0) {
                                            resultCorners.push(_cornerOper);
                                        } else {
                                            r=100;
                                        }
                                    }
                                }
                                $.each(resultCorners, function(i,val){ // move collected oparetors
                                    $(this).attr('gridrow',parseInt($(this).attr('gridrow'))+1+'');
                                });
                                recountCorners=true; // go on new cicle
                                return false; // exit from each
                            }
                        }
                    } else {
                        if (line.length==21 && $(this).is('[branch-end]')) {
                            if (offsetTopB==offsetTopE) {
                                operErow = operBrow + (parseInt($(this).attr('modifier'))/100);
                                var _cornerOper = $('.bpm_unit[data-ug_id="'+operEresp+'"] .bpm_operator[gridrow="'+operErow+'"][gridcol="'+operB.attr('gridcol')+'"]').not('.fake_operator').not('[style*=";"]');

                                if (_cornerOper.length>1){

                                }

                                if (_cornerOper.length) { // if find smb in corner
                                    _cornerOper.attr('gridrow',parseInt(_cornerOper.attr('gridrow'))+1);
                                    recountCorners=true; // go on new cicle
                                    return false; // exit from each
                                }
                            };
                        }
                    }
                });

                if (resultCorners.length) {
                    $.each(resultCorners, function(){
                        var ind = $(this).data('unique_index');
                        ProcessObj.BPM.recount($(Variables.arrows.selector).filter('[arr-begin="'+ind+'"]'));
                        ProcessObj.BPM.recount($(Variables.arrows.selector).filter('[arr-end="'+ind+'"]'));
                    });
                }
            }

            return false;
        },
        offsetElement : function () {
            var $clone = $('.condrag').not('[data-name="and"]'),
                object = this,
                elements = $(Variables.bpmOperator.selector);

            object.listToCorrection = [];
            object.callback = object.functionsOfCorrection.offsetElement;

            if ($clone.length) {
                $.each(elements.filter('.and_helper'), function () {
                    var bpmBegin,
                        _this = $(this);

                    bpmBegin = elements.filter('[end-branches="'+_this.data('unique_index')+'"]');
                    if (bpmBegin.length) {
                        var bpmOperators = $([]),
                            path = $('path[arr-begin="'+bpmBegin.data("unique_index")+'"]').not('[branch-end]');

                        $.each(path,function () {
                            var item = elements.filter('[data-unique_index="'+$(this).attr('arr-end')+'"]');

                            if (item.length) {
                                bpmOperators.push(item[0]);
                            }
                        });

                        if (bpmOperators.length && bpmOperators.is('.condrag')) {
                            var bpmUnit = bpmOperators.filter('.condrag').closest('.bpm_unit');

                            bpmUnit.find(bpmOperators).not('.condrag').filter('[gridrow="'+$clone.attr('gridrow')+'"]').filter(function(){
                                var _this = $(this);
                                if (path.filter('[arr-end="'+_this.data('unique_index')+'"]').length) {
                                    object.listToCorrection.push({element: _this, row: parseInt(_this.attr('gridrow'))+1 });
                                }
                            });
                        }
                    }
                });
            }
            return object;
        },
        init: function (helperFollow, marked, isHorisontalChecking) {
            var label,
                moved = true,
                object = this,
                fullCircle = 11, //NOT < 4
                byError = 6;

             object.rebuildFromZero();
             object.checkAndHelperPlaces(helperFollow).correction();

            while (moved) {
                ProcessObj.BPM.reDrawOfArrows ? ProcessObj.BPM.recountArrows() : '';
                if ( object.checkOverlay(marked).correction()
                    || object.verticalOverlayUnCrossing().correction()
                    || object.verticalUnCrossing().correction()
                    || object.checkBranchEnds().correction()
                    || object.offsetElement().correction()
                    || object.cornersUnCrossing()
                    || fullCircle
                ) {
                    label = false;
                    if (BpmModel.addNewBranch || BpmModel.removedOfOperator || isHorisontalChecking) {
                        if (object.checkingHorizontalCrossing()) {
                            object.correction();
                            label = !label;
                        }
                    }
                    (object.listToCorrection.length && label) ? byError-- : fullCircle--;
                } else {
                    fullCircle = -1;
                }

                if (fullCircle<0 || byError<0) {
                    moved = !moved;
                }
            };
            ProcessObj.listPointByCrossing.init();
            ProcessObj.recountRespBlocks();
            ProcessObj.BPM.recountArrows();
        }
    },
    zeroBuild : function(helperFollow, marked){
        ProcessObj.inspection.init(helperFollow, marked);
    },
    recountRespBlocks : function(){
        var bpmUnit = $('div.bpm_unit').not('.outer_unit'),
            $bpmBlock = $('.bpm_block'),
            container = $('#content_container'),
            $settings = $('.settings-section');

        bpmUnit.each(function(){
            var $this = $(this),
                bpmOperator = $this.find('.bpm_operator').not('[style*=";"]').not('.fake_operator'),
                maxRow = 1;

            (!bpmOperator.length>0) ? $this.attr('rows', '2') : '';
            bpmOperator.not('.and_helper').each(function(){
                var dynamicRow,
                    _this = $(this),
                    attrName = _this.data('name'),
                    uniqueIndex = _this.data('unique_index'),
                    arrows = $('svg.arrows'),
                    arrBegin = arrows.find('path.arrow[arr-begin="'+uniqueIndex+'"]');

                if (attrName =='and' || attrName =='condition' && arrBegin.length) {
                    var values = [],
                        row = parseInt(_this.attr('gridrow')),
                        $path = arrBegin.filter('[modifier], [branch-end="true"]').not('[branch-end=main]');

                    $.each($path, function (){
                        var d = $(this).attr('d').split(' '),
                            d5 = parseInt(d[5]),
                            d2 = parseInt(d[2]);

                        if (d5 > d2) {
                            values.push(d5 - d2);
                        }
                    });

                    if (values.length) {
                        values = Math.max.apply(null, values);
                        values = (values < 100) ? 1 : Math.floor(values/100) + 1;

                        dynamicRow = row + values;
                    }
                }

                if (maxRow < dynamicRow) {
                    maxRow = dynamicRow;
                }

                if (maxRow < _this.attr('gridrow')) {
                    maxRow = parseInt(_this.attr('gridrow'));
                }

            }).promise().done(function(){
                 $(this).closest('.bpm_unit').attr('rows', maxRow+1+'');
            });
        });

        var endOperator = bpmUnit.find('.bpm_operator[data-name="end"]');

        if (endOperator.length) {
            var area,
                workSpace = $('#main-content').width();

            area = endOperator.offset().left+endOperator.width();

            if ( area > workSpace ) {
                area += 15;
                if (QuickViewPanel.isOpen()) {
                    area += QuickViewPanel.getWidth();
                }

                $bpmBlock.addClass('offsetRight');
                $bpmBlock.attr('style', '').width(area);
            } else {
                $bpmBlock.css('width','100%').removeClass('offsetRight');
            }
        }
    },

    // recountRespBlocks : function(){
    //     var bpmUnit = $('div.bpm_unit').not('.outer_unit'),
    //         container = $('#content_container');
    //     bpmUnit.each(function(){
    //         var _this = $(this);
    //         var countRows = _this.attr('rows'),
    //             bpmOperator = _this.find('.bpm_operator').not('[style*=";"]').not('.fake_operator'),
    //             maxRow = 1;
    //         (!bpmOperator.length>0) ? _this.attr('rows', '2') : '';
    //         bpmOperator.not('.and_helper').each(function(){
    //             var _this = $(this);
    //             var attrName = _this.data('name'),
    //                 uniqueIndex = _this.data('unique_index'),
    //                 arrows = $('svg.arrows'),
    //                 arrBegin = arrows.find('path.arrow[arr-begin="'+uniqueIndex+'"]');
    //
    //             if (attrName =='and' || attrName =='condition' && arrBegin.length>0) {
    //                 var andGridRow = parseInt(_this.attr('gridrow')),
    //                     modif = 0;
    //
    //                 arrBegin.filter('[modifier]').not('[branch-end=main]').each(function(){
    //                     modif = parseInt($(this).attr('modifier'))/100 + andGridRow;
    //                     if (maxRow < modif) {
    //                         maxRow = modif;
    //                     }
    //                 });
    //             }
    //
    //             if (maxRow < _this.attr('gridrow')) {
    //                 maxRow = parseInt(_this.attr('gridrow'));
    //             }
    //
    //         }).promise().done(function(){
    //             $(this).closest('.bpm_unit').attr('rows', maxRow+1+'');
    //         });
    //     });
    //     var endOperator = bpmUnit.find('.bpm_operator[data-name="end"]');
    //     if (endOperator.length>0) {
    //         endOperatorSide = endOperator.offset().left+endOperator.width();
    //         blockWidth = $('.bpm_block').width();
    //         if (endOperatorSide>$(window).width()) {
    //             container.width(endOperatorSide);
    //         } else {
    //             container.css('width','100%');
    //         }
    //     }
    //     if (false) { //($('.fake_operator').length>0) {
    //         $('.fake_operator').each(function(){
    //             if ($(this).attr('gridrow')!='NaN' && parseInt($(this).attr('gridrow'))>parseInt($(this).closest('.bpm_unit').attr('rows'))) {
    //                 $(this).closest('.bpm_unit').attr('rows',$(this).attr('gridrow')+'');
    //             }
    //         });
    //     }
    // },
    recountNextOperators : function(nextInd, direction, endBranches){
        ProcessObj.BPM.markOperators(nextInd);
        ProcessObj.BPM.moveMarkedOperators(direction);
        ProcessObj.BPM.unmarkOperators();
    },
    setEndBranchNumber : function(path){
        prevOpInd = path.attr('arr-begin');
        lastOpInd = prevOpInd;
        andInd = $('.bpm_operator[end-branches="'+path.attr('arr-end')+'"]').data('unique_index');
        cycle=true;
        while (cycle) {
            if (prevOpInd == andInd) {
                cycle=false;
                if ($('svg.arrows path.arrow[arr-end="'+lastOpInd+'"][arr-begin="'+andInd+'"]').length>0) {
                    branchN=$('svg.arrows path.arrow[arr-end="'+lastOpInd+'"][arr-begin="'+andInd+'"]').attr('branch');
                } else {
                    branchN=$('svg.arrows path.arrow[arr-end="'+path.attr('arr-end')+'"][arr-begin="'+andInd+'"]').attr('branch');
                }
            } else {
                lastOpInd = prevOpInd;
                prevOpInd = $('svg.arrows path.arrow[arr-end="'+prevOpInd+'"]').attr('arr-begin');
                cycle=true;
            }
        }
        return branchN;
    },
    defineEndBranches : function(unique_index){
        // unique_index - index of I/OR 
        var endBranchesInd, nextOp = ProcessObj.defineNextOperator(unique_index);
        for (i=0; i<100; i++) {
            if (typeof(nextOp)=='object') {
                nextOp = nextOp[0]
            }
            pointsCounter = 1;
            if ($('svg.arrows path.arrow[arr-end="'+nextOp+'"]').length>1 && pointsCounter == 1) {
                endBranchesInd = nextOp;
                break;
            }
            if ($('svg.arrows path.arrow[arr-end="'+nextOp+'"]').length>1) {
                pointsCounter--;
            }
            if ($('svg.arrows path.arrow[arr-begin="'+nextOp+'"]').length>1) {
                pointsCounter++;
            }
            nextOp = ProcessObj.defineNextOperator(nextOp);
        }
        // endBranchesIndex - final branch operator
        return endBranchesInd;
    },
    defineNextOperator : function(unique_index){
        if (typeof(unique_index)=='object') {
            unique_index = unique_index.data('unique_index');
        }
        if ($('svg.arrows path.arrow[arr-begin="'+unique_index+'"]').length==1) {
            nextOperatorInd = $('svg.arrows path.arrow[arr-begin="'+unique_index+'"]').attr('arr-end');
        } else if ($('svg.arrows path.arrow[arr-begin="'+unique_index+'"]').length>1) {
            var nextOperatorInd = [];
            $('svg.arrows path.arrow[arr-begin="'+unique_index+'"]').each(function(){
                nextOperatorInd.push($(this).attr('arr-end'));
            });
        }
        //NextOperatorInd - next operator index or array of indexes in case of branches
        return nextOperatorInd
    },
    refreshStatus : function(dataShema, parametr){
        if (ProcessObj.mode == ProcessObj.PROCESS_MODE_RUN) {
            // debugger;
            // var dataShemaArr = dataShema; // (new Function("return " + dataShema + ";")());
            // if (typeof dataShema == "string") {
            //     dataShemaArr = JSON.parse(dataShema.substring(1,dataShema.length-1));
            // }
            var dataShemaArr = (new Function("return " + dataShema + ";")());
            $.each(dataShemaArr, function (key, json) {
                $.each(json.elements, function() {
                    if (parametr=='all') {
                        $('.element[data-type="operation"][data-unique_index="'+this.unique_index+'"]').data('status',this.status).attr('data-status',this.status+'');
                    } else {
                        if (this.unique_index == parametr) {
                            $('.element[data-type="operation"][data-unique_index="'+this.unique_index+'"]').data('status',this.status).attr('data-status',this.status+'');
                        }
                    }
                });
            });
            $.each(Arrows.get(), function() {
                var _this = $(this);
                var thisColor = $('.element[data-type="operation"][data-unique_index="'+_this.attr('arr-begin')+'"] .bpm_body').css('background-color');
                if (thisColor=='rgb(255, 255, 255)') {
                    thisColor = 'rgb(197, 197, 197)';
                } else {
                    var arrowBegin = _this.attr('arr-begin'),
                        arrowEnd = _this.attr('arr-end');

                    if ($('.bpm_operator[data-unique_index="' + _this.attr('arr-begin') + '"]').is('[data-name=condition]')) {
                        $.each(JSON.parse(dataShema)[0].elements, function (key, val) {
                            if (val.unique_index == arrowBegin) {
                                $.each(val.arrows, function (key, val) {
                                    if (val.unique_index == arrowEnd) {
                                        if (val.status == ProcessObj.PROCESS_ARROW_STATUS_UNACTIVE && ProcessObj.process_status != ProcessObj.PROCESS_B_STATUS_TERMINATED) {
                                            thisColor = 'rgb(197, 197, 197)';
                                        } else {
                                            thisColor = 'rgb(255, 124, 84)';
                                            if (ProcessObj.process_status != ProcessObj.PROCESS_B_STATUS_TERMINATED) {
                                                _this.attr('is-active','true')
                                            }
                                        }
                                        return false;
                                    }
                                });
                            }
                        });
                    }
                }
                _this.attr('stroke', thisColor);
            });

            $('svg.arrows path[is-active]').each(function () {
                $(this).remove().clone().removeAttr('is-active').appendTo($('svg.arrows'));
            });
        }
    },

    branchesManage : function(branchesCount, _unique_index, callback){ //creating and deleting branches
        var arrows = $('svg.arrows path.arrow'),
            bpmOperator = $('.bpm_operator');
        var thisOp = bpmOperator.filter('[data-unique_index="'+_unique_index+'"]'),
            nextOp = bpmOperator.filter('[data-unique_index="'+arrows.filter('[arr-begin="'+_unique_index+'"]').attr('arr-end')+'"]');
        var branchesOld = arrows.filter('[arr-begin="'+_unique_index+'"]').length;
        if (branchesCount>branchesOld) { // add branches
            var createCount = branchesCount-branchesOld,
                arrowBegin = arrows.filter('[arr-begin="'+_unique_index+'"]'),
                i=0;

            BpmModel.addNewBranch = true;

            if (branchesOld==1) { // working only in first operator incertion when only one branch
                arrowBegin.attr('branch','1');
                barchesEndInd = arrowBegin.attr('arr-end');
                modifier = bpmOperator.filter('[data-unique_index="'+barchesEndInd+'"]').offset().top - $('svg.arrows').offset().top -6;
            } else if (branchesOld>1) { // when branches more than one
                barchesEndInd = thisOp.attr('end-branches');//nextOp.data('unique_index');
                arrowBegin = arrows.filter('[arr-begin="'+_unique_index+'"][branch="'+branchesOld+'"]');
                if (arrowBegin.attr('arr-end')==barchesEndInd) {
                    var modifier = arrowBegin.attr('modifier');
                } else if (arrowBegin.attr('arr-end')!=barchesEndInd) {
                    beginOfBranchInd = arrowBegin.attr('arr-end');
                    ProcessObj.BPM.markOperators(beginOfBranchInd, barchesEndInd);
                    markedMass = [];
                    $('.bpm_operator[mark="marked"]').each(function(){
                        markedMass.push($(this).offset().top - $('svg.arrows').offset().top);
                        $(this).removeAttr('mark');
                    });
                    var modifier = Math.max.apply(null, markedMass)-6;
                }
            } else {
            }
            // modifier need to update in recount
            while (createCount>i) {
                $('svg.arrows').prepend(arrows.filter('[arr-begin="'+_unique_index+'"][branch="1"]').clone(true).attr('branch-end','true').attr('branch',branchesOld+i+1+'').attr('arr-end',barchesEndInd+'')); //.attr('modifier',modifier+''));
                i++;
            }
        } else if (branchesCount<branchesOld) { // delete branches
            var _function = function(){
                i = branchesOld;
                while(i > branchesCount) {
                    var item = arrows.filter('[arr-begin="' + _unique_index + '"][branch="' + i + '"]');
                    if(item.attr('arr-end') != thisOp.attr('end-branches')){ // cheking if not empty branch
                        index = item.attr('arr-end');
                        stopIndex = thisOp.attr('end-branches');
                        ProcessObj.BPM.markOperators(index, stopIndex);
                    }
                    item.remove();
                    i--;
                }

                if(!thisOp.attr('end-branches')){
                    thisOp.attr('end-branches', nextOp.data('unique_index') + '');
                }
            }

            Message.show([{'type':'confirm', 'message': Message.translate_local('Operators inside the branches will be removed') + '?'}], false, function(_this_c){
                if($(_this_c).hasClass('yes-button')){
                    modalDialog.hide();
                    _function();
                    callback();
                }
            }, Message.TYPE_DIALOG_CONFIRM);
            return;
        } else {
            if(!thisOp.attr('end-branches')){
                thisOp.attr('end-branches', nextOp.data('unique_index') + '');
            }
        }
        callback && callback();
    },
    branchSignatures : function(){
        var arrows = $('svg.arrows');
        arrows.find('text').remove();
        arrows.find('path.arrow[title]').each(function(){
            var coordx, coordy, width,
                $this = $(this),
                element = $('svg.hidden text.b_title').clone(true),
                offset = 5;
            var titleBranch = $this.attr('title'),
                coordArr = $this.attr('d').split(' ');

            if (coordArr.length<16) {
                coordx = parseInt(coordArr[1])+offset;
                coordy = parseInt(coordArr[2])-offset;
                width = coordArr[4] - coordArr[1];
            } else {
                coordx = parseInt(coordArr[4])+offset;
                coordy = parseInt(coordArr[5])-offset;
                width = coordArr[7] - coordArr[1];

                if ($this.is('[branch-end="true"]')) coordx = parseInt(coordArr[1])+offset;
            }
            // text description in center
            if ($(".bpm_operator[data-unique_index='"+$this.attr('arr-begin')+"'][data-name=condition]") )
            {
                coordx += Math.floor(width / 2) - offset;
            }
            element.attr('data-id', $this.attr('arr-end')).text(titleBranch).attr({
                x: coordx,
                y: coordy
            });
            arrows.append(element);

            var svgText = arrows.find('text[data-id="'+$this.attr('arr-end')+'"]'),
                span = $('.b_bpm_top'),
                $textDynamic = $('.text-dynamic');

            if (!$textDynamic.length) {
                span.append("<div class='text-dynamic' style='float:left'></div>"); // for firefox
            }

            span = $($textDynamic.selector).text(svgText.text());

            if (span.width() > (width - 5)) {
                span.html(svgText.text()+'...');
                var str,
                    i = 100;
                while (span.width() > (width - 40) || i <= 0) {
                    str = span.text();
                    str = str.substring(0, str.length-4);
                    span.text(str+'...');
                    i--;
                }
            }
            svgText.html(span.text());
            $($textDynamic.selector).remove();
            arrows.find('[data-id]').removeAttr('data-id');
        });
    },


    // счетчик выбраных option в select[multiple]
    getCountOptions : function(select){
        if (select.val() && select.length>0) {
            select.each(function(){
                 var multiCount = $(this).val().length,
                    chosen = Message.translate_local('Selected fields');///'Выбрано полей';
                $(this).next().find('.filter-option.pull-left').text(chosen+': '+multiCount);
            })
        }
    },

    editOrViewProcess : function(){
        if (ProcessObj.is_bpm_view && ProcessObj.mode_change == ProcessObj.PROCESS_MODE_CHANGE_VIEW) {
            $('.bpm_def').addClass('hidden');
            $('.bpm_responsible_add').addClass('hidden');
            $('.bpm_uname > .crm-dropdown').addClass('hidden');
            $('.element[data-type="actions"] .element[data-type="mc_edit"]').removeClass('hidden');
            $('.element[data-type="actions"] .element[data-type="mc_view"]').addClass('hidden');
            $('div.bpm_operator').draggable({ disabled: true });
        } else if (ProcessObj.is_bpm_view && ProcessObj.mode_change == ProcessObj.PROCESS_MODE_CHANGE_EDIT) {
            $('.bpm_def').removeClass('hidden');
            $('.bpm_responsible_add').removeClass('hidden');
            $('.bpm_uname > .crm-dropdown').removeClass('hidden');
            $('.element[data-type="actions"] .element[data-type="mc_edit"]').addClass('hidden');
            $('.element[data-type="actions"] .element[data-type="mc_view"]').removeClass('hidden');
            $('div.bpm_operator').draggable({ disabled: false });//.draggable('enable');
        }
    },

    checkingShowParams : function(_body){
        var permition = false,
            _this = _body.parent(),
            _thisName =_this.data('name'),
            _thisStatus = _this.data('status');
        if (_thisName=='task' || _thisName=='agreetment' || _thisName=='data_record') {
            if (_thisStatus=='active' || _thisStatus=='done') {
                if (ProcessObj.mode==ProcessObj.PROCESS_MODE_RUN) {
                    permition = true;
                }
            }
        }
        return permition;
    }

}



;(function (exports) {
    var _private, _public, _protected, instanceCurrentPopUp, ProcessEvents,
        _self = {}; //link for instance

    _protected = {

    };
    _private = {

    };

    _public = {
        constructor: function () {
            this.events()
                .allMethod();

            this.getFilter = Base.copyObject(Filter); // clone object                        
            if (ProcessObj.mode == 'constructor' && location.search.indexOf('process_id') >= 0) {
                Global.addClass(document.querySelector('body'), 'bpm-module');
            }
            return this;
        },
        events: function () {
            var path = this.actions;

            this._events = [
                { parent: document, selector: '', event: '', func: path},
            ]
            this._events = [
                { parent: document, selector: 'li.modal_dialog[data-controller="process_view_edit"]', event: 'click', func: path.onClickProcessOpen }, // BPM open
                // Show operation params
                { parent: document, selector: '.element[data-type="responsible"] .element[data-type="operation"]:not(.and_helper) .bpm_body',
                    event: 'click', func: path.onClickShowParams },
                /*Save operation params*/
                { parent: document, selector: '.bpm_modal_dialog .element[data-type="save"]',
                    event: 'click', func: path.onClickSaveParams },
                //create new process
                { parent: document, selector: '.list-view .edit_view_select_btn-create, .process-view .edit_view_select_btn-create', event: 'click', func: path.onClickCreateNewProsess},
                /*Done operation params*/
                { parent: document, selector: '.bpm_modal_dialog .element[data-type="done"]', event: 'click', func: path.onClickDialogDone},
                // { parent: document, selector: 'li.modal_dialog a[data-controller="process_view_edit"]', event: 'click', func: path.onClickDialogPVEdit},
                { parent: document, selector:
                        '.element[data-type="params"][data-module="process"][data-name="task"] .edit_view_card_btn-save,' +
                        '.element[data-type="params"][data-module="process"][data-name="agreetment"] .edit_view_card_btn-save,' +
                        '.element[data-type="params"][data-module="process"][data-name="notification"] .edit_view_card_btn-save,' +
                        '.element[data-type="params"][data-module="process"][data-name="data_record"] .edit_view_data_record_btn-save,' +
                        '.element[data-type="params"][data-module="process"][data-name="agreetment"] .edit_view_task_task-approve, ' +
                        '.element[data-type="params"][data-module="process"][data-name="agreetment"] .edit_view_task_task-reject',
                    event: 'click', func: path.onClickSave},
                /* Delete operator*/
                { parent: document, selector: '.element[data-type="operation"]:not(.ui-state-disabled) .bpm_operator_remove', event: 'click', func: path.onClickOperatorRemove},
                { parent: document, selector: '.element[data-type="params"][data-module="process"][data-name="condition"] .element[data-type="value_condition"]', event: 'change', func: path.onChangeValueCondition},
                { parent: document, selector: '.element[data-type="params"][data-module="process"][data-name="begin"] .element[data-type="value_condition"]', event: 'change', func: path.onChangeValueBegin},

                { parent: document, selector: '.modal .element[data-name="condition"] .settings-menu .element[data-type="value_condition"]', event: 'change', func: path.onChangeValueConditionFromModal},
                /*operation "begin" - change*/
                { parent: document, selector: '.element[data-type="params"][data-module="process"][data-name="begin"] .element[data-type="object_name"], '+
                        '.element[data-type="params"][data-module="process"][data-name="begin"] .element[data-type="field_name"]', event: 'change', func: path.onChangeBeginElement},
                /*operation "condition" - change*/
                { parent: document, selector:
                        '.element[data-type="params"][data-module="process"][data-name="condition"] .element[data-type="object_name"], '+
                        '.element[data-type="params"][data-module="process"][data-name="condition"] .element[data-type="relate_module"], '+
                        '.element[data-type="params"][data-module="process"][data-name="condition"] .element[data-type="field_name"]', event: 'change', func: path.onChangeConditionElement},
                /* operation Timer change 2 */
                { parent: document, selector:
                        '.element[data-type="params"][data-module="process"][data-name="timer"] .element[data-type="object_name"], '+
                        '.element[data-type="params"][data-module="process"][data-name="timer"] .element[data-type="relate_module"], '+
                        '.element[data-type="params"][data-module="process"][data-name="timer"] .element[data-type="field_name"]',
                    event: 'change', func: path.onChangeTimerElement},
                /*operation "data_record" - change*/
                { parent: document, selector:
                        '.element[data-type="params"][data-module="process"][data-name="data_record"] .element[data-type="type_operation"],' +
                        '.element[data-type="params"][data-module="process"][data-name="data_record"] .element[data-type="module_name"],' +
                        '.element[data-type="params"][data-module="process"][data-name="data_record"] .element[data-type="record_name_list"],' +
                        '.element[data-type="params"][data-module="process"][data-name="data_record"] .element[data-type="call_edit_view"]',
                    event: 'change', func: path.onChangeDataRecord},
                { parent: document, selector: '.element[data-type="params"][data-module="process"][data-name="data_record"] .element[data-type="value_field_name"]',
                    event: 'change', func: path.onChangeElementValueFieldName},
                { parent: document, selector: '.element[data-type="params"][data-module="process"][data-name="notification"] .element[data-type="type_message"]', event: 'change', func: path.onChangeDataTypeMessage},
                /*operation "begin" - add element*/
                { parent: document, selector: '.element[data-type="params"][data-module="process"][data-name="begin"] .element[data-type="label_add_value"]',
                    event: 'click', func: path.onClickAddBegin},
                /*operation "condition" - add element*/
                { parent: document, selector: '.element[data-type="params"][data-module="process"][data-name="condition"] .element[data-type="label_add_value"]',
                    event: 'click', func: path.onClickAddCondition},
                /* operation "data_record" - add element */
                { parent: document, selector: '.element[data-type="params"][data-module="process"][data-name="data_record"] .element[data-type="label_add_value"]',
                    event: 'click', func: path.onClickAddDataRecord},
                // add responsible
                { parent: document, selector: '.element[data-type="module_relate"] .sm_extension_data', event: 'click', func: path.onClickAddResponsible},
                { parent: document, selector: '.bpm_responsible_add', event: 'click', func: path.onClickAddResponsibleParam},

                // change responsible
                { parent: document, selector: '.bpm_responsible_change', event: 'click', func: path.onResponsibleChange},
                // save responsible
                { parent: document, selector: '.modal-dialog .bpm_responsible_save', event: 'click', func: path.onResponsibleAdd},
                { parent: document, selector: '.modal-dialog .bpm_params_save', event: 'click', func: path.onResponsibleSave},
                { parent: document, selector: '.bpm_responsible_remove', event: 'click', func: path.onResponsibleRemove},
                // switch process status
                { parent: document, selector: '.element[data-type="actions"] .element[data-type="start"], ' +
                        '.element[data-type="actions"] .element[data-type="stop"], ' +
                        '.element[data-type="actions"] .element[data-type="terminate"]', event: 'click', func: path.onSwitchProcessStatus},
                // switch mode change
                { parent: document, selector: '.element[data-type="actions"] .element[data-type="mc_edit"], ' +
                        '.element[data-type="actions"] .element[data-type="mc_view"]', event: 'click', func: path.onChangeMode},
                { parent: document, selector: 'select.element[data-type="start_on_time"]', event: 'change', func: path.onChangeStartOnTime},
                { parent: document, selector: 'select.element[data-type="periodicity"]', event: 'change', func: path.onChangeSelectPeriodiCity},
                { parent: document, selector: '.bpm_modal_dialog .inputs-block .element[data-type="label_add_date"]', event: 'click', func: path.onClickDialogLabelAddDate},
                { parent: document, selector: 'select.element[data-type="type_agreetment"]', event: 'change', func: path.onChangeSelectTypeAgreetment},
                { parent: document, selector: '.bpm_modal_dialog .inputs-block .element[data-type="remove_panel"]', event: 'click', func: path.onClickRemovePanel},

                { parent: document, selector: '.modal .settings-menu .element_filter[data-name="condition_value"]',
                    event: 'keyup', func: path.inputData},
                { parent: document, selector: '.modal .settings-menu .element_filter[data-name="condition_value"]',
                    event: 'change', func: path.inputData},

                { parent: document, selector: '.element[data-name="and"] .element[data-type="number_branches"]', event: 'keyup', func: path.onKeyUpNumberBranches},
                { parent: document, selector: '.select[multiple]', event: 'change', func: path.onChangeSelectMultiple},
                { parent: document, selector: '.submodule-link:not(.participant) td', event: 'click', func: path.onClickSubModuleTD},
                //{ name: '', event: '', func: ''},
            ];

            Global.addEvents(this._events, {
                instance: this
            });

            return this;
        },
        editCard : function (element) {
            this.open(element);
        },
    };

    instanceCurrentPopUp = null; // текущее окно
    ProcessEvents = {
        _instance: null,
        _type: 'process',
        _interface: 'ProcessEvents',

        getInstance : function(status){
            if (!ProcessEvents._instance && status) {
                ProcessEvents._instance = this.createInstance();
            }
            return ProcessEvents._instance;
        },

        createInstance : function(){
            var Obj = function(){
                for(var key in ProcessEvents){
                    this[key] = ProcessEvents[key];
                }
                for(var key in _public){
                    this[key] = _public[key];
                }
            }

            return ProcessEvents._instance = new Obj().constructor();
        },
        actions: {
            onClickSubModuleTD : function(e){
                var dataId = $(this).closest('.sm_extension_data').data('id'),
                    txthtml = $(this).html(),
                    button = $(this).closest('.submodule-link').find('button.btn.dropdown-toggle');
                button.data('id',dataId);
                button.html(txthtml);
                $(this).closest('.submodule-link').removeClass('open');
                $(this).closest('.submodule-table').find('.active').removeClass('active');
                $(this).closest('.sm_extension_data').addClass('active');
            },
            onChangeSelectMultiple : function(){
                ProcessObj.getCountOptions($(this));
            },
            onKeyUpNumberBranches : function(e){
                if (e.keyCode == 13 && 0<$(this).val() && $(this).val()<11) {
                    $(this).closest('.element[data-name="and"]').find('.btn.element[data-type="save"]').trigger('click');
                } else {
                    return (e.keyCode);
                }
            },
            inputData : function (e) {
                var str,
                    $this = $(this),
                    addingEl = $this.closest('.settings-menu').find('.element[data-type="value_condition"]'),
                    addingVal = addingEl.find('option[value="'+addingEl.val()+'"]').text(),
                    value = $this.val(),
                    testvar = addingVal+' ' + value,
                    $element = $this.closest('.column').find('.element[data-type="value_scalar"], .element[data-type="value_datetime"]'),
                    arrValues = value.split('.');

                if (isNaN(arrValues[0]) && arrValues.length>1 || !value.length) {
                    $this.val($this.data('old-value'));
                } else {
                    $element.val(testvar);
                    $this.data('old-value',value);

                    if ($this.parent().is('.datepicker-range')) {
                        var $parent = $this.parent();

                        if ($this.is('.dp2')) {
                            str = $parent.find('input:first').val() + '-' + $this.val();
                        } else {
                            str = $this.val() + '-'+ $parent.find('input:last').val()
                        }
                        $element.val(addingVal + ' ' + str);
                    }
                }
                $(e.target).closest('.datepicker-range').closest('.open').addClass('opened');
            },
            onClickDialogLabelAddDate : function(){
                var _thisLi = $(this).closest('li');
                var inputsBlock = _thisLi.closest('.inputs-block');
                var unique_index = $(this).closest('.element[data-module="process"]').data('unique_index');
                var typeElement = inputsBlock.find('select.element[data-type="periodicity"]').val();

                ProcessObj.BPM.elementsActions.runOnTime.labelAddDate(typeElement, _thisLi, unique_index);
                Global.groupDropDowns(0).init($(this));
            },
            onChangeValueConditionFromModal : function(){
                var $this = $(this),
                    thisVal = $this.find('option[value="'+$this.val()+'"]').text(),
                    addingVal = $this.closest('.settings-menu').find('.element_filter[data-name="condition_value"]').val(),
                    testvar = thisVal+' '+addingVal;

                $('.crm-dropdown.open').addClass('opened').prev().filter('.element[data-type="value_scalar"], .element[data-type="value_datetime"]').val(testvar);
            },
            onClickRemovePanel : function(){
                var _this = $(this);
                var inpBl = _this.closest('.inputs-block'),
                    select = $('[data-type="value_field_name"]');
                var field = _this.closest('li').find(select).val();

                select.find('option[value="'+ field +'"]').removeClass('hide');
                _this.parent().find('.column_half:first').find('select option').each(function(){
                    var item = $(this);
                    $('[data-module="process"][data-name="data_record"] .element.col-1 .column_half:even').each(function () {
                        $(this).find('ul.dropdown-menu li').eq(item.index()).attr('value',item.attr('value'));
                    });
                });
                $('[data-module="process"][data-name="data_record"] .element.col-1 .column_half ul li[value="'+field+'"]').removeClass('hide').find('a').removeClass('hide');
                var object = _this.closest('.inputs-block').find('.add_list .element');
                _this.closest('li').remove();
                object.closest('.add_list').show();
                Global.groupDropDowns(0).init(object);
            },
            onChangeSelectTypeAgreetment : function() {
                var object = $(this).closest('li').next();
                ($(this).val() == 'external') ? object.show() : object.hide();
            },
            onChangeSelectPeriodiCity : function(){
                ProcessObj.BPM.elementsActions.runOnTime.periodicityChanged(this);
                modalDialog.afterUpdateContent();
            },
            onChangeStartOnTime : function(){
                ProcessObj.BPM.elementsActions.runOnTime.startOnTimeChanged(this);
                modalDialog.afterUpdateContent();
            },
            onChangeMode : function(){
                var _this = this;
                var process = new Process();
                process.BPM.modeChangeSwitch(_this);
                $(this).closest('.crm-dropdown.element.open').removeClass('open');
                ProcessObj.editOrViewProcess();
            },
            onSwitchProcessStatus : function(){
                ProcessObj.BPM.switchProcessStatus(this, true);
            },
            onResponsibleRemove : function(e){
                var instance = e.data.instance;

                if ($('.bpm_unit[data-type="responsible"]').length>1) {
                    instance.removeResponsible($(this));
                } else {
                    Message.show([{'type':'information', 'message': 'You can not delete last responsible'}], true);
                    $(this).closest('.crm-dropdown').removeClass('open');
                }

            },
            onResponsibleAdd : function(){
                var _this = $(this).closest('.sm_extension'),
                    action = _this.data('action');

                ProcessObj.BPM.participants.runAction(_this, action);
            },
            onResponsibleSave : function(){
                ProcessObj.BPM.bpmParamsRun(ProcessObj.PROCESS_BPM_PARAMS_ACTION_UPDATE, this);
            },
            onResponsibleChange : function(){
                ProcessObj.BPM.participants.show(this, ProcessObj.PROCESS_PARTICIPANT_ACTION_CHANGE);
            },
            onClickAddResponsibleParam : function(){
                ProcessObj.BPM.participants.show(this, ProcessObj.PROCESS_PARTICIPANT_ACTION_ADD);
            },
            onClickAddResponsible : function(){
                ProcessObj.BPM.updateRelateModule(this);
            },
            onClickAddDataRecord : function(){
                var _this = this;

                var process = new Process();
                process.BPM.changeParamsContent(_this, 'data_record', function(data){
                    var currentItem;
                    if(data.status == true){
                        var parent = $(_this.closest('[data-module="process"][data-name="data_record"]'));

                        currentItem = $(jQuery.parseHTML(data.params_result)[1]).find('[data-type="value_field_name"]').addClass('weAdded'); // we adding it
                        if (parent.length) {
                            parent.find('[data-type="value_field_name"]').not('.weAdded').each(function(){
                                currentItem.find('option[value="'+$(this).val()+'"]').addClass('hide');
                                var list = currentItem.find('option').not('.hide');
                                if (list.length) {
                                    currentItem.val(list.first().val());
                                };
                            });
                        }
                        var onlyAllowing = currentItem.find('option');
                        if (onlyAllowing.not('option.hide').length)
                        {
                            var baseWindow = $('[data-module="process"][data-name="data_record"]');
                            currentItem.find('option[value="'+currentItem.val()+'"]').addClass('hide');
                            $(_this).closest('li').before(currentItem.closest('li.form-group'));
                            if (!onlyAllowing.not('option.hide').length) {
                                baseWindow.find('.inputs-group.add_list').hide();
                            }
                            baseWindow.find('.element.col-1:last .column_half:first li.selected').addClass('hide').find('a').removeClass('hide');
                        }
                    }

                    Global.initSelects();
                    ProcessObj.activateDropdowns();
                    ProcessObj.initDatePicker();
                    ProcessObj.initTimePicker();

                    if (currentItem) currentItem.trigger('change');
                    $('.weAdded').removeClass('weAdded');
                    Global.groupDropDowns(10).init($(_this));

                    modalDialog.afterUpdateContent();
                })
            },
            onClickAddBegin : function(){
                var _this = this;

                var process = new Process();
                process.BPM.changeParamsContent(_this, 'begin', function(data){
                    var $currentLi, $select,
                        $this = $(_this),
                        $li = $this.closest('li');

                    if(data.status == true){
                        $li.before(data.params_result);
                        $('input[data-type="value_scalar"]').attr('disabled', 'disabled').attr('style', 'background-color: rgb(255, 255, 255)');
                    }
                    // fix title on branch in operator terms
                    $currentLi = $li.prev(),
                        $select = $currentLi.find('[data-type="value_condition"]');
                    $currentLi.find('[data-type="value_scalar"]').val($select.find('option[value="'+$select.val()+'"]').text());

                    Global.initSelects();
                    ProcessObj.activateDropdowns();

                    // format date_time
                    $('.modal .bpm_modal_dialog .element[data-type="settings"]').each(function(i, ul){
                        ProcessObj.BPM.prepateFilterDateTime(ul);
                    });

                    $('.modal .element[data-name="begin"] .settings-menu .selectpicker li>a').on('click', function() {
                        $(this).closest('.bootstrap-select.open').removeClass('open');
                    });
                    Global.groupDropDowns(10).init($this);

                    modalDialog.afterUpdateContent();
                })
            },
            onClickAddCondition : function(){
                var _this = this;

                var process = new Process();
                process.BPM.changeParamsContent(_this, 'condition', function(data){
                    var $currentLi, $select,
                        $this = $(_this),
                        $li = $this.closest('li');

                    if(data.status == true){
                        $li.before(data.params_result);
                        $('input[data-type="value_scalar"]').attr('disabled', 'disabled').attr('style', 'background-color: rgb(255, 255, 255)');
                    }
                    // fix title on branch in operator terms
                    $currentLi = $li.prev(),
                        $select = $currentLi.find('[data-type="value_condition"]');
                    $currentLi.find('[data-type="value_scalar"]').val($select.find('option[value="'+$select.val()+'"]').text());

                    Global.initSelects();
                    ProcessObj.activateDropdowns();

                    // format date_time
                    $('.modal .bpm_modal_dialog .element[data-type="settings"]').each(function(i, ul){
                        ProcessObj.BPM.prepateFilterDateTime(ul);
                    });

                    $('.modal .element[data-name="condition"] .settings-menu .selectpicker li>a').on('click', function() {
                        $(this).closest('.bootstrap-select.open').removeClass('open');
                    });
                    Global.groupDropDowns(10).init($this);
                    instanceCurrentPopUp.data.load();
                    modalDialog.afterUpdateContent();
                })
            },
            onChangeDataTypeMessage : function(){
                var _this = this;

                var process = new Process();
                process.BPM.changeParamsContent(_this, 'notification', function(data){
                    if(data.status == true){
                        var content = '';
                        $.each(data.params_result, function(key, value){
                            if($.isArray(value)) content+= value.join('');

                        })
                        $(_this).closest('.element[data-type="params"][data-module="process"]').find('.panel-body .inputs-block').html(content);

                        Global.initSelects();
                        ProcessObj.activateDropdowns();
                        ProcessObj.getCountOptions($('.select[multiple]'));
                        Global.groupDropDowns(0).init($('.element[data-type="label_add_filter"]'));
                        modalDialog.afterUpdateContent();
                    }
                })
            },

            onChangeElementValueFieldName : function(){
                var _this = this;

                var process = new Process();
                process.BPM.changeParamsContent(_this, 'data_record', function(data){
                    if(data.status == true){
                        $(_this).closest('.element[data-type="value_block"]').find('.column_half:last-child').after(data.params_result).remove();

                        var listBlockSelect = $('[data-module="process"][data-name="data_record"] .element.col-1 .column_half:even');
                        listBlockSelect.find('select option').removeClass('hide');
                        listBlockSelect.find('ul li').removeClass('hide').find('a').removeClass('hide');
                        listBlockSelect.find('select').each(function () {
                            var item = $(this);
                            listBlockSelect.find('select option[value="'+ item.val() +'"]').addClass('hide');
                            listBlockSelect.find('ul li[value="'+ item.val() +'"]').addClass('hide');
                        });

                        Global.initSelects();
                        ProcessObj.activateDropdowns();
                        ProcessObj.initDatePicker();
                        ProcessObj.initTimePicker();
                        modalDialog.afterUpdateContent();
                    }
                })
            },

            onChangeDataRecord : function(){
                var _this = this;

                var process = new Process();
                process.BPM.changeParamsContent(_this, 'data_record', function(data){
                    if(data.status == true){
                        $(_this).closest('.element[data-type="params"][data-module="process"]').find('.panel-body .inputs-block').html(data.params_result);

                        Global.initSelects();
                        ProcessObj.activateDropdowns();
                        ProcessObj.getCountOptions($('.select[multiple]'));

                        Global.groupDropDowns(0).init($('[data-type="label_add_value"]:visible'));

                        modalDialog.afterUpdateContent();
                    }
                })
            },

            /*Save operation params*/
            onClickCreateNewProsess : function(){
                var _this = this,
                    $this = $(_this);

                ProcessObj.createFromTemplate(_this, $this.closest('.sm_extension').find('.element[data-type="template"]').val(), function(data){
                    var process = new Process();
                    process.BPM.open(data.process_id, 'run', $this);
                })
            },

            onClickDialogDone : function(){
                var _unique_index = $(this).closest('.element[data-type="params"]').data('unique_index');
                var _this = $('.inputs-block');
                ProcessObj.BPM.operationParams.done(_this, _unique_index, function(data){
                    ProcessObj.refreshStatus(data.schema, 'all');
                    ProcessObj.BPM.updateProcessStatus(data.process_status);
                    if(_this.closest('.modal-dialog').find('header .client-name .editable-field').length > 0){
                        if(ProcessObj.BPM.operationParams.settings[_unique_index].status == "unactive"){
                            ProcessObj.titleOperatorRename(_unique_index, _this.closest('.modal-dialog').find('header .client-name .editable-field').text());
                        }
                    }
                    operatorsParalelArr = [];
                    $('.bpm_operator[mark="marked"]').each(function(){
                        operatorsParalelArr.push($(this).data('unique_index'));
                    });
                    ProcessObj.BPM.deleteQeue(operatorsParalelArr, function(unique_index){
                    });
                    modalDialog.hide();
                    ProcessObj.zeroBuild(false, true);
                    ProcessObj.BPM.saveSchema();
                });

                ProcessObj.zeroBuild(false, true);
                ProcessObj.recountRespBlocks();
                ProcessObj.BPM.recountArrows();
                ProcessObj.branchSignatures();
            },

            onClickSave : function(){
                if ($(this).closest('.edit-view').find('.emoji-wysiwyg-editor').html()!=="") {
                    $(this).closest('.edit-view').find('.send_massage_activity').trigger('click');
                } else if ($(this).closest('.edit-view').find('.task_comments>.task_message .file_thumb.file_other').text() == "GDoc") {
                    $(this).closest('.edit-view').find('.emoji-wysiwyg-editor').text(Message.translate_local('Added document Google Doc'));
                    $(this).closest('.edit-view').find('.send_massage_activity').trigger('click');
                }
                var _element_name = $(this).closest('.element[data-type="params"]').data('name'),
                    _unique_index = $(this).closest('.element[data-type="params"]').data('unique_index'),
                    _this = $(this).closest('.element[data-type="params"][data-module="process"]'),
                    _params = {
                        'process_operation' : ProcessObj.BPM.operationParams.getSaveData(_this, _element_name, _unique_index)
                    };

                if($(this).hasClass('edit_view_task_task-approve')){
                    _params['operation_agreetment_approve'] = ProcessObj.PROCESS_AGREETMENT_APPROVE;
                } else if($(this).hasClass('edit_view_task_task-reject')){
                    _params['operation_agreetment_approve'] = ProcessObj.PROCESS_AGREETMENT_REJECT;
                }

                var copy_id = $(this).closest('.edit-view').data('copy_id');

                EditView.save(copy_id, _params, function(data){
                    if(data.status == 'save'){
                        ProcessObj.BPM.updateProcessStatus(data.process_status);

                        ProcessObj.BPM.schema = data.schema;

                        if (_this.find('header .client-name .editable-field').length>0 && $('.modal .element[data-name="data_record"]').length<1) {
                            ProcessObj.titleOperatorRename(_unique_index, _this.find('header .client-name .editable-field').text());
                        }

                        modalDialog.hide();
                        ProcessObj.refreshStatus(data.schema, 'all');

                        ProcessObj.BPM.saveSchema();
                        HeaderNotice.refreshAllHeaderNotices();
                    }
                }, '/module/BPM/saveSchemaOperationCard/' + ProcessObj.copy_id);


            },
            onChangeValueBegin : function(){
                var listOfValues,
                    $this = $(this),
                    $select = $this.closest('.element[data-type="params"][data-module="process"]').find('.element[data-type="field_name"]'),
                    $inpBlock = $this.closest('.inputs-block'),
                    keyWindow = $this.closest('.panel[data-unique_index]').attr('data-unique_index'),
                    maxBranch = parseInt($inpBlock.find('>li[branch]:last').attr('branch'));

                ProcessObj.listOfElements[keyWindow].branch = $this.closest('li[branch]').attr('branch');

                listOfValues = instanceCurrentPopUp.listValuesOfFilters($inpBlock, keyWindow, maxBranch);
                $.each($inpBlock.find('>li[branch]'), function (key, data) {
                    var _this = $(data).find('[data-name="condition_value"]');

                    if (_this.is('.dp1,.dp2')) {
                        _this = _this.closest('.datepicker-range');
                    }

                    listOfValues.set(_this, $(data).attr('branch'));
                })

                $this.closest('.crm-dropdown').addClass('opened');
                $select.trigger('change');
            },
            onChangeValueCondition : function(){
                var listOfValues,
                    $this = $(this),
                    $select = $this.closest('.element[data-type="params"][data-module="process"][data-name="condition"]').find('.element[data-type="field_name"]'),
                    $inpBlock = $this.closest('.inputs-block'),
                    keyWindow = $this.closest('.panel[data-unique_index]').attr('data-unique_index'),
                    maxBranch = parseInt($inpBlock.find('>li[branch]:last').attr('branch'));

                ProcessObj.listOfElements[keyWindow].branch = $this.closest('li[branch]').attr('branch');

                listOfValues = instanceCurrentPopUp.listValuesOfFilters($inpBlock, keyWindow, maxBranch);
                $.each($inpBlock.find('>li[branch]'), function (key, data) {
                    var _this = $(data).find('[data-name="condition_value"]');

                    if (_this.is('.dp1,.dp2')) {
                        _this = _this.closest('.datepicker-range');
                    }

                    listOfValues.set(_this, $(data).attr('branch'));
                })

                $this.closest('.crm-dropdown').addClass('opened');
                $select.trigger('change');
            },
            onChangeBeginElement : function(){
                var _this = $(this);

                var key = _this.closest('.panel[data-unique_index]').attr('data-unique_index'),
                    popUp = ProcessObj.listOfElements[key];

                start_on_time = $(_this).closest('.element[data-name="begin"]').find('.element[data-type="start_on_time"]').val();

                if(start_on_time == 'start_on_after_created_entity'){
                    return;
                }

                var process = new Process();

                // if (_this.is('[id="field_name"]') && !popUp.branch) {
                //     var link = _this.closest('.inputs-block').find('.add_list .operations>a');
                //     instanceCurrentPopUp.init(link);
                //     instanceCurrentPopUp.listValuesOfFilters(link.closest('ul.inputs-block'), key, 10).load();
                // }

                instanceCurrentPopUp = instanceCurrentPopUp || Global.groupDropDowns(10);
                var link = _this.closest('.inputs-block').find('.add_list .operations>a');
                instanceCurrentPopUp.init(link);
                instanceCurrentPopUp.listValuesOfFilters(link.closest('ul.inputs-block'), key, 10).load();

                process.BPM.changeParamsContent(_this, 'begin', function(data){
                    if(data.status == true){
                        var inpBl = _this.closest('ul.inputs-block');

                        var inputs_block = _this.closest('.element[data-type="params"][data-module="process"]').find('.panel-body .inputs-block');

                        inputs_block.find('.dinamic').remove();
                        inputs_block.append(data.params_result)

                        Global.initSelects();
                        ProcessObj.activateDropdowns();

                        if (!instanceCurrentPopUp) {
                            instanceCurrentPopUp = Global.groupDropDowns(10);
                        }
                        instanceCurrentPopUp.init(inpBl.find('.add_list [data-type="label_add_value"]'));

                        $('.modal .element[data-name="begin"] .settings-menu .selectpicker li>a').on('click', function(e) {
                            $(this).closest('.bootstrap-select.open').removeClass('open');
                        });


                        $('.modal .element[data-name="begin"] .element[data-type="value_scalar"], .modal .element[data-name="begin"] .element[data-type="value_datetime"]').each(function(){
                            var inpVal = $(this).closest('.column').find('.element_filter[data-name="condition_value"]'),
                                addingEl = $(this).closest('.column').find('.element[data-type="value_condition"]'),
                                addingVal = addingEl.find('option[value="'+addingEl.val()+'"]').text(),
                                mergedVal = addingVal+' '+inpVal.val(),
                                space = mergedVal.lastIndexOf(' ');

                            if (space > -1) {
                                mergedVal = mergedVal.substring(0, space);
                            }
                            inpVal.val('');
                            $(this).val(mergedVal).attr('disabled','disabled').css('background-color','#fff');
                        });

                        if (popUp && popUp.branch) {
                            var innerDropDown = $('.inputs-block:visible >li[branch="'+popUp.branch+'"]').find('.crm-dropdown')
                            innerDropDown.addClass('open');
                            instanceCurrentPopUp.data.get()
                        }

                        // format date_time
                        $('.modal .bpm_modal_dialog .element[data-type="settings"]').each(function(i, ul){
                            ProcessObj.BPM.prepateFilterDateTime(ul);
                        });

                        modalDialog.afterUpdateContent();
                    }
                })
            },
            onChangeConditionElement : function(){
                var _this = $(this),
                    key = _this.closest('.panel[data-unique_index]').attr('data-unique_index'),
                    popUp = ProcessObj.listOfElements[key];

                var process = new Process();

                if (_this.is('[id="field_name"]') && !popUp.branch) {
                    var link = _this.closest('.inputs-block').find('.add_list .operations>a');
                    instanceCurrentPopUp.init(link);
                    instanceCurrentPopUp.listValuesOfFilters(link.closest('ul.inputs-block'), key, 10).load();
                }

                process.BPM.changeParamsContent(_this, 'condition', function(data){
                    if(data.status == true){
                        var inpBl = _this.closest('ul.inputs-block');

                        _this.closest('.element[data-type="params"][data-module="process"]').find('.panel-body .inputs-block').html(data.params_result);

                        Global.initSelects();
                        ProcessObj.activateDropdowns();

                        if (!instanceCurrentPopUp) {
                            instanceCurrentPopUp = Global.groupDropDowns(10);
                        }
                        instanceCurrentPopUp.init(inpBl.find('.add_list [data-type="label_add_value"]'));

                        $('.modal .element[data-name="condition"] .settings-menu .selectpicker li>a').on('click', function(e) {
                            $(this).closest('.bootstrap-select.open').removeClass('open');
                        });


                        $('.modal .element[data-name="condition"] .element[data-type="value_scalar"], .modal .element[data-name="condition"] .element[data-type="value_datetime"]').each(function(){
                            var inpVal = $(this).closest('.column').find('.element_filter[data-name="condition_value"]'),
                                addingEl = $(this).closest('.column').find('.element[data-type="value_condition"]'),
                                addingVal = addingEl.find('option[value="'+addingEl.val()+'"]').text(),
                                mergedVal = addingVal+' '+inpVal.val(),
                                space = mergedVal.lastIndexOf(' ');

                            if (space > -1) {
                                mergedVal = mergedVal.substring(0, space);
                            }
                            inpVal.val('');
                            $(this).val(mergedVal).attr('disabled','disabled').css('background-color','#fff');
                        });

                        if (popUp && popUp.branch) {
                            var innerDropDown = $('.inputs-block:visible >li[branch="'+popUp.branch+'"]').find('.crm-dropdown')
                            innerDropDown.addClass('open');
                            instanceCurrentPopUp.data.get()
                        }

                        // format date_time
                        $('.modal .bpm_modal_dialog .element[data-type="settings"]').each(function(i, ul){
                            ProcessObj.BPM.prepateFilterDateTime(ul);
                        });

                        modalDialog.afterUpdateContent();
                    }
                })
            },
            onChangeTimerElement : function(){
                var _this = $(this);
                var process = new Process();

                process.BPM.changeParamsContent(_this, 'timer', function(data){
                    if(data.status == true){
                        var e_dinamic = _this.closest('.element[data-type="params"][data-module="process"]').find('.panel-body .inputs-block li.dinamic');
                        _this.closest('.element[data-type="params"][data-module="process"]').find('.panel-body .inputs-block li:last').after(data.params_result);
                        e_dinamic.remove();


                        Global.initSelects();
                        ProcessObj.activateDropdowns();

                        $('.modal .element[data-name="timer"] .settings-menu .selectpicker li>a').on('click', function(e) {
                            $(this).closest('.bootstrap-select.open').removeClass('open');
                        });

                        modalDialog.afterUpdateContent();
                    }
                })
            },
            // onClickDialogPVEdit : function(el){
            //     processView.editData(el, this);
            // },
            onClickOperatorRemove : function(){
                var bpmOperator = $(this).parent();
                var nameOperator = bpmOperator.data('name');
                unique_index = bpmOperator.data('unique_index');
                var arrowEnd = $('svg.arrows path.arrow[arr-end="'+unique_index+'"]'),
                    arrowBegin = $('svg.arrows path.arrow[arr-begin="'+unique_index+'"]');
                branch = arrowBegin.attr('branch-end');

                if (branch && nameOperator !='and' && nameOperator !='condition') { // delete brunch number if delete 'and' operator
                    if ($('.bpm_operator[data-unique_index="'+arrowEnd.attr('arr-begin')+'"')!='and') {
                        arrowEnd.attr('branch-end',branch+'');
                    }
                    process.BPM.operationParams.delete(unique_index, function(unique_index) {
                        ProcessObj.BPM.deleteCallback(unique_index);
                    });
                } else if ((nameOperator =='and' || nameOperator =='condition') && arrowBegin.length>1) {
                    var _function = function(){

                        var connectToInd = bpmOperator.attr('end-branches');
                        ProcessObj.BPM.markOperators(unique_index, connectToInd);
                        var indexes = [];
                        bpmOperator.removeAttr('mark');
                        $('.bpm_operator[mark]').each(function(){
                            var inInd = $(this).data('unique_index');
                            indexes.push(inInd);
                        });
                        andGridCol = parseInt(bpmOperator.attr('gridcol'));
                        //indexes = ProcessObj.BPM.getAllBranchIndexes(unique_index, 'all');
                        var indAfterHelper = ProcessObj.defineNextOperator(connectToInd),
                            deletedInd = unique_index;
                        if(indexes.length != 0){
                            ProcessObj.BPM.deleteQeue(indexes, function(unique_index){
                                //ProcessObj.BPM.deleteCallback(unique_index);
                                ProcessObj.BPM.deleteQeueCallback(deletedInd, indAfterHelper);
                                moveCounter = parseInt($('.bpm_operator[data-unique_index="' + indAfterHelper + '"').attr('gridcol')) - parseInt(andGridCol);
                                for(i = 0; i < moveCounter; i++){
                                    ProcessObj.recountNextOperators(indAfterHelper, 'left');
                                }
                            });
                        } else {
                            nextOp = arrowBegin.attr('arr-end');
                            arrowEnd.attr('arr-end', nextOp + '');
                            moveCounter = parseInt($('.bpm_operator[data-unique_index="' + nextOp + '"').attr('gridcol')) - parseInt(andGridCol);
                            for(i = 0; i < moveCounter; i++){
                                ProcessObj.recountNextOperators(nextOp, 'left');
                            }
                        }
                        arrowBegin.remove();
                        process.BPM.operationParams.delete(unique_index, function(unique_index){
                            var indHelper = $('.bpm_operator[data-unique_index="' + unique_index + '"').attr('end-branches');
                            ProcessObj.BPM.deleteCallback(unique_index);
                            if(indHelper){
                                process.BPM.operationParams.delete(indHelper, function(indHelper){
                                    ProcessObj.BPM.deleteCallback(indHelper);
                                });
                            }
                        });
                        /*$.each(indexes,function(i,val){
                         $('svg.arrows path.arrow[arr-begin="'+val+'"]').remove();
                         $('.bpm_operator[data-unique_index="'+val+'"]').remove();
                         });*/

                        /*$('svg.arrows path.arrow[arr-end="'+$(this).parent().attr('end-branches')+'"]').each(function(){
                         $(this).removeAttr('branch-end');
                         });*/


                        //andGridCol = parseInt($(this).parent().attr('gridcol'));
                        //andGridRow = parseInt($(this).parent().attr('gridrow'));
                    }

                    Message.show([{'type':'confirm', 'message': Message.translate_local('Operators inside the branches will be removed')}], false, function(_this_c){
                        if($(_this_c).hasClass('yes-button')){
                            modalDialog.hide();
                            _function();
                            ProcessObj.branchSignatures();
                        }
                    }, Message.TYPE_DIALOG_CONFIRM);

                } else {
                    if ($(this).parent().data('name')=='task') {
                        prevTaskInd = $('svg.arrows path.arrow[arr-begin="'+unique_index+'"]').attr('arr-end');
                        if (prevTaskInd && $('.bpm_operator[data-unique_index="'+prevTaskInd+'"]').data('name')=='agreetment') {
                            process.BPM.operationParams.delete(prevTaskInd, function(index) {
                                ProcessObj.BPM.deleteCallback(index);
                            });
                        }
                    }
                    process.BPM.operationParams.delete(unique_index, function(index) {
                        ProcessObj.BPM.deleteCallback(index);
                    });
                }
                if ($('.bpm_operator[end-branches="'+$(this).parent().data('unique_index')+'"]').length>0) {
                    ProcessObj.BPM.branchesRestore();
                }
                //var nextInd = $('svg.arrows path.arrow[arr-begin="'+unique_index+'"]').attr('arr-end'); //#multipath remeke for
                ProcessObj.branchSignatures();
            },
            onClickSaveParams : function(){
                var _func_save,
                    $this = $(this),
                    _element_name = $this.closest('.element[data-type="params"]').data('name'),
                    _unique_index = $this.closest('.element[data-type="params"]').data('unique_index'),
                    _this = $('.inputs-block'),
                    arrows = $('svg.arrows');

                _func_save = function() {

                    ProcessObj.BPM.unmarkOperators();
                    ProcessObj.BPM.operationParams.save(_this, _element_name, _unique_index, function(data){

                        ProcessObj.refreshStatus(data.schema, 'all');
                        ProcessObj.BPM.updateProcessStatus(data.process_status);
                        if(_this.closest('.modal-dialog').find('header .client-name .editable-field').length > 0){
                            if(ProcessObj.BPM.operationParams.settings[_unique_index].status == "unactive"){
                                ProcessObj.titleOperatorRename(_unique_index, _this.closest('.modal-dialog').find('header .client-name .editable-field').text());
                            }
                        }

                        operatorsParalelArr = [];
                        $.each($('.bpm_operator[mark="marked"]'), function(){
                            operatorsParalelArr.push($(this).data('unique_index'));
                        });
                        ProcessObj.BPM.deleteQeue(operatorsParalelArr, function(unique_index){});

                        if(data.messages){
                            Message.show(data.messages, false);
                        } else {
                            modalDialog.hide();

                            ProcessObj.BPM.saveSchema();
                        }

                    });
                    ProcessObj.recountRespBlocks();
                    ProcessObj.BPM.recountArrows();
                    ProcessObj.branchSignatures();
                }

                switch (_element_name) {
                    case 'and': {
                        //change number of branches for next remove
                        function compareOffSet(arrowA, arrowB) {
                            return parseInt($(arrowA).attr('d').split(' ')[5]) > parseInt($(arrowB).attr('d').split(' ')[5]) ? 1 : -1;
                        }

                        arrows.find('path[branch][arr-begin="'+_unique_index+'"]').sort(compareOffSet).each(function (index) {
                            $(this).attr('branch',index+1);
                        });
                        var branchesCount = _this.find('.element[data-type="number_branches"]').val();
                        ProcessObj.branchesManage(branchesCount, _unique_index, _func_save);
                        return;
                    }
                    case 'condition': {
                        var _function,
                            arrowBegin = arrows.find('path.arrow[arr-begin="'+_unique_index+'"]'),
                            bpmOperator = $('.bpm_operator[data-unique_index="'+_unique_index+'"]'),
                            branchesCount = _this.find('.counter').length,
                            arrowsCount = arrowBegin.length,
                            endBranches = bpmOperator.attr('end-branches');

                        _function  = function(){

                            if(branchesCount > 1 && !endBranches){
                                ProcessObj.BPM.createHelperAnd(_unique_index);
                                var pathEnd = arrowBegin.attr('arr-end');
                                bpmOperator.attr('end-branches', pathEnd + '');
                                var nextOp = ProcessObj.defineNextOperator(pathEnd);
                                ProcessObj.recountNextOperators(nextOp, 'right');
                            }
                            for(i = 1; i < arrowsCount + 1; i++){
                                if(_this.find('.inputs-group[branch="' + i + '"]').length < 1){
                                    var branch = arrows.find('path.arrow[arr-begin="' + _unique_index + '"][branch="' + i + '"]');
                                    if(branch && !branch.attr('branch-end')){
                                        ProcessObj.BPM.markOperators($(branch).attr('arr-end'), bpmOperator.attr('end-branches'));
                                        branch.remove();
                                    } else {
                                        branch.remove();
                                    }
                                }
                            }
                            if(branchesCount == 1 && endBranches){
                                $('.bpm_operator[data-unique_index="' + endBranches + '"]').attr('mark', 'marked');
                                var pathes = arrows.find('path.arrow');
                                var leave = pathes.filter('[arr-begin="' + endBranches + '"]');
                                pathes.filter('[arr-end="' + endBranches + '"]').attr('arr-end', leave.attr('arr-end'));
                                leave.remove();
                                bpmOperator.removeAttr('end-branches');
                            }
                            var pathClone = arrowBegin.first().clone(true),
                                $listOfCounter = _this.find('.counter');

                            $.each($listOfCounter, function(index){
                                var $inpGrp = $(this).closest('li.inputs-group'),
                                    valFC = $inpGrp.find('.column>.element').not('select.element').not('.settings'),
                                    branch = $inpGrp.attr('branch');

                                valFC = valFC.is('input') ? valFC.val() : valFC.find('button').text();
                                if(!index){
                                    var pathes = arrows.find('path.arrow[arr-begin="' + _unique_index + '"]');
                                    var currentPath = ((pathes.is('[branch=1]')) ? pathes.filter('[branch=1]') : pathes.not('[branch]'));
                                    if(!pathes.not('[branch]').length
                                        && $inpGrp.closest('ul').find('li[branch]').length > 0
                                        && !pathes.filter('[branch=1]').length){
                                        currentPath = pathes.filter('[branch=2]');
                                    }
                                    ;
                                    currentPath.attr({
                                        title: valFC,
                                        branch: 1
                                    });
                                }
                                else {
                                    var endBranches = $('.bpm_operator[data-unique_index="' + _unique_index + '"]').attr('end-branches'),
                                        pathSecClone = pathClone.clone(true).attr({
                                            title: valFC,
                                            branch: index + 1,
                                            'arr-end': endBranches
                                        }),
                                        $path = arrows.find('path.arrow[arr-begin="' + _unique_index + '"]');

                                    if(branch){
                                        $path.filter("[branch='" + branch + "']").attr({
                                            title: valFC,
                                            branch: index + 1
                                        });
                                        if(!$path.is("[branch='" + branch + "']")){
                                            arrows.prepend(pathSecClone);
                                        }
                                    }
                                    else arrows.prepend(pathSecClone);
                                }
                            });

                            var listOfInnerPath = arrows.find('path.arrow[arr-begin="' + _unique_index + '"]');
                            if($listOfCounter.length == 1 && listOfInnerPath.length != $listOfCounter && !ProcessObj.BPM.isChild(_unique_index)){
                                listOfInnerPath.attr('branch-end', 'main');
                                ProcessObj.BPM.reDrawOfArrows = null;
                            } else {
                                var nextElement = $('.element[data-unique_index="' + $('path[arr-begin="' + _unique_index + '"]').attr('arr-end') + '"]');
                                if(nextElement.is('.and_helper')){
                                    listOfInnerPath.not('[branch="1"]').filter('[arr-end="' + nextElement.attr('data-unique_index') + '"]').attr('branch-end', 'true');
                                    if(listOfInnerPath.length == 1) listOfInnerPath.removeAttr('branch');
                                }
                                ProcessObj.BPM.reDrawOfArrows = true;
                            }
                        };

                        if (branchesCount != arrowsCount && branchesCount < arrowsCount){
                            Message.show([{
                                'type': 'confirm',
                                'message': Message.translate_local('Operators inside the branches will be removed')
                            }], false, function(_this_c){
                                if($(_this_c).hasClass('yes-button')){
                                    modalDialog.hide();
                                    _function();
                                    _func_save();
                                }
                            }, Message.TYPE_DIALOG_CONFIRM);
                            return;
                        } else {
                            _function();
                        }

                        break;
                    }
                    case 'scenario': {
                        _this.find('textarea#code').val(bpmOperatorScript.getValue());
                        ProcessObj.scenario.init();
                        break;
                    }
                    default: {
                        break;
                    }
                }
                _func_save();
            },
            // Show operation params
            onClickShowParams : function(){ //:not(.ui-state-disabled)
                if ($(this).parent().hasClass('ui-state-disabled')) {
                    var permitionShow = ProcessObj.checkingShowParams($(this));
                    if (!permitionShow) {
                        return false;
                    }
                }
                Preloader.modalShow();
                var _this = $(this).parent();
                intervalID = setInterval(checking, 100);
                function checking() {
                    if ($( 'div.fake-backdrop' ).length>0) {
                        clearInterval(intervalID);
                        var data = process.BPM.operationParams.getOperationChevronData(_this);
                        process.BPM.operationParams.show(data, function(data){
                            if(data.status){
                                var $content = $($(data)[0].html);

                                EditView.replaceForLink();
                                HeaderNotice.refreshAllHeaderNotices();
                                niceScrollCreate($('.submodule-table'));

                                setTimeout(function () {
                                    var link = $('.add_list .operations>a'),
                                        key = link.closest('[data-type="params"]').attr('data-unique_index');

                                    if (key) {
                                        instanceCurrentPopUp = Global.groupDropDowns(10);
                                        instanceCurrentPopUp.init(link);
                                        instanceCurrentPopUp.listValuesOfFilters(link.closest('ul.inputs-block'), key, 10).load();
                                    }
                                    // niceScrollCreate($('.bpm_modal_dialog .dropdown-menu.inner.selectpicker'));
                                    modalDialog.afterUpdateContent();
                                },400);

                                var key = $content.find('[data-type][data-unique_index]').attr('data-unique_index');

                                if ($content.find('[data-name="scenario"]').length) {
                                    ProcessObj.scenario.init();
                                    ProcessObj.scenario.render();
                                    setTimeout(function () {
                                        $('[data-name="scenario"] .col-1 .column').css({
                                            'max-height': $(window).height() - 340
                                        })
                                    },400)
                                }

                                if (!ProcessObj.listOfElements) {
                                    ProcessObj.listOfElements = {}
                                }
                                ProcessObj.listOfElements[key] = {};
                                ProcessObj.activateDropdowns();

                                Global.addOperationInSDM();

                                //TODO: on test, I added this for participant in EV
                                Global.initHandler();

                                if (location.search.indexOf('unique_index')>=0) { // remove unique_index from URL
                                    var order = location.href.indexOf('&unique_index');
                                    window.history.pushState({} ,"",location.href.replace(location.href.substring(order,order.length),''));
                                }
                            }
                        });
                    }
                }
            },
            onClickProcessOpen : function(e){
                e.data.instance.open(this);
            },
            editView : {
                onClickSave : function($element){
                    var $view = $element.closest('.edit-view');

                    if ($view.find('.emoji-wysiwyg-editor').html() !== "") {
                        $view.find('.send_massage_activity').trigger('click');
                    }

                    var this_template = $view.data('this_template'),
                        id =  $view.data('id'),
                        bpm_block_length = $('.bpm_block').length,
                        parent_ev = ($view.data('parent_copy_id') && $view.data('parent_data_id'))

                    if(((this_template && !id) || bpm_block_length) && parent_ev == false){
                        EditView.save($view.data('copy_id'), null, function(data){
                            var process = new Process();
                            process.BPM.open(data.id, 'constructor', $element);
                        });
                    } else {
                        var ev = modalDialog.getInstanceFromStorage(EditView._interface) || EditView.createInstance();

                        ev.save($view.data('copy_id'));
                    }
                }
            },
        },
        removeResponsible : function (_this) {
            var $this = $(_this),
                targetUnit = $this.closest('.bpm_unit').prev();

            if (targetUnit.hasClass('element')) {
                var targetRows = parseInt($this.closest('.bpm_unit').prev().attr('rows'));

                $this.closest('.bpm_unit').find('.bpm_operator').each(function() {
                    var $prevRespons = $(this).closest('.bpm_unit').prev().find('.bpm_tree');
                    var newRow = parseInt($(this).attr('gridrow'))+targetRows;
                    if (newRow >= $(this).closest('.bpm_unit').prev().attr('rows')) {
                        $(this).closest('.bpm_unit').prev().attr('rows',newRow+1+'');
                    }
                    $(this).attr('gridrow',newRow+'').appendTo($prevRespons);
                });
                $this.closest('.bpm_unit').remove();
            } else {
                var targetUnit = $this.closest('.bpm_unit').next(),
                    thisRows = parseInt($this.closest('.bpm_unit').attr('rows')),
                    newRows = parseInt(targetUnit.attr('rows'))+thisRows;
                targetUnit.attr('rows',newRows+'');

                targetUnit.find('.bpm_operator').each(function() {
                    var newRow = parseInt($(this).attr('gridrow'))+thisRows-1;
                    $(this).attr('gridrow',newRow+'');
                });
                $this.closest('.bpm_unit').find('.bpm_operator').each(function() {
                    $(this).appendTo(targetUnit.find('.bpm_tree'));
                });
                $this.closest('.bpm_unit').remove();
            }
            ProcessObj.BPM.recountArrows();
            ProcessObj.BPM.saveSchema();
        },
        allMethod : function () {
            var event;

            ProcessObj.statusRightPanel();

            if (!window.backForward || Global.isBmpView()) {
                ProcessObj.init();
                ProcessObj.editOrViewProcess();
            }

            if(ProcessObj.is_bpm_view && ProcessObj.mode == ProcessObj.PROCESS_MODE_RUN){
                ProcessObj.BPM.bpmParamsRun(ProcessObj.PROCESS_BPM_PARAMS_ACTION_CHECK);
            }

            Participant.isExistResponsible = function(_this){
                var element_panel = $(_this).closest('.element[data-type="params"]');

                var responsible = $('.bpm_block .element[data-name="'+element_panel.data('name')+'"][data-unique_index="'+element_panel.data('unique_index')+'"]').closest('.element[data-type="responsible"]');

                if(responsible && responsible.length){
                    return true;
                }

                var edit_view = $(_this).closest('.edit-view');
                var participant = edit_view.find('.element[data-type="block_participant"]');
                if(participant && participant.length){
                    if(!participant.find('.participants .element[data-type="block-card"] .element.active').length){
                        return false;
                    }
                }

                var participant_related = edit_view.find('.buttons-block .element_relate_participant');
                if(participant_related && participant_related.length){
                    if(!participant_related.data('ug_id')){
                        return false;
                    }
                }

                return true;
            }


            // process-view edit
            event = 'li.modal_dialog[data-controller="process_view_edit"]';
            $(document).off('click', event);

            // убрали относительно задачи #918
            // $(document).on('keyup', function(e) {
            //     if (e.keyCode === 27) { // esc
            //         if ($('.sm_extension.checking_modal:visible').length) {
            //             return false;
            //         } else {
            //             modalDialog.hide();
            //         }
            //     }
            // });

            event = '.element[data-type="params"] .element[data-type="day_in_month"]+.bootstrap-select, .bootstrap-select';
            $('body').off('click', event).on('click', event, function(){
                var $menu,
                    _this = $(this);
                if (_this.prev().is('select') && _this.prev().find('option').not('.hide').length>10) {

                    $menu = _this.find('ul.dropdown-menu').height(240);
                    niceScrollCreate($menu);
                }
                if (_this.closest('[data-module="process"][data-name="data_record"]').length){
                    $('[data-type="value_field_name"] option[value="'+_this.prev().val()+'"]').addClass('hide');
                    var currentOptions = _this.parent().find('select option');
                    currentOptions.each(function(){
                        var item = $(this);
                        $('[data-type="value_field_name"]').parent().find('ul.dropdown-menu').each(function () {
                            var  li = $(this).find('li').eq(item.index());
                            li.attr('value',item.attr('value'));
                        });
                    });

                    $('[data-module="process"][data-name="data_record"] .element.col-1 .column_half:even select').each(function () {
                        var item = $(this);
                        currentOptions.filter('[value="'+ item.val() +'"]').addClass('hide');
                        _this.find('ul li[value="'+ item.val() +'"]').addClass('hide');
                    });
                }
            });

            $('body').on('click', function () {
                delete window.backForward;
            });

            $(window).on('resize', function(){
                ProcessObj.recountRespBlocks();
            });

            if (ProcessObj.this_template) {
                $('div.bpm_block').data('this_template','1').attr('data-this_template','1');
            } else {
                $('div.bpm_block').data('this_template','0').attr('data-this_template','0');
            }


            event = '.submodule-link .element_module+ul td';
            $(document).off('click', event);

            $(window).scroll(function() {
                $('.b_bpm_fix').css({'left': $(document).scrollLeft()});
            });
            window.onload = function () {
                $('.b_bpm_fix').css({'left': $(document).scrollLeft()});
            };
        },
        open : function (element) {
            var process = new Process();
            var sm_extension = $(element).closest('.list_view_block.sm_extension, .process_view_block.sm_extension');
            var sm_extension_data = $(element).closest('.sm_extension_data');
            var mode;

            if(sm_extension.data('this_template') == false){
                mode = ProcessObj.PROCESS_MODE_RUN;
            } else {
                mode = ProcessObj.PROCESS_MODE_CONSTRUCTOR;
            }

            process.BPM.open(sm_extension_data.data('id'), mode);
        },
        remove : function () {
            $('#content_container').attr('style','');
            $('.wrapper.bpm_process').removeClass('bpm_process');
        },
        destroy: function () {
            this.remove();
            Global.removeClass(document.querySelector('body'), 'bpm-module');
            if (ProcessEvents._instance) {
                delete ProcessEvents._instance.getFilter;
                Global.removeEvents(ProcessEvents._instance._events);
                ProcessEvents._instance = null;
            }
        }
    }
    // for(var key in _private) {
    //     _self[key] = _private[key];
    // }

    exports.ProcessEvents = ProcessEvents;
    exports.instanceCurrentPopUp = instanceCurrentPopUp;
})(window);


$(document).ready(function(){
    setTimeout(function(){
        ProcessObj.BPM.autoShowTask();
    }, 500);
})

$.fn.initNewSelects = function() {
    $('.modal .edit-view[data-copy_id="8"] select').each(function(){
        if (!$(this).next().hasClass('bootstrap-select')) {
            $(this).selectpicker({style: 'btn-white',noneSelectedText: ' '});
        }
    });
    this.find('li.inputs-group:last-child .crm-dropdown > .dropdown-toggle').removeAttr('data-toggle').on('click',function(){
        $('.crm-dropdown.open').removeClass('open');
        $(this).parent().toggleClass('open');
    });
}

;(function (exports) {
    var _private, _public, _protected, Reports, ExtEditView, puclicExtEditView,
        callbacksarr = [],
        _self; //link for instance

    _protected = {

    };

    _self = {
        indicator: {
            onInit: function(e){
                var _this = this;
                Reports.Constructor.addElement(_this, 'data_analysis_indicator', function(data){
                    if(data.status == true){
                        $(_this).closest('.element[data-type="block"]').find('.element[data-type="block_data_analysis"] .element[data-type="block_panels"]').append(data.html).initNewSelects();
                        $('.element[data-type="block_data_analysis"] .inputs-block > li:last-child').hide();
                        var new_this = $(_this).closest('.element[data-type="block"]').find('.element[data-type="block_data_analysis"] .element[data-type="block_panels"]:last')

                        // Indicator
                        Reports.Constructor.changeElement(new_this, 'indicator_add', {}, function(data){
                            Reports.Constructor.changeIndicators(new_this, data);
                            Reports.Constructor.InitNewSelects();

                            // Graph
                            Reports.Constructor.changeElement(new_this, 'graph', {}, function(data){
                                Reports.Constructor.changeGraphics(new_this, data, null);
                                Reports.Constructor.InitNewSelects();
                            });

                            Reports.Constructor.initSorting();
                            Reports.Constructor.triggerElements();

                        });
                        Reports.Constructor.initSorting();
                    }

                });
            },
            onAdd: function(e){
                var _this = this;
                Reports.Constructor.changeElement(_this, 'indicator_add', {}, function(data){

                    if(data.indicator_setting_indicator){
                        $(_this).closest('.element[data-type="settings"]').find('.element[data-type="setting"]:last').after(data.indicator_setting_indicator);
                    }


                    if(data.indicator_panel){
                        $(_this).closest('.element[data-type="block"]').find('.element[data-type="block_panel"] .reports-params .element[data-type="panel"]:last').after(data.indicator_panel);
                    }

                    count_settings = $(_this).closest('.element[data-type="settings"]').find('.element[data-type="setting"]').length;
                    if(count_settings >= 4) $(_this).hide();

                    Reports.Constructor.InitNewSelects();
                    Reports.Constructor.layoutIndicators();
                    Reports.Constructor.triggerElements();
                });
            },
            onChangeDropDown: function(e){
                var _this = this;
                var index = $(_this).closest('.element[data-type="setting"]').index();

                Reports.Constructor.setIndicatorEntities(_this);

                Reports.Constructor.changeElement(_this, 'indicator_indicator', {}, function(data){
                    //indicator_panel
                    if(data.indicator_panel){
                        Reports.Constructor.changeIndicatorPanel(data.indicator_panel, null, index);

                    }
                    Reports.Constructor.InitNewSelects();
                    Reports.Constructor.layoutIndicators();
                    Reports.Constructor.triggerElements();
                });
            }
        },
        graph : {
            onClickAdd: function(){
                var _this = this;
                Reports.Report.addGraphData(_this, false, function(data){
                    Reports.Report.graphIndicator.add(_this, data);
                });
            },
            onClickRemove: function(){
                var _this = this;

                Reports.Report.graphIndicator.delete(_this);
            },
            onChangeDropDown: function(){
                //$(document).on('click', '.list_view_block[data-copy_id="8"] [data-type="settings"] ul>li', function(){
                //var _this = $(this).closest('ul').closest('li').find('select');
                var $this = $(this);
                //if ($this.index() == $this.find('[value="'+$this.val()+'"]').index()) return;

                Reports.Report.addGraphData($this, true, function(data){
                    Reports.Report.graphIndicator.change($this, data);
                });
                Reports.Report.selectsOptionsOrganize($this);
                $this.closest('.report-droptools').addClass('opened');
                setTimeout(function() {
                    $('.list_view_block[data-module="reports"] .crm-dropdown.opened').addClass('open').removeClass('opened');
                }, 300);
            },
            onInit: function() {
                Reports.Constructor.addGraphDialog();

                var event = ['click', '.modal-dialog .element[data-type="add_graph"]']
                $(document).off(event[0], event[1]).on(event[0], event[1], _self.graph.onAdd);
            },
            onAdd: function(){
                var _this = this;
                Reports.Constructor.addElement(_this, 'graph_block', function(data){
                    if(data.status == true){
                        var graph_block = $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="graph"]');
                        if(graph_block.length >= 1){
                            if($(_this).closest('.modal-dialog').find('.element[data-type="position"]').val() == 'left'){
                                graph_block.last().find('li:first-child>select').trigger('change');
                                graph_block.last().before(data.html);
                            }else if($(_this).closest('.modal-dialog').find('.element[data-type="position"]').val() == 'right'){
                                graph_block.last().attr('forced','left').find('li:first-child>select').trigger('change');
                                graph_block.last().after(data.html);
                            }else{
                                graph_block.last().after(data.html);
                            }
                        } else {
                            var data_analysis_block = $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="data_analysis"]');
                            data_analysis_block.before(data.html);
                        }
                        modalDialog.hide();
                    }

                    Reports.Constructor.InitNewSelects();
                    Reports.Constructor.triggerElements();
                })
            },
            onChangeIndicator : function(){
                var _this = this;
                Reports.Constructor.setIndicatorEntities(_this);
            }
        },
        editView : {
            onClickRemoveBlock: function(e){
                var $this = $(this),
                    instance = e.data.instance,
                    $panelOfRight = $this.closest('.inputs-panel[data-position="right"]'),
                    $panelOfLeft = $this.closest('.inputs-panel[data-position="left"]'),
                    $panelOfBottom = $this.closest('.inputs-panel[data-position="botton"]');

                if ($panelOfRight.length>0){
                    $panelOfRight.prev().removeAttr('forced').find('li:first-child>select').trigger('change');
                } else if ($panelOfLeft.length>0) {
                    $panelOfLeft.next().find('li:first-child>select').trigger('change');
                } else if ($panelOfBottom.length>0 && $panelOfBottom.prev('.inputs-panel[data-position="left"]').length>0) {
                    $panelOfBottom.prev().attr('data-position','botton').find('li:first-child>select').trigger('change');
                } else if ($panelOfBottom.length>0 && $panelOfBottom.next('.inputs-panel[data-position="right"]').length>0) {
                    $panelOfBottom.next().attr('data-position','botton').find('li:first-child>select').trigger('change');
                }

                Reports.Constructor.removeBlock(this);
                Reports.afterViewChanges(true);
            },
            onChangeDataAnalysisIndicator_DropDown: function(){
                var unique_index,
                    _this = this,
                    $this = $(this),
                    $li = $this.closest('li'),
                    selNumb = $li.index();

                if ($this.is('.element[data-type="field_name"]') && selNumb==0) {
                    var valName = $(this).val();
                    if ($this.find('option[value="'+valName+'"]').data('num')==0 || valName == '__amount__') {
                        $li.addClass('not_numb');
                    } else {
                        $li.removeClass('not_numb');
                    }
                }
                unique_index = $this.closest('.element[data-type="block_panel"]').data('unique_index');

                Reports.Constructor.changeElement(this, 'data_analysis_indicator_settings', {}, function(data){
                    Reports.Constructor.changeIndicators(_this, data);
                    Reports.Constructor.changeGraphics(_this, data, unique_index);

                    //indicator_panel
                    if(data.indicator_panel){
                        Reports.Constructor.changeIndicatorPanel(data.indicator_panel, unique_index, null);
                    }

                    Reports.Constructor.InitNewSelects();
                    Reports.Constructor.layoutIndicators();
                    Reports.Constructor.triggerElements();

                    Reports.Constructor.changeElement(null, 'update_output_elements', {}, function(data){
                        //graph_element
                        if(data.graph_element){
                            $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="graph"]').each(function(i, ul){
                                if($(_this).data('type') == 'field_name'){
                                    Reports.Constructor.changeGraphElement($(ul).find('.element[data-type="graph"]'), data.graph_element);
                                } else {
                                    var unique_index_g = $(ul).find('.element[data-type="settings"] .element[data-type="indicator"]').val();
                                    if(unique_index == unique_index_g){
                                        Reports.Constructor.changeGraphElement($(ul).find('.element[data-type="graph"]'), data.graph_element);
                                    }
                                }
                            });
                        }

                        Reports.Constructor.InitNewSelects();
                        Reports.Constructor.layoutIndicators();
                        Reports.Constructor.triggerElements();

                        Reports.afterViewChanges(true);
                    }, null, true);


                });
            },
            onChangeDataAnalysisParam_DropDown: function(){
                var _this = this;
                var unique_index = $(_this).closest('.element[data-type="block_panel"]').data('unique_index');

                var _this_pmci = $(_this).closest('.element[data-type="block_panel"]').find('.element[data-type="module_copy_id"]');

                if($(_this).val() == '__id__' || $(_this).data('selected') == '__id__'){

                    $(this).closest('ul.ui-sortable').find('select[data-type="module_copy_id"]').each(function(){
                        $(this).prop('disabled', 'disabled');
                        $(this).parent().next().find('.dropdown-menu').addClass('hide');
                    });
                    Reports.Constructor.changeElement(_this_pmci, 'data_analysis_param_module', {}, function(data){
                        //data_analysis_indicator_module_params
                        // data_analysis. Параметры
                        if(data.data_analysis_indicator_module_params){
                            $(_this).closest('.element[data-type="block"]').find('.element[data-type="block_panel"][data-data_analysis_type="data_analysis_indicator"]').each(function(i, ul){
                                var element_module = $(ul).find('.element[data-type="module_copy_id"]');
                                var element_new = $(data.data_analysis_indicator_module_params);

                                var value_copy_id = element_module.val();
                                if(value_copy_id){
                                    var is_set = element_new.find('.element[data-type="module_copy_id"] option[value="'+value_copy_id+'"]').length;
                                    if(is_set){
                                        element_new.find('.element[data-type="module_copy_id"]').val(value_copy_id);
                                        element_new = element_new.find('.element[data-type="module_copy_id_block"]');
                                        $(ul).find('.element[data-type="module_params"] .element[data-type="module_copy_id_block"]').after(element_new).remove();
                                    } else {
                                        $(ul).find('.element[data-type="module_params"]').after(element_new).remove();
                                    }
                                } else {
                                    $(ul).find('.element[data-type="module_params"]').after(element_new).remove();
                                }

                                Reports.Constructor.InitNewSelects();
                                Reports.Constructor.layoutIndicators();
                                Reports.Constructor.triggerElements();
                            })


                            var isset_modules = false;
                            var parent_module_copy_id = $(_this).closest('.element[data-type="block_panel"]').find('.element[data-type="module_copy_id"]').val();
                            var indicator_block_panels = $('.element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_indicator"]');

                            indicator_block_panels.find('.element[data-type="module_copy_id"]').each(function(i, ul){
                                if($(ul).val() == parent_module_copy_id){
                                    isset_modules = true;
                                    return false;
                                }
                            });

                            // update "field_name" list
                            if(isset_modules){
                                Reports.Constructor.changeElement(_this, 'data_analysis_indicator_settings', {}, function(data_f){

                                    indicator_block_panels.find('.element[data-type="module_copy_id"]').each(function(i, ul){

                                        if($(ul).val() == parent_module_copy_id){
                                            var element = $(data_f.data_analysis_indicator_settings).find('.element[data-type="field_name"]').closest('li');
                                            var field_name = $(ul).closest('.element[data-type="block_panel"]').find('.element[data-type="settings"] .element[data-type="field_name"]').val();
                                            element.find('.element[data-type="field_name"]').val(field_name);
                                            $(ul).closest('.element[data-type="block_panel"]').find('.element[data-type="settings"] .element[data-type="field_name"]').closest('li').after(element).remove();
                                        }
                                    });

                                    Reports.Constructor.InitNewSelects();
                                    Reports.Constructor.layoutIndicators();
                                    Reports.Constructor.triggerElements();
                                    Reports.Constructor.UpdateOutputElementsAll(_this_pmci)
                                });

                            } else {
                                Reports.Constructor.UpdateOutputElementsAll(_this_pmci)
                            }
                        }
                    });

                } else {
                    Reports.Constructor.UpdateOutputElementsAll(_this_pmci)
                }

                $(_this).data('selected', $(_this).val());

            },
            onClickIndicatorTitle: function(){
                var $editDropdown = $(this).next().find('.edit-dropdown');
                $editDropdown.addClass('opened');
                var value = $(this).text();
                $editDropdown.find('pre.invisi').text(value);
                $editDropdown.find('.form-control').val(value).width($editDropdown.find('pre.invisi').width()+2).select();
            },
            onClickIndicatorTitle_Save: function(){
                $(this).closest('.editable-block').find('.editable-field').text($(this).closest('ul').find('.form-control').val());
            },
            /* FILTERs*******************************************/
            onFilterChange: function(){
                var _this = this;

                Reports.Constructor.changeElement(this, 'filter_module_params', {}, function(data){
                    //filter_field_params
                    if(data.filter_field_params){
                        $(_this).closest('.element[data-type="block_panel"]').find('.element[data-type="field_params"]').after(data.filter_field_params).remove();
                    }
                    Reports.Constructor.InitNewSelects();
                    Reports.Constructor.layoutIndicators();
                    Reports.Constructor.triggerElements();
                    Reports.Constructor.Filter.changedFieldName($(_this).closest('.element[data-type="block_panel"]').find('.element[data-type="field_name"]'), function(){
                        Reports.Constructor.UpdateOutputElements();
                    });
                });
            },
            onFilterChange_DropDown: function(){
                var _this = this;
                Reports.Constructor.Filter.changedFieldName(_this, function(){
                    Reports.Constructor.UpdateOutputElements();
                });
            },
            onChangeConditionValue: function(){
                Reports.Constructor.UpdateOutputElements();

                var $this = $(this),
                    value = $this.val(),
                    arrValues = value.split('.');

                $this.closest('.crm-dropdown').parent().closest('[data-type="settings"]').addClass('opened');
                if (isNaN(arrValues[0]) && arrValues.length>1 || !value.length) {
                    $this.val($this.data('old-value'));
                } else {
                    $this.data('old-value', value);
                }

            },
            onChangeConditionValue_DropDown: function(){
                var _this = this;
                var block_panel = $(_this).closest('.element[data-type="block_panel"]');
                var copy_id = block_panel.find('.element[data-type="module_copy_id"]').val();
                var field_name = block_panel.find('.element[data-type="field_name"]').val();
                var condition_value = block_panel.find('.element_filter[data-name="condition"]').val();

                if(!$(_this).val()){
                    Reports.Constructor.Filter.clearConditionValue(_this);
                }

                Reports.Constructor.Filter.setConditionValue(_this, copy_id, field_name, condition_value, function(){
                    Reports.Constructor.UpdateOutputElements();
                });
            },
            onChangePeriodGraph: function(){
                var _this = this;

                Reports.Constructor.addElement(this, 'graph_element', function(data){
                    if(data.html){
                        Reports.Constructor.changeGraphElement($(_this).closest('.element[data-type="block"]'), data.html);
                        Reports.afterViewChanges(true);
                    }
                });
            },

            onChangeDataAnalysisParam: function(){
                var _this = this;
                $(this).closest('ul.ui-sortable').find('select[data-type="module_copy_id"]').each(function(){
                    $(this).prop('disabled', 'disabled');
                    $(this).parent().next().find('.dropdown-menu').addClass('hide');
                });
                Reports.Constructor.changeElement(this, 'data_analysis_param_module', {}, function(data){
                    //data_analysis_param_settings
                    if(data.data_analysis_param_settings){
                        $(_this).closest('.element[data-type="block_panel"]').find('.element[data-type="settings"]').after(data.data_analysis_param_settings).remove();
                    }
                    //data_analysis_indicator_module_params
                    if(data.data_analysis_indicator_module_params){
                        $(_this).closest('.element[data-type="block"]').find('.element[data-type="block_panel"][data-data_analysis_type="data_analysis_indicator"]').each(function(i, ul){
                            $(ul).find('.element[data-type="module_params"]').after(data.data_analysis_indicator_module_params).remove();
                        })
                    }

                    Reports.Constructor.changeFilters(_this, data);
                    Reports.Constructor.changeIndicators(_this, data);
                    Reports.Constructor.changeGraphics(_this, data, null);

                    //indicator_panel
                    if(data.indicator_panel){
                        var unique_index_list = [];
                        $(_this).closest('.edit-view').find('.element[data-type="block"][data-module="reports"][data-element_type="indicator"] .reports-params .element[data-type="panel"]').each(function(i, ul){
                            unique_index_list.push($(ul).data('unique_index'));
                        })

                        $.each(unique_index_list, function(key, unique_index){
                            Reports.Constructor.changeIndicatorPanel(data.indicator_panel, unique_index, null);
                        })

                    }

                    Reports.Constructor.InitNewSelects();
                    Reports.Constructor.initSorting();
                    Reports.Constructor.layoutIndicators();
                    Reports.Constructor.triggerElements();
                });
            },
            onClickDataAnalysisIndicator_SettingOfFilters: function(e){
                var $this = $(this),
                    $submenu = $this.closest('.element[data-data_analysis_type="data_analysis_indicator"]').find('.element[data-type="filter_block_panels"]');

                $submenu.toggleClass('hide');
                $submenu.find('.selectpicker').selectpicker({style: 'btn-white'});
                $this.closest('.settings').css('z-index', '30');
                $this.closest('ul').addClass('hide').next().addClass('b_block').find('>li').removeClass('inputs-group');

                // Add filter for indicator
                var event = ['click', '.element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_indicator"] .element[data-type="add_filter"]'];
                $(document).off(event[0], event[1]).on(event[0], event[1], _self.editView.onClickDataAnalysisIndicator_addFilters);
            },
            onClickDataAnalysisIndicator_addFilters: function(e){
                var _this = this;
                Reports.Constructor.addElement(_this, 'filter_indicator', function(data){
                    if(data.status == true){
                        var $panels = $(_this).closest('.element[data-type="filter_block_panels"]'),
                            block_panel = $panels.find('>li:last');

                        if(block_panel.length) {
                            block_panel.after(data.html).initNewSelects();
                        } else {
                            $panels.find('>.btn-element').before(data.html).initNewSelects();
                        }
                        $panels.find('>li').removeClass('inputs-group');
                    }
                    Reports.Constructor.initSorting();
                    Reports.Constructor.triggerElements();
                    Reports.Constructor.runAfter(data);
                    Reports.afterViewChanges(true);
                })
            },
            onChangeDataAnalysisIndicator: function(){
                var _this = this;
                var unique_index = $(_this).closest('.element[data-type="block_panel"]').data('unique_index');

                $(this).closest('ul.ui-sortable').find('select[data-type="module_copy_id"]').each(function(){
                    $(this).prop('disabled', 'disabled');
                    $(this).parent().next().find('.dropdown-menu').addClass('hide');
                });
                Reports.Constructor.changeElement(_this, 'data_analysis_indicator_module', {'this_ui_clear' : true}, function(data){
                    if(data.data_analysis_indicator_settings){
                        $(_this).closest('.element[data-type="block_panel"]').find('.element[data-type="settings"]').after(data.data_analysis_indicator_settings).remove();
                    }
                    Reports.Constructor.InitNewSelects();


                    Reports.Constructor.changeElement(_this, 'data_analysis_indicator_module', {'this_ui_clear' : false}, function(data){
                        if(data.indicator_panel){
                            Reports.Constructor.changeIndicatorPanel(data.indicator_panel, unique_index, null);
                        }
                        Reports.Constructor.changeFilters(_this, data);
                        Reports.Constructor.changeIndicators(_this, data);
                        Reports.Constructor.changeGraphics(_this, data, unique_index);
                        Reports.Constructor.InitNewSelects();
                        Reports.Constructor.layoutIndicators();
                        Reports.Constructor.triggerElements();
                    });

                });
            },
            onChangeTitle: function(){
                Reports.Constructor.changedDataAnalysisTitle(this);
            },
            onRemovePanel: function(){
                $(this).closest('li').hide();
                var $this = this;

                arrByDeleteFilter.push($this)

                if (deleteInterval == null) {
                    deleteInterval = setInterval(function() {
                        timer(arrByDeleteFilter[0]);
                        arrByDeleteFilter.shift();
                    }, 300);
                }

                function timer($this){
                    if (!$('.edit-view').find('li.to_remove').length) {
                        clearInterval(deleteInterval);
                        arrByDeleteFilter = [];
                        deleteInterval = null;
                    }
                    Reports.Constructor.removePanel($this);
                    return;
                }
            }
        }
    }

    puclicExtEditView = {

    }
    ExtEditView = {
        createInstance : function(_model_dialog){
            var Obj = function(){
                for(var key in EditView){
                    this[key] = EditView[key];
                }

                for(var key in _public){
                    this[key] = _public[key];
                }
            }

            Obj.prototype = Object.create(Global);

            return _self._instance = new Obj().constructor(_model_dialog);
        },
    }


    _private = {
        _instance: null,
        onAddPreloaderForGraph : function () {
            var $parent = $('.graph-area.element').parent(),
                $container = $('#list-table_wrapper_all'),
                spinner = Global.spinner;

            if (!$parent.find('>'+spinner.selector).length) {
                $parent.addClass('graph-set-preloader').append(spinner.clone().first());
            }

            $('#content_container').addClass('report-parent-graph');
            $container.addClass('set-preloader');

            if (!$container.find(spinner.selector).length && !$container.next().filter('.b-spinner:visible').length) {
                $container.addClass('init-preloader center-position').append(spinner.clone().first());
            }
        },
        onEditViewConstructorShow : function (e) {
            // $(document).off('change', '.list_view_block[data-module="reports"] .element[data-type="block"][data-element_type="graph"] .element[data-type="settings"] .element[data-type="period"]');
            var instanceReport = e.data.instance,
                instanceEditView = EditView.createInstance(modalDialog.createInstance()).setParent(ViewType.getCurrentInstance());

            instanceReport.status_opening_ev = true;
            instanceReport.openCard(this, instanceEditView);
        },
        onSave : function(){
            var _this = this,
                saveInterval = setInterval(function() { timer(_this); }, 100);

            function timer(_this){
                if ($('.edit-view').find('li.to_remove').length==0) {
                    clearInterval(saveInterval);
                    var $parent = $('.report-content .graph-area.element').parent();

                    if (!$parent.find('>'+Global.spinner.selector).length) {
                        $parent.addClass('graph-set-preloader').append(Global.spinner.clone());
                    }

                    Reports.Constructor
                        .createInstance()
                        .setElementHtml(_this)
                        .save(_this);
                    return;
                }
            }
        },
        onAddFilter : function(){
            var _this = this;
            Reports.Constructor.addElement(_this, 'filter', function(data){
                if(data.status == true){
                    $(_this).closest('.element[data-type="block"]').find('.element[data-type="block_filter"] .element[data-type="block_panels"]').append(data.html).initNewSelects();
                }
                Reports.Constructor.initSorting();
                Reports.Constructor.triggerElements();
            })
        },
        onArrayIndicatorsOnAdd : function(){
        var _this = this;
        Reports.Constructor.addElement(_this, 'indicator_block', function(data){
            if(data.status == true){
                $(_this).closest('.edit-view').find('.element[data-type="block"][data-module="reports"]:eq(0)').before(data.html).initNewSelects();
                $(_this).hide();
            }
            Reports.Constructor.InitNewSelects();
            Reports.Constructor.triggerElements();
            Reports.Constructor.layoutIndicators();
        });
        },
        onChangeFilter : function(){
            var _this = this;
            var copy_id = $(_this).closest('.filter-box-panel').find('.element_filter[data-name="module"]').val();
            var condition_value = $(_this).closest('.filter-box-panel').find('.element_filter[data-name="condition"]').val();

            var data = {
                'selected_copy_id' : $(this).closest('.filter-box-panel').find('.element_filter[data-name="module"]').val(),
                'id' : $(this).closest('.list_view_block[data-module="reports"]').data('id'),
            };

            if(!$(_this).val()){
                Filter.clearCondition(_this);
                Filter.clearConditionValue(_this);
                Filter.setConditionValue(_this, copy_id, '', condition_value);
                return;
            }

            Filter.setCondition(_this, copy_id, $(_this).val(), function(data_value){
                var condition_value = $(_this).closest('.filter-box-panel').find('.element_filter[data-name="condition"]').val();
                Filter.setConditionValue(_this, copy_id, $(_this).val(), condition_value, data);
            }, data);
        },
        onChangeModule : function(e){
             e.data.instance.filter.changePanel(this);
        },
        onChangePeriod : function(e){
            var time,
                _this = this,
                instance = e.data.instance,
                $parent = $(_this).closest('.element[data-type="block"]').find('.graph-area.element').parent();

            if (!$parent.find('>'+Global.spinner.selector).length) {
                $parent.addClass('graph-set-preloader').append(Global.spinner.clone());
            }

            time = setTimeout(function () {
                clearInterval(time);

                Reports.Report.addGraphData(_this, true, function(data){
                    Events
                        .createInstance()
                        .setType(Events.TYPE_LOAD_GRAPH)
                        .setKey('ReportLoadGraph')
                        .setHandler(function (e) {
                            Events.removeHandler({ key: 'ReportLoadGraph', type: Events.TYPE_LOAD_GRAPH});

                            Reports.preloaderForGraph.remove($('#content_container'));
                        })
                        .run();

                    data.html_graph = data.html_graph.replace('graph-set-preloader','');
                    data.html_graph = data.html_graph.replace('<div class="b-spinner"><div class="loader"></div></div>', '');
                    Reports.Report.graphIndicator.change(_this, data);
                });
            }, 100);
        },
        onOpenReports : function(e){
            var tr,
                instance = e.data.instance,
                $this = $(this);

            if ($this.closest('.filter').length) {
                return this;
            }

            base_id = null;
            var relate = $this.closest('.submodule-link').find('.element_relate, .element_relate_this, .element_relate_participant');
            if(relate.data('reloader') == 'parent'){
                base_id = relate.data('id');
            }

            $this
                .closest('.submodule-link')
                .find('.element_relate, .element_relate_this, .element_relate_participant')
                .val($this.find('.name').text())
                .data('id', $this.closest('tr').data('id'));

            $this
                .closest('.submodule-link')
                .find('.element_relate_participant')
                .data('ug_id', $this.closest('tr').data('ug_id'))
                .data('ug_type', $this.closest('tr').data('ug_type'));

            tr = $this.closest('tr');
            tr.closest('.submodule-link').find('.element_relate, .element_relate_this, .element_relate_participant').html(tr.find('td').html());

            instance.setPreloader(Preloader.createInstance())
                .setShowPreloaderHandler(function () {
                    this.setRunning(false)
                        .setWhereContentHide(Preloader.TYPE_RELOAD_СONTENT_PAGE)
                        .setSpinnerPosition(Preloader.POSITION_SPINNER_CONTENT)
                        .setPlaceForSpinner($('#container'))
                        .run();
                });
            //подовжуємо
            // instanceGlobal.preloaderShow($this.closest('tr'));
            var instanceContent = ContentReload.createInstance();

            iPreloader.implements.call(instanceContent);
            instanceContent.setPreloader(instance.getPreloader());

            Global.getInstance().setContentReloadInstance(instanceContent)

            instanceContent
                .reDefinition()
                .showPreloader();

            Reports.Report.view($this.closest('tr'), $this.closest('tr').data('id'));
        },
        onChangeFilterCondition : function(){
            var _this = this;
            var copy_id = $(_this).closest('.filter-box-panel').find('.element_filter[data-name="module"]').val();
            var field_name = $(_this).closest('.filter-box-panel').find('.element_filter[data-name="field"]').val();
            var condition_value = $(_this).closest('.filter-box-panel').find('.element_filter[data-name="condition"]').val();

            if(!$(_this).val()){
                Filter.clearConditionValue(_this);
            }

            Filter.setConditionValue(_this, copy_id, field_name, condition_value);
        },
        onFilterByResponsible : function(e){
            var tr, relate,
                $this = $(this);

            base_id = null;
            relate = $this.closest('.submodule-link').find('.element_relate, .element_relate_this, .element_relate_participant');
            if(relate.data('reloader') == 'parent'){
                base_id = relate.data('id');
            }

            $this
                .closest('.submodule-link')
                .find('.element_relate, .element_relate_this, .element_relate_participant')
                .val($this.find('.name').text())
                .data('id', $this.closest('tr').data('id'));

            $this
                .closest('.submodule-link')
                .find('.element_relate_participant')
                .data('ug_id', $this.closest('tr').data('ug_id'))
                .data('ug_type', $this.closest('tr').data('ug_type'));

            tr = $this.closest('tr');
            tr.closest('.submodule-link').find('.element_relate, .element_relate_this, .element_relate_participant').html(tr.find('td').html());

            Reports.Constructor.UpdateOutputElements();
        },
        onClickFieldParam : function () {
            var $this = $(this);
            $(this).closest('.crm-dropdown').removeClass('opened');
        },
        onClickFieldsParamsBtn : function () {
            var $this = $(this),
                $dropDown = $this.next(),
                $container = $dropDown.closest('[data-type="field_params"]');

            if ($dropDown.is('div.dropdown-menu')) {
                if ($container.offset().top + parseInt($dropDown.find('>ul').css('height')) >= $(window).height()-40) {
                    $dropDown.addClass('topAuto');
                }
            }
        },
        onClickLVTR : function () {
            instanceGlobal.preloaderShow($(this));
            Reports.Report.view(this, $(this).data('id'));
        },
        onClickSettingsMenu : function(e) {
            var $target = $(e.target);

            if (!$target.is('a')) {
                $(this).find('>li>.bootstrap-select.open').removeClass('open');
            }
        },
        onClickDialog : function(){
            var url,
                id = $('.sm_extension_data').attr('data-id'),
                pageSize = $('.pagination_size').val(),
                page = $('.pagination [name="page"]').val();

            url = '/module/reports/view/8?id=' + id + '&page_size='+ pageSize+'&page=' + page;
            var instanceEditView = EditView.createInstance();

            //TODO: change it in inner object with instance
            instanceGlobal.currentInstance._open_sub_link = true;

            instanceEditView
                .setUrlAfterSave(url)
                .editCard(this, null, function(data){
                this.runAfterEditCardLV(data);
            });
        },
        onKeyDownGraphInput : function(e){
            if (e.keyCode == 13) {
                $(this).closest('.editable-block').find('.editable-field').text($(this).val());
                $(this).closest('.edit-dropdown').removeClass('open');
            } else if (e.keyCode == 27) {
                $(this).closest('.edit-dropdown').removeClass('open');
            } else {
                return (e.keyCode);
            }
            return false;
        }
    };

    _public = {
        count_loaded_graph_ev: null,

        constructor: function () {
            this._type = 'reports';

            if (!Message.locale.dateFormats) {
                return;
            }

            this.events() // register events
                .allMethod() // все события

            this.run();
            return this;
        },
        run: function () {
            iModule.implements.call(this);

            var urlParams = Url.getParams(location.href) || {};
            if (!urlParams.id) return;

            this.search = Search.createInstance();
            this.filter = Filter.createInstance();

            iPreloader.implements.call(this);
            this.setPreloader(Preloader.createInstance());

            Search.setCommonInstance && Search.setCommonInstance(null);

            this.reDefinition();
        },
        setEmits: function () {
            var _this = this;

            Events
                .createInstance()
                .setType(Events.TYPE_DESTROY)
                .setKey('ReportsDestroy')
                .setHandler(function (e) {
                    _this.destroy();
                    return true;
                })
                .run();

            return this;
        },
        setCountLoadedGraph: function (data) {
            this.count_loaded_graph_ev = this.count_loaded_graph_ev || [];

            if (!data) {
                this.count_loaded_graph_ev = [];
            } else {
                this.count_loaded_graph_ev.push(data);
            }

            return this;
        },
        getCountLoadedGraph: function () {
            return this.count_loaded_graph_ev ? this.count_loaded_graph_ev.length : 0;
        },
        //TRUE
        editCard: function (_this, instanceEditView) {
            this.openCard(_this, instanceEditView);

            return this;
        },
        openCard: function (_this, instanceEditView) {
            //static
            var instance = Reports.getInstance();

            Reports.Constructor.edit(_this, function(data){
                instance.setCountLoadedGraph(null);

                Reports.Constructor.runAfter(data, instanceEditView);

                var count_graphs = $('.edit-view').find('[data-element_type="graph"]').find('.graph-area').length;

                if (!count_graphs) {
                    instanceEditView.afterLoadView();
                } else {
                    var time = setInterval(function () {
                        var count_loaded = instance.getCountLoadedGraph();

                        if (count_loaded >= count_graphs) {
                            clearInterval(time);
                            instance.setCountLoadedGraph(null);
                            instanceEditView.afterLoadView();
                            Reports.preloaderForGraph.remove($('.edit-view'));
                        }
                    }, 150);
                }
            });
            Preloader.modalShow();

            return this;
        },
        onClickFilterInstallSpan : function($element){
            var data = {
                'id' : $element.closest('.list_view_block[data-module="reports"]').data('id'),
            };
            Filter.show($element.closest('.sm_extension').data('copy_id'),
                $element.closest('.filter-install').data('filter_id'),
                $element.closest('.filter-install').data('name'),
                $element.closest('.filter-install').find('span').text(),
                data
            );
        },
        reDefinitionTools(instance) {
            instance.print = extTools.print;
            instance.saveToPdf = extTools.saveToPdf;
            instance.saveToExcel = extTools.saveToExcel;
            //instance
            return this;
        },
        reDefinition: function () {
            var _showPreloader,
                _this = this;

            _showPreloader = function () {
                var $list = $('.element[data-element_type="graph"]'),
                    preloaderInstance = Preloader.createInstance();

                $.each($list, function (key, value) {
                    $(this).addClass('report-parent-graph');
                    $(this).find('.graph-area').addClass('set-preloader graph-set-preloader');
                    $(this).find('.graph-area').append(Preloader.spinner.getElement());
                })

                this._contentReload = instanceGlobal.contentReload.createInstance();

                iPreloader.implements.call(this._contentReload);

                this._contentReload.setPreloader(preloaderInstance);

                preloaderInstance
                    .setPriorityDisable(false)
                    .setWhereContentHide(Preloader.REPORT)
                    .run()

                return this;
            }

            this.search.apply = function () {
                var url = this.getFullUrl(),
                    contentReload = this._contentReload;

                Global.getInstance().setContentReloadInstance(contentReload);

                contentReload.hidePreloader = function () {
                    this.preloader && this.preloader.hide();
                    Reports.preloaderForGraph.remove($('#content_container'));
                }

                contentReload
                    .prepareVariablesToGeneralContent()
                    .setUrl(url)
                    .run();

                return this;
            };
            this.search.showPreloader = function () {
                _showPreloader.call(this);
                return this;
            };
            this.filter.changePanel = function(_this){
                var filter_box_panel = $(_this).closest('.filter-box-panel');

                data = {
                    'this_template' : 0,
                    'selected_copy_id'  : filter_box_panel.find('.element_filter[data-name="module"]').val(),
                    'id' : $(_this).closest('.list_view_block[data-module="reports"]').data('id'),
                };

                $.get(Global.urls.url_filter_add_panel+'/'+$(_this).closest('.sm_extension').data('copy_id'), data, function(data){
                    filter_box_panel
                        .after(data.data)
                        .remove();
                    $('select').selectpicker({ style: 'btn-white', noneSelectedText: Message.translate_local('None selected')});
                }, 'json').done(function() {

                });
                $('.crm-table-wrapper').getNiceScroll().remove();
                niceScrollInit();
            };

            this.filter.apply = function(destination){
                    var other_params = {'id' : $('.sm_extension').data('id')},
                        get_user_storage_url = Global.urls.get_user_storage_url;

                    Global.urls.get_user_storage_url = '/module/history/getUserStorageUrl/8';

                    loadModule($('.list_view_block[data-module="reports"]').data('copy_id') + '_' +  $('.list_view_block[data-module="reports"]').data('id'), destination, other_params, function(url){
                        var url = url.split("?");
                        url = '/module/reports/view/8?' + url[1];

                        var vars = {
                            'selector_content_box' : '#content_container'
                        }

                        instanceGlobal.contentReload
                            .clear()
                            .createInstance()
                            .setVars(vars)
                            .setUrl(url)
                            .setCallBackComplete(function (json) {
                                Reports.preloaderForGraph.remove($('#content_container'));
                            })
                            .loadPage();

                        Global.urls.get_user_storage_url = get_user_storage_url;
                    });
                };

            this.filter.save = function ($this) {
                var data, id,
                    $element = $this,
                    $filterBox = $('.filter-box'),
                    _this = this,
                    destination = $element.closest('.sm_extension').data('page_name'),
                    params = [];

                $('.filter-box-panels .filter-box-panel').each(function(i, ul){
                    var name = $(ul).find('.element_filter[data-name="field"]').val();
                    var condition_value = [];
                    $(ul).find('.element_filter[data-name="condition_value"]').each(function(i, ul){
                        if($(this).hasClass('element_relate') || $(this).hasClass('element_relate_this')){
                            condition_value.push($(ul).data('id'));
                        } else if($(this).hasClass('element_relate_participant')){
                            condition_value.push($(ul).data('ug_id'));
                            condition_value.push($(ul).data('ug_type'));
                        } else {
                            condition_value.push($(ul).val());
                        }
                    });
                    if(name){
                        params.push({
                            'copy_id' : $(ul).find('.element_filter[data-name="module"]').val(),
                            'name' : name,
                            'condition' : $(ul).find('.element_filter[data-name="condition"]').val(),
                            'condition_value' : condition_value,
                        })
                    }
                })
                id = $('.filter-box').data('filter_id');

                data = {
                    'id' : id,
                    'copy_id' : $('.list_view_block[data-module="reports"]').data('copy_id'),
                    'reports_id' : $('.list_view_block[data-module="reports"]').data('id'),
                    'title' : $('.filter-box').find('.element_filter[data-name="filter_title"]').val(),
                    'params' : params,
                    'view' : $filterBox.find('.element_filter[data-name="filter_view"]').val()
                }

                $.post(Global.urls.url_filter_save +'/'+$('.filter-box').closest('.sm_extension').data('copy_id'), {'data' : data}, function(data){
                    if(data.status == true){
                        _this.showPreloader();

                        $('.filter').hide().find('.filter-box-container').empty();
                        $('ul.filter-menu .filter-btn-set').remove();
                        $('ul.filter-menu').append(data.menu_list);

                        if(id){
                            if(id != data.filter_id) {
                                Filter.updateInLocalStorage(destination, data.copy_id, data.filter_id_old, data.filter_id, function () {
                                    _this.apply(destination);
                                });
                            } else {
                                    _this.apply();
                                }
                        } else {
                            _this.set(data.copy_id, null, data.filter_id, destination);
                        }
                    } else {
                        Message.show(data.messages, false);
                    }
                }, 'json');
            }
            this.filter.showPreloader = function ($element) {
                _showPreloader.call(this);

                return this;
            };
            this.filter.addPanel = function ($this) {
                var data = {
                    'this_template' : 0,
                    'selected_copy_id' : null,
                    'id' : $this.closest('.list_view_block[data-module="reports"]').data('id')
                };

                Filter.addPanel($this.closest('.sm_extension').data('copy_id'), data);
            }
            this.filter.create = function ($this) {
                var data = {
                    'this_template' : 0,
                    'id' : $this.closest('.list_view_block[data-module="reports"]').data('id'),
                };

                Filter
                    .showPreloaderInner($this)
                    .create($this.closest('.sm_extension').data('copy_id'), data);
            }

            return this;
        },
        events : function () {
            this._events = [
                { parent: document, selector: 'a.field-param', event: 'click', func: _self.onClickFieldParam},
                { parent: document, selector: '.edit_view_constructor_show', event: 'click', func: _self.onEditViewConstructorShow},
                { parent: document, selector: '.edit_view_report_constructor_btn-save', event: 'click', func: _self.onSave}, // Constructor: save
                { parent: document, selector: '.element[data-type="block_data_analysis"] .element[data-type="add_data_analysis_indicator"]', event: 'click', func: _self.indicator.onInit},
                { parent: document, selector: '.element[data-type="block"][data-module="reports"][data-element_type="indicator"] .element[data-type="add_indicator"]', event: 'click', func: _self.indicator.onAdd},
                { parent: document, selector: '.element[data-type="block_filter"] .element[data-type="add_filter"]', event: 'click', func: _self.onAddFilter},
                { parent: document, selector: '.element[data-type="block"][data-module="reports"] .element[data-type="block_data_analysis"] .element[data-type="add_indicator_block"]', event: 'click', func: _self.onArrayIndicatorsOnAdd},
                { parent: document, selector: '.element[data-type="block"][data-module="reports"] .element[data-type="block_data_analysis"] .element[data-type="add_graph_dialog"]',
                    event: 'click', func: _self.graph.onInit},
                /** * Params.* module_copy_id (change) */
                { parent: document, selector: '.element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_param"] .element[data-type="module_copy_id"]',
                    event: 'change', func: _self.editView.onChangeDataAnalysisParam},
                /** * Indicators. * module_copy_id (change)*/
                { parent: document, selector: '.element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_indicator"] .element[data-type="module_copy_id"]',
                    event: 'change', func: _self.editView.onChangeDataAnalysisIndicator},
                /** * Params. * field_name, type_date (change)*/
                { parent: document, selector: '.element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_param"] .element[data-type="field_name"], ' +
                '.element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_param"] .element[data-type="type_date"]',
                    event: 'change', func: _self.editView.onChangeDataAnalysisParam_DropDown},
                /* Indicators. field_name, type_indicator (change)*/
                { parent: document, selector: '.element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_indicator"] .element[data-type="field_name"], .element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_indicator"] .element[data-type="type_indicator"]',
                    event: 'change', func: _self.editView.onChangeDataAnalysisIndicator_DropDown},
                { parent: document, selector: '.element[data-type="block"][data-module="reports"][data-element_type="filter"] .element[data-type="module_copy_id"]',
                    event: 'change', func: _self.editView.onFilterChange},
                { parent: document, selector: '.element[data-type="block"][data-module="reports"].element[data-element_type="filter"] .element[data-type="field_name"], .element[data-type="block"][data-module="reports"][data-element_type="data_analysis"] .element[data-type="filter_block_panels"] .element[data-type="field_name"]',
                    event: 'change', func: _self.editView.onFilterChange_DropDown},
                { parent: document, selector: '.element[data-type="block"][data-module="reports"] .element_filter[data-name="condition_value"]',
                    event: 'change', func: _self.editView.onChangeConditionValue},
                { parent: document, selector: '.list_view_block[data-module="reports"] .element_filter[data-name="module"]',
                    event: 'change', func: _self.onChangeModule},
                // Show filter for indicator
                { parent: document, selector: '.element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_indicator"] .element[data-type="show_filters"]',
                    event: 'click', func: _self.editView.onClickDataAnalysisIndicator_SettingOfFilters},
                { parent: document, selector: '[data-module="reports"] .element_filter[data-name="field"]', event: 'change', func: _self.onChangeFilter},
                { parent: document, selector: '.list_view_block[data-module="reports"] .submodule-link td', event: 'click', func: _self.onOpenReports},
                { parent: document, selector: '.element[data-type="block"][data-module="reports"] .element[data-type="remove_block"]',
                    event: 'click', func: _self.editView.onClickRemoveBlock},
                { parent: document, selector: '.element[data-type="block"][data-module="reports"][data-element_type="indicator"] .element[data-type="settings"] .element[data-type="indicator"], .element[data-type="block"][data-module="reports"][data-element_type="indicator"] .element[data-type="settings"] .element[data-type="color"]',
                    event: 'change', func: _self.indicator.onChangeDropDown},
                { parent: document, selector: '.element[data-type="block"][data-module="reports"][data-element_type="graph"] .element[data-type="settings"] .element[data-type="indicator"]',
                    event: 'change', func: _self.graph.onChangeIndicator},
                { parent: document, selector: '.element[data-type="block"][data-module="reports"][data-element_type="data_analysis"] .element[data-type="title"]',
                    event: 'change', func: _self.editView.onChangeTitle},
                { parent: document, selector: '.element[data-type="block"][data-module="reports"] .element[data-type="remove_panel"]',
                    event: 'click', func: _self.editView.onRemovePanel},
                //period change
                { parent: document, selector: '.list_view_block[data-module="reports"] .element[data-type="block"][data-element_type="graph"] .element[data-type="settings"] .element[data-type="period"]',
                    event: 'change', func: _self.onChangePeriod},
                // indicator add
                { parent: document, selector: '.list_view_block[data-module="reports"] .element[data-type="block"][data-element_type="graph"] .element[data-type="settings"] .element[data-type="add_indicator"]',
                    event: 'click', func: _self.graph.onClickAdd},
                //indicator delete
                { parent: document, selector: '.list_view_block[data-module="reports"] .element[data-type="block"][data-element_type="graph"] .element[data-type="settings"] .element[data-type="remove_indicator"]',
                    event: 'click', func: '_self.graph.onClickRemove'},
                //indicator change
                { parent: document, selector: '.list_view_block[data-module="reports"] .element[data-type="block"][data-element_type="graph"] .element[data-type="settings"] .element[data-type="indicator"]',
                    event: 'change', func: _self.graph.onChangeDropDown},

                /**TOOLS**/
                { parent: document, selector: '.is-page-report .list_view_btn-print', event: 'click', func: _self.onClickPrint}, //print
                { parent: document, selector: '.is-page-report .list_view_btn-export_to_excel', event: 'click', func: _self.onClickExportToExcel}, //export_to_excel
                { parent: document, selector: '.is-page-report .list_view_btn-export_to_pdf', event: 'click', func: _self.onClickSaveToPdf}, //save_to_pdf

                /**FILTERS**/
                { parent: document, selector: '.element[data-type="block"][data-module="reports"].element[data-element_type="filter"] .element_filter[data-name="condition"], ' +
                '.element[data-type="block"][data-module="reports"].element[data-element_type="data_analysis"] .element[data-type="filter_block_panels"] .element_filter[data-name="condition"]',
                    event: 'change', func: _self.editView.onChangeConditionValue_DropDown},
                { parent: document, selector: '.element[data-type="block"][data-module="reports"].element[data-element_type="filter"] .submodule-link td',
                    event: 'change', func: _self.onFilterByResponsible},
                { parent: document, selector: '.list_view_block[data-module="reports"] .element_filter[data-name="condition"]',
                    event: 'change', func: _self.onChangeFilterCondition},
                // { parent: document, selector: '.list_view_block[data-module="reports"] .filter-install span',
                //     event: 'click', func: _self.onClickFilterInstallSpan},

                /**FILTERS==========**/
                { parent: document, selector: '.element[data-type="block"][data-module="reports"][data-element_type="graph"] .element[data-type="settings"] .element[data-type="period"], ' +
                '.element[data-type="block"][data-module="reports"][data-element_type="graph"] .element[data-type="settings"] .element[data-type="indicator"], ' +
                '.element[data-type="block"][data-module="reports"][data-element_type="graph"] .element[data-type="settings"] .element[data-type="display_option"] ',
                    event: 'change', func: _self.editView.onChangePeriodGraph},
                { parent: document, selector: '.element[data-element_type="graph"] .editable-field , .element[data-element_type="indicator"] .editable-field',
                    event: 'click', func: _self.editView.onClickIndicatorTitle},
                { parent: document, selector: '.element[data-element_type="graph"] .editable-field+span .save-input, .element[data-element_type="indicator"] .editable-field+span .save-input',
                    event: 'click', func: _self.editView.onClickIndicatorTitle_Save},
                { parent: document, selector: '.element[data-element_type="graph"] .editable-field+span .form-control[type="text"], ' +
                '.element[data-element_type="indicator"] .editable-field+span .form-control[type="text"]',
                    event: 'keydown', func: _self.onKeyDownGraphInput},
                { parent: document, selector: '.modal_dialog[data-controller="edit_view_report"]', event: 'click', func: _self.onClickDialog},
                { parent: document, selector: '[data-type="field_params"] select+.bootstrap-select button', event: 'click', func: _self.onClickFieldsParamsBtn},
                { parent: document, selector: 'ul.settings-menu', event: 'click', func: _self.onClickSettingsMenu},
                // { parent: document, selector: '.list_view_block .element[data-type="reports_menu"] tr.sm_extension_data', event: 'click', func: this.onClickLVTR},
                //{ parent: document, selector: '', event: '', func: ''},
            ]

            Global.addEvents(this._events, {
                instance: this
            });

            return this;
        },
        allMethod: function () {
            var _this = this,
                event = [];

            Filter.local_storage_index_prefix = $('.list_view_block[data-module="reports"]').data('id');

            var instanceGlobal = new _Global();

            var _inputDateRange = $('.input-daterange');
            _inputDateRange.datepicker({
                language: Message.locale.language,
                format: Message.locale.dateFormats.medium_js,
                startDate: '1/1/1970',
                // endDate: new Date(),
                multidate: true,
                autoclose: true
            });

            _inputDateRange.find('input[name="start"]').datepicker('setEndDate', _inputDateRange.find('input[name="end"]').val());
            _inputDateRange.find('input[name="end"]').datepicker('setStartDate', _inputDateRange.find('input[name="start"]').val());
            _inputDateRange.find('input[name="start"]').mask(Message.locale.dateFormats.medium_js.replace(/d|m|y/gi, "9"));
            _inputDateRange.find('input[name="end"]').mask(Message.locale.dateFormats.medium_js.replace(/d|m|y/gi, "9"));

            var reportInterval = setInterval(function() {
                if (!$('#container.preloader').length > 0) {
                    if ($('#modal_dialog1').length >0) {
                        if($('.element[data-element_type="graph"]').length >0 ) {
                            Reports.Constructor.layoutIndicators();
                            Reports.Constructor.triggerElements();
                            clearInterval(reportInterval);
                            if ($('.list_view_block.copy_id8 ').length > 0 && $('.input-daterange').length > 0) {
                                $('.first_empty').removeClass('first_empty');
                            }
                            $('.edit-view[data-copy_id="8"] .inputs-panel[data-position="right"]').prev().attr('forced','left').find('li:first-child>select').trigger('change');
                        } else if ($('.element[data-element_type="graph"]').length ==0 ) {
                            Reports.Constructor.layoutIndicators();
                            Reports.Constructor.triggerElements();
                            clearInterval(reportInterval);
                            if ($('.list_view_block.copy_id8 ').length > 0 && $('.input-daterange').length > 0) {
                                $('.first_empty').removeClass('first_empty');
                            }
                            $('.edit-view[data-copy_id="8"] .inputs-panel[data-position="right"]').prev().attr('forced','left').find('li:first-child>select').trigger('change');
                        }
                    }
                    if ($('.edit-view[data-copy_id="8"] .element[data-type="block_filter"]').find('.dateinput').length) {
                        var $dateinput = $('.edit-view[data-copy_id="8"] .element[data-type="block_filter"]').find('.dateinput')
                        Filter.singleCalendar($dateinput);
                        $dateinput.datepicker('setDate', new Date());
                    }
                    if ($('.edit-view[data-copy_id="8"] .element[data-type="block_filter"]').find('.dp1').length) {
                        var $dp1 = $('.edit-view[data-copy_id="8"] .element[data-type="block_filter"]').find('.dp1'),
                            $dp2 = $('.edit-view[data-copy_id="8"] .element[data-type="block_filter"]').find('.dp2');
                        Filter.rangeCalendar($dp1, $dp2);
                        date1 = 0;
                        date2 = 0;
                    }
                }
            }, 100);

            Reports.init();

            Reports.Constructor.layoutIndicators();
            Reports.Constructor.triggerElements();

            // $(document).on('click', '.element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_indicator"] .element[data-type="show_filters"]', function(e){
            //     var $this = $(this),
            //         $crmDropdown = $this.closest('[data-type="settings"]'),
            //         $submenu = $crmDropdown.find('.element[data-type="filter_block_panels"]');
            //
            //     $submenu.toggleClass('hide');
            //     $submenu.find('.selectpicker').selectpicker({style: 'btn-white'});
            //     $crmDropdown.css('z-index', '30');
            //     $this.closest('ul').addClass('hide').next().find('>li').removeClass('inputs-group');
            //
            //     $('body').on('click', function (e) {
            //         if (!$crmDropdown.has(e.target).length) {
            //             var $list = $crmDropdown.find('>ul');
            //             $list.first().removeClass('hide');
            //             $list.last().addClass('hide');
            //         }
            //     });
            // });

            var deleteInterval = null,
                arrByDeleteFilter = [];




            /*******************************************
             *
             *    REPORT page
             *
             *******************************************/


            $(document).off('click', '.panel .tools .fa-times');

            var curDateStart,curDateEnd,curDateStartVal,curDateEndVal,
                $inputDateRange = $('.input-daterange');

            $inputDateRange.on('show.daterangepicker', function(e){
                var $start = $inputDateRange.find('input[name="start"]'),
                    $end = $inputDateRange.find('input[name="end"]');

                curDateStart = $start.datepicker('getDate');
                curDateEnd = $end.datepicker('getDate');
                $start.on('keyup', function(){
                    curDateStartVal = $(this).val();
                });
                $end.on('keyup', function(){
                    curDateEndVal = $(this).val();
                });

                event = 'hide.daterangepicker';
                $inputDateRange.off(event).on(event, function(e){
                    if (!e.date) {
                        if (curDateStartVal) {
                            $(this).find('input[name="start"]').datepicker('setDate', curDateStartVal);
                        }
                        if (curDateEndVal) {
                            $(this).find('input[name="end"]').datepicker('setDate', curDateEndVal);
                        }
                    }

                    var newDateStart = $('.input-daterange input[name="start"]').datepicker('getDate');
                    var newDateEnd = $('.input-daterange input[name="end"]').datepicker('getDate');
                    if (isNaN(newDateStart)==true || isNaN(newDateEnd)==true) {
                        $('.input-daterange input[name="start"]').datepicker('setDate',curDateStart);
                        $('.input-daterange input[name="end"]').datepicker('setDate',curDateEnd);
                    } else if (curDateStart+curDateEnd!==newDateStart+newDateEnd) {

                        _self.onAddPreloaderForGraph();

                        Reports.Report.updateUserStorage(this, 'date_interval', function(data){
                            var vars = {
                                'selector_content_box' : '#content_container',
                            }
                            instanceGlobal.contentReload
                                .clear()
                                .setVars(vars)
                                .setUrl(Url.getCurrent())
                                .setCallBackSuccessComplete(function(){
                                    Reports.Constructor.layoutIndicators();
                                })
                                .loadThis();
                        });
                    }
                });
            });






            //display_option change
            /*
             $(document).on('change', '.list_view_block[data-module="reports"] .element[data-type="block"][data-element_type="graph"] .element[data-type="settings"] .element[data-type="display_option"]', function(){
             var _this = this;
             Reports.Report.addGraphData(_this, true, function(data){
             Reports.Report.graphIndicator.change(_this, data);
             });
             });
             */

            /*******************************************
             *    REPORT page        (END)
             *******************************************/

            event = 'ul.selectpicker';
            $('body').off('click', event).on('click', event, function(){
                $(this).closest('.bootstrap-select.open').removeClass('open');
            });

            event = '[data-copy_id="8"] .select-item div:first-child button.selectpicker';
            $(document).on('click', event, function(){
                if (!$(this).closest('.settings[data-type="settings"]').length) {
                    $('.edit-view .sub-menu').addClass('hide');
                }
            });

            event = '.edit-view[data-copy_id="8"] .select button.selectpicker';
            $('body').off('click', event).on('click', event , function(){ // fix
                setTimeout(function () {
                    var $dropUp = $('.element[data-type="block_data_analysis"]').find('.dropup');

                    if ($dropUp.length && $dropUp.find('button').offset().top < $dropUp.find('>div').offset().top) {
                        $dropUp.removeClass('dropup');
                    }
                },100)
            });

            event = '.modal .tools .crm-dropdown > .dropdown-toggle';
            $('body').off('click', event).on('click', event, function() {
                $(this).parent().toggleClass('opened');
            });

            event = '.dropdown-menu select+.bootstrap-select';
            $('body').off('click', event).on('click', event, function(){
                var liLenght = $(this).find('ul.dropdown-menu li:not(.disabled)').length;
                if ($(this).closest('.modal-dialog').length>0) {
                    if (liLenght<10) {
                        $(this).find('div.dropdown-menu').height(liLenght*24).css('min-height',liLenght*24+'px');
                    } else {
                        $(this).find('div.dropdown-menu').height(240);
                    }
                } else {
                    if (liLenght<10) {
                        $(this).find('ul.dropdown-menu').height(liLenght*24).css('min-height',liLenght*24+'px');
                    } else {
                        $(this).find('ul.dropdown-menu').height(240);
                    }
                }
                if($(this).closest('.settings-menu').find('.bootstrap-select>button')) {
                    $(this).children('.dropdown-menu').css('top','36px');
                    if ($(this).offset().top+$(this).height()+$(this).children('.dropdown-menu').outerHeight()+10>$(window).height()) {
                        var topcss = $(this).children('.dropdown-menu').height()+16;
                        $(this).children('.dropdown-menu').css('top','-'+topcss+'px');
                    }
                }
            });

            event = '.filter-box-container select+.bootstrap-select';
            $('body').off('click', event).on('click', event, function(){
                var liLenght = $(this).find('ul.dropdown-menu li:not(.disabled)').length;
                if (liLenght<10) {
                    $(this).find('div.dropdown-menu').height(liLenght*24);
                } else {
                    $(this).find('ul.dropdown-menu').height(240);
                    niceScrollCreate($(this).find('ul.dropdown-menu'));
                }
            });

            event = '.edit-view[data-copy_id="8"] .inputs-panel[data-position="right"] .panel-heading .tools.pull-right a.fa, .edit-view[data-copy_id="8"] .inputs-panel[data-position="left"]+.inputs-panel[data-position="botton"] .panel-heading .tools.pull-right a.fa';
            $('body').off('click', event).on('click', event , function(){
                $(this).closest('.inputs-panel').prev().find('.panel-heading .tools a.fa').trigger('click');
            });

            event = '.edit-view[data-copy_id="8"] .element[data-type="block_data_analysis"]>ul>li>.form-control';
            $('body').off('focus', event).on('focus', event, function(){
                var valCur = $(this).val();
                $(this).off('blur');
                $(this).on('blur', function(){
                    if (valCur!==$(this).val()) {
                        $(this).closest('.element[data-type="block_data_analysis"]').find('li.element[data-data_analysis_type="data_analysis_indicator"]:nth-child(2) .settings>ul>li:first-child>select').trigger('change');
                    }
                });
            });


            Reports.Constructor.InitNewSelects();
            $('.report-droptools select.selectpicker').selectpicker({style: 'btn-white',noneSelectedText: ' '});//.addClass('first_empty');

            event = '.report-droptools';
            $('body').off('click', event).on('click', event, function(){
                var _this = $(this).find('input+li select[data-type="indicator"]');
                $('select[data-type="indicator"]').each(function() {
                    if ($(this).find('option').length==0) {
                        $(this).closest('li').addClass('hide');
                    }
                });
                Reports.Report.selectsOptionsOrganize(_this);
            });

            event = '.modal .edit-view[data-copy_id="8"] .element[data-element_type="filter"] .element_relate_participant, .modal .edit-view[data-copy_id="8"] .element[data-element_type="filter"] .element_relate';
            $('body').off('click', event).on('click', event, function(){
                $(this).closest('.dropdown-menu').parent().addClass('open');
                $(this).next().css('top','100%');
                if ($(this).offset().top+$(this).height()+$(this).next().outerHeight()+10>$(window).height()) {
                    var topcss = $(this).next().height()+$(this).height()+8;
                    $(this).next().css('top','-'+topcss+'px');
                }
            });

            var funcAbout = function () {
                var $editView = $('.modal div[data-copy_id="8"]'),
                    $reOpen = $editView.find('.crm-dropdown.opened');

                $reOpen.addClass('open').removeClass('opened');

                if ($reOpen.find('>ul.sub-menu').length) {
                    $reOpen.first().find('>ul:first').addClass('hide');
                    $reOpen.find('>ul.sub-menu').removeClass('hide').show();
                }
            };

            event = '.input-large.datepicker-range';
            $('body').off('hide.daterangepicker', event).on('hide.daterangepicker', event, function(){
                var $this = $(this);

                $this.closest('ul.sub-menu[data-type="filter_block_panels"]').attr('data-submenu', true);
                $this.closest('.crm-dropdown').addClass('opened');
                $this.closest('.crm-dropdown').parent().closest('.crm-dropdown').addClass('open')
                setTimeout(function() { funcAbout()}, 100);
            });

            //TODO: optimized event
            event = '.modal-dialog .edit-view';
            $(document).off('click', event).on('click', event, function () {
                $('.bootstrap-select.open').removeClass('open')
            });

            event = '.dateinput';
            $('body').off('hide.datepicker', event).on('hide.datepicker', event, function() {
                $(this).closest('.crm-dropdown').addClass('opened');
                setTimeout(function() { funcAbout()}, 100);
            });

            event = '.list_view_block.copy_id8 .filter-menu li a';
            $('body').off('click', event).on('click', event, function(){
                $(this).closest('.crm-dropdown').removeClass('open');
            });

            event = '.element[data-data_analysis_type="data_analysis_indicator"] .field-param';
            $('body').off('click', event).on('click', event, function(){
                var $select = $(this).next().find('li:first-child select')
                var valName = $select.val();
                if ($(this).next().find('li:first-child select option[value="'+valName+'"]').data('num')==0  || valName == '__amount__') {
                    $select.closest('li').addClass('not_numb');
                } else {
                    $select.closest('li').removeClass('not_numb');
                }

            });



            event = '.element[data-data_analysis_type="data_analysis_indicator"] .field-param';
            $('body').off('click', event).on('click', event, function(){
                var $select = $(this).next().find('li:first-child select')
                var valName = $select.val();
                if ($(this).next().find('li:first-child select option[value="'+valName+'"]').data('num')==0  || valName == '__amount__') {
                    $select.closest('li').addClass('not_numb');
                } else {
                    $select.closest('li').removeClass('not_numb');
                }
            });

            return this;
        },
        addCard : function () { // Constructor: add
            Reports.Constructor.add(this, function(data){
                Reports.Constructor.runAfter(data);
            });
            Preloader.modalShow()

            return this;
        },
         open : function (element, id, $callback) {
            var id = id || $(element).closest('.sm_extension_data').data('id');

            Reports.Report.view(null, id, $callback);
        },
    }

    var extTools = {
        /**TOOLS**/
        print : function(){
            var copy_id = $('.sm_extension').data('copy_id');
            var id = $('.sm_extension').data('id');
            var params = 'page_size=0&col_hidden=' + ListViewDisplay._hidden_group_index;
            if(document.location.search == '')
                toPrint('/module/reports/printR/'+copy_id+'?id=' + id + '&' + params);
            else
                toPrint('/module/reports/printR/' + copy_id + document.location.search + '&' + params);
        },
        saveToExcel : function(){
            var copy_id = $('.sm_extension').data('copy_id'),
                id = $('.sm_extension').data('id'),
                params = 'page_size=0&col_width=' + JSON.stringify(Reports.Report.getColumnWidth()) + '&col_hidden=&type=excel';

            if(document.location.search == '')
                document.location.href =  '/module/reports/exportR/'+copy_id+'?id=' + id + '&' + params;
            else
                document.location.href =  '/module/reports/exportR/' + copy_id + document.location.search + '&' + params;

            modalDialog.hide();
        },
        saveToPdf : function(){
            var copy_id = $('.sm_extension').data('copy_id');
            var id = $('.sm_extension').data('id');
            var params = 'page_size=0&col_hidden=' + ListViewDisplay._hidden_group_index + '&type=pdf';

            if(document.location.search == '')
                document.location.href =  '/module/reports/exportR/'+copy_id+'?id=' + id + '&' + params;
            else
                document.location.href =  '/module/reports/exportR/' + copy_id + document.location.search + '&' + params;
        },
        /**TOOLS============**/
    }

    Reports = {
        reports_id : null,
        copy_id : null,
        graph_data : {},
        status_opening_ev: false,

        init : function(){
            var sm_extension = $('.process_view_block.sm_extension, .list_view_block.sm_extension');
            Reports.copy_id = sm_extension.data('copy_id');
        },
        setReportsId : function(reports_id){
            Reports.reports_id = reports_id;
        },
        prepareHidePreloaderByGraph: function ($element) {
            var report = Reports.getInstance(),
                maxCountGraph = $('.list_view_block .element[data-element_type="graph"]').length;

            report.countGraph = report.countGraph || 0;

            report.countGraph++;

            if (report.countGraph >= maxCountGraph) {
                report.countGraph = 0;

                this.preloaderForGraph.remove($('#content_container'));
            }
        },
        getPreloader: function () {

            var preloader = Preloader.createInstance();

            this.setPreloader(Preloader.createInstance())
                .setShowPreloaderHandler(function () {
                    this.setRunning(false)
                        .setWhereContentHide(Preloader.TYPE_RELOAD_PAGE)
                        .setPlaceForSpinner($('#container'))
                        .run();
                });

            return preloader;
        },
        preloaderForGraph : {
            clazz: 'graph-set-preloader',
            set : function ($element) {

                $element.addClass(this.clazz);
                if ($element && $element.length) {
                    var $value = $element.last();

                    if (!$value.find(Global.spinner.selector).length) {
                        $value.append(Global.spinner.clone());
                    }
                }
            },
            remove: function ($element) {
                var $base = $element.removeClass('report-parent-graph');
                $base.find('.graph-set-preloader').removeClass('graph-set-preloader');
                $base.find(Preloader.spinner.selector).remove();

                Events.runHandler(Events.TYPE_SNAPSHOT);
            }
        },
        // buildGraph
        buildGraph : function(element, graph_type, data){
            var $element = $('[id="'+element+'"]');

            if ($element.length>1) {
                $('#'+element).attr('id','temporary');
            }
            if(graph_type=='graph-line') {
                $('#'+element).find('.morris-hover').remove();

                Morris.Area({
                    element: element,
                    behaveLikeLine: true,
                    gridEnabled: false,
                    gridLineColor: '#dddddd',
                    axes: true,
                    fillOpacity:.5,
                    data: data.data,
                    lineColors: data.lineColors,
                    xkey: data.xkey,
                    ykeys: data.ykeys,
                    labels: data.labels,
                    pointSize: 0,
                    lineWidth: 0,
                    dateFormat: function (x) {
                        var x = new Date(x);
                        Reports.Constructor.formatingDatesInit();
                        //var xxx = xx.format(Message.locale.dateFormats.medium_js);
                        switch(data.xLabels){
                            case 'day':
                            case 'all_period' :
                                var xxx = x.format(Message.locale.dateFormats.medium_js);
                                break;
                            case 'week' :
                                var begx = x.format(Message.locale.dateFormats.medium_js);
                                if (x.getDay()==0) {
                                    var endx = new Date(x.setTime(x.getTime()));
                                } else {
                                    var endx = new Date(x.setTime(x.getTime() + ((7-x.getDay()) * (1000 * 60 * 60 * 24))));
                                }
                                if ($('.input-daterange').length>0) {
                                    if (data.data[0].is_first_period && endx.getTime()>$('.input-daterange input[name="start"]').datepicker('getDate').getTime()) {
                                        var endx = new Date(x.setTime($('.input-daterange input[name="end"]').datepicker('getDate').getTime()));
                                    } else if (endx.getTime()>$('.input-daterange input[name="end"]').datepicker('getDate').getTime()) {
                                        var endx = new Date(x.setTime($('.input-daterange input[name="end"]').datepicker('getDate').getTime()));
                                    }
                                }
                                endx = endx.format(Message.locale.dateFormats.medium_js);
                                var xxx = begx+'-'+endx;
                                break;
                            case 'month' :
                                var xxx = x.format('mmmm yyyy');
                                break;
                            case 'quarter' :
                                var year = x.format('yyyy');
                                var monthx = x.getMonth();
                                if (monthx==0||monthx==1||monthx==2) {
                                    var qwe = 'Q1';
                                } else if (monthx==3||monthx==4||monthx==5) {
                                    var qwe = 'Q2';
                                } else if (monthx==6||monthx==7||monthx==8) {
                                    var qwe = 'Q3';
                                } else if (monthx==9||monthx==10||monthx==11) {
                                    var qwe = 'Q4';
                                }
                                var xxx = qwe+' '+year;
                                break;
                            case 'year' :
                                var xxx = x.format('yyyy');
                                break;
                        }
                        if(typeof(xxx) != 'undefined') return xxx.toString();
                        else return x;
                    },
                    xLabels: data.xLabels,

                    xLabelFormat: function (x) {
                        switch(data.xLabels){
                            case 'day':
                            case 'all_period' :
                            case 'week' :
                                var xxx = x.format(Message.locale.dateFormats.medium_js);
                                break;
                            case 'month' :
                            case 'quarter' :
                            case 'year' :
                                var xxx = x.format(Message.locale.dateFormats.medium_js.replace("dd", "01"));
                                break;
                        }
                        if(typeof(xxx) != 'undefined') return xxx.toString();
                        else return x;
                    },

                    hideHover: 'auto'
                });
            } else if (graph_type=='graph-histogram') {
                Morris.Bar({
                    element: element,
                    data: data.data,
                    xkey: data.xkey,
                    ykeys: data.ykeys,
                    labels: data.labels,
                    gridLineColor: '#dddddd',
                    barColors: data.barColors,
                });
            } else if (graph_type=='graph-circular') {
                Morris.Donut({
                    element: element,
                    data: data.data,
                    backgroundColor: '#fff',
                    labelColor: data.labelColor,
                    colors: data.colors,
                    formatter: function (x, data) { return data.formatted; }
                });
            } else if (graph_type=='graph-crater') {
                $(data.element).html('воронка продаж');
            }
            $('#temporary').attr('id',element);
        },

        open: function (id) {
            Reports.Report.view(null, id);
        },
        getReportUrl : function(reports_id, callback){
            var _copy_id = $('.list_view_block').data('copy_id');
            var _storage_index = _copy_id + '_' + reports_id;
            var params = {'copy_id' : _storage_index, 'destination' : null, 'params' : {'this_template' : 0}};

            var send = function(callback) {
                $.ajax({
                    url: '/module/history/getUserStorageUrl/' + _copy_id,
                    data : params,
                    type: "POST",
                    timeout : crmParams.global.ajax.get_url_timeout,
                    success: function(data) {
                        if(data.status == true){
                            callback(data.url);
                        }
                    },
                    error: function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                        Message.showErrorAjax(jqXHR, textStatus);
                        Preloader.modalHide();
                    },
                });
            };

            send(function(url){
                if(!url) return;

                var url = url.split("?");

                url = url[0] + '?id=' + reports_id + (url[1] ? '&' + url[1] : '');

                callback(url);
            });

        },

        //bool - status synchronization loaded graphs
        afterViewChanges: function (bool) {
            var instanceEV = modalDialog.getDataFromStore($('.edit-view').last().data('unique_index')),
                instanceReport = Reports.getInstance();

            $('.edit-view').find('.b-spinner').closest('[data-element_type="graph"]').addClass('report-parent-graph');

            if (bool) {
                var count_graphs = 1;

                instanceReport.setCountLoadedGraph(null);

                var time = setInterval(function () {
                    var count_loaded = instanceReport.getCountLoadedGraph();

                    if (count_loaded >= count_graphs) {
                        clearInterval(time);
                        instanceEV.afterViewChanges();
                    }
                }, 150);
            } else {
                if (instanceEV) {
                    var time = setTimeout(function () {
                        clearTimeout(time);
                        instanceEV.afterViewChanges();
                    }, 100)
                }
            }
        },
        createInstance : function(){
            var Obj = function(){
                for(var key in Reports){
                    if ($.inArray(key, ['createInstance']) < 0) {
                        this[key] = Reports[key];
                    }
                }
                for(var key in _public){
                    this[key] = _public[key];
                }
            }

            Obj.prototype = Object.create(Global);

            return _self._instance = new Obj().constructor();
        },
        getInstance: function (bool) {
            if (bool && !_self._instance) {
                this.createInstance();
            }

            return _self._instance;
        },

        //Constructor
        Constructor : {
            _instance: null,
            _element: null,

            runAfter : function(data, edit_view){
                var modal;

                if (edit_view) {
                    modal = edit_view.getModal();
                } else {
                    modal = modalDialog.createInstance();
                }

                if(data.status == 'data'){
                    modal.show(data.data, true);
                }

                Global.addOperationInSDM();

                $('.crm-dropdown > .dropdown-toggle').removeAttr('data-toggle').on('click',function(){
                    $('.crm-dropdown.open').removeClass('open');
                    $(this).parent().toggleClass('open');
                });
                $('.reports-mark').selectpicker({style: 'btn-white',noneSelectedText: ' '});
                $('.reports-color').selectpicker();
                $('.selectpicker').selectpicker({style: 'btn-white',noneSelectedText: ' '});
                $('select.edit-dropdown.element').selectpicker({style: 'btn-white',noneSelectedText: ' '});
                $('.sub-module-params-cog-span').on('show.bs.dropdown', function () {
                    $(this).find('.reports-menu > li').getNiceScroll().remove();
                });
                Reports.Constructor.InitNewSelects();
                Reports.Constructor.initSorting();
                $('.edit-view[data-copy_id="8"] .inputs-panel[data-position="right"]').prev().attr('forced','left').find('li:first-child>select').trigger('change');
                Reports.Constructor.layoutIndicators();
                Reports.Constructor.triggerElements();
                if ($('.edit-view[data-copy_id="8"] .element[data-type="block_filter"]').find('.dateinput').length) {
                    var $dateinput = $('.edit-view[data-copy_id="8"] .element[data-type="block_filter"]').find('.dateinput')
                    Filter.singleCalendar($dateinput);
                    $dateinput.datepicker('setDate', new Date());
                }
                if ($('.edit-view[data-copy_id="8"] .element[data-type="block_filter"]').find('.dp1').length) {
                    var $dp1 = $('.edit-view[data-copy_id="8"] .element[data-type="block_filter"]').find('.dp1'),
                        $dp2 = $('.edit-view[data-copy_id="8"] .element[data-type="block_filter"]').find('.dp2');
                    Filter.rangeCalendar($dp1, $dp2);
                    date1 = 0;
                    date2 = 0;
                }
                $('.select.element.first_empty').on("click", function () {
                    return (callbacksarr.length <=2) ? true : false;
                });
            },

            createInstance : function(){
                var Obj = function(){
                    for(var key in Reports.Constructor){
                        this[key] = Reports.Constructor[key];
                    }
                }

                return Reports.Constructor._instance = new Obj();
            },

            setElementHtml : function (element) {
                if (element && $(element).length) {
                    this._element = $(element);
                }
                return this;
            },

            //add
            add : function(_this, callback){
                var _data = {};
                _data['primary_entities'] = EditView.relateDataStory.getPrimaryEtitiesFromEditView(null, (EditView.countEditView() == 1 ? true : false));

                var ajax = new Ajax();
                ajax
                    .setUrl('/module/constructor/add/' + Reports.copy_id)
                    .setData(_data)
                    .setAsync(true)
                    .setCallBackSuccess(function(data){
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status == 'error'){
                                Message.show(data.messages);
                            } else {
                                callback(data);
                            }
                        }
                        Preloader.modalHide();
                    })
                    .setCallBackError(function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                        Preloader.modalHide();
                    })
                    .setCallBackDone(
                        function(){
                            $('.modal .contacts-block img').on('load', function() {
                                EditView.contactImg();
                            });
                            EditView.emptyFields();
                            EditView.hiddenBlocks();
                        }
                    )
                    .send();
            },

            //edit
            edit : function(_this, callback){
                var sm_extension = $(_this).closest('.sm_extension');
                var _data = {
                    'copy_id' : Reports.copy_id,
                    'id' : $(_this).closest('.sm_extension_data').data('id'),
                    'pci' : sm_extension.data('parent_copy_id'),
                    'pdi' : sm_extension.data('parent_data_id'),
                    'primary_entities' : EditView.relateDataStory.getPrimaryEtitiesFromEditView(null, (EditView.countEditView() == 1 ? true : false)),
                    'this_template' : sm_extension.data('this_template'),
                    'from_template' : 0,
                };

                if(_data['template_data_id']){
                    _data['from_template'] = 1;
                    _data['id'] = _data['template_data_id'];
                }

                AjaxObj
                    .createInstance()
                    .setUrl('/module/constructor/view/' + Reports.copy_id)
                    .setData(_data)
                    .setAsync(true)
                    .setCallBackSuccess(function(data){
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status == 'error'){
                                Message.show(data.messages);
                            } else {
                                callback(data);
                            }
                        }
                        Preloader.modalHide();
                    })
                    .setCallBackError(function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                        Preloader.modalHide();
                    })
                    .setCallBackDone(
                        function(){
                            $('.modal .contacts-block img').on('load', function() {
                                EditView.contactImg();
                            });
                            EditView.emptyFields();
                            EditView.hiddenBlocks();
                        }
                    )
                    .send();
            },


            /**
             *  Схема фильтра отчета
             */
            getSchemaFilters : function(ul){
                var elements = [];
                var params;

                $(ul).find('.element[data-type="block_panels"] > .element[data-type="block_panel"], .element[data-type="filter_block_panels"] .element[data-type="block_panel"]').each(function(i, ul){
                    params = $(ul).find('.params_hidden').text();
                    params = JSON.parse(params);

                    params['module_copy_id'] = $(ul).find('.element[data-type="module_copy_id"]').val();
                    params['field_name'] = $(ul).find('.element[data-type="field_name"]').val();
                    params['unique_index'] = $(ul).data('unique_index');

                    var settings = $(ul).find('.element[data-type="settings"]');
                    params['condition'] = settings.find('.element_filter[data-name="condition"]').val();

                    var condition_value = [];
                    settings.find('.element_filter[data-name="condition_value"]').each(function(i, ul){
                        if($(this).hasClass('element_relate') || $(this).hasClass('element_relate_this')){
                            condition_value.push($(ul).data('id'));
                        } else if($(this).hasClass('element_relate_participant')){
                            condition_value.push($(ul).data('ug_id'));
                            condition_value.push($(ul).data('ug_type'));
                        } else {
                            var val = $(ul).val();
                            if(val) condition_value.push(val);
                        }
                    });

                    if(!$.isEmptyObject(condition_value))
                        params['condition_value'] = condition_value;
                    else
                        params['condition_value'] = [""];

                    elements.push(params);
                });

                return elements;
            },


            /**
             *  Схема отчета
             */
            getSchema : function(_this, return_json){
                var schema = [];
                var elements = [];
                var params, element;

                $(_this).closest('.edit-view').find('.element[data-type="block"].element[data-module="reports"]').each(function(i, ul){
                    var element = $(ul).find('> .element[data-type="block_panel"] > .params_hidden, > .element[data-type="block_data_analysis"] > .params_hidden, > .element[data-type="block_filter"] > .params_hidden');
                    if(typeof(element) == 'undefined' || element==false){
                        element = {};
                    } else {
                        element = JSON.parse(element.text());
                    }

                    element['title'] = $(ul).find('> header .element[data-type="title"]').text();

                    //indicator
                    if(element.type == 'indicator'){
                        var elements = [];
                        $(ul).find('> header .element[data-type="settings"] .element[data-type="setting"]').each(function(i, ul){
                            var el = $(ul).find('.element[data-type="indicator"]');
                            params = $(ul).find('> .params_hidden').text();
                            params = JSON.parse(params);
                            params['module_copy_id'] = el.data('module_copy_id');
                            params['field_name'] = el.data('field_name');
                            params['unique_index'] = el.data('unique_index');
                            params['color'] = $(ul).find('.element[data-type="color"]').val();
                            elements.push(params);
                        })
                        element['elements'] = elements;
                    }

                    // graph
                    if(element.type == 'graph'){
                        var elements = [];
                        var settings = $(ul).find('> header .element[data-type="settings"]');

                        params = settings.find('.params_hidden').text();
                        params = JSON.parse(params);

                        var display_option = settings.find('.element[data-type="display_option"]').val();
                        var period = settings.find('.element[data-type="period"]').val();
                        params['period'] = (typeof(period) != 'undefined' ? period : '');
                        params['display_option'] = (typeof(display_option) != 'undefined' ? display_option : '');
                        params['indicator'] = settings.find('.element[data-type="indicator"]').val();
                        params['position'] = $(ul).data('position');

                        elements.push(params);
                        element['elements'] = elements;
                    }

                    // data_analysis
                    if(element.type == 'data_analysis'){
                        var elements = [];
                        $(ul).find('.element[data-type="block_panels"] > .element[data-type="block_panel"]').each(function(i, ul){
                            params = $(ul).find('> .params_hidden').text();
                            params = JSON.parse(params);

                            params['title'] = $(ul).find('.element[data-type="title"]').val();
                            params['module_copy_id'] = $(ul).find('.element[data-type="module_copy_id"]').val();
                            params['field_name'] = $(ul).find('.element[data-type="field_name"]').val();
                            params['unique_index'] = $(ul).data('unique_index');

                            if($(ul).data('data_analysis_type') == 'data_analysis_param'){
                                params['type_date'] = $(ul).find('.element[data-type="type_date"]').val();
                            } else
                            if($(ul).data('data_analysis_type') == 'data_analysis_indicator'){
                                params['type_indicator'] = $(ul).find('.element[data-type="type_indicator"]').val();
                            }

                            params['filters'] = Reports.Constructor.getSchemaFilters(ul);

                            elements.push(params);
                        })
                        element['elements'] = elements;
                    }


                    // filter
                    if(element.type == 'filter'){
                        element['elements'] = Reports.Constructor.getSchemaFilters(ul);
                    }


                    schema.push(element);
                });

                if(return_json) schema = JSON.stringify(schema);

                return schema;
            },



            //save
            save : function(_this){
                var _params = {},
                    __this = this;

                _params['EditViewModel[schema]'] =  Reports.Constructor.getSchema(_this, true);

                var callback = null;

                if(Reports.reports_id){
                    callback = function(){
                        __this.open();
                    }
                }
                EditView.save(Reports.copy_id, _params, callback, '/module/constructor/save/' + Reports.copy_id);
            },

            open : function () {
                var _this = this;
                History.close(true);
                modalDialog.hideAll();

                Reports.getReportUrl(Reports.reports_id, function(url){
                    Preloader
                        .createInstance()
                        .setPriorityDisable(false)
                        .setWhereContentHide(Preloader.REPORT)
                        .run()

                    instanceGlobal.contentReload
                        .clear()
                        .setVars({
                            'selector_content_box' : '#content_container'
                        })
                        .setCallBackSuccessComplete(function(){
                            Reports.Constructor.layoutIndicators();
                        })
                        .setUrl(url)
                        .loadPage();
                });

                return this;
            },

            //getDataAnalysisModuleCopyIdList
            getDataAnalysisModuleCopyIdList : function(_this, error_view, skip_to_remove){
                var to_remove = '';
                if(skip_to_remove) to_remove = ':not(.to_remove)';
                var list = [];
                $(_this)
                    .closest('.edit-view')
                    .find('.element[data-type="block"] .element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_param"], .element[data-type="block"] .element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_indicator"]'+to_remove)
                    .find('.element[data-type="module_copy_id"]').each(function(i, ul){
                    var s = $(ul).val();
                    if(s) list.push(s);
                });
                if(error_view && $.isEmptyObject(list)){
                    Message.show([{'type': 'error', 'message': 'In the "Data analysis" is not selected modules'}], true);
                    return;
                }

                return list;
            },


            //getParam
            getParam : function(error_view){
                var list = {};

                $('.edit-view .element[data-type="block"][data-element_type="data_analysis"] .element[data-data_analysis_type="data_analysis_param"]').each(function(i, ul){

                    var title = $(ul).find('.element[data-type="title"]').val();
                    var module_copy_id = $(ul).find('.element[data-type="module_copy_id"]').val();
                    var field_name = $(ul).find('.element[data-type="field_name"]').val();
                    var unique_index = $(ul).data('unique_index');
                    var type_date = $(ul).find('.element[data-type="type_date"]').val();

                    list = {
                        'title' : title,
                        'module_copy_id' : module_copy_id,
                        'field_name' : field_name,
                        'type_date' : type_date,
                        'unique_index' : unique_index,
                    };
                });

                if(error_view && $.isEmptyObject(list)){
                    Message.show([{'type': 'error', 'message': 'In the "Data analysis" is not indicators'}], true);
                    return;
                }

                return list;
            },


            //getIndicators
            getIndicators : function(error_view, skip_to_remove){
                var to_remove = '';
                if(skip_to_remove) to_remove = ':not(.to_remove)';
                var list = [];

                $('.edit-view .element[data-type="block"][data-element_type="data_analysis"] .element[data-data_analysis_type="data_analysis_indicator"]' + to_remove).each(function(i, ul){
                    var title = $(ul).find('.element[data-type="title"]').val();
                    var module_copy_id = $(ul).find('.element[data-type="module_copy_id"]').val();
                    var field_name = $(ul).find('.element[data-type="field_name"]').val();
                    var unique_index = $(ul).data('unique_index');
                    var type_indicator = $(ul).find('.element[data-type="type_indicator"]').val();

                    list.push({
                        'title' : title,
                        'module_copy_id' : module_copy_id,
                        'field_name' : field_name,
                        'type_indicator' : type_indicator,
                        'unique_index' : unique_index,
                    });
                });

                if(error_view && $.isEmptyObject(list)){
                    Message.show([{'type': 'error', 'message': 'In the "Data analysis" is not indicators'}], true);
                    return;
                }

                return list;
            },



            //getFilters
            getFilters : function(error_view){
                var list = [];
                $('.edit-view .element[data-type="block"][data-element_type="filter"] .element[data-type="block_panels"] > .element[data-type="block_panel"]').each(function(i, ul){
                    var params = {};
                    var copy_id = $(ul).find('.element[data-type="module_copy_id"]').val();
                    var name = $(ul).find('.element[data-type="field_name"]').val();

                    params['copy_id'] = copy_id;
                    params['name'] = name;

                    var settings = $(ul).find('.element[data-type="settings"]');
                    var condition = settings.find('.element_filter[data-name="condition"]').val();
                    params['condition'] = condition;

                    var condition_value = [];
                    settings.find('.element_filter[data-name="condition_value"]').each(function(i, ul){
                        if($(this).hasClass('element_relate') || $(this).hasClass('element_relate_this')){
                            condition_value.push($(ul).data('id'));
                        } else if($(this).hasClass('element_relate_participant')){
                            condition_value.push($(ul).data('ug_id'));
                            condition_value.push($(ul).data('ug_type'));
                        } else {
                            condition_value.push($(ul).val());
                        }
                    });

                    if(!copy_id || !name || !condition){
                        return true;
                    }

                    if(!$.isEmptyObject(condition_value))
                        params['condition_value'] = condition_value;
                    else
                        params['condition_value'] = ["",""];

                    list.push(params);
                });

                return list;
            },



            addGraphDialog : function(){
                var graph = $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="graph"]');
                var positions = [];
                if(graph.length > 0){
                    graph.each(function(i,ul){
                        positions.push($(ul).data('position'));
                    });
                }

                var ajax = new Ajax();
                ajax
                    .setUrl('/module/constructor/addGraphdialog/' + Reports.copy_id)
                    .setData({'graph_count' : graph.length, 'positions' : positions})
                    .setDataType('html')
                    .setCallBackSuccess(function(data){
                        if(!data){
                            Message.show([{'type':'error', 'message': 'None installed copies blocks for connection'}], true);
                            return;
                        }
                        modalDialog.show(data);
                    })
                    .setCallBackError(function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                    })
                    .send();
            },

            //addElement
            addElement : function(_this, element, callback){
                var _params = {};

                switch(element){
                    case 'indicator_block' :
                        var list = Reports.Constructor.getParam(true);
                        if(!list) return;
                        _params['param'] = list;
                        list = Reports.Constructor.getIndicators(true);
                        if(!list) return;
                        _params['indicators'] = list;

                        break;


                    case 'graph_element' :
                        //graph_list
                        var graph_list = {};
                        $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="graph"]').each(function(i, ul){
                            var display_option = $(ul).find('.element[data-type="display_option"]').val();
                            var unique_index = $(ul).find('.element[data-type="graph_element"]').attr('unique_index');
                            graph_list[unique_index] = {
                                'period' : $(ul).find('.element[data-type="period"]').val(),
                                'graph_type' : $(ul).find('.element[data-type="graph_element"]').data('graph_type'),
                                'display_option' : (typeof(display_option) != 'undifined' && display_option ? display_option : null),
                                'indicator' : $(ul).find('.element[data-type="indicator"]').val(),
                                'unique_index' : unique_index,
                            }
                        })
                        if($.isEmptyObject(graph_list)) graph_list = '';
                        _params['graph_list'] = graph_list;
                        //param
                        var list = Reports.Constructor.getParam(true);
                        if(!list) return;
                        _params['param'] = list;
                        //indicators
                        list = Reports.Constructor.getIndicators(true, true);
                        if(!list) return;
                        _params['indicators'] = list;
                        //filters
                        list = Reports.Constructor.getFilters();
                        if(!list) return;
                        _params['filters'] = list;

                        break;

                    case 'graph_block' :
                        var list = Reports.Constructor.getParam(true);
                        if(!list) return;
                        _params['param'] = list;
                        //indicators
                        list = Reports.Constructor.getIndicators(true);
                        if(!list) return;
                        _params['indicators'] = list;
                        //filters
                        list = Reports.Constructor.getFilters();
                        if(!list) return;
                        _params['filters'] = list;

                        _params['graph_type'] = $(_this).closest('.modal-dialog').find('.element[data-type="graph_type"]').val();
                        _params['position'] = $(_this).closest('.modal-dialog').find('.element[data-type="position"]').val();
                        break;

                    case 'data_analysis_indicator' :
                        _params['module_copy_id'] = $(_this).closest('.element[data-type="block"]').find('.element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_param"] .element[data-type="module_copy_id"]').val();
                        //params
                        var list = Reports.Constructor.getParam(true);
                        if(!list) return;
                        _params['param'] = list;

                        break;

                    case 'filter' :
                        var list = Reports.Constructor.getDataAnalysisModuleCopyIdList(_this, false, true);
                        if(!list) return;
                        _params['module_copy_id_list'] = list;
                        break;

                    case 'filter_indicator' :
                        var copy_id = $(_this).closest('.element[data-type="block_panel"]').find('.element[data-type="module_copy_id"]').val();
                        if(!copy_id) return;
                        _params['module_copy_id'] = copy_id;
                        break;

                }

                AjaxObj
                    .createInstance()
                    .setUrl('/module/constructor/addElement/' + Reports.copy_id)
                    .setData({
                        'element' : element,
                        'params' : _params
                    })
                    .setDataType('json')
                    .setCallBackSuccess(function(data){
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status == 'error'){
                                Message.show(data.messages);
                            } else {
                                callback(data);
                            }
                        }
                    })
                    .setCallBackError(function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                    })
                    .send();
            },





            getViewElements : function(){
                var element_list = {
                    'indicator' : [],
                    'graphs' : {}
                }


                $('.element[data-type="block"][data-module="reports"][data-element_type="indicator"], ' +
                    '.element[data-type="block"][data-module="reports"][data-element_type="graph"]').each(function(i, ul){
                    // indicator
                    if($(ul).data('element_type') == 'indicator'){
                        $(ul).find('.element[data-type="settings"] .element[data-type="setting"] .element[data-type="indicator"]').each(function(i2, ul2){
                            var ui = $(ul2).data('unique_index');
                            if(ui){
                                element_list.indicator.push(ui);
                            }
                        });
                    } else
                    // graph
                    if($(this).data('element_type') == 'graph'){
                        var ui_list = [];
                        $(ul).find('.element[data-type="settings"] .element[data-type="indicator"]').each(function(i2, ul2){
                            var ui = $(ul2).val();
                            if(ui){
                                ui_list.push(ui);
                            }
                            element_list.graphs[$(ul).data('unique_index')] = ui_list;
                        });

                    }
                });




                return element_list;
            },


            //changeElement
            changeElement : function(_this, element, params, callback, condition, ajax_async){
                if(typeof(condition) != 'undefined' && condition !== null && condition == false){
                    if(typeof(callback) == 'function') callback(false);
                    return;
                }

                var _params = {};

                switch(element){
                    //indicator_indicator
                    case 'indicator_indicator' :
                        var list = Reports.Constructor.getParam(true);
                        if(!list) return;
                        _params['param'] = list;
                        //view elements
                        _params['view_elements'] = Reports.Constructor.getViewElements();
                        //indicators
                        list = Reports.Constructor.getIndicators(true);
                        if(!list) return;
                        _params['indicators'] = list;
                        //filters
                        list = Reports.Constructor.getFilters();
                        if(!list) return;
                        _params['filters'] = list;
                        _params['unique_index'] = $(_this).closest('.element[data-type="setting"]').find('.element[data-type="indicator"]').data('unique_index');
                        _params['module_copy_id'] = $(_this).closest('.element[data-type="setting"]').find('.element[data-type="indicator"]').data('module_copy_id');
                        _params['field_name'] = $(_this).closest('.element[data-type="setting"]').find('.element[data-type="indicator"]').data('field_name');
                        _params['color'] = $(_this).closest('.element[data-type="setting"]').find('.element[data-type="color"]').val();

                        break;


                    //indicator_add
                    case 'indicator_add' :
                        var list = Reports.Constructor.getParam(true);
                        if(!list) return;
                        _params['param'] = list;
                        //view elements
                        _params['view_elements'] = Reports.Constructor.getViewElements();
                        list = Reports.Constructor.getIndicators(true, true);
                        if(!list) return;
                        _params['indicators'] = list;
                        _params['unique_index'] = $(_this).closest('.element[data-type="setting"]').find('.element[data-type="indicator"]').data('unique_index');
                        _params['module_copy_id'] = $(_this).closest('.element[data-type="setting"]').find('.element[data-type="indicator"]').data('module_copy_id');
                        _params['field_name'] = $(_this).closest('.element[data-type="setting"]').find('.element[data-type="indicator"]').data('field_name');
                        _params['color'] = $(_this).closest('.element[data-type="setting"]').find('.element[data-type="color"]').val();

                        break;


                    case 'graph' :
                        var graph_list = {};
                        $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="graph"]').each(function(i, ul){
                            var display_option = $(ul).find('.element[data-type="display_option"]').val();
                            var unique_index = $(ul).find('.element[data-type="graph_element"]').attr('unique_index');
                            var indicator = $(ul).find('.element[data-type="indicator"]').val();
                            if('data_analysis_panel_delete' in params && params.data_analysis_panel_delete == true){
                                var unique_index = $(_this).closest('.element[data-type="block_panel"]').data('unique_index');
                                if(unique_index == indicator) indicator = '';
                            }

                            graph_list[unique_index] = {
                                'period' : $(ul).find('.element[data-type="period"]').val(),
                                'graph_type' : $(ul).find('.element[data-type="graph_element"]').data('graph_type'),
                                'display_option' : (typeof(display_option) != 'undifined' && display_option ? display_option : null),
                                'indicator' : indicator,
                                'unique_index' : unique_index,
                            }
                        })
                        if($.isEmptyObject(graph_list)) graph_list = '';
                        _params['graph_list'] = graph_list;

                        var list = Reports.Constructor.getParam(true);
                        if(!list) return;
                        _params['param'] = list;
                        list = Reports.Constructor.getIndicators(true, true);
                        if(!list) return;
                        _params['indicators'] = list;
                        break;


                    //data_analysis_param_module
                    case 'data_analysis_param_module' :
                        //graph_list
                        var graph_list = {};
                        $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="graph"]').each(function(i, ul){
                            var display_option = $(ul).find('.element[data-type="display_option"]').val();
                            var unique_index = $(ul).find('.element[data-type="graph_element"]').attr('unique_index');
                            graph_list[unique_index] = {
                                'period' : $(ul).find('.element[data-type="period"]').val(),
                                'graph_type' : $(ul).find('.element[data-type="graph_element"]').data('graph_type'),
                                'display_option' : (typeof(display_option) != 'undifined' && display_option ? display_option : null),
                                'indicator' : $(ul).find('.element[data-type="indicator"]').val(),
                                'unique_index' : unique_index,
                            }
                        })
                        if($.isEmptyObject(graph_list)) graph_list = '';
                        _params['graph_list'] = graph_list;

                        //params
                        var list = Reports.Constructor.getParam(true);
                        if(!list) return;
                        _params['param'] = list;

                        //view elements
                        _params['view_elements'] = Reports.Constructor.getViewElements();

                        //indicators
                        list = Reports.Constructor.getIndicators(true, true);
                        if(!list) return;
                        var list_i = [];
                        var list_v;
                        $.each(list, function(key, value){
                            list_v = value;
                            list_v.module_copy_id = null;
                            list_v.field_name = null;
                            list_v.type_indicator = null;
                            //list_v.type_date = null;
                            list_i.push(list_v);
                        })
                        _params['indicators'] = list_i;

                        //filters
                        list = Reports.Constructor.getFilters();
                        if(!list) return;
                        _params['filters'] = list;

                        _params['module_copy_id'] = $(_this).val();
                        _params['module_copy_id_list'] = '';
                        if(_params['module_copy_id']) _params['module_copy_id_list'] = [$(_this).val()];

                        _params['unique_index'] = $(_this).closest('.element[data-type="block_panel"]').data('unique_index');
                        _params['field_name'] = '';
                        _params['color'] = '';

                        break;

                    //data_analysis_indicator_module
                    case 'data_analysis_indicator_module' :
                        //graph_list
                        var graph_list = {};
                        $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="graph"]').each(function(i, ul){
                            var display_option = $(ul).find('.element[data-type="display_option"]').val();
                            var unique_index = $(ul).find('.element[data-type="graph_element"]').attr('unique_index');
                            var indicator = $(ul).find('.element[data-type="indicator"]').val();

                            if('data_analysis_panel_delete' in params && params.data_analysis_panel_delete == true){
                                var unique_index = $(_this).closest('.element[data-type="block_panel"]').data('unique_index');
                                if(unique_index == indicator) indicator = '';
                            }
                            graph_list[unique_index] = {
                                'period' : $(ul).find('.element[data-type="period"]').val(),
                                'graph_type' : $(ul).find('.element[data-type="graph_element"]').data('graph_type'),
                                'display_option' : (typeof(display_option) != 'undifined' && display_option ? display_option : null),
                                'indicator' : indicator,
                                'unique_index' : unique_index,
                            }
                        })
                        if($.isEmptyObject(graph_list)) graph_list = '';
                        _params['graph_list'] = graph_list;

                        //params
                        var list = Reports.Constructor.getParam(true);
                        if(!list) return;
                        _params['param'] = list;

                        //view elements
                        _params['view_elements'] = Reports.Constructor.getViewElements();

                        //indicators
                        list = Reports.Constructor.getIndicators(true, true);
                        if(!list) return;
                        var list_i = [];
                        var list_v;
                        var unique_index = $(_this).closest('.element[data-type="block_panel"]').data('unique_index');
                        $.each(list, function(key, value){
                            list_v = value;
                            if('this_ui_clear' in params && params.this_ui_clear == true && unique_index == value.unique_index){
                                list_v.module_copy_id = $(_this).val();
                                list_v.field_name = null;
                                list_v.type_indicator = null;
                                //list_v.type_date = null;
                            }
                            list_i.push(list_v);
                        })

                        _params['indicators'] = list_i;

                        //filters
                        list = Reports.Constructor.getFilters();
                        if(!list) return;
                        _params['filters'] = list;

                        _params['parent_module_copy_id'] = $(_this).closest('.element[data-type="block"]').find('.element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_param"] .element[data-type="module_copy_id"]').val();
                        _params['parent_field_name'] = $(_this).closest('.element[data-type="block"]').find('.element[data-type="block_data_analysis"] .element[data-data_analysis_type="data_analysis_param"] .element[data-type="field_name"]').val();
                        _params['module_copy_id'] = $(_this).closest('.element[data-type="block_panel"]').find('.element[data-type="module_copy_id"]').val();
                        _params['unique_index'] = $(_this).closest('.element[data-type="block_panel"]').data('unique_index');
                        _params['field_name'] = $(_this).closest('.element[data-type="block_panel"]').find('.element[data-type="field_name"]').val();
                        _params['color'] = '';

                        var list = Reports.Constructor.getDataAnalysisModuleCopyIdList(_this, false, true);
                        _params['module_copy_id_list'] = '';
                        if($.isEmptyObject(list) == false)
                            _params['module_copy_id_list'] = list;

                        break;



                    //data_analysis_panel_settings
                    case 'data_analysis_panel_settings':
                        //graph
                        var graph_list = {};
                        $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="graph"]').each(function(i, ul){
                            var display_option = $(ul).find('.element[data-type="display_option"]').val();
                            var unique_index = $(ul).find('.element[data-type="graph_element"]').attr('unique_index');
                            graph_list[unique_index] = {
                                'period' : $(ul).find('.element[data-type="period"]').val(),
                                'graph_type' : $(ul).find('.element[data-type="graph_element"]').data('graph_type'),
                                'display_option' : (typeof(display_option) != 'undifined' && display_option ? display_option : null),
                                'indicator' : $(ul).find('.element[data-type="indicator"]').val(),
                                'unique_index' : unique_index,
                            }
                        })
                        if($.isEmptyObject(graph_list)) graph_list = '';
                        _params['graph_list'] = graph_list;
                        //params
                        var list = Reports.Constructor.getParam(true);
                        if(!list) return;
                        _params['param'] = list;
                        //indicators
                        list = Reports.Constructor.getIndicators(true, true);
                        if(!list) return;
                        _params['indicators'] = list;
                        //view elements
                        _params['view_elements'] = Reports.Constructor.getViewElements();
                        //filters
                        list = Reports.Constructor.getFilters();
                        if(!list) return;
                        _params['filters'] = list;

                        var list = Reports.Constructor.getDataAnalysisModuleCopyIdList(_this, false, true);
                        _params['module_copy_id_list'] = '';
                        if ($.isEmptyObject(list) == false)
                            _params['module_copy_id_list'] = list;

                        break;

                    //data_analysis_indicator_settings
                    case 'data_analysis_indicator_settings':
                        var graph_list = {};
                        $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="graph"]').each(function(i, ul){
                            var display_option = $(ul).find('.element[data-type="display_option"]').val();
                            var unique_index = $(ul).find('.element[data-type="graph_element"]').attr('unique_index');
                            graph_list[unique_index] = {
                                'period' : $(ul).find('.element[data-type="period"]').val(),
                                'graph_type' : $(ul).find('.element[data-type="graph_element"]').data('graph_type'),
                                'display_option' : (typeof(display_option) != 'undifined' && display_option ? display_option : null),
                                'indicator' : $(ul).find('.element[data-type="indicator"]').val(),
                                'unique_index' : unique_index,
                            }
                        })
                        if($.isEmptyObject(graph_list)) graph_list = '';
                        _params['graph_list'] = graph_list;
                        //params
                        var list = Reports.Constructor.getParam(true);
                        if(!list) return;
                        _params['param'] = list;
                        //view elements
                        _params['view_elements'] = Reports.Constructor.getViewElements();
                        //indicators
                        list = Reports.Constructor.getIndicators(true, true);
                        if(!list) return;
                        _params['indicators'] = list;
                        //filters
                        list = Reports.Constructor.getFilters();
                        if(!list) return;
                        _params['filters'] = list;

                        _params['unique_index'] = $(_this).closest('.element[data-type="block_panel"]').data('unique_index');
                        _params['parent_module_copy_id'] = $(_this).closest('.element[data-type="block_panel"]').find('.element[data-type="module_copy_id"]').val();
                        _params['parent_field_name'] = $(_this).closest('.element[data-type="block_panel"]').find('.element[data-type="field_name"]').val();
                        _params['module_copy_id'] = $(_this).closest('.element[data-type="block_panel"]').find('.element[data-type="module_copy_id"]').val();
                        _params['field_name'] = $(_this).closest('.element[data-type="block_panel"]').find('.element[data-type="field_name"]').val();
                        _params['color'] = '';

                        var list = Reports.Constructor.getDataAnalysisModuleCopyIdList(_this, false, true);
                        _params['module_copy_id_list'] = '';
                        if ($.isEmptyObject(list) == false)
                            _params['module_copy_id_list'] = list;

                        break;


                    //update_output_elements
                    case 'update_output_elements':
                        var graph_list = {};
                        $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="graph"]').each(function(i, ul){
                            var display_option = $(ul).find('.element[data-type="display_option"]').val();
                            var unique_index = $(ul).find('.element[data-type="graph_element"]').attr('unique_index');
                            graph_list[unique_index] = {
                                'period' : $(ul).find('.element[data-type="period"]').val(),
                                'graph_type' : $(ul).find('.element[data-type="graph_element"]').data('graph_type'),
                                'display_option' : (typeof(display_option) != 'undifined' && display_option ? display_option : null),
                                'indicator' : $(ul).find('.element[data-type="indicator"]').val(),
                                'unique_index' : unique_index,
                            }
                        })
                        if($.isEmptyObject(graph_list)) graph_list = '';
                        _params['graph_list'] = graph_list;
                        //params
                        var list = Reports.Constructor.getParam(true);
                        if(!list) return;
                        _params['param'] = list;
                        //view elements
                        _params['view_elements'] = Reports.Constructor.getViewElements();
                        //indicators
                        list = Reports.Constructor.getIndicators(true, true);
                        if(!list) return;
                        _params['indicators'] = list;
                        //filters
                        list = Reports.Constructor.getFilters();
                        if(!list) return;
                        _params['filters'] = list;

                        var indicator_indicators = [];
                        $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="data_analysis"] .element[data-type="block_panels"] .element[data-type="block_panel"][data-data_analysis_type="data_analysis_indicator"]').each(function(i, ul){
                            var tmp = {};
                            tmp['unique_index'] = $(ul).data('unique_index');
                            tmp['module_copy_id'] = $(ul).find('.element[data-type="module_copy_id"]').val();
                            tmp['field_name'] = $(ul).find('.element[data-type="field_name"]').val();
                            tmp['color'] = '';
                            indicator_indicators.push(tmp);
                        });
                        _params['indicator_indicators'] = indicator_indicators;

                        break;

                    //filter_module_params
                    case 'filter_module_params' :
                        _params['module_copy_id'] = $(_this).val();
                        break;

                }

                var ajax = new Ajax(),
                    _data = {
                        'element' : element,
                        'params' : _params,
                    };
                callbacksarr.push(callback);
                ajax
                    .setUrl('/module/constructor/changeElement/' + Reports.copy_id)
                    .setData(_data)
                    .setAsync(true)
                    .setCallBackSuccess(function(data){
                        $('select[disabled]').removeAttr('disabled');
                        var callback = callbacksarr[0];
                        callbacksarr.shift();
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status == 'error'){
                                Message.show(data.messages);
                            } else {
                                callback(data);
                            }
                        }
                    })
                    .setCallBackError(function(jqXHR, textStatus, errorThrown){
                        $('select[disabled]').removeAttr('disabled');
                        Message.showErrorAjax(jqXHR, textStatus);
                        callbacksarr = []; // clear; old -  callbacksarr.shift()
                    })
                    .send();
            },





            //clearIndicators
            clearIndicators : function(_this, unique_index, data){
                // indicator
                var block = $(_this).closest('.edit-view').find('.element[data-type="block"][data-module="reports"][data-element_type="indicator"]');

                if(typeof(block) != 'undefined' && block.length > 0){
                    block.find('.element[data-type="settings"] .element[data-type="indicator"]').each(function(i, ul){
                        if($(ul).data('unique_index') == unique_index){
                            var setting = $(ul).closest('.element[data-type="setting"]');
                            var params_hidden = $(ul).closest('.element[data-type="setting"]').find('.params_hidden').text();
                            var remove_panel = $(ul).closest('.element[data-type="setting"]').find('.element[data-type="remove_panel"]');
                            var element = $(data.indicator_setting_indicator);

                            element.find('.params_hidden').text(params_hidden);
                            if(remove_panel.length == 0) element.find('.element[data-type="remove_panel"]').remove();

                            $(setting).after(element).remove();

                            block.find('.element[data-type="block_panel"] .element[data-type="panel"][data-unique_index="'+unique_index+'"]').after(data.indicator_panel).remove();
                        } else {
                            var setting = $(ul).closest('.element[data-type="setting"]');
                            var unique_index_2 = $(ul).data('unique_index');
                            var color = $(ul).closest('.element[data-type="setting"]').find('.element[data-type="color"]').val();
                            var params_hidden = $(ul).closest('.element[data-type="setting"]').find('.params_hidden').text();
                            var remove_panel = $(ul).closest('.element[data-type="setting"]').find('.element[data-type="remove_panel"]');
                            var element = $(data.indicator_setting_indicator);

                            element.find('option[data-unique_index="'+unique_index_2+'"]').attr('selected', 'selected');
                            element.find('.element[data-type="color"]').val(color);
                            element.find('.params_hidden').text(params_hidden);
                            if(remove_panel.length == 0) element.find('.element[data-type="remove_panel"]').remove();
                            var option = element.find('option[data-unique_index="'+unique_index_2+'"]');

                            element = Reports.Constructor.setIndicatorEntities(element, {'unique_index' : option.data('unique_index'),'module_copy_id' : option.data('module_copy_id'),'field_name' : option.data('field_name')}, true);

                            $(setting).after(element).remove();
                        }
                    })

                }
            },



            //changeIndicators setting
            changeIndicators : function(_this, data){
                // indicator
                var block = $(_this).closest('.edit-view').find('.element[data-type="block"][data-module="reports"][data-element_type="indicator"]');

                if(typeof(block) != 'undefined' && block.length > 0){
                    block.find('.element[data-type="settings"] .element[data-type="indicator"]').each(function(i, ul){
                        var setting = $(ul).closest('.element[data-type="setting"]');
                        var unique_index = $(ul).data('unique_index');
                        var color = $(ul).closest('.element[data-type="setting"]').find('.element[data-type="color"]').val();
                        var params_hidden = $(ul).closest('.element[data-type="setting"]').find('.params_hidden').text();
                        var remove_panel = $(ul).closest('.element[data-type="setting"]').find('.element[data-type="remove_panel"]');
                        var element = $(data.indicator_setting_indicator);


                        element.find('option[data-unique_index="'+unique_index+'"]').attr('selected', 'selected');
                        element.find('.element[data-type="color"]').val(color);
                        element.find('.params_hidden').text(params_hidden);
                        if(remove_panel.length == 0) element.find('.element[data-type="remove_panel"]').remove();
                        var option = element.find('option[data-unique_index="'+unique_index+'"]');

                        element = Reports.Constructor.setIndicatorEntities(element, {'unique_index' : option.data('unique_index'),'module_copy_id' : option.data('module_copy_id'),'field_name' : option.data('field_name')}, true);

                        $(setting).after(element).remove();
                    });
                }
            },



            //clearGraphics
            clearGraphics : function(_this, data){
                if(!data.graph_setting_indicator) return;

                $(_this).closest('.edit-view').find('.element[data-type="block"][data-element_type="graph"]').each(function(i, ul){
                    $(ul).find('.element[data-type="indicator"]').closest('li').after(data.graph_setting_indicator).remove();
                });
            },



            //changeGraphics
            changeGraphics : function(_this, data, unique_index){
                $(_this).closest('.edit-view').find('.element[data-type="block"][data-element_type="graph"]').each(function(i, ul){
                    var li = $(ul).find('.element[data-type="indicator"]').closest('li')
                    var unique_index_el = $(ul).find('.element[data-type="indicator"]').val();
                    // graph indicator
                    if(data.graph_setting_indicator) {
                        var element = $(data.graph_setting_indicator);
                        if(unique_index_el) {
                            element.find('option[value="' + unique_index_el + '"]').attr('selected', 'selected');
                            $(li).after(element).remove();
                        } else {
                            $(li).after(element).remove();
                            var unique_index_el = $(ul).find('.element[data-type="indicator"]').val();
                        }

                    }

                    // graph

                    if(data.graph_element && unique_index && unique_index == unique_index_el) {
                        Reports.Constructor.changeGraphElement(ul, data.graph_element);
                    }
                });

            },


            //changeGraphElement
            changeGraphElement : function(_graph_block_object, data){
                var graph_element = $(_graph_block_object).find('.element[data-type="graph_element"]');
                var id = graph_element.attr('id');

                if(data[id]){
                    graph_element.after(data[id]).remove();
                }
            },

            //changeFilters
            changeFilters : function(_this, data){
                var filter;

                if(!data.filter_base && !data.filter) return;

                var copy_id_list = Reports.Constructor.getDataAnalysisModuleCopyIdList(_this, false, true);

                $(_this).closest('.edit-view').find('.element[data-type="block"] .element[data-type="block_filter"] .element[data-type="block_panel"]').each(function(i, ul){
                    var module_copy_id = $(ul).find('.element[data-type="module_copy_id"]').val();

                    var isset_module = ($.isEmptyObject(copy_id_list) == false && module_copy_id ? $.inArray(module_copy_id, copy_id_list) : -1);

                    if(isset_module ===  -1){
                        if(i == 0){
                            filter = data.filter_base;
                        } else {
                            filter = data.filter;
                        }
                        $(ul).after(filter).remove();
                    }
                    else {
                        if(module_copy_id){
                            var filter_module = $(data.filter_module);
                            filter_module.find('option[value="'+module_copy_id+'"]').attr('selected', 'selected');

                            $(ul).find('.element[data-type="module_copy_id"]').after(filter_module).remove();
                            filter_module.next('.bootstrap-select').remove();
                            filter_module.selectpicker({style: 'btn-white',noneSelectedText: ' '});
                        }
                    }
                });
            },


            setIndicatorEntities : function(_this, entyties, this_return){
                if(entyties){
                    var unique_index = entyties.unique_index;
                    var module_copy_id = entyties.module_copy_id;
                    var field_name = entyties.field_name;
                } else {
                    var index = $(_this).find('+ div ul li.selected').attr('rel');
                    var option = $(_this).find('option').eq(index);

                    var unique_index = option.data('unique_index');
                    var module_copy_id = option.data('module_copy_id');
                    var field_name = option.data('field_name');
                }

                if(this_return){
                    if(typeof(unique_index) != 'undefined') _this.find('.element[data-type="indicator"]').data('unique_index', unique_index); else _this.find('.element[data-type="indicator"]').data('unique_index', '');
                    if(typeof(module_copy_id) != 'undefined') _this.find('.element[data-type="indicator"]').data('module_copy_id', module_copy_id); else _this.find('.element[data-type="indicator"]').data('module_copy_id', '');
                    if(typeof(field_name) != 'undefined') _this.find('.element[data-type="indicator"]').data('field_name', field_name); else _this.find('.element[data-type="indicator"]').data('field_name', '');

                    return _this;
                } else {
                    if(typeof(unique_index) != 'undefined') $(_this).data('unique_index', unique_index); else $(_this).data('unique_index', '');
                    if(typeof(module_copy_id) != 'undefined') $(_this).data('module_copy_id', module_copy_id); else $(_this).data('module_copy_id', '');
                    if(typeof(field_name) != 'undefined') $(_this).data('field_name', field_name); else $(_this).data('field_name', '');
                }

            },


            changeIndicatorPanel : function(html, unique_index, index){
                var block_panel = $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="indicator"] .element[data-type="block_panel"] .reports-params');
                if(block_panel.length == false) return;
                var panel_index = null;
                if(unique_index){
                    panel = $(block_panel).find('.element[data-type="panel"][data-unique_index="'+unique_index+'"]');
                    panel_index = panel.index();
                } else if(index !== null){
                    panel = $(block_panel).find('.element[data-type="panel"]').eq(index);
                    panel_index = panel.index();
                }

                if(unique_index){
                    html = $(html);
                    html.attr('data-unique_index', unique_index);
                }

                if(typeof(panel) != 'undefined' && panel.length > 0){
                    $(panel).after(html).remove();
                } else {
                    $(block_panel).find('.reports-params').append(html);

                    panel_index = $(block_panel).find('.reports-params .element[data-type="panel"]').length - 1;
                }

                Reports.Constructor.clearIndicatorPanelUniqueIndex(panel_index);

                Reports.Constructor.setIndicatorPanelColor();
            },


            clearIndicatorPanelUniqueIndex : function(index){
                if(index === null || typeof(index) == 'undefined') return;

                var block_panel = $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="indicator"] .element[data-type="block_panel"] .reports-params');
                var panel_unique_index = $(block_panel).find('.element[data-type="panel"]').eq(index).data('unique_index');
                var indicator_inique_index = $('.edit-view').find('.element[data-type="block"][data-module="reports"][data-element_type="indicator"] .element[data-type="settings"] .element[data-type="setting"] .element[data-type="indicator"]').eq(index).data('unique_index');

                if(panel_unique_index != indicator_inique_index){
                    $(block_panel).find('.element[data-type="panel"]').eq(index).attr('data-unique_index', '');
                }
            },


            setIndicatorPanelColor : function(){
                var color_list = {};
                $('.edit-view').find('.element[data-type="block"][data-module="reports"][data-element_type="indicator"] .element[data-type="settings"] .element[data-type="setting"]').each(function(i,  ul){
                    color_list[i] =$(ul).find('.element[data-type="color"]').val();
                });

                $('.edit-view').find('.element[data-type="block"][data-module="reports"][data-element_type="indicator"] .element[data-type="block_panel"] .element[data-type="panel"]').each(function(i,  ul){
                    $(ul).addClass(color_list[i]);
                });
            },

            removeBlock : function(_this){
                var block = $(_this).closest('.element[data-type="block"][data-module="reports"]');

                switch(block.data('element_type')){
                    case 'indicator' :
                        $(_this).closest('.edit-view').find('.element[data-type="block"][data-module="reports"][data-element_type="data_analysis"] .element[data-type="add_indicator_block"]').show();
                        block.remove();
                        break;
                    default :
                        block.remove();
                }
            },


            removePanel: function(_this){
                var block = $(_this).closest('.element[data-type="block"][data-module="reports"]');

                switch(block.data('element_type')){
                    case 'indicator' :
                        $(_this).closest('.element[data-type="settings"]').find('.element[data-type="add_indicator"]').show();
                        var panel = $(_this).closest('.element[data-type="setting"]');
                        $(_this).closest('.element[data-type="block"]').find('.element[data-type="block_panel"] .reports-params .element[data-type="panel"]:eq('+panel.index()+')').remove();
                        panel.remove();
                        Reports.Constructor.layoutIndicators();
                        Reports.Constructor.triggerElements();
                        break;
                    case 'data_analysis' :
                        $(_this).closest('.element[data-type="block_panel"]').addClass('to_remove');
                        // filters
                        Reports.Constructor.changeElement(_this, 'data_analysis_indicator_module', {'this_ui_clear' : true, 'data_analysis_panel_delete' : true}, function(data){
                            Reports.Constructor.changeFilters(_this, data);
                            Reports.Constructor.InitNewSelects();

                            // Indicator
                            Reports.Constructor.changeElement(_this, 'indicator_add', {'data_analysis_panel_delete' : true}, function(data){
                                if(data && !$.isEmptyObject(data)){
                                    Reports.Constructor.clearIndicators(_this, $(_this).closest('.element[data-type="block_panel"]').data('unique_index'), data);
                                    Reports.Constructor.InitNewSelects();
                                }

                                // graph
                                Reports.Constructor.changeElement(_this, 'graph', {'data_analysis_panel_delete': true}, function(data){
                                    if(data && !$.isEmptyObject(data)){
                                        data.graph_element = null;
                                        Reports.Constructor.changeGraphics(_this, data, null);
                                        Reports.Constructor.InitNewSelects();
                                    }

                                    // graph
                                    Reports.Constructor.changeElement(_this, 'graph', {'data_analysis_panel_delete': false}, function(data){
                                        if(data && !$.isEmptyObject(data)){
                                            Reports.Constructor.changeGraphics(_this, data, null);
                                            Reports.Constructor.InitNewSelects();
                                        }
                                        $(_this).closest('.element[data-type="block_panel"]').remove();
                                        Reports.Constructor.layoutIndicators();
                                    }, $('.element[data-type="block"].element[data-module="reports"].element[data-element_type="graph"]').length)
                                }, $('.element[data-type="block"].element[data-module="reports"].element[data-element_type="graph"]').length);

                            }, $('.element[data-type="block"].element[data-module="reports"].element[data-element_type="indicator"]').length);

                        });




                        break;
                    case 'filter' :
                        $(_this).closest('.element[data-type="block_panel"]').remove();
                        Reports.Constructor.UpdateOutputElements();
                        break;
                }
            },


            //changedDataAnalysisTitle
            changedDataAnalysisTitle : function(_this){
                var block_panel = $(_this).closest('.element[data-type="block_panel"]');
                var unique_index = block_panel.data('unique_index');
                var title = block_panel.find('.element[data-type="title"]').val();

                // indicator
                var block = $(_this).closest('.edit-view').find('.element[data-type="block"][data-module="reports"][data-element_type="indicator"]');

                if(typeof(block) != 'undefined' && block.length > 0){
                    block.find('.element[data-type="settings"] .element[data-type="indicator"]').each(function(i, ul){
                        $(ul).find('option').each(function(i, ul){
                            if($(ul).data('unique_index') == unique_index) $(ul).text(title);
                        })
                    })
                    block.find('.element[data-type="block_panel"] .element[data-type="panel"]').each(function(i, ul){
                        if($(ul).data('unique_index') == unique_index) $(ul).find('.reports-name').text(title);
                    })
                    $('.reports-mark').selectpicker('refresh');
                }
                // graph
                var block = $(_this).closest('.edit-view').find('.element[data-type="block"][data-module="reports"][data-element_type="graph"]');

                if(typeof(block) != 'undefined' && block.length > 0){
                    block.find('.element[data-type="settings"] .element[data-type="indicator"]').each(function(i, ul){
                        $(ul).find('option').each(function(i, ul){
                            if($(ul).val() == unique_index) $(ul).text(title);
                        })
                    })
                    $('.element[data-element_type="graph"] select').selectpicker('refresh');
                }


            },


            UpdateOutputElements : function(){
                Reports.Constructor.changeElement(null, 'update_output_elements', {}, function(data){
                    //indicator_panels
                    var block_panel = $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="indicator"]');
                    if(data.indicator_panels && !$.isEmptyObject(data.indicator_panels) && block_panel.length != 0){
                        $.each(data.indicator_panels, function(unique_index, html){
                            Reports.Constructor.changeIndicatorPanel(html, unique_index, null);
                        })
                    }

                    //graph_element
                    if(data.graph_element){
                        $('.edit-view .element[data-type="block"][data-module="reports"][data-element_type="graph"] .element[data-type="graph"]').each(function(i, ul){
                            Reports.Constructor.changeGraphElement(ul, data.graph_element);
                        });
                    }

                    Reports.Constructor.InitNewSelects();
                    Reports.Constructor.layoutIndicators();
                    Reports.Constructor.triggerElements();
                    Reports.afterViewChanges(true);
                }, null, true);

            },


            UpdateOutputElementsAll : function(_this){
                Reports.Constructor.changeElement(_this, 'data_analysis_panel_settings', {}, function(data) {
                    Reports.Constructor.changeFilters(_this, data);
                    Reports.Constructor.changeIndicators(_this, data);
                    Reports.Constructor.changeGraphics(_this, data, null);

                    Reports.Constructor.InitNewSelects();
                    Reports.Constructor.layoutIndicators();
                    Reports.Constructor.UpdateOutputElements();

                    Reports.afterViewChanges(true);
                })
            },



            //initiation new selects
            InitNewSelects : function(){
                var $dropdown = $('.crm-dropdown > .dropdown-toggle').removeAttr('data-toggle');

                $('.modal .edit-view[data-copy_id="8"] select').each(function(){
                    if (!$(this).next().hasClass('bootstrap-select')) {
                        $(this).selectpicker({style: 'btn-white',noneSelectedText: ' '});
                    }
                });
                $dropdown.off('click');
                $dropdown.on('click',function(e){
                    var $this = $(this),
                        $element = $this.parent();

                    if ($this.is('.dropdown-toggle')) {
                        var param, $menu,
                            block = $('.crm-dropdown.open').not($this.parent()).removeClass('open');

                        $element.toggleClass('open');
                        if ($element.is('[data-type="drop_down"]')) {
                            block.addClass('open');
                        }

                        $('.bootstrap-select.open').removeClass('open');

                        $menu = $this.parent().filter('.open').find('>.dropdown-menu');

                        if (!$menu.length) return;

                        // $menu.removeClass('no-top').css({
                        //     'margin-top': 29
                        // });
                        $menu.removeClass('no-top');

                        param = {
                            top: parseInt($menu.css('padding-top')),
                            bottom: parseInt($menu.css('padding-bottom')),
                            scroll: $('#modal_dialog_container .modal:last').scrollTop()
                        };

                        if (($(window).height())  < ($menu.offset().top + $menu.height() + param.top )) {
                            $menu.css({
                                'margin-top': - ($menu.height() + param.top + param.bottom )
                            });

                            $menu.addClass('no-top');
                        }
                    }
                    $this.parent().filter('.open').find('ul:first').removeClass('hide');
                });
                Global.showParticipant();
            },


            //initialization sorting
            initSorting : function(){
                $('.element[data-type="block_data_analysis"] .inputs-block').each(function() {
                    var forSorting = $(this).find('.drag-marker').parent();
                    $(this).sortable({
                        dropOnEmpty: true,
                        items: forSorting,
                        cancel: ".dropdown-menu, .form-control, .select, .todo-remove, .field-param",
                        start: function( event, ui ) {
                            $('.element[data-type="block_data_analysis"] .inputs-block').sortable('refresh');
                        }
                    });
                });
                $('.element[data-type="block_filter"] .inputs-block').each(function() {
                    var forSorting = $(this).find('.drag-marker').parent();
                    $(this).sortable({
                        dropOnEmpty: true,
                        items: forSorting,
                        cancel: ".dropdown-menu, .form-control, .select, .todo-remove, .field-param",
                        start: function( event, ui ) {
                            $('.element[data-type="block_filter"] .inputs-block').sortable('refresh');
                        }
                    });
                });
                $('.element[data-type="block_data_analysis"] .inputs-block > li').show();
            },


            //set indicators field
            layoutIndicators : function(){
                $.each($('.reports-params'), function () {
                    var reportsCell = $(this).find('.reports-cell');

                    reportsCell.each(function(){
                        $(this).css('width',100/reportsCell.length+'%');
                    });
                })
            },

            triggerElements : function(){
                var $subMenu,
                    $paramAnalysis = $('.element[data-data_analysis_type="data_analysis_param"] select.element[data-type="module_copy_id"]');

                if ($paramAnalysis.val() == "") {
                    $('select.element[data-type="module_copy_id"]').prop('disabled', 'disabled').selectpicker('refresh');
                    $paramAnalysis.prop('disabled', false).selectpicker('refresh');
                    $paramAnalysis.parent().next().find('.dropdown-menu').addClass('hide');
                } else {
                    $paramAnalysis.parent().next().find('.dropdown-menu').removeClass('hide');
                };
                $('.element[data-element_type="filter"] select.element[data-type="module_copy_id"]').each(function(){
                    if ($(this).val() == "") {
                        $(this).closest('li').find('select.element[data-type="field_name"]').prop('disabled', 'disabled').selectpicker('refresh');
                    };
                });

                var $list = $('.element[data-data_analysis_type="data_analysis_indicator"] [data-type="filter_block_panels"]:visible select.element[data-type="module_copy_id"]');
                $.each($list, function(){
                    var $this = $(this),
                        $dropDown = $this.parent().next().find('.dropdown-menu');

                    if ($this.val() == "") {
                        $dropDown.addClass('hide');
                    } else {
                        $dropDown.removeClass('hide');
                    };
                });
                $('.element[data-element_type="filter"] select.element[data-type="field_name"]').each(function(){
                    var $this = $(this),
                        $dropDown = $this.parent().next().find('.dropdown-menu');

                    if ($this.val() == "") {
                        $dropDown.addClass('hide');
                    } else {
                        $dropDown.removeClass('hide');
                    };
                });

                $subMenu = $('[data-element_type="data_analysis"] .sub-menu:visible');
                if ($subMenu.length) {
                    $subMenu.prev().addClass('hide');
                }
            },

            formatingDatesInit : function(){
                var dateFormat = function () {
                    var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
                        timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
                        timezoneClip = /[^-+\dA-Z]/g,
                        pad = function (val, len) {
                            val = String(val);
                            len = len || 2;
                            while (val.length < len) val = "0" + val;
                            return val;
                        };

                    // Regexes and supporting functions are cached through closure
                    return function (date, mask, utc) {
                        var dF = dateFormat;

                        // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
                        if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
                            mask = date;
                            date = undefined;
                        }

                        // Passing date through Date applies Date.parse, if necessary
                        date = date ? new Date(date) : new Date;
                        if (isNaN(date)) return //throw SyntaxError("invalid date");

                        mask = String(dF.masks[mask] || mask || dF.masks["default"]);

                        // Allow setting the utc argument via the mask
                        if (mask.slice(0, 4) == "UTC:") {
                            mask = mask.slice(4);
                            utc = true;
                        }

                        var _ = utc ? "getUTC" : "get",
                            d = date[_ + "Date"](),
                            D = date[_ + "Day"](),
                            m = date[_ + "Month"](),
                            y = date[_ + "FullYear"](),
                            H = date[_ + "Hours"](),
                            M = date[_ + "Minutes"](),
                            s = date[_ + "Seconds"](),
                            L = date[_ + "Milliseconds"](),
                            o = utc ? 0 : date.getTimezoneOffset(),
                            flags = {
                                d:    d,
                                dd:   pad(d),
                                ddd:  dF.i18n.dayNames[D],
                                dddd: dF.i18n.dayNames[D + 7],
                                m:    m + 1,
                                mm:   pad(m + 1),
                                mmm:  dF.i18n.monthNames[m],
                                mmmm: dF.i18n.monthNames[m + 12],
                                yy:   String(y).slice(2),
                                yyyy: y,
                                h:    H % 12 || 12,
                                hh:   pad(H % 12 || 12),
                                H:    H,
                                HH:   pad(H),
                                M:    M,
                                MM:   pad(M),
                                s:    s,
                                ss:   pad(s),
                                l:    pad(L, 3),
                                L:    pad(L > 99 ? Math.round(L / 10) : L),
                                t:    H < 12 ? "a"  : "p",
                                tt:   H < 12 ? "am" : "pm",
                                T:    H < 12 ? "A"  : "P",
                                TT:   H < 12 ? "AM" : "PM",
                                Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                                o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                                S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
                            };

                        return mask.replace(token, function ($0) {
                            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
                        });
                    };
                }();

                // Some common format strings
                dateFormat.masks = {
                    "default":      "ddd mmm dd yyyy HH:MM:ss",
                    shortDate:      "m/d/yy",
                    mediumDate:     "mmm d, yyyy",
                    longDate:       "mmmm d, yyyy",
                    fullDate:       "dddd, mmmm d, yyyy",
                    shortTime:      "h:MM TT",
                    mediumTime:     "h:MM:ss TT",
                    longTime:       "h:MM:ss TT Z",
                    isoDate:        "yyyy-mm-dd",
                    isoTime:        "HH:MM:ss",
                    isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
                    isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
                };

                var monthNamesFromBase = Message.locale.monthNamesSA.abbreviated.concat(Message.locale.monthNamesSA.wide);
                var dayNamesFromBase = Message.locale.weekDayNamesSA.abbreviated.concat(Message.locale.weekDayNamesSA.wide);

                // Internationalization strings
                dateFormat.i18n = {
                    dayNames: dayNamesFromBase/*[
                     "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
                     "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
                     ]*/,
                    monthNames: monthNamesFromBase/*[
                     "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
                     "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
                     ]*/
                };

                // For convenience...
                Date.prototype.format = function (mask, utc) {
                    return dateFormat(this, mask, utc);
                };
            },



            //Filter
            Filter : {
                clearCondition : function(_this){
                    var obj = $(_this).closest('.element[data-type="block_panel"]')
                        .find('.element[data-name="condition"] option')
                        .empty()
                        .parent()
                        .html('<option value=""></option>')
                    obj.selectpicker('refresh');
                },


                clearConditionValue : function(_this){
                    $(_this).closest('.element[data-type="block_panel"]').find('.element[data-name="condition_value"]').remove();
                },


                setConditionValue : function(_this, copy_id, field_name, condition_value, callback){
                    if(!copy_id){
                        if(typeof callback == 'function') return callback();
                    }
                    data = {
                        'field_name' : field_name,
                        'condition_value' : condition_value,
                        'this_template' : 0,
                    }

                    $.get(Global.urls.url_filter_add_condition_value+'/'+copy_id, data, function(data){
                        $(_this).closest('.element[data-type="block_panel"]')
                            .find('.filter-box-condition-value')
                            .html(data.data)
                            .find('select').selectpicker({ style: 'btn-white', noneSelectedText: Message.translate_local('None selected')});

                        // show single calendar
                        if ($(data.data).find('.dateinput').length) {
                            var $dateinput = $(_this).closest('.element[data-type="block_panel"]').find('.dateinput')
                            Filter.singleCalendar($dateinput);
                            $dateinput.datepicker('setDate', new Date());
                        }
                        // show range calendar
                        if ($(data.data).find('.dp1').length) {
                            var $dp1 = $(_this).closest('.element[data-type="block_panel"]').find('.dp1'),
                                $dp2 = $(_this).closest('.element[data-type="block_panel"]').find('.dp2');
                            Filter.rangeCalendar($dp1, $dp2);
                            date1 = 0;
                            date2 = 0;
                        }

                        if(typeof callback == 'function') callback();
                    }, 'json');
                },




                setCondition : function(_this, copy_id, field_name, cb){
                    $.get(Global.urls.url_filter_add_condition+'/'+copy_id, {'field_name' : field_name}, function(data){
                        $(_this).closest('.element[data-type="block_panel"]')
                            .find('.filter-box-condition')
                            .html(data.data)
                            .find('select').selectpicker({ style: 'btn-white', noneSelectedText: Message.translate_local('None selected')});
                        cb();
                    }, 'json');
                },



                changedFieldName : function(_this, callback){
                    var block_panel = $(_this).closest('.element[data-type="block_panel"]');
                    var copy_id = block_panel.find('.element[data-type="module_copy_id"]').val();
                    var condition_value = block_panel.find('.element_filter[data-name="condition"]').val();

                    if(!$(_this).val()){
                        Reports.Constructor.Filter.clearCondition(_this);
                        Reports.Constructor.Filter.clearConditionValue(_this);
                        Reports.Constructor.Filter.setConditionValue(_this, copy_id, '', condition_value, function(){
                            if(typeof callback == 'function') callback();
                        });
                        return;
                    }


                    Reports.Constructor.Filter.setCondition(_this, copy_id, $(_this).val(), function(data_value){
                        var condition_value = $(_this).closest('.element[data-type="block_panel"]').find('.element_filter[data-name="condition"]').val();
                        Reports.Constructor.Filter.setConditionValue(_this, copy_id, $(_this).val(), condition_value, function(){
                            if(typeof callback == 'function') callback();
                        });
                    });
                },
            },





        },

        //Report
        Report : {
            _instance: null,
            _handler_after_request: null,

            view : function(_this, reports_id, $callback){
                Reports.getReportUrl(reports_id, function(url){
                    var contentInstance = Global.getInstance().getContentReloadInstance() || ContentReload.createInstance();

                    contentInstance.hidePreloader = function () {
                        if (this.preloader) {
                            this.preloader.hide()
                        }
                        if ($callback) {
                            $callback();
                        }
                        return this;
                    };

                    contentInstance
                        .clear() // TODO: щось мышаэ обекту. і тут очищамо його.
                        .setVars({
                            'selector_content_box' : '#content_container'
                        })
                        .setUrl(url)
                        .loadPage();
                });

            },
            getInstance : function(){
                return Reports.Report._instance;
            },
            createInstance : function(){
                var Obj = function(){
                    for(var key in Reports.Report){
                        this[key] = Reports.Report[key];
                    }
                }

                return Reports.Report._instance = new Obj();
            },
            setCcallbackAfterRequest : function (handler) {
                this._handler_after_request = handler;
                return this;
            },
            getUSDateIntervalValue : function(){
                var value = {};

                var dis = $('.list_view_block[data-module="reports"] .element[data-type="dis"]').val(),
                    die = $('.list_view_block[data-module="reports"] .element[data-type="die"]').val();

                if(dis) value['_date_interval_start'] = dis;
                if(die) value['_date_interval_end'] = die;

                return {'date_interval' : value};
            },


            getUSGraphParamsValue : function(_this){
                var value = Reports.Report.getIndicators(_this);
                var graph_unique_index = $(_this).closest('.element[data-type="block"]').find('.element[data-type="graph_element"]').attr('unique_index');
                var graph_indicators = {};
                graph_indicators[graph_unique_index] = value;
                return {'graph_indicators' : graph_indicators};
            },


            updateUserStorage : function(_this, type, callback){
                var value;
                var reports_id = $('.list_view_block[data-module="reports"]').data('id');
                switch(type){
                    case 'date_interval' :
                        value = Reports.Report.getUSDateIntervalValue();
                        break;

                    case 'graph_indicators' :
                        value = Reports.Report.getUSGraphParamsValue(_this);
                        break;
                    default :
                        return;
                }

                var ajax = new Ajax();
                ajax
                    .setUrl('/module/reports/saveUserStorage/' + Reports.copy_id)
                    .setData({'reports_id' : reports_id, 'type' : type, 'value' : value})
                    .setCallBackSuccess(function(data){
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status == 'error'){
                                Message.show(data.messages);
                            } else {
                                if(typeof(callback) == 'function')
                                    callback(data);
                            }
                        }
                    })
                    .setCallBackError(function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                    })
                    .send();

            },


            getIndicators : function(_this, skip_index){
                var result = {};
                var element;

                $(_this).closest('.element[data-type="block"]').find('.element[data-type="settings"] .element[data-type="indicator"]').each(function(i, ul){
                    if(skip_index && skip_index == i) return true;
                    result[i] = $(ul).val();
                })
                return result;
            },

            //addGraphData
            addGraphData : function(_this, update_user_storage, callback){
                var graph_block = $(_this).closest('.element[data-type="block"]');
                var data = ['id=' + $('.sm_extension').data('id')];

                var search = $('.list_view_block[data-module="reports"] .search-input').val();
                if(search) data.push('search=' + search);

                var filters = Filter.getFilterInstaled();
                if(!$.isEmptyObject(filters)) data.push(filters.join('&'));

                if(!$.isEmptyObject(data))
                    data = '?' +  data.join('&');

                var _params = {
                    'reports_id' : $('.list_view_block').data('id'),
                    'graph_period' :  graph_block.find('.element[data-type="period"]').val(),
                    'graph_indicators' : Reports.Report.getIndicators(_this),
                    'graph_display_option' : graph_block.find('.element[data-type="display_option"]').val(),
                    'graph_unique_index' : graph_block.find('.element[data-type="graph_element"]').attr('unique_index'),
                };

                // this.reloadGraph({
                //     'update_user_storage' : update_user_storage,
                //     'params' : _params,
                // }, data, callback)

                var _data = {
                    'update_user_storage' : update_user_storage,
                    'params' : _params,
                };


                AjaxObj
                    .createInstance()
                    .setUrl('/module/reports/addGraphData/' + Reports.copy_id + data)
                    .setData(_data)
                    .setDataType('json')
                    .setCallBackSuccess(function(data){
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status == 'error'){
                                Message.show(data.messages);
                            } else {
                                callback(data);
                            }
                        }
                    })
                    .setCallBackError(function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                    })
                    .send();

                return this;
            },

            reloadGraph : function (_data, _search, callback) {
                var _this = this;

                AjaxObj
                    .createInstance()
                    .setUrl('/module/reports/addGraphData/' + Reports.copy_id + _search)
                    .setData(_data)
                    .setDataType('json')
                    .setCallBackSuccess(function(data){
                        if(data.status == 'access_error'){
                            Message.show(data.messages, false);
                        } else {
                            if(data.status == 'error'){
                                Message.show(data.messages);
                            } else {
                                callback(data);
                            }
                        }
                    })
                    .setCallBackError(function(jqXHR, textStatus, errorThrown){
                        Message.showErrorAjax(jqXHR, textStatus);
                    })
                    .send();
                return this;
            },

            graphIndicator : {
                add : function(_this, data){
                    $(_this).closest('li').before(data.html_indicator);

                    Reports.Report.addGraphData(_this, true, function(data){
                        $(_this).closest('.element[data-type="block"]').find('.element[data-type="graph_element"]').after(data.html_graph).remove();
                    });

                    Reports.Report.InitNewSelects(_this);

                    var graph_type = $(_this).closest('.element[data-type="block"]').find('.element[data-type="graph_element"]').data('graph_type');
                    var indicator_count = $(_this).closest('.element[data-type="block"]').find('.element[data-type="settings"] .element[data-type="indicator"]').length;

                    if(data['max_indicators'][graph_type] <= indicator_count){
                        $(_this).closest('.element[data-type="block"]').find('.element[data-type="settings"] .element[data-type="add_indicator"]').hide();
                    }
                },

                change : function(_this, data){
                    //change  graph_element
                    $(_this).closest('.element[data-type="block"]').find('.element[data-type="graph_element"]').after(data.html_graph).remove();
                },


                delete : function(_this){
                    var settings = $(_this).closest('.element[data-type="settings"]');
                    $(_this).closest('.element[data-type="block"]').find('.element[data-type="settings"] .element[data-type="add_indicator"]').show();
                    $(_this).closest('li').remove();

                    Reports.Report.addGraphData(settings, true, function(data){
                        $(settings).closest('.element[data-type="block"]').find('.element[data-type="graph_element"]').after(data.html_graph).remove();
                    });
                },
            },




            //initiation new selects
            InitNewSelects : function(_this){
                var block = $(_this).closest('.element[data-type="block"]');
                block.find('select').each(function(){
                    if (!$(this).next().hasClass('bootstrap-select')) {
                        $(this).selectpicker({style: 'btn-white',noneSelectedText: ' '});
                    }
                });
                block.find('.crm-dropdown > .dropdown-toggle').removeAttr('data-toggle').on('click',function(){
                    block.find('.crm-dropdown.open').removeClass('open');
                    $(this).parent().toggleClass('open');
                });
            },


            selectsOptionsOrganize : function(_this){
                var selcetedIndex = $(_this).find('option:selected').index()+1;
                $(_this).closest('li').addClass('primarysel')
                $(_this).closest('ul').find('li:not(".primarysel") select[data-type="indicator"] option:disabled').removeAttr("disabled");
                $(_this).closest('ul').find('li:not(".primarysel") select[data-type="indicator"] option:nth-child('+selcetedIndex+')').attr("disabled","disabled").removeAttr("selected");
                var selcetedIndex = $(_this).closest('ul').find('li:not(".primarysel") select[data-type="indicator"] option:selected').index()+1;
                $(_this).closest('ul').find('li.primarysel select[data-type="indicator"] option:disabled').removeAttr("disabled");
                $(_this).closest('ul').find('li.primarysel select[data-type="indicator"] option:nth-child('+selcetedIndex+')').attr("disabled","disabled").removeAttr("selected");
                $(_this).closest('ul').find('li.primarysel').removeClass('primarysel');
                $(_this).closest('ul').find('.selectpicker').selectpicker('refresh');
            },
            getColumnWidth : function(){
                var col_index = {};
                $('.list-table thead').find('th').each(function(i, ul){
                    if(i==0) return true;
                    if($(ul).css('display') == 'none') return true;
                    col_index[$(ul).data('group_index')] = $(ul).width();
                });
                return col_index;
            }
        },
        remove : function () {
            //Reports.preloaderForGraph.remove();

            Global.removeEvents(this._events);
        },
        destroy: function () {
            this.remove();

            Events.removeHandler({ key: 'ReportsDestroy', type: Events.TYPE_DESTROY});

            return null;
        }
    }

    var deleteInterval = null,
        arrByDeleteFilter = [];

    for(var key in _private) {
        _self[key] = _private[key];
    }

    exports.Reports = Reports;
})(window);


var NiceScroll = {
    _element: null,
    _handler_scroll_end: null,
    _status_balance_data: true,
    _native: null, // native object NiceScroll
    _position: false, // true - horizontale; false - verticale
    _container: null,
    _parent: null,
    cursorwidth_default: '3px',

    config: {
        cursorcolor: "#1FB5AD",
        cursorborder: "0px solid #fff",
        cursorborderradius: "0px",
        cursorwidth: "3px",
        railalign: 'right',
        enablemousewheel: true,
        autohidemode: false
    },
    createInstance : function(){
        var Obj = function(){
            for(var key in NiceScroll){
                this[key] = NiceScroll[key];
            }
        }

        return new Obj();
    },
    setElement : function (element) {
        if (element && element.length) {
            this._element = element;
        }

        return this;
    },
    setStatusLoadData : function (bool) {
        this._status_balance_data = bool;

        return this;
    },
    setPosition: function (status) {
        this._position = status;

        return this;
    },
    getEnableMouseWheel: function () {
      return Global.browser.getDevice() == Constant.DEVICE_IPHONE ? true : false;
    },
    setHandlerScrollEnd : function (handler) {
        var _this = this;

        if (handler && this._native) {
            this._handler_scroll_end = function() {
                var nThis = this;

                if ((parseInt(nThis.scrollvaluemax) - 25) <= (parseInt(nThis.scroll.y)) && _this._status_balance_data) {
                    handler();
                }
            };

            this._native.scrollend(this._handler_scroll_end);
        }

        return this;
    },
    setContainer: function (container) {
        this._container = container;
        return this;
    },
    setParent: function (parent) {
        this._parent = parent;

        return this;
    },
    fullClear: function () {
        var $container = this._container || this._parent;

        if ($container && $container.length) {
            $container.find('.nicescroll-rails').remove();
        }

        return this;
    },
    init: function ($element) {
        $element = $element || this._element || $('.list_view_block .crm-table-wrapper');

        if ($element.length) {
            if (this._position) {
                // horizontale
                this._native = $element.niceScroll({
                    cursorcolor: "#1FB5AD",
                    cursorborder: "0px solid #fff",
                    cursorborderradius: "0px",
                    cursorwidth: "6px",
                    railalign: 'right',
                    enablemousewheel: this.getEnableMouseWheel(),
                    autohidemode: false
                });
            } else {
                //TODO: this.config was error!!!
                this._native = $element.niceScroll({
                    cursorcolor: "#1FB5AD",
                    cursorborder: "0px solid #fff",
                    cursorborderradius: "0px",
                    cursorwidth: this.cursorwidth_default,
                    railalign: 'right',
                    enablemousewheel: true,
                    autohidemode: false
                });
            }
        }

        return this;
    },
    clear: function ($element) {
        $element = $element || this._element;

        if ($element && $element.length) {
            $element.getNiceScroll().remove();
        }

        return this;
    },
    update: function () {
        if (this._native && this._element) {
            this._element = $(this._element.selector);
            this.init();
        }

        return this;
    }
}

var niceScroll = {
    update: function ($object) {
        if ( $object.length) {
            NiceScroll
                .createInstance()
                .setElement($('.list_view_block .crm-table-wrapper'))
                .init();
        }
    },
    //DEPRECATED
    init: function () {
        $('.list_view_block .crm-table-wrapper').niceScroll({
            cursorcolor: "#1FB5AD",
            cursorborder: "0px solid #fff",
            cursorborderradius: "0px",
            cursorwidth: "6px",
            railalign: 'right',
            enablemousewheel: false,
            autohidemode: false
        }); //.resize();
    },
    clear: function () {
        $('.list_view_block .crm-table-wrapper').attr('style', '').getNiceScroll().remove();
    }
}

var niceScrollInit = function() {
    NiceScroll
        .createInstance()
        .setPosition(true)
        .setElement($('.list_view_block .crm-table-wrapper'))
        .init();
};